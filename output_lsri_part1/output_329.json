{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BrooksResearchGroup-UM/pyCHARMM-Workshop"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-06-20T13:53:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-03T05:48:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyCHARMM tutorial, documentation and examples. This repository contains materials originally from the pyCHARMM Workshop run at the University of Michigan by Charles Brooks' Group, June 20-24."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9664292279313499,
      "result": {
        "original_header": "Monday 4:30 - 5:30 PM",
        "type": "Text_excerpt",
        "value": "> __Introduction to CHARMM, how to build pyCHARMM and first steps in setting up molecular simulations with pyCHARMM, selecting atoms and basic manipulations of the PSF using pyCHARMM.__ \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8166370023158711,
      "result": {
        "original_header": "Wednesday 4:30 - 5:30 PM",
        "type": "Text_excerpt",
        "value": "> __Using pyCHARMM CDOCKER for rigid-receptor, flexible ligand and flexible-receptor, flexible ligand docking.__ \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9175007601906832,
      "result": {
        "original_header": "Thursday 4:00 - 5:30 PM",
        "type": "Text_excerpt",
        "value": "> __Free energy simulations i) absolute solvation free energy calculations; ii) setting-up MS\u03bbD with msld-py-prep and pyCHARMM.__ \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9451565439441568,
      "result": {
        "original_header": "Friday 4:00 - 5:30 PM",
        "type": "Text_excerpt",
        "value": "> __Advanced topics including integration of python tools with pyCHARMM, utilizing machine-learned potentials in pyCHARMM, parallelism in python with MPI.__\n \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/9NeuralNetExample/NNPotential_pyCHARMM.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/9NeuralNetExample/NNPotential_pyCHARMM.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/9NeuralNetExample/.ipynb_checkpoints/NNPotential_pyCHARMM-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/9NeuralNetExample/.ipynb_checkpoints/NNPotential_pyCHARMM-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/1FirstExample/alanine_dipeptide_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/1FirstExample/alanine_dipeptide_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/1FirstExample/.ipynb_checkpoints/alanine_dipeptide_example-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/1FirstExample/.ipynb_checkpoints/alanine_dipeptide_example-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/4AbsoluteSolvation/absolute_solvation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/4AbsoluteSolvation/absolute_solvation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/4AbsoluteSolvation/.ipynb_checkpoints/absolute_solvation-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/4AbsoluteSolvation/.ipynb_checkpoints/absolute_solvation-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/6ReplicaExchangeExample/rep_ex_amino_acid.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/6ReplicaExchangeExample/rep_ex_amino_acid.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/6ReplicaExchangeExample/.ipynb_checkpoints/rep_ex_amino_acid-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/6ReplicaExchangeExample/.ipynb_checkpoints/rep_ex_amino_acid-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/7CDOCKER_Tutorial/jupyter_lab/cdocker_tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/7CDOCKER_Tutorial/jupyter_lab/cdocker_tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/7CDOCKER_Tutorial/jupyter_lab/.ipynb_checkpoints/present-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/7CDOCKER_Tutorial/jupyter_lab/.ipynb_checkpoints/present-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/10msld_py_prep_Tutorial/MSLD_Py_Prep.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/10msld_py_prep_Tutorial/MSLD_Py_Prep.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/8DrudeExample/drude_c43test_lpcent.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/8DrudeExample/drude_c43test_lpcent.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/8DrudeExample/.ipynb_checkpoints/drude_c43test_lpcent-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/8DrudeExample/.ipynb_checkpoints/drude_c43test_lpcent-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/protein_dynamics.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/protein_dynamics.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/protein_setup_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/protein_setup_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/.ipynb_checkpoints/protein_setup_example-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/.ipynb_checkpoints/protein_setup_example-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/.ipynb_checkpoints/protein_dynamics-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/.ipynb_checkpoints/protein_dynamics-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/Protein_crimm/protein_setup_crimm.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/Protein_crimm/protein_setup_crimm.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/Protein_crimm/.ipynb_checkpoints/protein_setup_crimm-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/2ProteinDynamics/Protein_crimm/.ipynb_checkpoints/protein_setup_crimm-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/3SimpleMPIExample/aladfy_mpi.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/3SimpleMPIExample/aladfy_mpi.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/3SimpleMPIExample/.ipynb_checkpoints/aladfy_mpi-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/3SimpleMPIExample/.ipynb_checkpoints/aladfy_mpi-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/5Aladipeptide_HFBString_MPI/AlaDieptide_String-HFB.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/5Aladipeptide_HFBString_MPI/AlaDieptide_String-HFB.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/5Aladipeptide_HFBString_MPI/.ipynb_checkpoints/AlaDieptide_String-HFB-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/5Aladipeptide_HFBString_MPI/.ipynb_checkpoints/AlaDieptide_String-HFB-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BrooksResearchGroup-UM/pyCHARMM-Workshop/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BrooksResearchGroup-UM/pyCHARMM-Workshop"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Preface"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/7CDOCKER_Tutorial/flex/dock_flex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/7CDOCKER_Tutorial/flex/.ipynb_checkpoints/dock_flex-checkpoint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/10msld_py_prep_Tutorial/jnk1_completed_example/Lg_Solvate.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Instructions for installation of CHARMM and pyCHARMM software using anaconda\n\n> <h2>1. Build a conda environment for use with CHARMM, pyCHARMM, ALF and msld-prep.</h2>\n\n>> <h3>1.1 Apple folder for Apple Intel and Mx hardware using OpenCL</h3>\n\n>> <h3>1.1 Linux folder for use with CUDA</h3>\n\n> <h2>2. Install CHARMM, pyCHARMM and ancillary packages</h2>\n\n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/0Install_Tools/Linux/.ipynb_checkpoints/0Install_Tools-checkpoint.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 0.8856278322065159,
      "result": {
        "original_header": "pyCHARMM Workshop",
        "type": "Text_excerpt",
        "value": "Location: Chem 1706\n \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Preliminaries",
        "type": "Text_excerpt",
        "value": "For those who do not have access to *gollum* or would like to set up their own conda environment for pycharmm, clone this repo and create the conda environment by\n```shell\ncd pyCHARMM-Workshop/\nconda create -n pyCHARMM -c conda-forge -c schrodinger \\\npymol rdkit jupyterlab openbabel openmm\nconda activate pyCHARMM\n```\nWe will utilize pyCHARMM from the current developers stream. If you are working on *gollum* you can link to the pyCHARMM version I compiled using (tsch):\n```shell\nexport CHARMM_HOME=/home/brookscl/charmm/c47-dev-release/\nexport CHARMM_LIB_DIR=$CHARMM_HOME/install-pycharmm-nompi/lib\n```\nInstall pyCHARMM in the conda environment using pip\n```shell\npip install $CHARMM_HOME/tool/pycharmm\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Building pyCHARMM",
        "type": "Text_excerpt",
        "value": "If you are building pyCHARMM in your local environment (assuming Linux, gcc (I use v7.3), NVIDIA drivers (I use cuda v10.0)/gpu access with OpenMM already installed), in the **CHARMM directory**:\n```shell\nmkdir -p build_charmm; cd build_charmm\n../configure --with-blade --with-fftdock --without-mpi \\\n--as-library -p ../install-pycharmm-nompi\nmake -j 2 -C install\n```\nFollowing this you will need to set the environment variable `CHARMM_LIB_DIR` as noted above to point to your install library directory, and install the pyCHARMM modules using pip.\n```shell\npip install ../tool/pycharmm\nexport CHARMM_LIB_DIR=/path/to/charmm_dir/install-pycharmm-nompi/lib\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999992295443,
      "result": {
        "original_header": "Using jupyter-lab locally",
        "type": "Text_excerpt",
        "value": "If you have pycharmm installed locally in the `pyCHARMM` virtual environment, you can start a jupyter-lab by typing `jupyter lab` in the same conda environment.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9566480470258383,
      "result": {
        "original_header": "Tuesday 4:00 PM - 5:30 PM",
        "type": "Text_excerpt",
        "value": "> __Setting up solvated molecular dynamics simulations, using OpenMM, BLaDE GPU accelerated simulation engines for molecular dynamics.__ \n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BrooksResearchGroup-UM/pyCHARMM-Workshop/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 BrooksGroup-repo@UM\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyCHARMM-Workshop"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "BrooksResearchGroup-UM"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 16023473,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rich Text Format",
        "size": 10175357,
        "type": "Programming_language",
        "value": "Rich Text Format"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 7523049,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 217650,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3274,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:19:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 61
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "In the workshop examples you will find below the following tools are used.",
        "parent_header": [
          "pyCHARMM Workshop",
          "Required modules/codes:"
        ],
        "type": "Text_excerpt",
        "value": "1. [**MMTSB Toolset**](https://github.com/mmtsb/toolset) is utilized and should be installed .\n2. [**propKa**](https://github.com/jensengroup/propka) will be utilized.\n3. [**pymol**](https://pymol.org/2/) will be utilzied locally to view structures.\n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "If working through examples use the following order",
        "parent_header": [
          "pyCHARMM Workshop"
        ],
        "type": "Text_excerpt",
        "value": "1. **FirstExample** - build an alanine dipeptide and solvate it\n2. **ProteinDynamics** - set-up solvated protein system and run dynamics on it\n3. **SimpleMPIExample** - use mpi to compute alanine dipeptide energy surface and plot it\n4. **AbsoluteSolvation** - Distributed (mpi) calculation of the solvent half of the absolute solvation free energy using MBAR and BAR\n5. **Aladipeptide_HFBString_MPI** - Construct minimum energy path for $\\phi,\\psi$ conformational transition in alanine dipeptide using HFB-String approach and mpi task distribution\n6. **ReplicaExchangeExample** - Compute the free energy change for charging a residue in vacuum with replica exchange $\\lambda$-windowing distributed simulations using mpi\n7. **CDOCKER_Tutorial** - Tutorial on using CDOCKER pyCHARMM implementation for flexible ligand - rigid receptor and flexible ligand - flexible receptor docking\n8. **DrudeExample** - Simple example of setting-up and using Drude oscillator polarizable model\n9. **NeuralNetExample** - Use of TorchANI machine learned quantum chemistry potentials in CHARMM calculations through pyCHARMM\n10. **msld_py_prep_Tutorial** - Tutorial on setting-up and using MS $\\lambda$ D free energy calculations with *py_prep*\n\n\n----------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/BrooksResearchGroup-UM/pyCHARMM-Workshop/main/README.md",
      "technique": "header_analysis"
    }
  ]
}