{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you use SPAdes in your research, please include [Nurk, Bankevich et al., 2013](http://link.springer.com/chapter/10.1007%2F978-3-642-37195-0_13) in your reference list. You may also add [Bankevich, Nurk et al., 2012](http://online.liebertpub.com/doi/abs/10.1089/cmb.2012.0021) instead.\n\nIn case you perform hybrid assembly ussing  PacBio or Nanopore reads, you may also cite [Antipov et al., 2015](http://bioinformatics.oxfordjournals.org/content/early/2015/11/20/bioinformatics.btv688.short). \n\nIf you use multiple paired-end and/or mate-pair libraries you may also cite papers describing SPAdes repeat resolution algorithms [Prjibelski et al., 2014](http://bioinformatics.oxfordjournals.org/content/30/12/i293.short) and [Vasilinetc et al., 2015](http://bioinformatics.oxfordjournals.org/content/31/20/3262.abstract). \n\nIf you use metaSPAdes please cite [Antipov et al., 2016](https://genome.cshlp.org/content/27/5/824.short).\n\nIf you use plasmidSPAdes please cite [Antipov et al., 2016](https://academic.oup.com/bioinformatics/article/32/22/3380/2525610).\n\nFor rnaSPAdes citation use [Bushmanova et al., 2019](https://academic.oup.com/gigascience/article/8/9/giz100/5559527).\n\nIn addition, we would like to list your publications that use our software on our website. Please email the reference, the name of your lab, department and institution to <spades.support@cab.spbu.ru>.\n[]()\n\n<a name=\"sec6\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/1dayac/cloudrnaSPAdes-release"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-10T11:19:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-21T09:46:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.853284969952056,
      "result": {
        "original_header": "About SPAdes",
        "type": "Text_excerpt",
        "value": "SPAdes &ndash; St. Petersburg genome assembler &ndash; is an assembly toolkit containing various assembly pipelines. This manual will help you to install and run SPAdes. SPAdes version 3.13.1 was released under GPLv2 on April 11, 2019 and can be downloaded from <http://cab.spbu.ru/software/spades/>. []() \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9660601111900355,
      "result": {
        "original_header": "Supported data types",
        "type": "Text_excerpt",
        "value": "The current version of SPAdes works with Illumina or IonTorrent reads and is capable of providing hybrid assemblies using PacBio, Oxford Nanopore and Sanger reads. You can also provide additional contigs that will be used as long reads. \nVersion 3.13.1 of SPAdes supports paired-end reads, mate-pairs and unpaired reads. SPAdes can take as input several paired-end and mate-pair libraries simultaneously. Note, that SPAdes was initially designed for small genomes. It was tested on bacterial (both single-cell MDA and standard isolates), fungal and other small genomes. SPAdes is not intended for larger genomes (e.g. mammalian size genomes). For such purposes you can use it at your own risk. \nIf you have high-coverage data for bacterial/viral isolate or multi-cell organism, we highly recommend to use [`--isolate`](#isolate) option. \nSPAdes 3.13.1 includes the following additional pipelines:\n-   metaSPAdes &ndash; a pipeline for metagenomic data sets (see [metaSPAdes options](#meta)).\n-   plasmidSPAdes &ndash; a pipeline for extracting and assembling plasmids from WGS data sets (see [plasmidSPAdes options](#plasmid)).\n-   rnaSPAdes &ndash; a *de novo* transcriptome assembler from RNA-Seq data (see [rnaSPAdes manual](rnaspades_manual.html)).\n-   truSPAdes &ndash; a module for TruSeq barcode assembly (see [truSPAdes manual](truspades_manual.html)). \nIn addition, we provide several stand-alone binaries with relatively simple command-line interface: [k-mer counting](#sec4.1) (`spades-kmercounter`), [assembly graph construction](#sec4.2) (`spades-gbuilder`) and [long read to graph aligner](#sec4.3) (`spades-gmapper`). To learn options of these tools you can either run them without any parameters or read [this section](#sec4). \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9680862977798308,
      "result": {
        "original_header": "SPAdes pipeline",
        "type": "Text_excerpt",
        "value": "-   [BayesHammer](http://bioinf.spbau.ru/en/spades/bayeshammer) &ndash; read error correction tool for Illumina reads, which works well on both single-cell and standard data sets.\n-   IonHammer &ndash; read error correction tool for IonTorrent data, which also works on both types of data.\n-   SPAdes &ndash; iterative short-read genome assembly module; values of K are selected automatically based on the read length and data set type.\n-   MismatchCorrector &ndash; a tool which improves mismatch and short indel rates in resulting contigs and scaffolds; this module uses the [BWA](http://bio-bwa.sourceforge.net) tool \\[[Li H. and Durbin R., 2009](http://www.ncbi.nlm.nih.gov/pubmed/19451168)\\]; MismatchCorrector is turned off by default, but we recommend to turn it on (see [SPAdes options section](#correctoropt)). \nWe recommend to run SPAdes with BayesHammer/IonHammer to obtain high-quality assemblies. However, if you use your own read correction tool, it is possible to turn error correction module off. It is also possible to use only the read error correction stage, if you wish to use another assembler. See the [SPAdes options section](#pipelineopt). []() \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9564622522662319,
      "result": {
        "original_header": "SPAdes performance",
        "type": "Text_excerpt",
        "value": "In this section we give approximate data about SPAdes performance on two data sets: \nWe ran SPAdes with default parameters using 16 threads on a server with Intel Xeon 2.27GHz processors. BayesHammer runs in approximately half an hour and takes up to 8Gb of RAM to perform read error correction on each data set. Assembly takes about 10 minutes for the *E. coli* isolate data set and 20 minutes for the *E. coli* single-cell data set. Both data sets require about 8Gb of RAM (see notes below). MismatchCorrector runs for about 15 minutes on both data sets, and requires less than 2Gb of RAM. All modules also require additional disk space for storing results (corrected reads, contigs, etc) and temporary files. See the table below for more precise values. \n<table border=\"1\" cellpadding=\"4\" cellspacing=\"0\">\n<tr>\n<td align=\"right\"> Data set &nbsp; </td>\n<td colspan=\"3\" align=\"center\"> <i>E. coli</i> isolate </td> \n<td colspan=\"3\" align=\"center\"> <i>E. coli</i> single-cell </td>\n</tr> \n-   Running SPAdes without preliminary read error correction (e.g. without BayesHammer or IonHammer) will likely require more time and memory.\n-   Each module removes its temporary files as soon as it finishes.\n-   SPAdes uses 512 Mb per thread for buffers, which results in higher memory consumption. If you set memory limit manually, SPAdes will use smaller buffers and thus less RAM.\n-   Performance statistics is given for SPAdes version 3.13.1. \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9109634167692464,
      "result": {
        "original_header": "k-mer counting",
        "type": "Text_excerpt",
        "value": "To provide input data to SPAdes k-mer counting tool `spades-kmercounter ` you may just specify files in [SPAdes-supported formats](#sec3.1) without any flags (after all options) or provide dataset description file in [YAML format](#yaml). \nOutput: <output_dir>/final_kmers - unordered set of kmers in binary format. Kmers from both forward a\nnd reverse-complementary reads are taken into account. \nOutput format: All kmers are written sequentially without any separators. Each kmer takes the same nu\nmber of bits. One kmer of length K takes 2*K bits. Kmers are aligned by 64 bits. For example, one kme\nr with length=21 takes 8 bytes, with length=33 takes 16 bytes, and with length=55 takes 16 bytes. Eac\nh nucleotide is coded with 2 bits: 00 - A, 01 - C, 10 - G, 11 - T.\n                                                   \nExample: \n        For kmer: AGCTCT\n        Memory: 6 bits * 2 = 12, 64 bits (8 bytes)\n        Let\u2019s describe bytes:\n        data[0] = AGCT -> 11 01 10 00 -> 0xd8                                \n        data[1] = CT00 -> 00 00 11 01 -> 0x0d\n        data[2] = 0000 -> 00 00 00 00 -> 0x00\n        data[3] = 0000 -> 00 00 00 00 -> 0x00\n        data[4] = 0000 -> 00 00 00 00 -> 0x00\n        data[5] = 0000 -> 00 00 00 00 -> 0x00\n        data[6] = 0000 -> 00 00 00 00 -> 0x00\n        data[7] = 0000 -> 00 00 00 00 -> 0x00 \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9296749954404855,
      "result": {
        "original_header": "k-mer coverage read filter",
        "type": "Text_excerpt",
        "value": "`spades-read-filter` is a tool for filtering reads with median kmer coverage less than threshold. \nTo provide input data to SPAdes k-mer read filter tool `spades-read-filter ` you should provide dataset description file in [YAML format](#yaml). \n`-c, --cov <value> `\n    median kmer count threshold (read pairs, s.t. kmer count median for BOTH reads LESS OR EQUAL to this value will be ignored) \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9137225278760146,
      "result": {
        "original_header": "k-mer cardinality estimating",
        "type": "Text_excerpt",
        "value": "`spades-kmer-estimating ` is a tool for estimating approximate number of unique k-mers in the provided reads. Kmers from reverse-complementary reads aren\"t taken into account for k-mer cardinality estimating. \nTo provide input data to SPAdes k-mer cardinality estimating tool `spades-kmer-estimating ` you should provide dataset description file in [YAML format](#yaml). \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9953601690862169,
      "result": {
        "original_header": "hybridSPAdes aligner",
        "type": "Text_excerpt",
        "value": "While `spades-mapper` is a solution for those who works on hybridSPAdes assembly and wants to get intermediate results, [SPAligner](#sec4.5.2) is an end-product application for sequence-to-graph alignment with tunable parameters and output types.   \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9068542451603379,
      "result": {
        "original_header": "SPAligner",
        "type": "Text_excerpt",
        "value": "A tool for fast and accurate alignment of nucleotide sequences to assembly graphs. It takes file with sequences (in fasta/fastq format) and assembly in GFA format and outputs long read to graph alignment in various formats (such as tsv, fasta and [GPA](https://github.com/ocxtal/gpa \"GPA-format spec\")). \n`-g <filename> `\n    file with graph (in GFA) \nFor more information on parameters and options please refer to main SPAligner manual (assembler/src/projects/spaligner/README.md). \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/rrwick/Bandage/wiki/Graph-paths"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading SPAdes Linux binaries",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To download [SPAdes Linux binaries](http://cab.spbu.ru/files/release3.13.1/SPAdes-3.13.1-Linux.tar.gz) and extract them, go to the directory in which you wish SPAdes to be installed and run:\n\n``` bash\n\n    wget http://cab.spbu.ru/files/release3.13.1/SPAdes-3.13.1-Linux.tar.gz\n    tar -xzf SPAdes-3.13.1-Linux.tar.gz\n    cd SPAdes-3.13.1-Linux/bin/\n```\n\nIn this case you do not need to run any installation scripts &ndash; SPAdes is ready to use. We also suggest adding SPAdes installation directory to the `PATH` variable. []()\n\n<a name=\"sec2.2\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading SPAdes binaries for Mac",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To obtain [SPAdes binaries for Mac](http://cab.spbu.ru/files/release3.13.1/SPAdes-3.13.1-Darwin.tar.gz), go to the directory in which you wish SPAdes to be installed and run:\n\n``` bash\n\n    curl http://cab.spbu.ru/files/release3.13.1/SPAdes-3.13.1-Darwin.tar.gz -o SPAdes-3.13.1-Darwin.tar.gz\n    tar -zxf SPAdes-3.13.1-Darwin.tar.gz\n    cd SPAdes-3.13.1-Darwin/bin/\n```\n\nJust as in Linux, SPAdes is ready to use and no further installation steps are required. We also suggest adding SPAdes installation directory to the `PATH` variable. []()\n\n<a name=\"sec2.3\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading and compiling SPAdes source code",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you wish to compile SPAdes by yourself you will need the following libraries to be pre-installed:\n\n-   g++ (version 5.3.1 or higher)\n-   cmake (version 2.8.12 or higher)\n-   zlib\n-   libbz2\n\nIf you meet these requirements, you can download the [SPAdes source code](http://cab.spbu.ru/files/release3.13.1/SPAdes-3.13.1.tar.gz):\n\n``` bash\n\n    wget http://cab.spbu.ru/files/release3.13.1/SPAdes-3.13.1.tar.gz\n    tar -xzf SPAdes-3.13.1.tar.gz\n    cd SPAdes-3.13.1\n```\n\nand build it with the following script:\n\n``` bash\n\n    ./spades_compile.sh\n```\n\nSPAdes will be built in the directory `./bin`. If you wish to install SPAdes into another directory, you can specify full path of destination folder by running the following command in `bash` or `sh`:\n\n``` bash\n\n    PREFIX=<destination_dir> ./spades_compile.sh\n```\n\nfor example:\n\n``` bash\n\n    PREFIX=/usr/local ./spades_compile.sh\n```\n\nwhich will install SPAdes into `/usr/local/bin`.\n\nAfter installation you will get the same files (listed above) in `./bin` directory (or `<destination_dir>/bin` if you specified PREFIX). We also suggest adding SPAdes installation directory to the `PATH` variable. []()\n\n<a name=\"sec2.4\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/1dayac/cloudrnaSPAdes-release/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/1dayac/cloudrnaSPAdes-release/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "1dayac/cloudrnaSPAdes-release"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "About SPAdes"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/make-targz.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/webvis/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/webvis/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/ioncommunity/make_targz.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/ioncommunity/AssemblerPlus/launch.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/spades_compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/compare_saves.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/spades_dev.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/projects/spaligner/benchmarking/data_gen/sim_nanopore_circular.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/projects/spaligner/benchmarking/data_gen/gen_mapped_reads.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/projects/spaligner/benchmarking/data_gen/sim_pacbio.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/projects/spaligner/benchmarking/data_gen/gen_benchmark_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/projects/spaligner/benchmarking/data_gen/gen_benchmark_data_simnp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/projects/spaligner/benchmarking/data_gen/sim_illumina.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/projects/spaligner/benchmarking/data_gen/sim_nanopore_linear.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/mauve_assembly_align.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_holybox_compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/run_velvet_unpaired.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/dot_conv.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/run_velvet2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/copy_ungzip.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/clean_contaminations/clean_contam_by_index_id.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/clean_contaminations/blast_contigs_and_process_output.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/clean_contaminations/16SrRNA/taxonomy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/clean_contaminations/16SrRNA/preprocessing.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/res_counter/spades_pipeline_measurer.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/res_counter/measure_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/res_counter/result_saver.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/de_quality/genPics.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/de_quality/genPlot.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/de_quality/genScaf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/de_quality/genFalse.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/de_quality/lookAtPics.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/de_quality/cpfiles.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/de_quality/alignment/align.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/contig_analysis/compare_runs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/contig_analysis/visualizer/run_parser.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/contig_analysis/visualizer/run_viz.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_download_stats/grep_stat_old221.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_download_stats/stat_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_download_stats/grep_stat_rpm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_download_stats/grep_stat.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_download_stats/grep_stat_veryold.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_download_stats/stat.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_download_stats/grep_stat_old.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/SOAP_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/CABOG_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/VELVETSC_mp_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/SGA_mp_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/VELVETSC_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/SGA_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/VELVET_mp_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/CABOG_mp_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/SGA_assemble_cor.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/VELVET_assemble.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/misc/assembler_runner/SGA_mp_assemble_cor.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/spades_build/tag-bug-fix.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/truseq/quast_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/estimation/run_real.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/correctionEvaluatorIon/evaluate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/src/tools/correctionEvaluatorIon/compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/autogen.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/run_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/include/jemalloc/jemalloc_mangle.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/include/jemalloc/jemalloc_rename.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/include/jemalloc/jemalloc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/include/jemalloc/internal/smoothstep.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/include/jemalloc/internal/private_symbols.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/include/jemalloc/internal/public_namespace.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/include/jemalloc/internal/public_unnamespace.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/include/jemalloc/internal/private_namespace.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/bwa/bwakit/typeHLA.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/dnanexus/src/spades-dnanexus.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Building and installing a packaged release of jemalloc can be as simple as\ntyping the following while in the root directory of the source tree:\n\n    ./configure\n    make\n    make install\n\nIf building from unpackaged developer sources, the simplest command sequence\nthat might work is:\n\n    ./autogen.sh\n    make dist\n    make\n    make install\n\nNote that documentation is not built by the default target because doing so\nwould create a dependency on xsltproc in packaged releases, hence the\nrequirement to either run 'make dist' or avoid installing docs via the various\ninstall_* targets documented below.\n\n\n## Advanced configuration\n\nThe 'configure' script supports numerous options that allow control of which\nfunctionality is enabled, where jemalloc is installed, etc.  Optionally, pass\nany of the following arguments (not a definitive list) to 'configure':\n\n* `--help`\n\n    Print a definitive list of options.\n\n* `--prefix=<install-root-dir>`\n\n    Set the base directory in which to install.  For example:\n\n        ./configure --prefix=/usr/local\n\n    will cause files to be installed into /usr/local/include, /usr/local/lib,\n    and /usr/local/man.\n\n* `--with-version=(<major>.<minor>.<bugfix>-<nrev>-g<gid>|VERSION)`\n\n    The VERSION file is mandatory for successful configuration, and the\n    following steps are taken to assure its presence:\n    1) If --with-version=<major>.<minor>.<bugfix>-<nrev>-g<gid> is specified,\n       generate VERSION using the specified value.\n    2) If --with-version is not specified in either form and the source\n       directory is inside a git repository, try to generate VERSION via 'git\n       describe' invocations that pattern-match release tags.\n    3) If VERSION is missing, generate it with a bogus version:\n       0.0.0-0-g0000000000000000000000000000000000000000\n\n    Note that --with-version=VERSION bypasses (1) and (2), which simplifies\n    VERSION configuration when embedding a jemalloc release into another\n    project's git repository.\n\n* `--with-rpath=<colon-separated-rpath>`\n\n    Embed one or more library paths, so that libjemalloc can find the libraries\n    it is linked to.  This works only on ELF-based systems.\n\n* `--with-mangling=<map>`\n\n    Mangle public symbols specified in <map> which is a comma-separated list of\n    name:mangled pairs.\n\n    For example, to use ld's --wrap option as an alternative method for\n    overriding libc's malloc implementation, specify something like:\n\n      --with-mangling=malloc:__wrap_malloc,free:__wrap_free[...]\n\n    Note that mangling happens prior to application of the prefix specified by\n    --with-jemalloc-prefix, and mangled symbols are then ignored when applying\n    the prefix.\n\n* `--with-jemalloc-prefix=<prefix>`\n\n    Prefix all public APIs with <prefix>.  For example, if <prefix> is\n    \"prefix_\", API changes like the following occur:\n\n      malloc()         --> prefix_malloc()\n      malloc_conf      --> prefix_malloc_conf\n      /etc/malloc.conf --> /etc/prefix_malloc.conf\n      MALLOC_CONF      --> PREFIX_MALLOC_CONF\n\n    This makes it possible to use jemalloc at the same time as the system\n    allocator, or even to use multiple copies of jemalloc simultaneously.\n\n    By default, the prefix is \"\", except on OS X, where it is \"je_\".  On OS X,\n    jemalloc overlays the default malloc zone, but makes no attempt to actually\n    replace the \"malloc\", \"calloc\", etc. symbols.\n\n* `--without-export`\n\n    Don't export public APIs.  This can be useful when building jemalloc as a\n    static library, or to avoid exporting public APIs when using the zone\n    allocator on OSX.\n\n* `--with-private-namespace=<prefix>`\n\n    Prefix all library-private APIs with <prefix>je_.  For shared libraries,\n    symbol visibility mechanisms prevent these symbols from being exported, but\n    for static libraries, naming collisions are a real possibility.  By\n    default, <prefix> is empty, which results in a symbol prefix of je_ .\n\n* `--with-install-suffix=<suffix>`\n\n    Append <suffix> to the base name of all installed files, such that multiple\n    versions of jemalloc can coexist in the same installation directory.  For\n    example, libjemalloc.so.0 becomes libjemalloc<suffix>.so.0.\n\n* `--with-malloc-conf=<malloc_conf>`\n\n    Embed `<malloc_conf>` as a run-time options string that is processed prior to\n    the malloc_conf global variable, the /etc/malloc.conf symlink, and the\n    MALLOC_CONF environment variable.  For example, to change the default decay\n    time to 30 seconds:\n\n      --with-malloc-conf=decay_ms:30000\n\n* `--enable-debug`\n\n    Enable assertions and validation code.  This incurs a substantial\n    performance hit, but is very useful during application development.\n\n* `--disable-stats`\n\n    Disable statistics gathering functionality.  See the \"opt.stats_print\"\n    option documentation for usage details.\n\n* `--enable-prof`\n\n    Enable heap profiling and leak detection functionality.  See the \"opt.prof\"\n    option documentation for usage details.  When enabled, there are several\n    approaches to backtracing, and the configure script chooses the first one\n    in the following list that appears to function correctly:\n\n    + libunwind      (requires --enable-prof-libunwind)\n    + libgcc         (unless --disable-prof-libgcc)\n    + gcc intrinsics (unless --disable-prof-gcc)\n\n* `--enable-prof-libunwind`\n\n    Use the libunwind library (http://www.nongnu.org/libunwind/) for stack\n    backtracing.\n\n* `--disable-prof-libgcc`\n\n    Disable the use of libgcc's backtracing functionality.\n\n* `--disable-prof-gcc`\n\n    Disable the use of gcc intrinsics for backtracing.\n\n* `--with-static-libunwind=<libunwind.a>`\n\n    Statically link against the specified libunwind.a rather than dynamically\n    linking with -lunwind.\n\n* `--disable-fill`\n\n    Disable support for junk/zero filling of memory.  See the \"opt.junk\" and\n    \"opt.zero\" option documentation for usage details.\n\n* `--disable-zone-allocator`\n\n    Disable zone allocator for Darwin.  This means jemalloc won't be hooked as\n    the default allocator on OSX/iOS.\n\n* `--enable-utrace`\n\n    Enable utrace(2)-based allocation tracing.  This feature is not broadly\n    portable (FreeBSD has it, but Linux and OS X do not).\n\n* `--enable-xmalloc`\n\n    Enable support for optional immediate termination due to out-of-memory\n    errors, as is commonly implemented by \"xmalloc\" wrapper function for malloc.\n    See the \"opt.xmalloc\" option documentation for usage details.\n\n* `--enable-lazy-lock`\n\n    Enable code that wraps pthread_create() to detect when an application\n    switches from single-threaded to multi-threaded mode, so that it can avoid\n    mutex locking/unlocking operations while in single-threaded mode.  In\n    practice, this feature usually has little impact on performance unless\n    thread-specific caching is disabled.\n\n* `--disable-cache-oblivious`\n\n    Disable cache-oblivious large allocation alignment for large allocation\n    requests with no alignment constraints.  If this feature is disabled, all\n    large allocations are page-aligned as an implementation artifact, which can\n    severely harm CPU cache utilization.  However, the cache-oblivious layout\n    comes at the cost of one extra page per large allocation, which in the\n    most extreme case increases physical memory usage for the 16 KiB size class\n    to 20 KiB.\n\n* `--disable-syscall`\n\n    Disable use of syscall(2) rather than {open,read,write,close}(2).  This is\n    intended as a workaround for systems that place security limitations on\n    syscall(2).\n\n* `--disable-cxx`\n\n    Disable C++ integration.  This will cause new and delete operator\n    implementations to be omitted.\n\n* `--with-xslroot=<path>`\n\n    Specify where to find DocBook XSL stylesheets when building the\n    documentation.\n\n* `--with-lg-page=<lg-page>`\n\n    Specify the base 2 log of the allocator page size, which must in turn be at\n    least as large as the system page size.  By default the configure script\n    determines the host's page size and sets the allocator page size equal to\n    the system page size, so this option need not be specified unless the\n    system page size may change between configuration and execution, e.g. when\n    cross compiling.\n\n* `--with-lg-hugepage=<lg-hugepage>`\n\n    Specify the base 2 log of the system huge page size.  This option is useful\n    when cross compiling, or when overriding the default for systems that do\n    not explicitly support huge pages.\n\n* `--with-lg-quantum=<lg-quantum>`\n\n    Specify the base 2 log of the minimum allocation alignment.  jemalloc needs\n    to know the minimum alignment that meets the following C standard\n    requirement (quoted from the April 12, 2011 draft of the C11 standard):\n\n    >  The pointer returned if the allocation succeeds is suitably aligned so\n      that it may be assigned to a pointer to any type of object with a\n      fundamental alignment requirement and then used to access such an object\n      or an array of such objects in the space allocated [...]\n\n    This setting is architecture-specific, and although jemalloc includes known\n    safe values for the most commonly used modern architectures, there is a\n    wrinkle related to GNU libc (glibc) that may impact your choice of\n    <lg-quantum>.  On most modern architectures, this mandates 16-byte\n    alignment (<lg-quantum>=4), but the glibc developers chose not to meet this\n    requirement for performance reasons.  An old discussion can be found at\n    <https://sourceware.org/bugzilla/show_bug.cgi?id=206> .  Unlike glibc,\n    jemalloc does follow the C standard by default (caveat: jemalloc\n    technically cheats for size classes smaller than the quantum), but the fact\n    that Linux systems already work around this allocator noncompliance means\n    that it is generally safe in practice to let jemalloc's minimum alignment\n    follow glibc's lead.  If you specify `--with-lg-quantum=3` during\n    configuration, jemalloc will provide additional size classes that are not\n    16-byte-aligned (24, 40, and 56).\n\n* `--with-lg-vaddr=<lg-vaddr>`\n\n    Specify the number of significant virtual address bits.  By default, the\n    configure script attempts to detect virtual address size on those platforms\n    where it knows how, and picks a default otherwise.  This option may be\n    useful when cross-compiling.\n\n* `--disable-initial-exec-tls`\n\n    Disable the initial-exec TLS model for jemalloc's internal thread-local\n    storage (on those platforms that support explicit settings).  This can allow\n    jemalloc to be dynamically loaded after program startup (e.g. using dlopen).\n    Note that in this case, there will be two malloc implementations operating\n    in the same process, which will almost certainly result in confusing runtime\n    crashes if pointers leak from one implementation to the other.\n\n* `--disable-libdl`\n\n    Disable the usage of libdl, namely dlsym(3) which is required by the lazy\n    lock option.  This can allow building static binaries.\n\nThe following environment variables (not a definitive list) impact configure's\nbehavior:\n\n* `CFLAGS=\"?\"`\n* `CXXFLAGS=\"?\"`\n\n    Pass these flags to the C/C++ compiler.  Any flags set by the configure\n    script are prepended, which means explicitly set flags generally take\n    precedence.  Take care when specifying flags such as -Werror, because\n    configure tests may be affected in undesirable ways.\n\n* `EXTRA_CFLAGS=\"?\"`\n* `EXTRA_CXXFLAGS=\"?\"`\n\n    Append these flags to CFLAGS/CXXFLAGS, without passing them to the\n    compiler(s) during configuration.  This makes it possible to add flags such\n    as -Werror, while allowing the configure script to determine what other\n    flags are appropriate for the specified configuration.\n\n* `CPPFLAGS=\"?\"`\n\n    Pass these flags to the C preprocessor.  Note that CFLAGS is not passed to\n    'cpp' when 'configure' is looking for include files, so you must use\n    CPPFLAGS instead if you need to help 'configure' find header files.\n\n* `LD_LIBRARY_PATH=\"?\"`\n\n    'ld' uses this colon-separated list to find libraries.\n\n* `LDFLAGS=\"?\"`\n\n    Pass these flags when linking.\n\n* `PATH=\"?\"`\n\n    'configure' uses this to find programs.\n\nIn some cases it may be necessary to work around configuration results that do\nnot match reality.  For example, Linux 4.5 added support for the MADV_FREE flag\nto madvise(2), which can cause problems if building on a host with MADV_FREE\nsupport and deploying to a target without.  To work around this, use a cache\nfile to override the relevant configuration variable defined in configure.ac,\ne.g.:\n\n    echo \"je_cv_madv_free=no\" > config.cache && ./configure -C\n\n\n## Advanced compilation\n\nTo build only parts of jemalloc, use the following targets:\n\n    build_lib_shared\n    build_lib_static\n    build_lib\n    build_doc_html\n    build_doc_man\n    build_doc\n\nTo install only parts of jemalloc, use the following targets:\n\n    install_bin\n    install_include\n    install_lib_shared\n    install_lib_static\n    install_lib_pc\n    install_lib\n    install_doc_html\n    install_doc_man\n    install_doc\n\nTo clean up build results to varying degrees, use the following make targets:\n\n    clean\n    distclean\n    relclean\n\n\n## Advanced installation\n\nOptionally, define make variables when invoking make, including (not\nexclusively):\n\n* `INCLUDEDIR=\"?\"`\n\n    Use this as the installation prefix for header files.\n\n* `LIBDIR=\"?\"`\n\n    Use this as the installation prefix for libraries.\n\n* `MANDIR=\"?\"`\n\n    Use this as the installation prefix for man pages.\n\n* `DESTDIR=\"?\"`\n\n    Prepend DESTDIR to INCLUDEDIR, LIBDIR, DATADIR, and MANDIR.  This is useful\n    when installing to a different path than was specified via --prefix.\n\n* `CC=\"?\"`\n\n    Use this to invoke the C compiler.\n\n* `CFLAGS=\"?\"`\n\n    Pass these flags to the compiler.\n\n* `CPPFLAGS=\"?\"`\n\n    Pass these flags to the C preprocessor.\n\n* `LDFLAGS=\"?\"`\n\n    Pass these flags when linking.\n\n* `PATH=\"?\"`\n\n    Use this to search for programs used during configuration and building.\n\n\n## Development\n\nIf you intend to make non-trivial changes to jemalloc, use the 'autogen.sh'\nscript rather than 'configure'.  This re-generates 'configure', enables\nconfiguration dependency rules, and enables re-generation of automatically\ngenerated source files.\n\nThe build system supports using an object directory separate from the source\ntree.  For example, you can create an 'obj' directory, and from within that\ndirectory, issue configuration and build commands:\n\n    autoconf\n    mkdir obj\n    cd obj\n    ../configure --enable-autogen\n    make\n\n\n## Documentation\n\nThe manual page is generated in both html and roff formats.  Any web browser\ncan be used to view the html manual.  The roff manual page can be formatted\nprior to installation via the following command:\n\n    nroff -man -t doc/jemalloc.3\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/ext/src/jemalloc/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "\nSPAdes requires a 64-bit Linux system or Mac OS and Python (supported versions are Python2: 2.4&ndash;2.7, and Python3: 3.2 and higher) to be pre-installed on it. To obtain SPAdes you can either download binaries or download source code and compile it yourself. []()\n\nIn case of successful installation the following files will be placed in the `bin` directory:\n\n-   `spades.py` (main executable script)\n-   `metaspades.py` (main executable script for [metaSPAdes](#meta))\n-   `plasmidspades.py` (main executable script for [plasmidSPAdes](#plasmid))\n-   `rnaspades.py` (main executable script for [rnaSPAdes](rnaspades_manual.html))\n-   `truspades.py` (main executable script for [truSPAdes](truspades_manual.html))\n-   `spades-core`  (assembly module)\n-   `spades-gbuilder`  (standalone graph builder application)\n-   `spades-gmapper`  (standalone long read to graph aligner)\n-   `spades-kmercount`  (standalone k-mer counting application)\n-   `spades-hammer`  (read error correcting module for Illumina reads)\n-   `spades-ionhammer`  (read error correcting module for IonTorrent reads)\n-   `spades-bwa`  ([BWA](http://bio-bwa.sourceforge.net) alignment module which is required for mismatch correction)\n-   `spades-corrector-core`  (mismatch correction module)\n-   `spades-truseq-scfcorrection`  (executable used in truSPAdes pipeline)\n\n<a name=\"sec2.1\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Verifying your installation",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "For testing purposes, SPAdes comes with a toy data set (reads that align to first 1000 bp of *E. coli*). To try SPAdes on this data set, run:\n\n``` bash\n\n    <spades installation dir>/spades.py --test\n```\n\nIf you added SPAdes installation directory to the `PATH` variable, you can run:\n\n``` bash\n\n    spades.py --test\n```\n\nFor the simplicity we further assume that SPAdes installation directory is added to the `PATH` variable.\n\nIf the installation is successful, you will find the following information at the end of the log:\n\n``` plain\n\n===== Assembling finished. Used k-mer sizes: 21, 33, 55\n\n * Corrected reads are in spades_test/corrected/\n * Assembled contigs are in spades_test/contigs.fasta\n * Assembled scaffolds are in spades_test/scaffolds.fasta\n * Assembly graph is in spades_test/assembly_graph.fastg\n * Assembly graph in GFA format is in spades_test/assembly_graph.gfa\n * Paths in the assembly graph corresponding to the contigs are in spades_test/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in spades_test/scaffolds.paths\n\n======= SPAdes pipeline finished.\n\n========= TEST PASSED CORRECTLY.\n\nSPAdes log can be found here: spades_test/spades.log\n\nThank you for using SPAdes!\n```\n\n<a name=\"sec3\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Multi-cell data set with read length 2x150",
        "parent_header": [
          "Running SPAdes",
          "Assembling long Illumina paired reads (2x150 and 2x250)"
        ],
        "type": "Text_excerpt",
        "value": "Do not turn off SPAdes error correction (BayesHammer module), which is included in SPAdes default pipeline.\n\nIf you have enough coverage (50x+), then you may want to try to set k-mer lengths of 21, 33, 55, 77 (selected by default for reads with length 150bp).\n\nMake sure you run assembler with the `--careful` option to minimize number of mismatches in the final contigs.\n\nWe recommend that you check the SPAdes log file at the end of the each iteration to control the average coverage of the contigs.\n\nFor reads corrected prior to running the assembler:\n\n``` bash\n\n    spades.py -k 21,33,55,77 --careful --only-assembler <your reads> -o spades_output\n```\n\nTo correct and assemble the reads:\n\n``` bash\n\n    spades.py -k 21,33,55,77 --careful <your reads> -o spades_output\n```\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Multi-cell data set with read lengths 2 x 250",
        "parent_header": [
          "Running SPAdes",
          "Assembling long Illumina paired reads (2x150 and 2x250)"
        ],
        "type": "Text_excerpt",
        "value": "Do not turn off SPAdes error correction (BayesHammer module), which is included in SPAdes default pipeline.\n\nBy default we suggest to increase k-mer lengths in increments of 22 until the k-mer length reaches 127. The exact length of the k-mer depends on the coverage: k-mer length of 127 corresponds to 50x k-mer coverage and higher. For read length 250bp SPAdes automatically chooses K values equal to 21, 33, 55, 77, 99, 127.\n\nMake sure you run assembler with `--careful` option to minimize number of mismatches in the final contigs.\n\nWe recommend you to check the SPAdes log file at the end of the each iteration to control the average coverage of the contigs.\n\nFor reads corrected prior to running the assembler:\n\n``` bash\n\n    spades.py -k 21,33,55,77,99,127 --careful --only-assembler <your reads> -o spades_output\n```\n\nTo correct and assemble the reads:\n\n``` bash\n\n    spades.py -k 21,33,55,77,99,127 --careful <your reads> -o spades_output\n```\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Single-cell data set with read lengths 2 x 150 or 2 x 250",
        "parent_header": [
          "Running SPAdes",
          "Assembling long Illumina paired reads (2x150 and 2x250)"
        ],
        "type": "Text_excerpt",
        "value": "The default k-mer lengths are recommended. For single-cell data sets SPAdes selects k-mer sizes 21, 33 and 55.\n\nHowever, it might be tricky to fully utilize the advantages of long reads you have. Consider contacting us for more information and to discuss assembly strategy.\n[]()\n\n<a name=\"sec3.5\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998327930363229,
      "result": {
        "original_header": "About SPAdes",
        "type": "Text_excerpt",
        "value": "SPAdes &ndash; St. Petersburg genome assembler &ndash; is an assembly toolkit containing various assembly pipelines. This manual will help you to install and run SPAdes. SPAdes version 3.13.1 was released under GPLv2 on April 11, 2019 and can be downloaded from <http://cab.spbu.ru/software/spades/>. []() \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9091680687529903,
      "result": {
        "original_header": "Supported data types",
        "type": "Text_excerpt",
        "value": "If you have high-coverage data for bacterial/viral isolate or multi-cell organism, we highly recommend to use [`--isolate`](#isolate) option. \nIn addition, we provide several stand-alone binaries with relatively simple command-line interface: [k-mer counting](#sec4.1) (`spades-kmercounter`), [assembly graph construction](#sec4.2) (`spades-gbuilder`) and [long read to graph aligner](#sec4.3) (`spades-gmapper`). To learn options of these tools you can either run them without any parameters or read [this section](#sec4). \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8931051903150301,
      "result": {
        "original_header": "SPAdes pipeline",
        "type": "Text_excerpt",
        "value": "SPAdes comes in several separate modules: \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9887044547854331,
      "result": {
        "original_header": "k-mer counting",
        "type": "Text_excerpt",
        "value": "`-w, --workdir <dir name> `\n    working directory to use (default: current directory) \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9593204372416709,
      "result": {
        "original_header": "k-mer coverage read filter",
        "type": "Text_excerpt",
        "value": "`-o, --outdir <dir> `\n    output directory to use (default: current directory) \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8902687050646952,
      "result": {
        "original_header": "Graph construction",
        "type": "Text_excerpt",
        "value": "`-tmp-dir <dir_name>  `\n    scratch directory to use \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8937713725678346,
      "result": {
        "original_header": "SPAligner",
        "type": "Text_excerpt",
        "value": "`-o, --outdir <dir> `\n    output directory to use (default: spaligner_result/) \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.869829745433681,
      "result": {
        "original_header": "k-mer counting",
        "type": "Text_excerpt",
        "value": "`-d, --dataset file <file name> `\n    dataset description (in YAML format), input files ignored \n`-w, --workdir <dir name> `\n    working directory to use (default: current directory) \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8544117706846398,
      "result": {
        "original_header": "k-mer coverage read filter",
        "type": "Text_excerpt",
        "value": "To provide input data to SPAdes k-mer read filter tool `spades-read-filter ` you should provide dataset description file in [YAML format](#yaml). \n`-d, --dataset file <file name> `\n    dataset description (in YAML format) \n`-o, --outdir <dir> `\n    output directory to use (default: current directory) \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8163431069706931,
      "result": {
        "original_header": "Graph construction",
        "type": "Text_excerpt",
        "value": "`-tmp-dir <dir_name>  `\n    scratch directory to use \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8132342448204424,
      "result": {
        "original_header": "SPAligner",
        "type": "Text_excerpt",
        "value": "`-s <filename> `\n    file with sequences (in fasta/fastq) \n`-o, --outdir <dir> `\n    output directory to use (default: spaligner_result/) \n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/1dayac/cloudrnaSPAdes-release/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "SPADES: SAINT-PETERSBURG GENOME ASSEMBLER\nCopyright (c) 2015-2019 Saint Petersburg State University\nCopyright (c) 2011-2014 Saint Petersburg Academic University\n\nSPAdes is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License, Version 2,\ndated June 1991, as published by the Free Software Foundation.\n\nSPAdes is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n-------------------------------------------------------------------------------\n\nSPAdes\nGenome assembler for single-cell and isolates data sets\nVersion: see VERSION\n\nDeveloped in Center for Algorithmic Biotechnology, Institute of Translational Biomedicine, St. Petersburg State University.\nDeveloped in Algorithmic Biology Lab of St. Petersburg Academic University of the Russian Academy of Sciences.\n\nCurrent SPAdes contributors:\n\n    Dmitry Antipov,\n    Elena Bushmanova,\n    Vasisliy Ershov,\n    Yuriy Gorshkov,\n    Alexey Gurevich,\n    Anton Korobeynikov,\n    Olga Kunyavskaya,\n    Dmitriy Meleshko,\n    Sergey Nurk,\n    Andrey Prjibelski,\n    Alexander Shlemov,\n    Ivan Tolstoganov,\n    Alla Lapidus and\n    Pavel Pevzner\n\nAlso contributed:\n\n    Max Alekseyev,\n    Anton Bankevich,\n    Mikhail Dvorkin,\n    Alexander Kulikov,\n    Valery Lesin,\n    Sergey Nikolenko,\n    Son Pham,\n    Alexey Pyshkin,\n    Yana Safonova,\n    Vladislav Saveliev,\n    Alexander Sirotkin,\n    Yakov Sirotkin,\n    Artem Tarasov,\n    Glenn Tesler,\n    Irina Vasilinetc,\n    Nikolay Vyahhi\n\nInstallation instructions and manual can be found on the website:\nhttp://cab.spbu.ru/software/spades/\n\nAddress for communication: spades.support@cab.spbu.ru\n\nReferences:\n\nAnton Bankevich, Sergey Nurk, Dmitry Antipov, Alexey A. Gurevich, Mikhail\nDvorkin, Alexander S. Kulikov, Valery M. Lesin, Sergey I. Nikolenko, Son Pham,\nAndrey D. Prjibelski, Alexey V. Pyshkin, Alexander V. Sirotkin, Nikolay Vyahhi,\nGlenn Tesler, Max A. Alekseyev, and Pavel A. Pevzner. SPAdes: A New Genome\nAssembly Algorithm and Its Applications to Single-Cell Sequencing.  Journal of\nComputational Biology 19(5) (2012), 455-477. doi:10.1089/cmb.2012.0021\n\nSergey Nurk, Anton Bankevich, Dmitry Antipov, Alexey Gurevich, Anton Korobeynikov, \nAlla Lapidus, Andrey Prjibelsky, Alexey Pyshkin, Alexander Sirotkin, \nYakov Sirotkin, Ramunas Stepanauskas, Jeffrey McLean, Roger Lasken, \nScott Clingenpeel, Tanja Woyke, Glenn Tesler, Max Alekseyev, and Pavel Pevzner.\nAssembling Genomes and Mini-metagenomes from Highly Chimeric Reads. Lecture Notes \nin Computer Science 7821 (2013), pp. 158-170. doi:10.1007/978-3-642-37195-0_13\n\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/assembler/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cloudrnaSPAdes-release"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "1dayac"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 50719186,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 4768891,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1775149,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 269222,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 159632,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 142803,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 128733,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 93442,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 91133,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 83771,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 73596,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Less",
        "size": 52167,
        "type": "Programming_language",
        "value": "Less"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 51809,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lua",
        "size": 47426,
        "type": "Programming_language",
        "value": "Lua"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 41127,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "D",
        "size": 29543,
        "type": "Programming_language",
        "value": "D"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 13775,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Gnuplot",
        "size": 2926,
        "type": "Programming_language",
        "value": "Gnuplot"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1727,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "QMake",
        "size": 886,
        "type": "Programming_language",
        "value": "QMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running SPAdes",
        "type": "Text_excerpt",
        "value": "<a name=\"sec3.1\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SPAdes input",
        "parent_header": [
          "Running SPAdes"
        ],
        "type": "Text_excerpt",
        "value": "SPAdes takes as input paired-end reads, mate-pairs and single (unpaired) reads in FASTA and FASTQ. For IonTorrent data SPAdes also supports unpaired reads in unmapped BAM format (like the one produced by Torrent Server). However, in order to run read error correction, reads should be in FASTQ or BAM format. Sanger, Oxford Nanopore and PacBio CLR reads can be provided in both formats since SPAdes does not run error correction for these types of data.\n\nTo run SPAdes 3.13.1 you need at least one library of the following types:\n\n-   Illumina paired-end/high-quality mate-pairs/unpaired reads\n-   IonTorrent paired-end/high-quality mate-pairs/unpaired reads\n-   PacBio CCS reads\n\nIllumina and IonTorrent libraries should not be assembled together. All other types of input data are compatible. SPAdes should not be used if only PacBio CLR, Oxford Nanopore, Sanger reads or additional contigs are available.\n\nSPAdes supports mate-pair only assembly. However, we recommend to use only high-quality mate-pair libraries in this case (e.g. that do not have a paired-end part). We tested mate-pair only pipeline using Illumina Nextera mate-pairs. See more [here](#hqmp).\n\nCurrent version SPAdes also supports Lucigen NxSeq\u00ae Long Mate Pair libraries, which always have forward-reverse orientation. If you wish to use Lucigen NxSeq\u00ae Long Mate Pair reads, you will need Python [regex library](https://pypi.python.org/pypi/regex) to be pre-installed on your machine. You can install it with Python [pip-installer](http://www.pip-installer.org/):\n\n``` bash\n\n    pip install regex\n```\n\nor with the [Easy Install](http://peak.telecommunity.com/DevCenter/EasyInstall) Python module:\n\n``` bash\n\n    easy_install regex\n```\n\nNotes:\n\n-   It is strongly suggested to provide multiple paired-end and mate-pair libraries according to their insert size (from smallest to longest).\n-   It is not recommended to run SPAdes on PacBio reads with low coverage (less than 5).\n-   We suggest not to run SPAdes on PacBio reads for large genomes.\n-   SPAdes accepts gzip-compressed files.\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Read-pair libraries",
        "parent_header": [
          "Running SPAdes",
          "SPAdes input"
        ],
        "type": "Text_excerpt",
        "value": "By using command line interface, you can specify up to nine different paired-end libraries, up to nine mate-pair libraries and also up to nine high-quality mate-pair ones. If you wish to use more, you can use [YAML data set file](#yaml). We further refer to paired-end and mate-pair libraries simply as to read-pair libraries.\n\nBy default, SPAdes assumes that paired-end and high-quality mate-pair reads have forward-reverse (fr) orientation and usual mate-pairs have reverse-forward (rf) orientation. However, different orientations can be set for any library by using SPAdes options.\n\nTo distinguish reads in pairs we refer to them as left and right reads. For forward-reverse orientation, the forward reads correspond to the left reads and the reverse reads, to the right. Similarly, in reverse-forward orientation left and right reads correspond to reverse and forward reads, respectively, etc.\n\nEach read-pair library can be stored in several files or several pairs of files. Paired reads can be organized in two different ways:\n\n-   In file pairs. In this case left and right reads are placed in different files and go in the same order in respective files.\n-   In interleaved files. In this case, the reads are interlaced, so that each right read goes after the corresponding paired left read.\n\nFor example, Illumina produces paired-end reads in two files: `R1.fastq` and `R2.fastq`. If you choose to store reads in file pairs make sure that for every read from `R1.fastq` the corresponding paired read from `R2.fastq` is placed in the respective paired file on the same line number. If you choose to use interleaved files, every read from `R1.fastq` should be followed by the corresponding paired read from `R2.fastq`.\n\nIf adapter and/or quality trimming software has been used prior to assembly, files with the orphan reads can be provided as \"single read files\" for the corresponding read-pair library.\n\n<a name=\"merged\"></a>\nIf you have merged some of the reads from your paired-end (not mate-pair or high-quality mate-pair) library (using tools s.a. [BBMerge](https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbmerge-guide/) or [STORM](https://bitbucket.org/yaoornl/align_test/overview)), you should provide the file with resulting reads as a \"merged read file\" for the corresponding library.\nNote that non-empty files with the remaining unmerged left/right reads (separate or interlaced) must be provided for the same library (for SPAdes to correctly detect the original read length).\n\nIn an unlikely case some of the reads from your mate-pair (or high-quality mate-pair) library are \"merged\", you should provide the resulting reads as a SEPARATE single-read library.\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Unpaired (single-read) libraries",
        "parent_header": [
          "Running SPAdes",
          "SPAdes input"
        ],
        "type": "Text_excerpt",
        "value": "By using command line interface, you can specify up to nine different single-read libraries. To input more libraries, you can use [YAML data set file](#yaml).\n\nSingle librairies are assumed to have high quality and a reasonable coverage. For example, you can provide PacBio CCS reads as a single-read library.\n\nNote, that you should not specify PacBio CLR, Sanger reads or additional contigs as single-read libraries, each of them has a separate [option](#inputdata). []()\n\n<a name=\"pacbio\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PacBio and Oxford Nanopore reads",
        "parent_header": [
          "Running SPAdes",
          "SPAdes input"
        ],
        "type": "Text_excerpt",
        "value": "SPAdes can take as an input an unlimited number of PacBio and Oxford Nanopore libraries.\n\nPacBio CLR and Oxford Nanopore reads are used for hybrid assemblies (e.g. with Illumina or IonTorrent). There is no need to pre-correct this kind of data. SPAdes will use PacBio CLR and Oxford Nanopore reads for gap closure and repeat resolution.\n\nFor PacBio you just need to have filtered subreads in FASTQ/FASTA format. Provide these filtered subreads using `--pacbio` option. Oxford Nanopore reads are provided with `--nanopore` option.\n\nPacBio CCS/Reads of Insert reads or pre-corrected (using third-party software) PacBio CLR / Oxford Nanopore reads can be simply provided as single reads to SPAdes.\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional contigs",
        "parent_header": [
          "Running SPAdes",
          "SPAdes input"
        ],
        "type": "Text_excerpt",
        "value": "In case you have contigs of the same genome generated by other assembler(s) and you wish to merge them into SPAdes assembly, you can specify additional contigs using `--trusted-contigs` or `--untrusted-contigs`. First option is used when high quality contigs are available. These contigs will be used for graph construction, gap closure and repeat resolution. Second option is used for less reliable contigs that may have more errors or contigs of unknown quality. These contigs will be used only for gap closure and repeat resolution. The number of additional contigs is unlimited.\n\nNote, that SPAdes does not perform assembly using genomes of closely-related species. Only contigs of the same genome should be specified.\n\n[]()\n<a name=\"sec3.2\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SPAdes command line options",
        "parent_header": [
          "Running SPAdes"
        ],
        "type": "Text_excerpt",
        "value": "To run SPAdes from the command line, type\n\n``` bash\n\n    spades.py [options] -o <output_dir>\n```\n\nNote that we assume that SPAdes installation directory is added to the `PATH` variable (provide full path to SPAdes executable otherwise: `<spades installation dir>/spades.py`). []()\n\n<a name=\"basicopt\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic options",
        "parent_header": [
          "Running SPAdes",
          "SPAdes command line options"
        ],
        "type": "Text_excerpt",
        "value": "`-o <output_dir> `\n\u00a0\u00a0\u00a0\u00a0Specify the output directory. Required option.\n\n[]()\n\n<a name=\"isolate\"></a>\n`--isolate ` \n\u00a0\u00a0\u00a0\u00a0This flag is highly recommended for high-coverage isolate and multi-cell data; improves the assembly quality and running time. \n    Not compatible with `--only-error-correction` or `--careful` options. \n\n<a name=\"sc\"></a>\n`--sc `\n\u00a0\u00a0\u00a0\u00a0This flag is required for MDA (single-cell) data.\n\n[]()\n\n<a name=\"meta\"></a>\n`--meta ` \u00a0 (same as `metaspades.py`)\n\u00a0\u00a0\u00a0\u00a0This flag is recommended when assembling metagenomic data sets (runs metaSPAdes, see [paper](https://genome.cshlp.org/content/27/5/824.short) for more details). Currently metaSPAdes supports only a **_single_** short-read library which has to be **_paired-end_** (we hope to remove this restriction soon). In addition, you can provide long reads (e.g. using `--pacbio` or `--nanopore` options), but hybrid assembly for metagenomes remains an experimental pipeline and optimal performance is not guaranteed. It does not support [careful mode](#correctoropt) (mismatch correction is not available). In addition, you cannot specify coverage cutoff for metaSPAdes. Note that metaSPAdes might be very sensitive to presence of the technical sequences remaining in the data (most notably adapter readthroughs), please run quality control and pre-process your data accordingly.\n\n[]()\n\n<a name=\"plasmid\"></a>\n`--plasmid ` \u00a0 (same as `plasmidspades.py`)\n\u00a0\u00a0\u00a0\u00a0This flag is required when assembling only plasmids from WGS data sets (runs plasmidSPAdes, see [paper](http://biorxiv.org/content/early/2016/04/20/048942) for the algorithm details). Note, that plasmidSPAdes is not compatible with [metaSPAdes](#meta) and [single-cell mode](#sc). Additionally, we do not recommend to run plasmidSPAdes on more than one library. See [section 3.6](#sec3.6) for plasmidSPAdes output details.\n\n[]()\n\n<a name=\"rna\"></a>\n`--rna ` \u00a0 (same as `rnaspades.py`)\n\u00a0\u00a0\u00a0\u00a0This flag should be used when assembling RNA-Seq data sets (runs rnaSPAdes). To learn more, see [rnaSPAdes manual](rnaspades_manual.html).\n    Not compatible with `--only-error-correction` or `--careful` options. \n\n`--iontorrent `\n\u00a0\u00a0\u00a0\u00a0This flag is required when assembling IonTorrent data. Allows BAM files as input. Carefully read [section 3.3](#sec3.3) before using this option.\n\n`--test`\n\u00a0\u00a0\u00a0\u00a0Runs SPAdes on the toy data set; see [section 2.4](#sec2.4).\n\n`-h` (or `--help`)\n\u00a0\u00a0\u00a0\u00a0Prints help.\n\n`-v` (or `--version`)\n\u00a0\u00a0\u00a0\u00a0Prints SPAdes version.\n\n[]()\n<a name=\"pipelineopt\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeline options",
        "parent_header": [
          "Running SPAdes",
          "SPAdes command line options"
        ],
        "type": "Text_excerpt",
        "value": "`--only-error-correction`\n\u00a0\u00a0\u00a0\u00a0Performs read error correction only.\n\n`--only-assembler`\n\u00a0\u00a0\u00a0\u00a0Runs assembly module only.\n\n[]()\n<a name=\"correctoropt\"></a>\n`--careful`\n\u00a0\u00a0\u00a0\u00a0Tries to reduce the number of mismatches and short indels. Also runs MismatchCorrector &ndash; a post processing tool, which uses [BWA](http://bio-bwa.sourceforge.net) tool (comes with SPAdes). This option is recommended only for assembly of small genomes. We strongly recommend not to use it for large and medium-size eukaryotic genomes. Note, that this options is is not supported by metaSPAdes and rnaSPAdes. \n\n`--continue`\n\u00a0\u00a0\u00a0\u00a0Continues SPAdes run from the specified output folder starting from the last available check-point. Check-points are made after:\n\n-   error correction module is finished\n-   iteration for each specified K value of assembly module is finished\n-   mismatch correction is finished for contigs or scaffolds\n\nFor example, if specified K values are 21, 33 and 55 and SPAdes was stopped or crashed during assembly stage with K = 55, you can run SPAdes with the `--continue` option specifying the same output directory. SPAdes will continue the run starting from the assembly stage with K = 55. Error correction module and iterations for K equal to 21 and 33 will not be run again. If `--continue` is set, the only allowed option is `-o <output_dir> `.\n\n`--restart-from <check_point>`\n\u00a0\u00a0\u00a0\u00a0Restart SPAdes run from the specified output folder starting from the specified check-point. Check-points are:\n\n-   `ec` &ndash; start from error correction\n-   `as` &ndash; restart assembly module from the first iteration\n-   `k<int>` &ndash; restart from the iteration with specified k values, e.g. k55 (not available in RNA-Seq mode)\n-   `mc` &ndash; restart mismatch correction\n-   `last` &ndash; restart from the last available check-point (similar to `--continue`)\n\nIn contrast to the `--continue` option, you can change some of the options when using `--restart-from`. You can change any option except: all basic options, all options for specifying input data (including `--dataset`), `--only-error-correction` option and `--only-assembler` option. For example, if you ran assembler with k values 21,33,55 without mismatch correction, you can add one more iteration with k=77 and run mismatch correction step by running SPAdes with following options:\n`--restart-from k55 -k 21,33,55,77 --mismatch-correction -o <previous_output_dir>`.\nSince all files will be overwritten, do not forget to copy your assembly from the previous run if you need it.\n\n`--disable-gzip-output`\n\u00a0\u00a0\u00a0\u00a0Forces read error correction module not to compress the corrected reads. If this options is not set, corrected reads will be in `*.fastq.gz` format.\n\n[]()\n\n<a name=\"inputdata\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Specifying single library (paired-end or single-read)",
        "parent_header": [
          "Running SPAdes",
          "SPAdes command line options",
          "Input data"
        ],
        "type": "Text_excerpt",
        "value": "`--12 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with interlaced forward and reverse paired-end reads.\n\n`-1 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with forward reads.\n\n`-2 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with reverse reads.\n\n`--merged <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with merged paired reads.\n\u00a0\u00a0\u00a0\u00a0If the properties of the library permit, overlapping paired-end reads can be merged using special software.\n\u00a0\u00a0\u00a0\u00a0Non-empty files with (remaining) unmerged left/right reads (separate or interlaced) must be provided for the same library for SPAdes to correctly detect the original read length.\n\n`-s <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with unpaired reads.\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Specifying multiple libraries",
        "parent_header": [
          "Running SPAdes",
          "SPAdes command line options",
          "Input data"
        ],
        "type": "Text_excerpt",
        "value": "**_Single-read libraries_**\n\n`--s<#> <file_name> `\n\u00a0\u00a0\u00a0\u00a0File for single-read library number `<#>` (`<#>` = 1,2,..,9). For example, for the first paired-end library the option is: `--s1 <file_name> `\n\u00a0\u00a0\u00a0\u00a0Do not use `-s` options for single-read libraries, since it specifies unpaired reads for the first paired-end library.\n\n**_Paired-end libraries_**\n\n`--pe<#>-12 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with interlaced reads for paired-end library number `<#>` (`<#>` = 1,2,..,9). For example, for the first single-read library the option is: `--pe1-12 <file_name> `\n\n`--pe<#>-1 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with left reads for paired-end library number `<#>` (`<#>` = 1,2,..,9).\n\n`--pe<#>-2 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with right reads for paired-end library number `<#>` (`<#>` = 1,2,..,9).\n\n`--pe<#>-m <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with merged reads from paired-end library number `<#>` (`<#>` = 1,2,..,9)\n\u00a0\u00a0\u00a0\u00a0If the properties of the library permit, paired reads can be merged using special software. \u00a0\u00a0\u00a0\u00a0Non-empty files with (remaining) unmerged left/right reads (separate or interlaced) must be provided for the same library for SPAdes to correctly detect the original read length.\n\n`--pe<#>-s <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with unpaired reads from paired-end library number `<#>` (`<#>` = 1,2,..,9)\n\u00a0\u00a0\u00a0\u00a0For example, paired reads can become unpaired during the error correction procedure.\n\n`--pe<#>-<or> `\n\u00a0\u00a0\u00a0\u00a0Orientation of reads for paired-end library number `<#>` (`<#>` = 1,2,..,9; `<or>` = \"fr\",\"rf\",\"ff\").\n\u00a0\u00a0\u00a0\u00a0The default orientation for paired-end libraries is forward-reverse (`--> <--`). For example, to specify reverse-forward orientation for the second paired-end library, you should use the flag: `--pe2-rf `\n    Should not be confused with FR and RF strand-specificity for RNA-Seq data (see <a href=\"rnaspades_manual.html#sec2.3\" target=\"_blank\">rnaSPAdes manual</a>). \n\n**_Mate-pair libraries_**\n\n`--mp<#>-12 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with interlaced reads for mate-pair library number `<#>` (`<#>` = 1,2,..,9).\n\n`--mp<#>-1 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with left reads for mate-pair library number `<#>` (`<#>` = 1,2,..,9).\n\n`--mp<#>-2 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with right reads for mate-pair library number `<#>` (`<#>` = 1,2,..,9).\n\n`--mp<#>-<or> `\n\u00a0\u00a0\u00a0\u00a0Orientation of reads for mate-pair library number `<#>` (`<#>` = 1,2,..,9; `<or>` = \"fr\",\"rf\",\"ff\").\n\u00a0\u00a0\u00a0\u00a0The default orientation for mate-pair libraries is reverse-forward (`<-- -->`). For example, to specify forward-forward orientation for the first mate-pair library, you should use the flag: `--mp1-ff `\n\n<a name=\"hqmp\"></a>\n**_High-quality mate-pair libraries_** (can be used for mate-pair only assembly)\n\n`--hqmp<#>-12 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with interlaced reads for high-quality mate-pair library number `<#>` (`<#>` = 1,2,..,9).\n\n`--hqmp<#>-1 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with left reads for high-quality mate-pair library number `<#>` (`<#>` = 1,2,..,9).\n\n`--hqmp<#>-2 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with right reads for high-quality mate-pair library number `<#>` (`<#>` = 1,2,..,9).\n\n`--hqmp<#>-s <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with unpaired reads from high-quality mate-pair library number `<#>` (`<#>` = 1,2,..,9)\n\n`--hqmp<#>-<or> `\n\u00a0\u00a0\u00a0\u00a0Orientation of reads for high-quality mate-pair library number `<#>` (`<#>` = 1,2,..,9; `<or>` = \"fr\",\"rf\",\"ff\").\n\u00a0\u00a0\u00a0\u00a0The default orientation for high-quality mate-pair libraries is forward-reverse (`--> <--`). For example, to specify reverse-forward orientation for the first high-quality mate-pair library, you should use the flag: `--hqmp1-rf `\n\n<a name=\"lxmp\"></a>\n**_Lucigen NxSeq\u00ae Long Mate Pair libraries_** (see [section 3.1](#sec3.1) for details)\n\n`--nxmate<#>-1 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with left reads for Lucigen NxSeq\u00ae Long Mate Pair library number `<#>` (`<#>` = 1,2,..,9).\n\n`--nxmate<#>-2 <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with right reads for Lucigen NxSeq\u00ae Long Mate Pair library number `<#>` (`<#>` = 1,2,..,9).\n\n**_Specifying data for hybrid assembly_**\n\n`--pacbio <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with PacBio CLR reads. For PacBio CCS reads use `-s` option. More information on PacBio reads is provided in [section 3.1](#pacbio).\n\n`--nanopore <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with Oxford Nanopore reads.\n\n`--sanger <file_name> `\n\u00a0\u00a0\u00a0\u00a0File with Sanger reads\n\n`--trusted-contigs <file_name> `\n\u00a0\u00a0\u00a0\u00a0Reliable contigs of the same genome, which are likely to have no misassemblies and small rate of other errors (e.g. mismatches and indels). This option is not intended for contigs of the related species.\n\n`--untrusted-contigs <file_name> `\n\u00a0\u00a0\u00a0\u00a0Contigs of the same genome, quality of which is average or unknown. Contigs of poor quality can be used but may introduce errors in the assembly. This option is also not intended for contigs of the related species.\n\n<a name=\"yaml\"></a>\n**_Specifying input data with YAML data set file (advanced)_**\n\nAn alternative way to specify an input data set for SPAdes is to create a [YAML](http://www.yaml.org/) data set file. By using a YAML file you can provide an unlimited number of paired-end, mate-pair and unpaired libraries. Basically, YAML data set file is a text file, in which input libraries are provided as a comma-separated list in square brackets. Each library is provided in braces as a comma-separated list of attributes. The following attributes are available:\n\n-   orientation (\"fr\", \"rf\", \"ff\")\n-   type (\"paired-end\", \"mate-pairs\", \"hq-mate-pairs\", \"single\", \"pacbio\", \"nanopore\", \"sanger\", \"trusted-contigs\", \"untrusted-contigs\")\n-   interlaced reads (comma-separated list of files with interlaced reads)\n-   left reads (comma-separated list of files with left reads)\n-   right reads (comma-separated list of files with right reads)\n-   single reads (comma-separated list of files with single reads or unpaired reads from paired library)\n-   merged reads (comma-separated list of files with [merged reads](#merged))\n\nTo properly specify a library you should provide its type and at least one file with reads. Orientation is an optional attribute. Its default value is \"fr\" (forward-reverse) for paired-end libraries and \"rf\" (reverse-forward) for mate-pair libraries.\n\nThe value for each attribute is given after a colon. Comma-separated lists of files should be given in square brackets. For each file you should provide its full path in double quotes. Make sure that files with right reads are given in the same order as corresponding files with left reads.\n\nFor example, if you have one paired-end library splitted into two pairs of files:\n\n``` bash\n\n    lib_pe1_left_1.fastq\n    lib_pe1_right_1.fastq\n    lib_pe1_left_2.fastq\n    lib_pe1_right_2.fastq\n```\n\none mate-pair library:\n\n``` bash\n\n    lib_mp1_left.fastq\n    lib_mp1_right.fastq\n```\n\nand PacBio CCS and CLR reads:\n\n``` bash\n\n    pacbio_ccs.fastq\n    pacbio_clr.fastq\n```\n\nYAML file should look like this:\n\n``` bash\n\n    [\n      {\n        orientation: \"fr\",\n        type: \"paired-end\",\n        right reads: [\n          \"/FULL_PATH_TO_DATASET/lib_pe1_right_1.fastq\",\n          \"/FULL_PATH_TO_DATASET/lib_pe1_right_2.fastq\" \n        ],\n        left reads: [\n          \"/FULL_PATH_TO_DATASET/lib_pe1_left_1.fastq\",\n          \"/FULL_PATH_TO_DATASET/lib_pe1_left_2.fastq\" \n        ]\n      },\n      {\n        orientation: \"rf\",\n        type: \"mate-pairs\",\n        right reads: [\n          \"/FULL_PATH_TO_DATASET/lib_mp1_right.fastq\" \n        ],\n        left reads: [\n          \"/FULL_PATH_TO_DATASET/lib_mp1_left.fastq\"\n        ]\n      },\n      {\n        type: \"single\",\n        single reads: [\n          \"/FULL_PATH_TO_DATASET/pacbio_ccs.fastq\" \n        ]\n      },\n      {\n        type: \"pacbio\",\n        single reads: [\n          \"/FULL_PATH_TO_DATASET/pacbio_clr.fastq\" \n        ]\n      }\n    ]\n```\n\nOnce you have created a YAML file save it with `.yaml` extension (e.g. as `my_data_set.yaml`) and run SPAdes using the `--dataset` option:\n`--dataset <your YAML file>`\nNotes:\n\n-   The `--dataset` option cannot be used with any other options for specifying input data.\n-   We recommend to nest all files with long reads of the same data type in a single library block.\n\n[]()\n\n<a name=\"advancedopt\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Advanced options",
        "parent_header": [
          "Running SPAdes",
          "SPAdes command line options"
        ],
        "type": "Text_excerpt",
        "value": "`-t <int>` (or `--threads <int>`)\n\u00a0\u00a0\u00a0\u00a0Number of threads. The default value is 16.\n\n`-m <int>` (or `--memory <int>`)\n\u00a0\u00a0\u00a0\u00a0Set memory limit in Gb. SPAdes terminates if it reaches this limit. The default value is 250 Gb. Actual amount of consumed RAM will be below this limit. Make sure this value is correct for the given machine. SPAdes uses the limit value to automatically determine the sizes of various buffers, etc.\n\n`--tmp-dir <dir_name>`\n\u00a0\u00a0\u00a0\u00a0Set directory for temporary files from read error correction. The default value is `<output_dir>/corrected/tmp`\n\n`-k <int,int,...>`\n\u00a0\u00a0\u00a0\u00a0Comma-separated list of k-mer sizes to be used (all values must be odd, less than 128 and listed in ascending order). If `--sc` is set the default values are 21,33,55. For multicell data sets K values are automatically selected using maximum read length ([see note for assembling long Illumina paired reads for details](#sec3.4)). To properly select K values for IonTorrent data read [section 3.3](#sec3.3).\n\n`--cov-cutoff <float>`\n\u00a0\u00a0\u00a0\u00a0Read coverage cutoff value. Must be a positive float value, or \"auto\", or \"off\". Default value is \"off\". When set to \"auto\" SPAdes automatically computes coverage threshold using conservative strategy. Note, that this option is not supported by metaSPAdes.\n\n`--phred-offset <33 or 64>`\n\u00a0\u00a0\u00a0\u00a0PHRED quality offset for the input reads, can be either 33 or 64. It will be auto-detected if it is not specified.\n\n\n<a name=\"examples\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assembling IonTorrent reads",
        "parent_header": [
          "Running SPAdes"
        ],
        "type": "Text_excerpt",
        "value": "Only FASTQ or BAM files are supported as input.\n\nThe selection of k-mer length is non-trivial for IonTorrent. If the dataset is more or less conventional (good coverage, not high GC, etc), then use our [recommendation for long reads](#sec3.4) (e.g. assemble using k-mer lengths 21,33,55,77,99,127). However, due to increased error rate some changes of k-mer lengths (e.g. selection of shorter ones) may be required. For example, if you ran SPAdes with k-mer lengths 21,33,55,77 and then decided to assemble the same data set using more iterations and larger values of K, you can run SPAdes once again specifying the same output folder and the following options: `--restart-from k77 -k 21,33,55,77,99,127 --mismatch-correction -o <previous_output_dir>`. Do not forget to copy contigs and scaffolds from the previous run. We are planning to tackle issue of selecting k-mer lengths for IonTorrent reads in next versions.\n\nYou may need no error correction for Hi-Q enzyme at all. However, we suggest trying to assemble your data with and without error correction and select the best variant.\n\nFor non-trivial datasets (e.g. with high GC, low or uneven coverage) we suggest to enable single-cell mode (setting `--sc` option) and use k-mer lengths of 21,33,55. []()\n\n<a name=\"sec3.4\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assembling long Illumina paired reads (2x150 and 2x250)",
        "parent_header": [
          "Running SPAdes"
        ],
        "type": "Text_excerpt",
        "value": "Recent advances in DNA sequencing technology have led to a rapid increase in read length. Nowadays, it is a common situation to have a data set consisting of 2x150 or 2x250 paired-end reads produced by Illumina MiSeq or HiSeq2500. However, the use of longer reads alone will not automatically improve assembly quality. An assembler that can properly take advantage of them is needed.\n\nSPAdes use of iterative k-mer lengths allows benefiting from the full potential of the long paired-end reads. Currently one has to set the assembler options up manually, but we plan to incorporate automatic calculation of necessary options soon.\n\nPlease note that in addition to the read length, the insert length also matters a lot. It is not recommended to sequence a 300bp fragment with a pair of 250bp reads. We suggest using 350-500 bp fragments with 2x150 reads and 550-700 bp fragments with 2x250 reads.\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SPAdes output",
        "parent_header": [
          "Running SPAdes"
        ],
        "type": "Text_excerpt",
        "value": "SPAdes stores all output files in `<output_dir> `, which is set by the user.\n\n-   `<output_dir>/corrected/` directory contains reads corrected by BayesHammer in `*.fastq.gz` files; if compression is disabled, reads are stored in uncompressed `*.fastq` files\n-   `<output_dir>/scaffolds.fasta` contains resulting scaffolds (recommended for use as resulting sequences)\n-   `<output_dir>/contigs.fasta` contains resulting contigs\n-   `<output_dir>/assembly_graph.gfa` contains SPAdes assembly graph and scaffolds paths in [GFA 1.0 format](https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md)\n-   `<output_dir>/assembly_graph.fastg` contains SPAdes assembly graph in [FASTG format](http://fastg.sourceforge.net/FASTG_Spec_v1.00.pdf)\n-   `<output_dir>/contigs.paths` contains paths in the assembly graph corresponding to contigs.fasta (see details below)\n-   `<output_dir>/scaffolds.paths` contains paths in the assembly graph corresponding to scaffolds.fasta (see details below)\n\nContigs/scaffolds names in SPAdes output FASTA files have the following format:\n`>NODE_3_length_237403_cov_243.207`\nHere `3` is the number of the contig/scaffold, `237403` is the sequence length in nucleotides and `243.207` is the k-mer coverage for the last (largest) k value used. Note that the k-mer coverage is always lower than the read (per-base) coverage.\n\nIn general, SPAdes uses two techniques for joining contigs into scaffolds. First one relies on read pairs and tries to estimate the size of the gap separating contigs. The second one relies on the assembly graph: e.g. if two contigs are separated by a complex tandem repeat, that cannot be resolved exactly, contigs are joined into scaffold with a fixed gap size of 100 bp. Contigs produced by SPAdes do not contain N symbols.\n\nTo view FASTG and GFA files we recommend to use [Bandage visualization tool](http://rrwick.github.io/Bandage/). Note that sequences stored in `assembly_graph.fastg` correspond to contigs before repeat resolution (edges of the assembly graph). Paths corresponding to contigs after repeat resolution (scaffolding) are stored in `contigs.paths` (`scaffolds.paths`) in the format accepted by Bandage (see [Bandage wiki](https://github.com/rrwick/Bandage/wiki/Graph-paths) for details). The example is given below.\n\nLet the contig with the name `NODE_5_length_100000_cov_215.651` consist of the following edges of the assembly graph:\n\n``` plain\n    >EDGE_2_length_33280_cov_199.702\n    >EDGE_5_length_84_cov_321.414\"\n    >EDGE_3_length_111_cov_175.304\n    >EDGE_5_length_84_cov_321.414\"\n    >EDGE_4_length_66661_cov_223.548\n```\n\nThen, `contigs.paths` will contain the following record:\n\n``` plain\n    NODE_5_length_100000_cov_215.651\n    2+,5-,3+,5-,4+\n```\n\n\nSince the current version of Bandage does not accept paths with gaps, paths corresponding contigs/scaffolds jumping over a gap in the assembly graph are splitted by semicolon at the gap positions. For example, the following record\n\n``` plain\n    NODE_3_length_237403_cov_243.207\n    21-,17-,15+,17-,16+;\n    31+,23-,22+,23-,4-\n```\n\nstates that `NODE_3_length_237403_cov_243.207` corresponds to the path with 10 edges, but jumps over a gap between edges `EDGE_16_length_21503_cov_482.709` and `EDGE_31_length_140767_cov_220.239`.\n\nThe full list of `<output_dir>` content is presented below:\n\n- scaffolds.fasta &ndash; resulting scaffolds (recommended for use as resulting sequences)\n- contigs.fasta &ndash; resulting contigs\n- assembly_graph.fastg &ndash; assembly graph\n- contigs.paths &ndash; contigs paths in the assembly graph\n- scaffolds.paths &ndash; scaffolds paths in the assembly graph\n- before_rr.fasta &ndash; contigs before repeat resolution\n\n- corrected/ &ndash; files from read error correction\n    - configs/ &ndash; configuration files for read error correction\n    - corrected.yaml &ndash; internal configuration file\n    - Output files with corrected reads\n\n- params.txt &ndash; information about SPAdes parameters in this run\n- spades.log &ndash; SPAdes log\n- dataset.info &ndash; internal configuration file\n- input_dataset.yaml &ndash; internal YAML data set file\n- K<##>/ &ndash; directory containing intermediate files from the run with K=<##>. These files should not be used as assembly results; use resulting contigs/scaffolds in files mentioned above.\n\n\nSPAdes will overwrite these files and directories if they exist in the specified `<output_dir>`. []()\n\n<a name=\"sec3.6\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "plasmidSPAdes output",
        "parent_header": [
          "Running SPAdes"
        ],
        "type": "Text_excerpt",
        "value": "plasmidSPAdes outputs only DNA sequences from putative plasmids. Output file names and formats remain the same as in SPAdes (see [previous](#sec3.5) section), with the following difference. For all contig names in `contigs.fasta`, `scaffolds.fasta` and `assembly_graph.fastg` we append suffix `_component_X`, where `X` is the id of the putative plasmid, which the contig belongs to. Note that plasmidSPAdes may not be able to separate similar plasmids and thus their contigs may appear with the same id. []()\n\n<a name=\"sec3.7\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assembly evaluation",
        "parent_header": [
          "Running SPAdes"
        ],
        "type": "Text_excerpt",
        "value": "[QUAST](http://cab.spbu.ru/software/quast/) may be used to generate summary statistics (N50, maximum contig length, GC %, \\# genes found in a reference list or with built-in gene finding tools, etc.) for a single assembly. It may also be used to compare statistics for multiple assemblies of the same data set (e.g., SPAdes run with different parameters, or several different assemblers).\n[]()\n\n\n<a name=\"sec4\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:27:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Feedback and bug reports",
        "type": "Text_excerpt",
        "value": "Your comments, bug reports, and suggestions are very welcomed. They will help us to further improve SPAdes. If you have any troubles running SPAdes, please send us `params.txt` and `spades.log` from the directory `<output_dir>`.\n\nYou can leave your comments and bug reports at [our GitHub repository tracker](https://github.com/ablab/spades/issues) or sent it via e-mail: <spades.support@cab.spbu.ru>.\n\n"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Running SPAdes",
          "SPAdes command line options"
        ],
        "type": "Text_excerpt",
        "value": "To test the toy data set, you can also run the following command from the SPAdes `bin` directory:\n\n``` bash\n\n    spades.py --pe1-1 ../share/spades/test_dataset/ecoli_1K_1.fq.gz \\\n    --pe1-2 ../share/spades/test_dataset/ecoli_1K_2.fq.gz -o spades_test\n```\n\nIf you have your library separated into several pairs of files, for example:\n\n``` bash\n\n    lib1_forward_1.fastq\n    lib1_reverse_1.fastq\n    lib1_forward_2.fastq\n    lib1_reverse_2.fastq\n```\n\nmake sure that corresponding files are given in the same order:\n\n``` bash\n\n    spades.py --pe1-1 lib1_forward_1.fastq --pe1-2 lib1_reverse_1.fastq \\\n    --pe1-1 lib1_forward_2.fastq --pe1-2 lib1_reverse_2.fastq \\\n    -o spades_output\n```\n\nFiles with interlacing paired-end reads or files with unpaired reads can be specified in any order with one file per option, for example:\n\n``` bash\n\n    spades.py --pe1-12 lib1_1.fastq --pe1-12 lib1_2.fastq \\\n    --pe1-s lib1_unpaired_1.fastq --pe1-s lib1_unpaired_2.fastq \\\n    -o spades_output    \n```\n\nIf you have several paired-end and mate-pair reads, for example:\n\npaired-end library 1\n\n``` bash\n\n    lib_pe1_left.fastq\n    lib_pe1_right.fastq\n```\n\nmate-pair library 1\n\n``` bash\n\n    lib_mp1_left.fastq\n    lib_mp1_right.fastq\n```\n\nmate-pair library 2\n\n``` bash\n\n    lib_mp2_left.fastq\n    lib_mp2_right.fastq\n```\n\nmake sure that files corresponding to each library are grouped together:\n\n``` bash\n\n    spades.py --pe1-1 lib_pe1_left.fastq --pe1-2 lib_pe1_right.fastq \\\n    --mp1-1 lib_mp1_left.fastq --mp1-2 lib_mp1_right.fastq \\\n    --mp2-1 lib_mp2_left.fastq --mp2-2 lib_mp2_right.fastq \\\n    -o spades_output\n```\n\nIf you have IonTorrent unpaired reads, PacBio CLR and additional reliable contigs:\n\n``` bash\n\n    it_reads.fastq\n    pacbio_clr.fastq\n    contigs.fasta\n```\n\nrun SPAdes with the following command:\n\n``` bash\n\n    spades.py --iontorrent -s it_reads.fastq \\\n    --pacbio pacbio_clr.fastq --trusted-contigs contigs.fastq \\\n    -o spades_output\n```\n\nIf a single-read library is splitted into several files:\n\n``` bash\n\n    unpaired1_1.fastq\n    unpaired1_2.fastq\n    unpaired1_3.fasta\n```\n\nspecify them as one library:\n\n``` bash\n\n    spades.py --s1 unpaired1_1.fastq \\\n    --s1 unpaired1_2.fastq --s1 unpaired1_3.fastq \\\n    -o spades_output\n```\n\nAll options for specifying input data can be mixed if needed, but make sure that files for each library are grouped and files with left and right paired reads are listed in the same order. []()\n\n<a name=\"sec3.3\"></a>"
      },
      "source": "https://raw.githubusercontent.com/1dayac/cloudrnaSPAdes-release/main/README.md",
      "technique": "header_analysis"
    }
  ]
}