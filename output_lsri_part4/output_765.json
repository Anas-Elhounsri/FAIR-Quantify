{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "riboSeed Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\nNicholas R Waters, Florence Abram, Fiona Brennan, Ashleigh Holmes, Leighton Pritchard;\nriboSeed: leveraging prokaryotic genomic architecture to assemble across ribosomal regions,\nNucleic Acids Research, gky212, https://doi.org/10.1093/nar/gky212\n```\n\nInterested in the figures/tables/analyses in the manuscript?  See the [README](https://github.com/nickp60/riboSeed/blob/master/scripts/README.md) in the `scripts` dir.\n\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference Selection",
        "parent_header": [
          "riboSeed Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "`riboSeed` requires an appropriate reference genome for the *de fere novo* assembly.  We recommend using [PlentyOfBugs.](http://github.com/nickp60/plentyofbugs), which simplifies this process by comparing a preliminary assembly of your isolate to existing reference genomes.\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nickp60/riboSeed"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "riboSeed Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Pull requests are more than welcome!\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "X server",
        "parent_header": [
          "riboSeed Pipeline",
          "Contributing",
          "Known Bugs"
        ],
        "type": "Text_excerpt",
        "value": "You may run into issues where you get an error about \"Unable to connect to X server: None\" or localhost:N. Sorry about that; any tips would be useful;  a quick glance at the commit history will show I have spent much time trying to resolve it, without any luck.  If you do run into this, try the following:\n  - connect to the machine with an X session (`ssh -X hostname`)\n  - avoid using `gnu screen` if possible, but if you do need to use it, start the `screen` session after ensuring you have a `$DISPLAY` availible through starting the host session with `-X`\n\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pysam on MacOS",
        "parent_header": [
          "riboSeed Pipeline",
          "Contributing",
          "Known Bugs"
        ],
        "type": "Text_excerpt",
        "value": "If you are on MacOS, you may run into an issue with Pysam.\n```\nImportError: dlopen(/Users/nicholas/miniconda3/envs/ribo/lib/python3.5/site-packages/pysam/libchtslib.cpython-35m-darwin.so, 2): Library not loaded: @rpath/liblzma.5.dylib\n  Referenced from: /Users/nicholas/miniconda3/envs/ribo/lib/libhts.2.dylib\n  Reason: Incompatible library version: libhts.2.dylib requires version 8.0.0 or later, but liblzma.5.dylib provides version 6.0.0\n```\nThe simplest solution is to pip instal pysam, forcing the original to be overwritten:\n\n```\npip install pysam -U\n```\n\nIn cases where this does not work, try installing by first making a conda env with the `environment.yaml` file, and then installing riboSeed from pip.\n```\nconda env create -y environment.yaml\nsource activate ribo\npip install riboSeed\n```\n\nIf you run into malloc issues similar to https://github.com/ablab/spades/issues/9, we recommend running in a VM.\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "smalt scoring",
        "parent_header": [
          "riboSeed Pipeline",
          "Contributing",
          "Known Bugs"
        ],
        "type": "Text_excerpt",
        "value": "Submitting `--smalt_scoring` with vastly different scoring schemes usually causes an error.\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-09-19T15:10:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-04T05:21:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pipeline for using ribosomal flanking regions to improve bacterial genome assembly"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "riboSeed Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "riboSeed is an supplemental assembly refinement method to try to address the issue of multiple ribosomal regions in a genome, as these create repeats unresolvable by short read sequencing.  It takes advantage of the fact that while each region is identical, the regions flanking are unique, and therefore can potentially be used to seed an assembly in such a way that rDNA regions are bridged.\n\nFor a description of each submodule, follow the links below to the readthedocs manual page.\n\nPreprocessing\n- [`scan` | annotate reference genome rRNAs](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#scan)\n- [`select` | identify rDNA operons](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#select)\n\n*De fere novo assembly*\n- [`seed` | perform interative subassembly](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#seed)\n\nVisualizations/assessment\n- [`snag` | extract and visualize rDNA regions](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#snag)\n- [`stack` | calculate coverage at rDNAs in final assembly](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#stack)\n- [`sketch` | plot the relative rDNA regions in a handful of genomes](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#sketch)\n- [`swap` | switch questionable contigs ](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#swap)\n- [`score` | automated scoring for rDNA assemblies](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#score)\n- [`spec` | speculate the nunber of rDNA operons based on assembly graph](http://riboseed.readthedocs.io/en/latest/PIPELINE.html#spec)\n\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nickp60/riboSeed/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://riboseed.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nickp60/riboSeed/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nickp60/riboSeed/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nickp60/riboSeed"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "riboSeed Pipeline"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/splitMultifasta.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/klebSimulation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/make_entropy_plots_GAGEB.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/coliSimulation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/run_ANI.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/riboBatch.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/blob_cereus.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/runEntropyComparisons.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/runDegenerate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/select_ref_by_ANI/mini_assembly.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/scripts/select_ref_by_ANI/get_n_random_complete_genomes.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/manuscript_results/simulated_genome/compareColiKleb.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/manuscript_results/simulated_reads_coli/fetch_quast.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/68617544"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://landscape.io/github/nickp60/riboSeed/master/landscape.svg?style=flat"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Docker (recommended!)",
        "parent_header": [
          "riboSeed Pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "riboSeed can be run as a docker container, as follows\n```\ndocker run -it --rm  -v $PWD:/data/ nickp60/riboseed:latest run -r  /data/<path to reference file>  -S1 /data/<path to reads> -o /data/<path to desired output>\n# for instance,\ndocker run -it --rm -v $PWD:/data/  nickp60/riboseed:0.4.90 run -r  /data/tests/references/contigs.fasta  -S1 /data/tests/references/toy_reads1.fq -o /data/dockertest/\n```\n`-it` helps deal with managing messages between the container and the host, and `--rm` deletes the container as it exits.  `-v` sets volumes to allow a bridge between the container and the host.\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From conda",
        "parent_header": [
          "riboSeed Pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Conda is a cross-platform, cross-language package management system.  If you haven't already installed conda, follow [these instructions here](https://bioconda.github.io/user/install.html), and install the python3 version.  Once you have that done, install riboSeed and all of its dependencies with one command:\n\n```\nconda create --name ribo_env riboseed\nsource activate ribo_env\n```\n\n(Note the lowercase \"s\")\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From GitHub",
        "parent_header": [
          "riboSeed Pipeline",
          "Installation",
          "From conda"
        ],
        "type": "Text_excerpt",
        "value": "You can also clone this repository, and run `python setup.py install`.\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nickp60/riboSeed/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2016 nickp60\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/icon/logo_1.png"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "riboSeed"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "nickp60"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 698145,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 191819,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 58892,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 37507,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 6770,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 6705,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1116,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nickp60",
          "type": "User"
        },
        "date_created": "2018-01-30T17:27:57Z",
        "date_published": "2018-02-05T16:03:07Z",
        "html_url": "https://github.com/nickp60/riboSeed/releases/tag/0.4.49",
        "name": "bumping for zenodo integration, attempt 3",
        "release_id": 9537741,
        "tag": "0.4.49",
        "tarball_url": "https://api.github.com/repos/nickp60/riboSeed/tarball/0.4.49",
        "type": "Release",
        "url": "https://api.github.com/repos/nickp60/riboSeed/releases/9537741",
        "value": "https://api.github.com/repos/nickp60/riboSeed/releases/9537741",
        "zipball_url": "https://api.github.com/repos/nickp60/riboSeed/zipball/0.4.49"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nickp60",
          "type": "User"
        },
        "date_created": "2018-01-30T17:27:57Z",
        "date_published": "2018-02-05T15:55:57Z",
        "description": "Attempting to get Zenodo DOI assignment working.  It seems releases triggered from the commandline don't ping Zenodo properly. ",
        "html_url": "https://github.com/nickp60/riboSeed/releases/tag/0.4.48",
        "name": "bumping for zenodo integration",
        "release_id": 9537625,
        "tag": "0.4.48",
        "tarball_url": "https://api.github.com/repos/nickp60/riboSeed/tarball/0.4.48",
        "type": "Release",
        "url": "https://api.github.com/repos/nickp60/riboSeed/releases/9537625",
        "value": "https://api.github.com/repos/nickp60/riboSeed/releases/9537625",
        "zipball_url": "https://api.github.com/repos/nickp60/riboSeed/zipball/0.4.48"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "riboSeed Pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Python requirements can be found in the `requirements.txt` file.\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "External Requirements",
        "parent_header": [
          "riboSeed Pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "External requirements can be found in the `environment.yml`, and can be used to create a conda environment: (`conda env create -f environment.yml`)\n\nNOTE: barrnap has certain Perl requirements that may not be included on your machine. Ensure barrnap runs fine before trying `ribo snag`.  Or try [python barrnap](https://github.com/nickp60/barrnap/).\n\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Suggested Running",
        "parent_header": [
          "riboSeed Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "The `ribo run` command orchestrates the most commonly used sequence of calls to `scan`, `select`, `seed`, `sketch`, `score`, and so on.\n\n```\nusage: ribo run [-r reference.fasta] -c config_file [-o /output/dir/]\n                [-n experiment_name] [-K {bac,euk,arc,mito}] [-S 16S:23S:5S]\n                [--clusters str] [-C str] [-F reads_F.fq] [-R reads_R.fq]\n                [-S1 reads_S.fq] [-s int]\n                [--ref_as_contig {ignore,infer,trusted,untrusted}] [--linear]\n                [-j] [--score] [-l int] [-k 21,33,55,77,99,127]\n                [--force_kmers] [-p 21,33,55,77,99] [-d int] [--clean_temps]\n                [-i int] [-v {1,2,3,4,5}] [--cores int] [--memory int]\n                [--damn_the_torpedos] [-t {1,2,4}] [-z] [-h] [--version]\n\nRun the riboSeed pipeline of scan, select, seed, sketch, and score. Uses a\nconfig file to wrangle all the args not available via these commandline args.\nThis can either be run by providing (as minimum) a reference, some reads, and\nan output directory; or, if you have a completed config file, you can run it\nwith just that.\n\noptional arguments:\n  -r reference.fasta, --reference_fasta reference.fasta\n                        path to a (multi)fasta or a directory containing one\n                        or more chromosomal sequences in fasta format.\n                        Required, unless using a config file\n  -c config_file, --config config_file\n                        config file; if none given, create one; default:\n                        /home/nicholas/GitHub/riboSeed\n  -o /output/dir/, --output /output/dir/\n                        output directory; default: /home/nicholas/GitHub/riboS\n                        eed/2018-06-14T1353_riboSeed_pipeline_results/\n  -n experiment_name, --experiment_name experiment_name\n                        prefix for results files; default: inferred\n  -K {bac,euk,arc,mito}, --Kingdom {bac,euk,arc,mito}\n                        whether to look for eukaryotic, archaeal, or bacterial\n                        rDNA; default: bac\n  -S 16S:23S:5S, --specific_features 16S:23S:5S\n                        colon:separated -- specific features; default:\n                        16S:23S:5S\n  --clusters str        number of rDNA clusters;if submitting multiple\n                        records, must be a colon:separated list whose length\n                        matches number of genbank records. Default is inferred\n                        from specific feature with fewest hits\n  -C str, --cluster_file str\n                        clustered_loci file output from riboSelect;this is\n                        created by default from run_riboSeed, but if you don't\n                        agree with the operon structure predicted by\n                        riboSelect, you can use your alternate clustered_loci\n                        file. default: None\n  -F reads_F.fq, --fastq1 reads_F.fq\n                        path to forward fastq file, can be compressed\n  -R reads_R.fq, --fastq2 reads_R.fq\n                        path to reverse fastq file, can be compressed\n  -S1 reads_S.fq, --fastq_single1 reads_S.fq\n                        path to single fastq file\n  -s int, --score_min int\n                        If using smalt, this sets the '-m' param; default with\n                        smalt is inferred from read length. If using BWA,\n                        reads mapping with ASscore lower than this will be\n                        rejected; default with BWA is half of read length\n  --ref_as_contig {ignore,infer,trusted,untrusted}\n                        ignore: reference will not be used in subassembly.\n                        trusted: SPAdes will use the seed sequences as a\n                        --trusted-contig; untrusted: SPAdes will treat as\n                        --untrusted-contig. infer: if mapping percentage over\n                        80%, 'trusted'; else 'untrusted'. See SPAdes docs for\n                        details. default: infer\n  --linear              if genome is known to not be circular and a region of\n                        interest (including flanking bits) extends past\n                        chromosome end, this extends the seqence past\n                        chromosome origin forward by --padding; default: False\n  --subassembler {spades,skesa}\n                        assembler to use for subassembly scheme. SPAdes is\n                        used by default, but Skesa is a new addition that\n                        seems to work for subassembly and is faster\n   -j, --just_seed       Don't do an assembly, just generate the long read\n                        'seeds'; default: False\n  --score               run riboScore too! default: False\n  -l int, --flanking_length int\n                        length of flanking regions, in bp; default: 1000\n  -k 21,33,55,77,99,127, --kmers 21,33,55,77,99,127\n                        kmers used for final assembly, separated by commas\n                        such as21,33,55,77,99,127. Can be set to 'auto', where\n                        SPAdes chooses. We ensure kmers are not too big or too\n                        close to read length; default: 21,33,55,77,99,127\n  --force_kmers         skip checking to see if kmerchoice is appropriate to\n                        read length. Sometimes kmers longer than reads can\n                        help in the final assembly, as the long reads\n                        generated by riboSeed contain kmers longer than the\n                        read length\n  -p 21,33,55,77,99, --pre_kmers 21,33,55,77,99\n                        kmers used during seeding assemblies, separated bt\n                        commas; default: 21,33,55,77,99\n  -d int, --min_flank_depth int\n                        a subassembly won't be performed if this minimum depth\n                        is not achieved on both the 3' and5' end of the\n                        pseudocontig. default: 0\n  --clean_temps         if --clean_temps, mapping files will be removed once\n                        they are no no longer needed during the mapping\n                        iterations to save space; default: False\n  -i int, --iterations int\n                        if iterations>1, multiple seedings will occur after\n                        subassembly of seed regions; if setting --target_len,\n                        seedings will continue until --iterations are\n                        completed or --target_len is matched or exceeded;\n                        default: 3\n  -v {1,2,3,4,5}, --verbosity {1,2,3,4,5}\n                        Logger writes debug to file in output dir; this sets\n                        verbosity level sent to stderr. 1 = debug(), 2 =\n                        info(), 3 = warning(), 4 = error() and 5 = critical();\n                        default: 2\n  --cores int           cores used; default: None\n  --memory int          cores for multiprocessing; default: 8\n  --damn_the_torpedos   Ignore certain errors, full speed ahead!\n  -t {1,2,4}, --threads {1,2,4}\n                        if your cores are hyperthreaded, set number threads to\n                        the number of threads per processer.If unsure, see\n                        'cat /proc/cpuinfo' under 'cpu cores', or 'lscpu'\n                        under 'Thread(s) per core'.: 1\n  -z, --serialize       if --serialize, runs seeding and assembly without\n                        multiprocessing. We recommend this for machines with\n                        less than 8GB RAM: False\n  -h, --help            Displays this help message\n  --version             show program's version number and exit\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Tests",
        "parent_header": [
          "riboSeed Pipeline",
          "Contributing"
        ],
        "type": "Text_excerpt",
        "value": "The tests for the module can be found under the `tests` directory. I run them with the unittests module.  The tests assume the installation of all the recommended tools.\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:42:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Before We Start",
        "parent_header": [
          "riboSeed Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Please back up any and all data used, and work within a virtualenv.\n\nGenome assembly gobbles RAM. If you, like me, are working on a 4gb RAM lappy, don't run riboSeed in parallel and instead run in series by using the `--serialize` option.  That should prevent you from running out of RAM during the final SPAdes calls.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/nickp60/riboSeed/master/README.md",
      "technique": "header_analysis"
    }
  ]
}