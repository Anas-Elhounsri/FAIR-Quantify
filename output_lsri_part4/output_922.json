{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**"
        ],
        "type": "Text_excerpt",
        "value": "Please, use the following citation, if you used MGERT in your research:\n\nGuliaev AS, Semyenova SK. MGERT: a pipeline to retrieve coding sequences of mobile genetic elements from genome assemblies. Mob DNA. 2019;10(1):21. doi:10.1186/s13100-019-0163-6\n\nShortened URL to access the full-text article: https://rdcu.be/bCnQx"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/andrewgull/MGERT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-02-26T09:08:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-11T22:17:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mobile Genetic Elements Retrieving Tool"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Short description",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**"
        ],
        "type": "Text_excerpt",
        "value": "The pipeline includes five steps:\n1. *de novo* search for all MGEs in the genome assembly with *RepeatModeler*. \nThis step results in a set of consensus sequences for every MGE class/family found (in *fasta* format).\nNote, that the classification of the consensuses is made by the RECON package (as the part of RepeatModeler pipeline), and you can retrieve only those MGEs that were classified.\n2. collecting particular consensuses and search for their matches in the genome assembly (using *RepeatMasker*).\n3. excising of found matches from the genome assembly according to coordinates in the annotation table from previous step.\n4. search only for those sequences that contain Conserved Domains (CD), Open Reading Frame (ORF) and CD within this ORF (via successive runs of RPS-blast and ORFinder)\n5. adding flanking regions to each sequence with the CD-encoding ORF.\n\nYou may run the pipeline from any of these steps, for instance, if you have your own MGEs library to search in the genome.\nDuring the steps 3 & 4 the pipeline creates several diagnostic plots and calculates descriptive statistics on the found sequences (number, mean length, sd, median length, 25th and 75th length percentiles).\n\n\n<a name=\"flowchart-of-mgert-pipeline\"></a>"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output description",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**"
        ],
        "type": "Text_excerpt",
        "value": "MGERT outputs the following files:\n\n 1. **rmod** step:\n     - *RepModOut* directory with all the files produced by the RepeatModeler\n     - *consensi.fa.classified* - a fasta file with all the TEs' consensus sequences found by the RepeatModeler\n     - *All_TE_consensi.fa* - a fasta file with consensus sequences of specified TE (**input for the following step**)\n     - *Unknown_consensi.fa.classified* - fasta file with unclassified consensus sequences\n     - *Unknown_classified.fa* - a fasta file with unknown consensus sequences classified by the CENSOR software\n 2. **consensus** step:\n     - *TE_genome.fna.RMout.txt* - stdout of RepeatMasker\n     - *TE_genome.fna.masked* - genome.fna with masked TE hits\n     - *TE_genome.fna.out* - a table with TE hits coordinates (**input for the following step**)\n     - *TE_genome.fna.ori.out* - a table with TE hits coordinates without RepeatMasker merging (**alternative input for the following step**)\n     - *TE_genome.fna.out.gff* - an annotation of the TE hits in GFF format\n     - *TE_genome.fna.tbl* - a table with number of bases masked by RepeatMasker (TE abundance percentage)\n     - *genome.fna.fai* - genome index\n     - *TE_genome.fna.out.bed* -  a table with TE hits coordinates in BED format (**alternative input for the following step**)\n 3. **coordinates** step:\n     - *TE_excised_matchesX.fa* - a fasta with TE hits retrieved from the genome. *X* stands for *--merge* value (**input for the following step**)\n     - *TE_excised_matchesX.png* - a histogram of length distribution of corresponding sequences\n     - *TE_excised_matchesX.stats* - a table with descriptive statistics\n 4. **orfs** step:\n     - *TE_matches_with_hits_eX.fa* - fasta file with those matches (from previous step) that contain CD hits. *X* stands for e-value cut off\n     - *TE_matches_with_hits_eX.png* - a histogram of length distribution of corresponding sequences\n     - *TE_matches_with_hits_eX.stats* - a table with descriptive statistics\n     - *TE_cdsX_with_CD_eZ.fa* - a fasta file with TE's ORFs of min length *X* and e-value cut off *Z* (**input for the following step**)\n     - *TE_cdsX_with_CD_eZ.faa* - a fasta file with TE's translated ORFs of min length *X* and e-value cut off *Z*\n     - *TE_cdsX_with_CD_eZ.png* - a histogram of length distribution of corresponding nucleotide sequences\n     - *TE_cdsX_with_CD_eZ.stats* - a table with descriptive statistics\n 5. **flanks** step (optional):\n     - *TE_cdsX_with_CD_eZ_extended_LaRb.fa* - a fasta file with TE's ORFs of min length *X* and e-value cut off *Z*, left flanking sequence of length *a* \n     and right flanking sequence of length *b*\n \n\n\n\n<a name=\"list-of-arguments\"></a>"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9876611992882969,
      "result": {
        "original_header": "**Mobile Genetic Elements Retrieving Tool** - **MGERT**",
        "type": "Text_excerpt",
        "value": "*MGERT* is a computational pipeline for easy retrieving of MGE's coding sequences of a particular family from genome assemblies.\n*MGERT* utilizes several established bioinformatic tools combined into single pipeline which hides different technical quirks from an inexperienced user. \nTable of contents:\n  * [Requirements](#requirements)\n  * [Short description](#short-description)\n  * [Flowchart of MGERT pipeline](#flowchart-of-mgert-pipeline)\n  * [Installation](#installation)\n  * [Usage examples](#usage-examples)\n    + [Preparation steps](#preparation-steps)\n    + [Full pipeline run starting from *de novo* MGE search using RepeatModeler](#full-pipeline-run-starting-from--de-novo--mge-search-using-repeatmodeler)\n    + [Pipeline run from an arbitrary step](#pipeline-run-from-an-arbitrary-step)\n    + [Define the stage after which the pipeline should stop.](#define-the-stage-after-which-the-pipeline-should-stop)\n  * [Output description](#output-description)\n  * [List of arguments](#list-of-arguments)\n    + [Required arguments](#required-arguments)\n    + [Configuration arguments](#configuration-arguments)\n    + [Optional arguments](#optional-arguments)\n  * [Citation](#citation) \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9650036143773845,
      "result": {
        "original_header": "Required arguments",
        "type": "Text_excerpt",
        "value": "`-a, --assembly` - specify a genome assembly file (e.g. genome.fa.gz); this argument is mandatory on all stages since it\nindicates where the working directory is. \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8880452857436111,
      "result": {
        "original_header": "Optional arguments",
        "type": "Text_excerpt",
        "value": "`-cd, --cd-table` - specify a path to a comma or tab delimited table of SMP files and their grouping (e.g. domains.csv). CSV extension is mandatory. \n`-c, --start-codon` - ORF start codon to use. 0 = 'ATG' only; 1 = 'ATG' and alternative initiation codons; 2 = any sense codon; Default 0. \n`-l, --min-length` - set minimum length of ORF to be reported, default 1000 bp. \n`-L, --rm-library` - specify a path to a library for RepeatMasker (in FASTA format). Use with `-f consensus` only. \nIf consensus library is not specified, it will be compiled from RepeatModeler output automatically. \n`-rm, --rm-table` - specify repeat masker table to use (with `*_rm.out` or `*.bed` extension). Use with `-f coords` option only. \n`-sq, --sequence` - provide a path to a file of sequences where to look for conservative domains. Use with `-f orf` option only. \n`-v, --version` - show program's version number and exit. \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://bedtools.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/andrewgull/MGERT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/andrewgull/MGERT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "andrewgull/MGERT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/andrewgull/MGERT/master/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/andrewgull/MGERT/master/figures/flowchart.png"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/andrewgull/MGERT/master/figures/hist.png"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**"
        ],
        "type": "Text_excerpt",
        "value": "Clone the repository and run installation script (requires administrator permissions):\n\n```bash\ngit clone https://github.com/andrewgull/MGERT && cd MGERT\nsudo ./install.sh\n\n```\n\nIf you can't run installation script with sudo, you could place `MGERT.py` wherever you want, but you will be prompt \nto enter a path to `test_dataset.tgz` when running `MGERT.py --test` (see below for details).\n\n\n<a name=\"usage-examples\"></a>"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparation steps",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "   - First, run configuration script with the following command:\n\n```bash\nMGERT.py --configure\n```\nThis command will create a configuration file *config.json* with all the necessary paths (see \"Requirements\" section) \nand filenames MGERT uses. MGERT will try to find all the paths automatically. Unless it couldn't find them, it will \nprompt a user to enter a path or a filename.\n\nAfter the configuration step you may run MGERT with the option `--test` to check out whether everything works as \nit supposed to on a toy data set (despite the size of the dataset, it can take a while).\n\n   - To validate ORFs of found TEs fast, you should create a local version of Conserved Domain Database (CDD). \n   To do this, download full Conserved Domain collection from the NCBI website: follow the [link to the Conserved Domain Database](https://www.ncbi.nlm.nih.gov/Structure/cdd/cdd.shtml), click on the **Conserved Domains** menu and choose **FTP** in the drop-down list. You will be redirected to the FTP site where you will find **cdd.tar.gz** archive. \n   You can download it using either browser or command line utility like `wget` (in the latter case use the direct link `ftp://ftp.ncbi.nih.gov/pub/mmdb/cdd/cdd.tar.gz`).    \n   To figure out what filename you need to extract corresponding [PSSM](https://www.ncbi.nlm.nih.gov/Structure/cdd/cdd_help.shtml#CD_PSSM) file from the archive, go to [NCBI CDD](https://www.ncbi.nlm.nih.gov/Structure/cdd/cdd.shtml), type in the name of domain of interest (e.g. \"RT\")\n   click **Search** button and see a list of related domains (e.g. \"RT_like\", \"RT_pepA17\", \"RT_nLTR_like\" etc).\n   Clicking on any entry, you will see a short description, a hierarchy of related domains and their PSSM codes (\"cd00304\" for \"RT_like\") - and this code is exactly what you need.\n   So, to extract PSSM file for RT-domain, run the following command:\n\n```bash\ntar -zxvf cdd.tar.gz cd00304.smp\n```\n      \n   - Create a simple [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) file (either comma or TAB delimited) that specifies PSSM-file - domain correspondence.\n   Below you can see the correspondence file used for [Penelope retroelements](https://www.ncbi.nlm.nih.gov/pubmed/16093704) analysis:\n   \n   ```\n   cd00304.smp  RT\n   cd01648.smp  RT\n   pfam00078.smp    RT\n   pfam07727.smp    RT\n   pfam13966.smp    RT\n   cd01644.smp  RT\n   cd01709.smp  RT\n   cd10442.smp  EN\n   cd00719.smp  EN \n   ```\n    \n \n   These files are used by MGERT to report only those ORFs that encodes for **both** domains (RT and EN) \n   regardless of what actual PSSM file produced a hit.\n   \n   - Finally, make local CDD: put [PSSM](https://www.ncbi.nlm.nih.gov/Structure/cdd/cdd_help.shtml#CD_PSSM) files (with *\\*smp* extension) \n   to your working directory along with a CSV file specifying file - domain correspondence, and run MGERT with the following flag:\n\n```bash\nMGERT.py --make-cdd\n```\nThis command will create a directory *LocalCDD* with all the necessary files inside it and the path to this CDD will be added to the *config.json*.\n\n\nNow you can run the pipeline.\n\n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9799437628683901,
      "result": {
        "original_header": "**Mobile Genetic Elements Retrieving Tool** - **MGERT**",
        "type": "Text_excerpt",
        "value": "<a name=\"requirements\"></a> \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9583209124662105,
      "result": {
        "original_header": "Flowchart of MGERT pipeline",
        "type": "Text_excerpt",
        "value": "\n<a name=\"installation\"></a> \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9916470866715198,
      "result": {
        "original_header": "Required arguments",
        "type": "Text_excerpt",
        "value": "`-a, --assembly` - specify a genome assembly file (e.g. genome.fa.gz); this argument is mandatory on all stages since it\nindicates where the working directory is. \n`-T, --mge-type` - specify the type of MGE to search (e.g. L1/BovB/RTE/CR1/LINE/Penelope/DIRS etc.) \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9326512167852972,
      "result": {
        "original_header": "Configuration arguments",
        "type": "Text_excerpt",
        "value": "`-configure` - run the configuration script \n`--make-cdd` - make local CDD\n \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9501259181689571,
      "result": {
        "original_header": "Optional arguments",
        "type": "Text_excerpt",
        "value": "`--test` - run self-test after configuration on a toy data set \n`-cd, --cd-table` - specify a path to a comma or tab delimited table of SMP files and their grouping (e.g. domains.csv). CSV extension is mandatory. \n`-f, --from-stage` - specify the step from which the pipeline should start: 'consensus' - get consensus sequences; \n'coords' - get sequences; 'orfs' - get ORFs; 'flanks' - add flanking sequences to CDS (default - *rmod*). \n`-S, --to-stage` - specify the step (*rmod, consensus, coords, orfs* or *flanks*) at which the pipeline should finish (default - *flanks*) \n`-c, --start-codon` - ORF start codon to use. 0 = 'ATG' only; 1 = 'ATG' and alternative initiation codons; 2 = any sense codon; Default 0. \n`-L, --rm-library` - specify a path to a library for RepeatMasker (in FASTA format). Use with `-f consensus` only. \nIf consensus library is not specified, it will be compiled from RepeatModeler output automatically. \n`-rm, --rm-table` - specify repeat masker table to use (with `*_rm.out` or `*.bed` extension). Use with `-f coords` option only. \n`-v, --version` - show program's version number and exit. \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8798953731902173,
      "result": {
        "original_header": "Optional arguments",
        "type": "Text_excerpt",
        "value": "`--test` - run self-test after configuration on a toy data set \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/andrewgull/MGERT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, bioinformatics-pipeline, flanking-regions, genome-assemblies, mgert-pipeline, orf, pipeline, repeatmasker, repeatmodeler"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MGERT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "andrewgull"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 75173,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 392,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**"
        ],
        "type": "Text_excerpt",
        "value": "\n- [RepeatModeler 1.0.11 ](http://www.repeatmasker.org/RepeatModeler/)\n- [RepeatMasker  open-4.0.7](http://www.repeatmasker.org/RMDownload.html)\n- [bedtools v2.27.0](http://bedtools.readthedocs.io/en/latest/)\n- [RPS-blast v2.7.1+](https://www.ncbi.nlm.nih.gov/Structure/cdd/cdd_help.shtml#RPSBFtp)\n- [ORFfinder v0.4.1](https://www.ncbi.nlm.nih.gov/orffinder/) - direct FTP-link: \n \n  `ftp://ftp.ncbi.nlm.nih.gov/genomes/TOOLS/ORFfinder/linux-i64/ORFfinder.gz`\n\n- [awk](https://en.wikipedia.org/wiki/AWK) (is a standard feature of most Unix-like operating systems)\n\n- [Python](https://www.python.org/) 3.5 or higher\n- Python libraries (should be easy to install via [pip](https://pypi.org/project/pip/) or [anaconda](https://www.anaconda.com/)):\n    - [pandas v0.21.0](https://pandas.pydata.org/)\n    - [matplotlib v2.1.0](https://matplotlib.org/)\n    - [Biopython v1.70](https://biopython.org/)\n\n<a name=\"short-description\"></a>"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Full pipeline run starting from *de novo* MGE search using RepeatModeler",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "The shortest way is to run MGERT with  *all-default* parameters (see \"Parameters\" section):\n\n```bash\nMGERT.py --mge-type Penelope --assembly genome.fna.gz\n```\nThis command runs search and retrieving of [Penelope](https://www.pnas.org/content/94/1/196) retrotransposons' ORFs and flanking regions in the genome assembly.\n\nNote, that for subsequent runs of MGERT, you don't need to move and gzip the genome assembly file again. The only thing you \nshould care about is that the name of the directory where the assembly file is, were the same as the name of assembly itself\n(except extension) e.g. `./genome/genome.fna` \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeline run from an arbitrary step",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "There are three possible steps to run the pipeline from (except the default one):\n\n- consensus step\n\nLet's consider the situation when you already have a repeat library called, say, `Penelope_consensi.fasta` and you want to find instances of the repeats from the library in your assembly, and therefore there is no need to run *de novo* part of the pipeline. In this case simply type in the following command:\n\n```bash\nMGERT.py --assembly genome.fna --mge-type Penelope  --from-stage cons --lib Penelope_consensi.fasta\n```\n\nIf consensus library is not specified, it will be automatically generated from the RepeatModeler output.\n\nFurthermore, after this step a table with descriptive statistics and a histogram of repeats' lengths will be generated (shown below)\n\n```\ncount   81848.0\nmean    1380.6\nstd     1987.7\nmin     12.0\n25%     152.0\n50%     446.0\n75%     1945.0\nmax     27686.0\n```\n\nwhere:\n - *count* - number of found repeats/hits;\n - *mean* - mean length of found repeat/hit;\n - *std* - standard deviation;\n - *min* - minimal length of found repeat/hit;\n - *25%* - the 25th percentile (the 1st quartile) of length of found repeats/hits;\n - *50%* - the 50th percentile (the 2nd quartile or median) of length of found repeats/hits;\n - *75%* - the 75th percentile (the 3rd quartile) of length of found repeats/hits;\n - *max* - maximum length of found repeats/hits.\n\n![histogram](figures/hist.png)\n\n- coordinates step\n\nIn case when you have coordinates of repeats' matches (e.g. from previous step) - either *.out* or *.bed* file - you can run MGERT as follows:\n\n```bash\nMGERT.py --assembly genome.fna --mge-type MGE --from-stage coords --rm-table genome.fna.out\n```\n\nAfter this step a table with descriptive statistics and a histogram of repeats' lengths will be generated.\n\n- ORFs step\n\nIn case when you have TEs sequences (in FASTA format, normally it's the output of the previous step) and want to find ORFs with conserved domains, run the following command:\n\n```bash\nMGERT.py --assembly genome.fna --mge-type MGE --from-stage orfs --sequence MGE_sequences.fasta\n```\n\nAfter this step a table with descriptive statistics and a histogram of repeats' lengths will be generated as well.\n\n - flanks step\n \nIs useful if you want to add flanking regions of certain length to ORFs.\n\n```bash\nMGERT.py --assembly genome.fna --mge-type MGE --from-stage flanks\n```\n\nNote, that at this step input is taken automatically from the config file what is OK if the previous step was done,\notherwise MGERT will prompt you to enter the path to the fasta with ORFs.\nAlso, input ORFs must be the ones that ORFfinder produces, cause their headers contain all the information MGERT \nrequires to excise them from a genome.\n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:19:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Full pipeline run starting from *de novo* MGE search using RepeatModeler",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "The shortest way is to run MGERT with  *all-default* parameters (see \"Parameters\" section):\n\n```bash\nMGERT.py --mge-type Penelope --assembly genome.fna.gz\n```\nThis command runs search and retrieving of [Penelope](https://www.pnas.org/content/94/1/196) retrotransposons' ORFs and flanking regions in the genome assembly.\n\nNote, that for subsequent runs of MGERT, you don't need to move and gzip the genome assembly file again. The only thing you \nshould care about is that the name of the directory where the assembly file is, were the same as the name of assembly itself\n(except extension) e.g. `./genome/genome.fna` \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Define the stage after which the pipeline should stop.",
        "parent_header": [
          "**Mobile Genetic Elements Retrieving Tool** - **MGERT**",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "Say, you want to run RepeatModeler only in order to check what types of TEs it will find. In this case run the command:\n\n```bash\nMGERT.py --assembly genome.fna.gz --to-stage rmod\n\nMGERT.py --check-types ./genome/consensi.fa.classified\n\n```\n\nTo stop MGERT after RepeatMasker run, use:\n\n```bash\nMGERT.py --assembly genome.fna.gz -T Penelope --to-stage coordinates\n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/andrewgull/MGERT/master/README.md",
      "technique": "header_analysis"
    }
  ]
}