{
  "application_domain": [
    {
      "confidence": 25.37,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8020949741833208,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Public-Health-Bioinformatics/kipper"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-02-02T22:52:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-02T07:11:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "command line versioning tool for large key-value text files"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9163866459213363,
      "result": {
        "original_header": "Kipper v1.0.0",
        "type": "Text_excerpt",
        "value": "The basic command-line file versioning solution we have created primarily for fasta data, called **Kipper**, is a key-value data store that keeps track of when particular items are inserted or deleted (updates are deletes followed by inserts).  It can recall versions by date or version id.  It can keep versions in one or more volume files.  It currently accepts two kinds of text file input :  \n* \"text\": any file where each row is a tab/space delimited key-value record.\n* \"fasta\" database, see http://en.wikipedia.org/wiki/FASTA_format\n \n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9198431953009758,
      "result": {
        "original_header": "**Options**",
        "type": "Text_excerpt",
        "value": "-h, --help\n\t\n\tShow this help message and exit\n  \n-M INITIALIZE, --rebuild=INITIALIZE\n  \n\t(Re)generate metadata file [name of db].md . Provide the type of db [text|fasta| etc.]\n\t\n-i DB_IMPORT_FILE_PATH, --import=DB_IMPORT_FILE_PATH\n  \n\tImport key/value inserts/deletes based on delta comparison with import file \n\tExtract a version of the file based on given date/time \n\tHave database revert to previous version (-d date/time required).  Drops future records, unmarks corresponding deletes.\n\t\n-m, --metadata\n\t  \n\tView metadata file [name of db].md\n\t  \n-l, --list\n  \n\tList versions of dbFile key/value pairs (by date/time) \n\tReturn version of kipper.py code.\n  \n-o DB_OUTPUT_FILE_PATH, --output=DB_OUTPUT_FILE_PATH\n\t  \n\tOutput to this file.  Default is to stdio\n  \n-d DATETIME, --date=DATETIME\n  \n\tProvide date/time for sync, extract or revert operations.  Defaults to now. \n\tProvide Unix time (integer) for sync, extract or revert operations. \n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.981410055252639,
      "result": {
        "original_header": "**Performance**",
        "type": "Text_excerpt",
        "value": "Kipper has virtually no memory requirements, regardless of the size of input files.  Since fasta databases are mainly just inserts over time, a Kipper data store having many versions usually ends up being modestly larger than the most recent fasta database version size.  Its version extraction speed is linear to the time it take to read and write the archive file. \nCurrently we are experimenting with reading compressed files and writing compressed volume files, to see which archiving format is best.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9664032157249747,
      "result": {
        "original_header": "**Notes**",
        "type": "Text_excerpt",
        "value": "A change last year in NCBI's coding of alternate descriptions for a fasta sequence has impact on kipper data store file sizes for archives that span that date. It looks like NCBI converted all records last year to get away from the CTRL-A delimiter for alternate fasta descriptions, which now simply includes original chevron.  There aren't any CTRL-A characters any more in incoming nt.fasta or nr.fasta files.  Consequently one can expect to see manu updates like:\n```\n1       3       gi|74|emb|CAA39971.1|   annexin I [Bos taurus]^Agi|264182|gb|AAB25084.1| annexin ...\n3               gi|74|emb|CAA39971.1|   annexin I [Bos taurus] >gi|264182|gb|AAB25084.1| annexin ...\n``` \nCurrently there is an undocumented feature in which Kipper can read import data store versions as .gz compressed format.  However (when using this tool in conjunction with Biomaj) we have found that python's gzip library doesn't function with large 30G sized archives.  So ensure that Biomaj does not gz compress downloaded ncbi nt or nr files before passing them to Kipper.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Public-Health-Bioinformatics/kipper/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/Public-Health-Bioinformatics/kipper/wiki"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Public-Health-Bioinformatics/kipper/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Public-Health-Bioinformatics/kipper/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Public-Health-Bioinformatics/kipper"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/biomaj_utils/kipper_import.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/biomaj_utils/cleanup_cpn60.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/biomaj_utils/cleanup_fasta.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.8990398058845578,
      "result": {
        "original_header": "**Options**",
        "type": "Text_excerpt",
        "value": "-v, --version \n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.900927319679402,
      "result": {
        "original_header": "**Options**",
        "type": "Text_excerpt",
        "value": "-h, --help\n\t\n\tShow this help message and exit\n  \n-M INITIALIZE, --rebuild=INITIALIZE\n  \n\t(Re)generate metadata file [name of db].md . Provide the type of db [text|fasta| etc.]\n\t\n-i DB_IMPORT_FILE_PATH, --import=DB_IMPORT_FILE_PATH\n  \n\tImport key/value inserts/deletes based on delta comparison with import file \n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Public-Health-Bioinformatics/kipper/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Source Code License\n\nAn Open Source Initiative (OSI) approved license\nPublic-Health-Bioinformatics Kipper source code is licensed under the Academic Free License version 3.0.\n\nLicensed under the Academic Free License version 3.0\n\n1) Grant of Copyright License. Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, for the duration of the copyright, to do the following:\n\na) to reproduce the Original Work in copies, either alone or as part of a collective work;\n\nb) to translate, adapt, alter, transform, modify, or arrange the Original Work, thereby creating derivative works (\"Derivative Works\") based upon the Original Work;\n\nc) to distribute or communicate copies of the Original Work and Derivative Works to the public, under any license of your choice that does not contradict the terms and conditions, including Licensor's reserved rights and remedies, in this Academic Free License;\n\nd) to perform the Original Work publicly; and\n\ne) to display the Original Work publicly.\n\n2) Grant of Patent License. Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, under patent claims owned or controlled by the Licensor that are embodied in the Original Work as furnished by the Licensor, for the duration of the patents, to make, use, sell, offer for sale, have made, and import the Original Work and Derivative Works.\n\n3) Grant of Source Code License. The term \"Source Code\" means the preferred form of the Original Work for making modifications to it and all available documentation describing how to modify the Original Work. Licensor agrees to provide a machine-readable copy of the Source Code of the Original Work along with each copy of the Original Work that Licensor distributes. Licensor reserves the right to satisfy this obligation by placing a machine-readable copy of the Source Code in an information repository reasonably calculated to permit inexpensive and convenient access by You for as long as Licensor continues to distribute the Original Work.\n\n4) Exclusions From License Grant. Neither the names of Licensor, nor the names of any contributors to the Original Work, nor any of their trademarks or service marks, may be used to endorse or promote products derived from this Original Work without express prior permission of the Licensor. Except as expressly stated herein, nothing in this License grants any license to Licensor's trademarks, copyrights, patents, trade secrets or any other intellectual property. No patent license is granted to make, use, sell, offer for sale, have made, or import embodiments of any patent claims other than the licensed claims defined in Section 2. No license is granted to the trademarks of Licensor even if such marks are included in the Original Work. Nothing in this License shall be interpreted to prohibit Licensor from licensing under terms different from this License any Original Work that Licensor otherwise would have a right to license.\n\n5) External Deployment. The term \"External Deployment\" means the use, distribution, or communication of the Original Work or Derivative Works in any way such that the Original Work or Derivative Works may be used by anyone other than You, whether those works are distributed or communicated to those persons or made available as an application intended for use over a network. As an express condition for the grants of license hereunder, You must treat any External Deployment by You of the Original Work or a Derivative Work as a distribution under section 1(c).\n\n6) Attribution Rights. You must retain, in the Source Code of any Derivative Works that You create, all copyright, patent, or trademark notices from the Source Code of the Original Work, as well as any notices of licensing and any descriptive text identified therein as an \"Attribution Notice.\" You must cause the Source Code for any Derivative Works that You create to carry a prominent Attribution Notice reasonably calculated to inform recipients that You have modified the Original Work.\n\n7) Warranty of Provenance and Disclaimer of Warranty. Licensor warrants that the copyright in and to the Original Work and the patent rights granted herein by Licensor are owned by the Licensor or are sublicensed to You under the terms of this License with the permission of the contributor(s) of those copyrights and patent rights. Except as expressly stated in the immediately preceding sentence, the Original Work is provided under this License on an \"AS IS\" BASIS and WITHOUT WARRANTY, either express or implied, including, without limitation, the warranties of non-infringement, merchantability or fitness for a particular purpose. THE ENTIRE RISK AS TO THE QUALITY OF THE ORIGINAL WORK IS WITH YOU. This DISCLAIMER OF WARRANTY constitutes an essential part of this License. No license to the Original Work is granted by this License except under this disclaimer.\n\n8) Limitation of Liability. Under no circumstances and under no legal theory, whether in tort (including negligence), contract, or otherwise, shall the Licensor be liable to anyone for any indirect, special, incidental, or consequential damages of any character arising as a result of this License or the use of the Original Work including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses. This limitation of liability shall not apply to the extent applicable law prohibits such limitation.\n\n9) Acceptance and Termination. If, at any time, You expressly assented to this License, that assent indicates your clear and irrevocable acceptance of this License and all of its terms and conditions. If You distribute or communicate copies of the Original Work or a Derivative Work, You must make a reasonable effort under the circumstances to obtain the express assent of recipients to the terms of this License. This License conditions your rights to undertake the activities listed in Section 1, including your right to create Derivative Works based upon the Original Work, and doing so without honoring these terms and conditions is prohibited by copyright law and international treaty. Nothing in this License is intended to affect copyright exceptions and limitations (including \"fair use\" or \"fair dealing\"). This License shall terminate immediately and You may no longer exercise any of the rights granted to You by this License upon your failure to honor the conditions in Section 1(c).\n\n10) Termination for Patent Action. This License shall terminate automatically and You may no longer exercise any of the rights granted to You by this License as of the date You commence an action, including a cross-claim or counterclaim, against Licensor or any licensee alleging that the Original Work infringes a patent. This termination provision shall not apply for an action alleging patent infringement by combinations of the Original Work with other software or hardware.\n\n11) Jurisdiction, Venue and Governing Law. Any action or suit relating to this License may be brought only in the courts of a jurisdiction wherein the Licensor resides or in which Licensor conducts its primary business, and under the laws of that jurisdiction excluding its conflict-of-law provisions. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any use of the Original Work outside the scope of this License or after its termination shall be subject to the requirements and penalties of copyright or patent law in the appropriate jurisdiction. This section shall survive the termination of this License.\n\n12) Attorneys' Fees. In any action to enforce the terms of this License or seeking damages relating thereto, the prevailing party shall be entitled to recover its costs and expenses, including, without limitation, reasonable attorneys' fees and costs incurred in connection with such action, including any appeal of such action. This section shall survive the termination of this License.\n\n13) Miscellaneous. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.\n\n14) Definition of \"You\" in This License. \"You\" throughout this License, whether in upper or lower case, means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, \"You\" includes any entity that controls, is controlled by, or is under common control with you. For purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n15) Right to Use. You may use the Original Work in all ways not otherwise restricted or conditioned by this License or by law, and Licensor promises not to interfere with or be responsible for such uses by You.\n\n16) Modification of This License. This License is Copyright \u00a9 2005 Lawrence Rosen. Permission is granted to copy, distribute, or communicate this License without modification. Nothing in this License permits You to modify this License as applied to the Original Work or to Derivative Works. However, You may modify the text of this License and copy, distribute or communicate your modified version (the \"Modified License\") and apply it to other original works of authorship subject to the following conditions: (i) You may not indicate in any way that your Modified License is the \"Academic Free License\" or \"AFL\" and you may not use those names in the name of your Modified License; (ii) You must replace the notice specified in the first paragraph above with the notice \"Licensed under <insert your license name here>\" or with a notice of your own that is not confusingly similar to the notice in this License; and (iii) You may not claim that your original works are open source software unless your Modified License has been approved by Open Source Initiative (OSI) and You comply with its license review and certification process.\n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kipper"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Public-Health-Bioinformatics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 42434,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6085,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:05:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "**Usage**",
        "parent_header": [
          "Kipper v1.0.0"
        ],
        "type": "Text_excerpt",
        "value": "Kipper works off of a [data store name].md metadata file, and one or more [data store name]_[volume id] files.  Consequently any Kipper command begins with \n\n\tkipper.py [data store name]\n\nAlone, this will list the available versions found within a Kipper data store.\n\nBy default, all output goes to stdout (screen), and no changes to Kipper data store files are made.  Thus by default one sees what would happen if an action were taken, but must take an additional step to affect the data store.  The exception to this is with the -M regenerate metadata command described below. \n\nTo export a version of a kipper data store, pipe the extract output to a file via '> [file name]' or use the '-o' [file name] parameter.  If the \"-o\" parameter includes a period (e.g. \"-o.\") rather than a file name, this simply allows Kipper to select the default output file name as appropriate, namely:\n\n\tFor -i --import or -r --revert actions: an update of the Kipper data store.\n\tFor -e --extract action: a save of output to the version file specified in the [data store name].md metadata file.\n\nAs well, when -o parameter is a path, and not a specific filename, then Kipper saves the appropriate output file name into the given folder.  This is convenient for extracting versions into separate folders.\n\n\nList versions of dbFile key/value pairs (by date/time): -l --list (optional)\n\n\tkipper.py [data store file]\n\tkipper.py cpn60 -l\n\nInitialize metadata file and kipper file: -M --rebuild\n\n\tkipper.py [data store file] -M [type of database:text|fasta]\n\tkipper.py cpn60 -M fasta\n    \nView metadata (json) file: -m --metadata\n\n\tkipper.py [data store file] -m\n\tkipper.py cpn60 -m\n\nImport key/value inserts/deletes based on import file (current date used):  -i --import\n\n\tkipper.py [data store file] -i [import file] -o.\n\nOutputs new master database to stdout; doesn't rewrite it.\n\n\tkipper.py cpn60 -i sequences.fasta  \n\nRewrites cpn60 with new version added.\n\n\tkipper.py cpn60 -i sequences.fasta -o.\n\nAdd Volume to data store (creates new volume file that receives future imports): -V --volume\n\n\tkipper.py [data store file] -V -o. \n\nRewrites cpn60 with new volume, and new version added to that volume.\n\n\tkipper.py cpn60 -V -i sequences.fasta -o.\n\nExtract a version of the file based on given date/time: -e --extract\n\n\tkipper.py [data store file] -e -d datetime -o [output file]\n\nExtract a version of the file based on given version Id\n\n\tkipper.py [data store file] -e -n [version id] -o [output file]\n\nHave database revert to previous version.  Drops future records, unmarks corresponding deletes:  -r --revert\n\n\tkipper.py [data store file] -r -d datetime -o [output file]\n\n\nReturn version of the kipper code:\t -v --version \n\n\tkipper.py -v\n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**Example Database**",
        "parent_header": [
          "Kipper v1.0.0"
        ],
        "type": "Text_excerpt",
        "value": "This repo contains a 'RDB_database_load_v10_8-v11_3.sh' script which downloads and imports the RDP RNA database (https://rdp.cme.msu.edu/) versions 10.18 to 11.3 into a kipper data store.  This takes a few hours to download and process.  The end result is 18 versions of the RDB database that fit into two kipper volumes.  The script needs wget and gunzip, and needs a symlink from say '/usr/local/bin/kipper' to the 'kipper.py' executable.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Public-Health-Bioinformatics/kipper/master/README.md",
      "technique": "header_analysis"
    }
  ]
}