{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/XQBai/SCTree-test"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-03T09:16:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-10T10:58:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCTree test is an algorithm that can statistical detect the hidden structure of high-dimensional single-cell dataset, which the intrinsic structure may be linear structure of branched structure. Based on the tools of spiked matrix model and random matrix theory, SCTree construct the discordance matrix by transforming the distance between any pair of cells used Gromov-Farris transform. Then the discordance matrix can be formulated as the spiked matrix model. Therefore, we detect the spiked matrix model of discordance matrix whether signal or not. SCTree test have successfully identify the branch event of real RNA-seq data, meanwhile, by combining with the reconstruct method (such as Wishbone), it also can identify the multiple bifurcations of cellular process.  "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9681771983929025,
      "result": {
        "original_header": "SCTree-test",
        "type": "Text_excerpt",
        "value": "SCTree test is an algorithm that can statistical detect the hidden structure of high-dimensional single-cell dataset, which the intrinsic structure may be linear structure of branched structure. Based on the tools of spiked matrix model and random matrix theory, SCTree construct the discordance matrix by transforming the distance between any pair of cells used Gromov-Farris transform. Then the discordance matrix can be formulated as the spiked matrix model. Therefore, we detect the spiked matrix model of discordance matrix whether signal or not. SCTree test have successfully identify the branch event of real RNA-seq data, meanwhile, by combining with the reconstruct method (such as Wishbone), it also can identify the multiple bifurcations of cellular process.   \n"
      },
      "source": "https://raw.githubusercontent.com/XQBai/SCTree-test/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/XQBai/SCTree-test/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/XQBai/SCTree-test/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "XQBai/SCTree-test"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCTree-test"
      },
      "source": "https://raw.githubusercontent.com/XQBai/SCTree-test/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and dependencies",
        "parent_header": [
          "SCTree-test"
        ],
        "type": "Text_excerpt",
        "value": "1. SCTree test depends on a number of python3 packages available on pypi and these dependencies are listed in setup.py.  Most packages can be installed expect the special [Wishbone algorithm](https://github.com/ManuSetty/wishbone). Wishbone algorithm can be installed using:\n```\n   $> git clone git://github.com/ManuSetty/Palantir.git\n   $> cd Palantir\n   $> sudo -H pip3 install .   \n```\n    \n2. SCTree test has been implemented in Python3. In code profile, SCTree.py can be downloaded to your own workspace. Then the function can be used by follow procedures:\n\n```\n    import SCTree\n    data = SCTree.from_csv('~./data/linear.csv', data_type = 'sc-seq', normalize = False)\n    p-value, SNR = SCTree.test(data, sampling_size, startcell, 'sc-seq', verbose = True)\n    \n```\nIf data need to be normalized, then the normlize = True, otherwise, False. \"sampling_size\" can be choiced as the number smaller than the data size. If the start cell is known, the \"startcell\" is the index of startcell and verbose = True; otherwise, the verbsose = False and \"startcell\" can be any given cell . The result of \"SNR\" means the signal-to-noise ratio, the data has linear structure when \"p-value\" is greater than 0.05, otherwise, the data is branched structure.\n"
      },
      "source": "https://raw.githubusercontent.com/XQBai/SCTree-test/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/XQBai/SCTree-test/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 XQBai\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/XQBai/SCTree-test/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "SCTree-test"
        ],
        "type": "Text_excerpt",
        "value": "[MIT](https://github.com/XQBai/SCTree-test/blob/master/LICENSE)\n"
      },
      "source": "https://raw.githubusercontent.com/XQBai/SCTree-test/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCTree-test"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "XQBai"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 11571,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/XQBai/SCTree-test/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and dependencies",
        "parent_header": [
          "SCTree-test"
        ],
        "type": "Text_excerpt",
        "value": "1. SCTree test depends on a number of python3 packages available on pypi and these dependencies are listed in setup.py.  Most packages can be installed expect the special [Wishbone algorithm](https://github.com/ManuSetty/wishbone). Wishbone algorithm can be installed using:\n```\n   $> git clone git://github.com/ManuSetty/Palantir.git\n   $> cd Palantir\n   $> sudo -H pip3 install .   \n```\n    \n2. SCTree test has been implemented in Python3. In code profile, SCTree.py can be downloaded to your own workspace. Then the function can be used by follow procedures:\n\n```\n    import SCTree\n    data = SCTree.from_csv('~./data/linear.csv', data_type = 'sc-seq', normalize = False)\n    p-value, SNR = SCTree.test(data, sampling_size, startcell, 'sc-seq', verbose = True)\n    \n```\nIf data need to be normalized, then the normlize = True, otherwise, False. \"sampling_size\" can be choiced as the number smaller than the data size. If the start cell is known, the \"startcell\" is the index of startcell and verbose = True; otherwise, the verbsose = False and \"startcell\" can be any given cell . The result of \"SNR\" means the signal-to-noise ratio, the data has linear structure when \"p-value\" is greater than 0.05, otherwise, the data is branched structure.\n"
      },
      "source": "https://raw.githubusercontent.com/XQBai/SCTree-test/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:36:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ]
}