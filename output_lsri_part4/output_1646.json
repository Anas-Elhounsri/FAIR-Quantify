{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brentp/cyvcf2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-08-12T14:30:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-30T02:05:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cython + htslib == fast VCF and BCF processing"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9533500095470379,
      "result": {
        "original_header": "cyvcf2",
        "type": "Text_excerpt",
        "value": "\nFast python **(2 and 3)** parsing of VCF and BCF including region-queries. \ncyvcf2 is a cython wrapper around [htslib](https://github.com/samtools/htslib) built for fast parsing of [Variant Call Format](https://en.m.wikipedia.org/wiki/Variant_Call_Format) (VCF) files. \nAttributes like `variant.gt_ref_depths` work for diploid samples and return a numpy array directly so they are immediately ready for downstream use.\n**note** that the array is backed by the underlying C data, so, once `variant` goes out of scope. The array will contain nonsense.\nTo persist a copy, use: `cpy = np.array(variant.gt_ref_depths)` instead of just `arr = variant.gt_ref_depths`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9175963335864926,
      "result": {
        "original_header": "CLI",
        "type": "Text_excerpt",
        "value": "Run with `cyvcf2 path_to_vcf`\n```\n$ cyvcf2 --help\nUsage: cyvcf2 [OPTIONS] <vcf_file> or -\n\n  fast vcf parsing with cython + htslib\n\nOptions:\n  -c, --chrom TEXT                Specify what chromosome to include.\n  -s, --start INTEGER             Specify the start of region.\n  -e, --end INTEGER               Specify the end of the region.\n  --include TEXT                  Specify what info field to include.\n  --exclude TEXT                  Specify what info field to exclude.\n  --loglevel [DEBUG|INFO|WARNING|ERROR|CRITICAL]\n                                  Set the level of log output.  [default:\n                                  INFO]\n  --silent                        Skip printing of vcf.\n  --help                          Show this message and exit.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9910869059494822,
      "result": {
        "original_header": "See Also",
        "type": "Text_excerpt",
        "value": "Pysam also [has a cython wrapper to htslib](https://github.com/pysam-developers/pysam/blob/master/pysam/libcbcf.pyx) and one block of code here is taken directly from that library. But, the optimizations that we want for gemini are very specific so we have chosen to create a separate project.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.890981898807882,
      "result": {
        "original_header": "Performance",
        "type": "Text_excerpt",
        "value": "For the performance comparison in the paper, we used [thousand genomes chromosome 22](ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz)\nWith the full comparison runner [here](https://github.com/brentp/cyvcf2/blob/main/scripts/compare.sh).\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/brentp/cyvcf2/wiki"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brentp/cyvcf2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 72
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brentp/cyvcf2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "brentp/cyvcf2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cyvcf2"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/cyvcf2/main/scripts/compare.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "pip with bundled htslib",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "pip install cyvcf2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "pip with system htslib",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Assuming you have already built and installed htslib version 1.12 or higher.\n```\nCYVCF2_HTSLIB_MODE=EXTERNAL pip install --no-binary cyvcf2 cyvcf2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "windows (experimental, only test on MSYS2)",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Assuming you have already built and installed htslib.\n```\nSETUPTOOLS_USE_DISTUTILS=stdlib pip install cyvcf2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "github (building htslib and cyvcf2 from source)",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone --recursive https://github.com/brentp/cyvcf2\npip install -r requirements.txt\n# sometimes it can be required to remove old files:\n# python setup.py clean_ext\nCYVCF2_HTSLIB_MODE=BUILTIN CYTHONIZE=1 python setup.py install\n# or to use a system htslib.so\nCYVCF2_HTSLIB_MODE=EXTERNAL python setup.py install\n```\n\nOn **OSX**, using brew, you may have to set the following as indicated by the brew install:\n\n```\nFor compilers to find openssl you may need to set:\n  export LDFLAGS=\"-L/usr/local/opt/openssl/lib\"\n  export CPPFLAGS=\"-I/usr/local/opt/openssl/include\"\n\nFor pkg-config to find openssl you may need to set:\n  export PKG_CONFIG_PATH=\"/usr/local/opt/openssl/lib/pkgconfig\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9919863198172165,
      "result": {
        "original_header": "cyvcf2",
        "type": "Text_excerpt",
        "value": "Note: cyvcf2 versions < 0.20.0 require htslib < 1.10. cyvcf2 versions >= 0.20.0 require htslib >= 1.10 \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9939629763407701,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "Install `pytest`, then tests can be run with:\n```\npytest\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brentp/cyvcf2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, cython, genomics, htslib, vcf"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2015 Brent Pedersen - Bioinformatics\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cyvcf2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "brentp"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Cython",
        "size": 103511,
        "type": "Programming_language",
        "value": "Cython"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 63797,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 9193,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3367,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:49:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 378
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "type": "Text_excerpt",
        "value": "The example below shows much of the use of cyvcf2.\n\n```Python\nfrom cyvcf2 import VCF\n\nfor variant in VCF('some.vcf.gz'): # or VCF('some.bcf')\n    variant.REF, variant.ALT # e.g. REF='A', ALT=['C', 'T']\n\n    variant.CHROM, variant.start, variant.end, variant.ID, \\\n                variant.FILTER, variant.QUAL\n\n    # numpy arrays of specific things we pull from the sample fields.\n    # gt_types is array of 0,1,2,3==HOM_REF, HET, UNKNOWN, HOM_ALT\n    variant.gt_types, variant.gt_ref_depths, variant.gt_alt_depths # numpy arrays\n    variant.gt_phases, variant.gt_quals, variant.gt_bases # numpy array\n\n    ## INFO Field.\n    ## extract from the info field by it's name:\n    variant.INFO.get('DP') # int\n    variant.INFO.get('FS') # float\n    variant.INFO.get('AC') # float\n\n    # convert back to a string.\n    str(variant)\n\n\n    ## sample info...\n\n    # Get a numpy array of the depth per sample:\n    dp = variant.format('DP')\n    # or of any other format field:\n    sb = variant.format('SB')\n    assert sb.shape == (n_samples, 4) # 4-values per\n\n# to do a region-query:\n\nvcf = VCF('some.vcf.gz')\nfor v in vcf('11:435345-556565'):\n    if v.INFO[\"AF\"] > 0.1: continue\n    print(str(v))\n```\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/cyvcf2/main/README.md",
      "technique": "header_analysis"
    }
  ]
}