{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gravitino/cudaGSEA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-12-21T10:44:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-19T20:59:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CUDA-accelerated Gene Set Enrichment Analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9270765033068931,
      "result": {
        "original_header": "cudaGSEA",
        "type": "Text_excerpt",
        "value": "cudaGSEA is a package for the efficient parallelization of Gene Set Enrichment\nAnalysis (GSEA) using commonly available CUDA-enabled accelerators such as GPUs\nfrom the NVIDIA Geforce or NVIDIA Tesla series. See the corresponding paper at \nfor implementation details and benchmark results. \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9554736993475178,
      "result": {
        "original_header": "Details on local metrics",
        "type": "Text_excerpt",
        "value": "Note, metrics on continuous data like Euclidean Distance and Pearson's\nCorrelation Coefficient are not supported at the moment. The below stated\nmetrics are two-class phenotype-based. Using default settings, standard\ndeviations are biased (1/n) and adjusted for low values. Recompile with altered\ntemplate settings to change behaviour. Further metrics may be added to\n(include/correlate_genes.cuh) using functors from (include/functors.cuh).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.888194382664234,
      "result": {
        "original_header": "Extending the code",
        "type": "Text_excerpt",
        "value": "All topics in this section cover source code related issues i.e. you have to\nalter the source code and reinstall the package!\n \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8131162628599012,
      "result": {
        "original_header": "I want new measures",
        "type": "Text_excerpt",
        "value": "See src/include/functors.cuh and alter or define new local measures\n \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gravitino/cudaGSEA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "I want to know what the error codes mean",
        "parent_header": [
          "cudaGSEA",
          "Extending the code"
        ],
        "type": "Text_excerpt",
        "value": "See src/include/error_codes.cuh .\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gravitino/cudaGSEA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gravitino/cudaGSEA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cudaGSEA"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/images/two_tailed_test.png"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick guide",
        "parent_header": [
          "cudaGSEA"
        ],
        "type": "Text_excerpt",
        "value": "Just clone the repository, install the library and run the example code.\n```\ncd /tmp\ngit clone https://github.com/gravitino/cudaGSEA.git # clone this repository\ncd cudaGSEA                                   \nsudo R CMD INSTALL cudaGSEA_1.0.0.tar.gz            # install the library\nRscript example.R                                   # run the example \npython tools/reader.py output_50_1024_32.es         # optional: inspect all scores\n\n```\nThe exemplary python visualizer needs numpy and matplotlib. However, you can use \nany other programming language since the output file is a simply binary dump\nof floating point values.\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation from source",
        "parent_header": [
          "cudaGSEA"
        ],
        "type": "Text_excerpt",
        "value": "cudaGSEA depends on CUDA. Thus, you should at least be able to call the nvcc\ncompiler from the command line before you try to install this package\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The automatic way",
        "parent_header": [
          "cudaGSEA",
          "Installation from source"
        ],
        "type": "Text_excerpt",
        "value": "1. Make sure you have a CUDA-enabled GPU with preferably lots of RAM, e.g. an\nNVIDIA Geforce GTX Titan X or an NVIDIA Tesla K40c. Older cards might also\nwork but have not been tested.\n\n2. Make sure you have installed CUDA 7.5 which can be obtained at\nhttps://developer.nvidia.com/cuda-downloads\nand gcc in version <5.0 (currently CUDA 7.5 does not support the newest gcc).\nAs an example, Ubuntu 14.04 LTS comes with a correct version -- 15.10 does\nnot! Currently, we are only supporting Linux.\n\n3. You need R in version 3.2 and a current Rcpp package. Up to this point\nthere are no dependencies on other Bioconductor packages such that cudaGSEA\nwould also work as standalone library for plain R.\n\n4. Get the package tarbal at\nhttps://github.com/gravitino/cudaGSEA\n\n5. Install with \"R CMD INSTALL cudaGSEA_1.0.0.tar.gz\". This could take quite\na bit since CUDA's nvcc is known to be not the fastest compiler.\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "libcudart.so.7.5: cannot open shared object file: No such file or directory",
        "parent_header": [
          "cudaGSEA",
          "Installation from source"
        ],
        "type": "Text_excerpt",
        "value": "If you encounter problems with libcudart please make sure your operating system knows how to find it. As an example, this is how you fix this issue on Ubuntu:\n\n```\nsudo echo \"/usr/local/cuda-7.5/targets/x86_64-linux/lib/\"  >> \\\n          /etc/ld.so.conf.d/cuda.conf # works on Ubuntu\nsudo ldconfig\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "It still does not work",
        "parent_header": [
          "cudaGSEA",
          "Installation from source"
        ],
        "type": "Text_excerpt",
        "value": "Do not hesitate to write me an email at hundt@uni-mainz.de\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9862261952900839,
      "result": {
        "original_header": "cudaGSEA",
        "type": "Text_excerpt",
        "value": "http://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-016-1244-x \n<img src=\"https://raw.githubusercontent.com/gravitino/cudaGSEA/master/images/two_tailed_test.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9059782345578608,
      "result": {
        "original_header": "one-pass mean rankings (fastest)",
        "type": "Text_excerpt",
        "value": "(computed with the following formula Mu(X) = E(X)) \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8281171939862838,
      "result": {
        "original_header": "one-pass Steiner-naive mean and stdev rankings (fastest, few patients)",
        "type": "Text_excerpt",
        "value": "(computed with the following formula Var(X) = E(X^2)-E(X)^2) \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8281171939862838,
      "result": {
        "original_header": "two-pass mean and stdev ranking (slower, more precise, best trade-off)",
        "type": "Text_excerpt",
        "value": "(computed with the following formula Var(X) = E(X-E(X))^2) \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.921573728502082,
      "result": {
        "original_header": "two-pass Kahan-stable mean and Bjoerck-compensated stdev (slowest)",
        "type": "Text_excerpt",
        "value": "(see http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf) \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9972650884164975,
      "result": {
        "original_header": "Extending the code",
        "type": "Text_excerpt",
        "value": "All topics in this section cover source code related issues i.e. you have to\nalter the source code and reinstall the package!\n \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9593299959866494,
      "result": {
        "original_header": "I am not here for R -- I want a standalone application",
        "type": "Text_excerpt",
        "value": "Change your current directory to src and execute \"make cudaGSEA\". \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9236436001446632,
      "result": {
        "original_header": "I want more verbose logging",
        "type": "Text_excerpt",
        "value": "See src/include/configuration.cuh and uncomment the corresponding defines.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gravitino/cudaGSEA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cudaGSEA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "gravitino"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 2121823,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 21262,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 9677,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 9176,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 3198,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 426,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running an example",
        "parent_header": [
          "cudaGSEA"
        ],
        "type": "Text_excerpt",
        "value": "cudaGSEA is designed to run on collapsed data i.e. genes have to be identified\nby appropriate gene symbols in order to work with gene sets from the MSigDB\nof the Broad Institute\n(http://software.broadinstitute.org/gsea/msigdb/index.jsp).\nConsequently, you have to manually collapse a raw gene expression data set with\nthe chip file of the corresponding platform, e.g. by max pooling ambiguous\narray spots to a single and unique gene symbol.\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring the GPU",
        "parent_header": [
          "cudaGSEA",
          "Running an example"
        ],
        "type": "Text_excerpt",
        "value": "cudaGSEA comes with three functions in order to configure the active GPU.\n\n1. listCudaDevices() returns a list of CUDA-enabled accelerators.\n\n2. setCudaDevice(deviceId) configures cudaGSEA to use the GPU with the provided\ndevice id. This is effectively a wrapper of the CUDA command cudaSetDevice(...).\n\n3. getCudaDevice() returns the currently activated device. This is a wrapper to\nCUDA's cudaGetDevice() function. Note, if setCudaDevice uses an integer that\nis bigger than the amount of accessible GPUs then the device id defaults to 0.\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Loading data from Broad file formats",
        "parent_header": [
          "cudaGSEA",
          "Running an example"
        ],
        "type": "Text_excerpt",
        "value": "If you want to test cudaGSEA on data stored in .gct, .cls and .gmt files you\nmight use the three provided loading methods:\n\n1. loadExpressionDataFromGCT(\"/path/to/expression/data/file.gct\")\n\n2. loadLabelsFromCLS(\"/path/to/label/data/file.cls\")\n\n3. loadGeneSetsFromGMT(\"/path/to/gene/sets/file.gmt\")\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring the GSEA call",
        "parent_header": [
          "cudaGSEA",
          "Running an example"
        ],
        "type": "Text_excerpt",
        "value": "The GSEA method takes five default arguments and three optional arguments\n\n```\nGSEA <- function(exprsData, labelList, geneSets, numPermutations, metricString,\n                 dumpFileName=\"\", checkInput=TRUE, doublePrecision=FALSE) {...}\n\n```\n\nexprsData, labelList and geneSets refer to the data obtained in the previous\nsection. numPermutations denotes the number of permutations in the resampling\ntest, metricString denotes the local ranking measure (one of the following):\n\n- naive_diff_of_classes\n- naive_ratio_of_classes\n- naive_log2_ratio_of_classes\n- stable_diff_of_classes\n- stable_ratio_of_classes\n- stable_log2_ratio_of_classes\n- onepass_signal2noise\n- onepass_t_test\n- twopass_signal2noise\n- twopass_t_test\n- stable_signal2noise\n- stable_t_test\n- overkill_signal2noise\n- overkill_t_test\n\ndumpFileName specifies the name of a binary file which contains all enrichment\nscores for all permutations over all gene sets. The data is stored in a floating\npoint array of \"number of paths\" x \"number of permutations\" many entries. See\ntools folder for a Python script that reads and visualizes enrichment scores.\ncheckInput is a boolean flag that triggers sanity checks on the input -- keep\nthis always activated unless you know what you are doing. doublePrecision\ntriggers computation in double-precision. Note, single-precision is the default.\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Putting all together",
        "parent_header": [
          "cudaGSEA",
          "Running an example"
        ],
        "type": "Text_excerpt",
        "value": "```\nlibrary(cudaGSEA)                            # the cudaGSEA library\n\n# read data from cls, gmt and gct file formats\nexprsData <- loadExpressionDataFromGCT(\"data/GSE19429/GSE19429_series.gct\")\nlabelList <- loadLabelsFromCLS(\"data/GSE19429/GSE19429_series.cls\")\ngeneSets <- loadGeneSetsFromGMT(\"data/Pathways/h.all.v5.0.symbols.gmt\")\n\n# access CUDA devices\nlistCudaDevices()\nsetCudaDevice(0)\ngetCudaDevice()\n\n# configure GSEA\nnperm <- 1024                                # number of permutations\nmetric <- \"onepass_signal2noise\"             # metric string see README.md\ndump <- \"\"                                   # if not empty path to binary dump\ncheckInput <-TRUE                            # check first three inputs or not\ndoublePrecision <-FALSE                      # compute in single or double prec.\n\nGSEA(exprsData, labelList, geneSets, nperm, metric ,\n     dump, checkInput, doublePrecision)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:08:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "If something goes wrong",
        "parent_header": [
          "cudaGSEA",
          "Installation from source"
        ],
        "type": "Text_excerpt",
        "value": "The Makefile tries to automatically determine the correct paths for CUDA and\nR headers. This might not work properly if several CUDA or R versions are\ninstalled in parallel on your host system. In this case you have to explicitly\nset the correct paths to nvcc, R.h and Rcpp.h by altering the global\nenvironment variables:\n\n1. export CUDA_HOME=/path/to/cuda-7.5 (directory of bin/nvcc)\n\n2. export R_INC=/path/to/R/include (directory where R.hpp is located)\n\n3. export  RCPP_INC=/path/to/R/site-library/Rcpp/include (Rcpp.h)\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running an example",
        "parent_header": [
          "cudaGSEA"
        ],
        "type": "Text_excerpt",
        "value": "cudaGSEA is designed to run on collapsed data i.e. genes have to be identified\nby appropriate gene symbols in order to work with gene sets from the MSigDB\nof the Broad Institute\n(http://software.broadinstitute.org/gsea/msigdb/index.jsp).\nConsequently, you have to manually collapse a raw gene expression data set with\nthe chip file of the corresponding platform, e.g. by max pooling ambiguous\narray spots to a single and unique gene symbol.\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring the GPU",
        "parent_header": [
          "cudaGSEA",
          "Running an example"
        ],
        "type": "Text_excerpt",
        "value": "cudaGSEA comes with three functions in order to configure the active GPU.\n\n1. listCudaDevices() returns a list of CUDA-enabled accelerators.\n\n2. setCudaDevice(deviceId) configures cudaGSEA to use the GPU with the provided\ndevice id. This is effectively a wrapper of the CUDA command cudaSetDevice(...).\n\n3. getCudaDevice() returns the currently activated device. This is a wrapper to\nCUDA's cudaGetDevice() function. Note, if setCudaDevice uses an integer that\nis bigger than the amount of accessible GPUs then the device id defaults to 0.\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Loading data from Broad file formats",
        "parent_header": [
          "cudaGSEA",
          "Running an example"
        ],
        "type": "Text_excerpt",
        "value": "If you want to test cudaGSEA on data stored in .gct, .cls and .gmt files you\nmight use the three provided loading methods:\n\n1. loadExpressionDataFromGCT(\"/path/to/expression/data/file.gct\")\n\n2. loadLabelsFromCLS(\"/path/to/label/data/file.cls\")\n\n3. loadGeneSetsFromGMT(\"/path/to/gene/sets/file.gmt\")\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring the GSEA call",
        "parent_header": [
          "cudaGSEA",
          "Running an example"
        ],
        "type": "Text_excerpt",
        "value": "The GSEA method takes five default arguments and three optional arguments\n\n```\nGSEA <- function(exprsData, labelList, geneSets, numPermutations, metricString,\n                 dumpFileName=\"\", checkInput=TRUE, doublePrecision=FALSE) {...}\n\n```\n\nexprsData, labelList and geneSets refer to the data obtained in the previous\nsection. numPermutations denotes the number of permutations in the resampling\ntest, metricString denotes the local ranking measure (one of the following):\n\n- naive_diff_of_classes\n- naive_ratio_of_classes\n- naive_log2_ratio_of_classes\n- stable_diff_of_classes\n- stable_ratio_of_classes\n- stable_log2_ratio_of_classes\n- onepass_signal2noise\n- onepass_t_test\n- twopass_signal2noise\n- twopass_t_test\n- stable_signal2noise\n- stable_t_test\n- overkill_signal2noise\n- overkill_t_test\n\ndumpFileName specifies the name of a binary file which contains all enrichment\nscores for all permutations over all gene sets. The data is stored in a floating\npoint array of \"number of paths\" x \"number of permutations\" many entries. See\ntools folder for a Python script that reads and visualizes enrichment scores.\ncheckInput is a boolean flag that triggers sanity checks on the input -- keep\nthis always activated unless you know what you are doing. doublePrecision\ntriggers computation in double-precision. Note, single-precision is the default.\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Putting all together",
        "parent_header": [
          "cudaGSEA",
          "Running an example"
        ],
        "type": "Text_excerpt",
        "value": "```\nlibrary(cudaGSEA)                            # the cudaGSEA library\n\n# read data from cls, gmt and gct file formats\nexprsData <- loadExpressionDataFromGCT(\"data/GSE19429/GSE19429_series.gct\")\nlabelList <- loadLabelsFromCLS(\"data/GSE19429/GSE19429_series.cls\")\ngeneSets <- loadGeneSetsFromGMT(\"data/Pathways/h.all.v5.0.symbols.gmt\")\n\n# access CUDA devices\nlistCudaDevices()\nsetCudaDevice(0)\ngetCudaDevice()\n\n# configure GSEA\nnperm <- 1024                                # number of permutations\nmetric <- \"onepass_signal2noise\"             # metric string see README.md\ndump <- \"\"                                   # if not empty path to binary dump\ncheckInput <-TRUE                            # check first three inputs or not\ndoublePrecision <-FALSE                      # compute in single or double prec.\n\nGSEA(exprsData, labelList, geneSets, nperm, metric ,\n     dump, checkInput, doublePrecision)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gravitino/cudaGSEA/master/README.md",
      "technique": "header_analysis"
    }
  ]
}