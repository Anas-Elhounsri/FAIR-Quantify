{
  "application_domain": [
    {
      "confidence": 0.9040046858915142,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CahanLab/singleCellNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to calibrate/make sense of a given SCN score <a name=\"calibration\"></a>",
        "parent_header": [
          "singleCellNet",
          "Table of content"
        ],
        "type": "Text_excerpt",
        "value": "```R\n#this function aims to give you a sense of how precise/sensitive SCN is with the assigned score of a given cell type for a cell\n\n#tm_assess_matrix = tm_heldoutassessment$nonNA_PR\n\n#tm_assess_matrix is a held_out assessment metric extracted from tm_heldoutassessment, which is already stored in SCN.\n#e_assess_matrix is also provided for a gastrulation SCN classifier \n\nscore = 0.6\ncelltype = \"B cell\"\n\ncalibration = scn_calibration(score = score, celltype = celltype, matrix=tm_assess_matrix)\n#[1] \"SCN score of 0.6 for cell type B cell has precision of 0.979 ~ 0.979 and sensitivity of 0.93 ~ 0.93\"\n\ncalibration\n\n#$score\n#[1] 0.6\n\n#$celltype\n#[1] \"B cell\"\n\n#$precision\n#[1] 0.979 0.979\n\n#$recall\n#[1] 0.93 0.93\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-05-16T13:03:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-11-01T01:48:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SingleCellNet: classify single cells across species and platforms"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction <a name=\"introduction\"></a>",
        "parent_header": [
          "singleCellNet",
          "Table of content"
        ],
        "type": "Text_excerpt",
        "value": "SingleCellNet enables the classifcation of single cell RNA-Seq data across species and platforms. See our recent [publication](https://doi.org/10.1016/j.cels.2019.06.004) for more details. Additionally, we have a [vignette](https://pcahan1.github.io/singleCellNet/) to guide you through the steps as well.  \n\nHere, we illustrate ... \n\n- how to build and assess single cell classifiers \n\n- how to build and assess cross-species single cell classifiers\n\n- how to use these classifiers to quantify 'cell identity' from query scRNA-Seq data\n\nIf you want to use the bulk RNA-Seq version of CellNet, go to [bulk CellNet](https://github.com/pcahan1/CellNet).\n\nOur singleCellNet is available on Python [pySCN](https://github.com/pcahan1/PySingleCellNet/tree/master) which is Scanpy and AnnData compatible.\n\n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9650065231559816,
      "result": {
        "original_header": "Data <a name=\"data\"></a>",
        "type": "Text_excerpt",
        "value": "In this example, we use a subset of the Tabula Muris data to train singleCellNet. To learn more about the Tabula Muris project, see the [manuscript](https://www.biorxiv.org/content/early/2018/03/29/237446). As query data, we use scRNA-Seq of kidney cells as reported in [Park et al 2018](https://www.ncbi.nlm.nih.gov/pubmed/29622724). We also provide an example of classifying human, bead enriched PBMCs (from https://www.ncbi.nlm.nih.gov/pubmed/28091601). You can download this data here: \n*more training datasets (metadata and expression data) are provided at the bottom of the page.\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8041150613144334,
      "result": {
        "original_header": "Train the classifier",
        "type": "Text_excerpt",
        "value": "```diff\n- If you increase nTopGenes and nTopGenePairs, you may get a even better classifier performance on query data!\n```\n```R\nsystem.time(class_info<-scn_train(stTrain = stTrain, expTrain = expTrain, nTopGenes = 10, nRand = 70, nTrees = 1000, nTopGenePairs = 25, dLevel = \"newAnn\", colName_samp = \"cell\"))\n   user  system elapsed \n 476.839  25.809 503.351\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9658900382589729,
      "result": {
        "original_header": "Apply to held out data",
        "type": "Text_excerpt",
        "value": "```R\n#validate data\nstTestList = splitCommon(sampTab=stList[[2]], ncells=100, dLevel=\"newAnn\") #normalize validation data so that the assessment is as fair as possible\nstTest = stTestList[[1]]\nexpTest = expTMraw[commonGenes,rownames(stTest)]\n\n#predict\nclassRes_val_all = scn_predict(cnProc=class_info[['cnProc']], expDat=expTest, nrand = 50)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.806554255129987,
      "result": {
        "original_header": "Classification result heatmap",
        "type": "Text_excerpt",
        "value": "```R\n\n#Create a name vector label used later in classification heatmap where the values are cell types/ clusters and names are the sample names\n \nnrand = 50\nsla = as.vector(stTest$newAnn)\nnames(sla) = as.vector(stTest$cell)\nslaRand = rep(\"rand\", nrand) \nnames(slaRand) = paste(\"rand_\", 1:nrand, sep='')\nsla = append(sla, slaRand) #include in the random cells profile created\n\nsc_hmClass(classMat = classRes_val_all,grps = sla, max=300, isBig=TRUE)\n```\n<img src=\"md_img/tm_heldout_hm_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9192489493256085,
      "result": {
        "original_header": "Classification annotation assignment",
        "type": "Text_excerpt",
        "value": "```R\n# This classifies a cell with  the catgory with the highest classification score or higher than a classification score threshold of your choosing.\n# The annotation result can be found in a column named category in the query sample table.\n\nstPark <- get_cate(classRes = crParkall, sampTab = stPark, dLevel = \"description1\", sid = \"sample_name\", nrand = nqRand)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.931293883840301,
      "result": {
        "original_header": "Limit anlaysis to a subset of the TM cell types",
        "type": "Text_excerpt",
        "value": "```R\ncts = c(\"B cell\",  \"cardiac muscle cell\", \"endothelial cell\", \"erythroblast\", \"granulocyte\", \"hematopoietic precursor cell\", \"late pro-B cell\", \"limb_mesenchymal\", \"macrophage\", \"mammary_basal_cell\", \"monocyte\", \"natural killer cell\", \"T cell\", \"trachea_epithelial\", \"trachea_mesenchymal\")\n\nstTM2 = filter(stTM, newAnn %in% cts)\nstTM2 = droplevels(stTM2)\nrownames(stTM2) = as.vector(stTM2$cell) # filter strips rownames\n\nexpTMraw2 = expTrainOrth[,rownames(stTM2)]\ndim(expTMraw2)\n[1] 14550 15161\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.874843848471345,
      "result": {
        "original_header": "Train Classifier",
        "type": "Text_excerpt",
        "value": "#### Apply to held out data\n```R\n#validate data\nstTestList = splitCommon(stList[[2]], ncells=100, dLevel=\"newAnn\") \nstTest = stTestList[[1]]\nexpTest = expTMraw2[,rownames(stTest)]\n\n#predict\nsystem.time(classRes_val_all2 <- scn_predict(class_info2[['cnProc']], expTest, nrand = 50))\n   user  system elapsed \n  0.691   0.032   0.724 \n``` \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9500537145644252,
      "result": {
        "original_header": "How to integrate loom file to SCN <a name=\"loom\"></a>",
        "type": "Text_excerpt",
        "value": "```R\nlfile = loadLoomExpCluster(\"pbmc_6k.loom\", cellNameCol = \"obs_names\", xname = \"description\")\nstQuery = lfile$sampTab\ndim(stQuery)\n[1] 6000    2\n\nexpQuery = lfile$expDat\ndim(expQuery)\n[1] 32643  6000\n\n#With this you can rerun the cross-species analysis and follow the exact same steps\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9427541624776653,
      "result": {
        "original_header": "Integrate SCE object to SCN analysis <a name=\"sce\"></a>",
        "type": "Text_excerpt",
        "value": "```R\n#exp_type options can be: counts, data, and scale.data if they are available in your sce object\nscefile = extractSCE(sce_object, exp_slot_name = \"counts\") \nsampTab = scefile$sampTab\nexpDat = scefile$expDat\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9080136524280998,
      "result": {
        "original_header": "More training data for your own analysis <a name=\"trainsets\"></a>",
        "type": "Text_excerpt",
        "value": "|    study    |   species  | organ/tissue| seq method |    data    |\n|-------------|------------|-------------|------------|------------|\n|    Baron    |    mouse   |   pancreas  |   inDrop   |[data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Baron_mouse.rda)|\n|    Baron    |    human   |   pancreas  |   inDrop   |[data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Baron_human.rda)|\n|   Murano*   |    human   |   pancreas  |  Cel-Seq2  | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_murano.rda)|\n|  Segerstolp |    human   |   pancreas  | Smart-Seq  | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Segerstolpe.rda)|\n|    Park     |    human   |    kidney   |     10x    | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Park.rda)|\n|    Haber    |    mouse   |   intestine | Smart-Seq2 | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Haber.rda)|\n|    TM10x    |    mouse   | atlas subset|     10x    | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_tm10x.rda)|\n|    TM10x    |    mouse   |    atlas    |     10x    | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_tm10x_full_011521.rda)|\n|    TMfacs   |    mouse   | atlas subset|  Smart-Seq |[data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_tmfacs.rda)|\n|    TMfacs   |    mouse   |    atlas    |  Smart-Seq |[data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_tmfacs_full.rda)|\n|    MWS      |    mouse   |    atlas    |microwell-seq|[data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_MWS.rda)|\n|    Zeisel   |    mouse   | barin altas |     10x    | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Zeisel.rda)|\n|    Loo      |    mouse   |cortex(e14.5)|   Dropseq  | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Loo.rda)|\n|    Darmanis |    human   |    cortex   |     C1     | [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Darminis.rda)|\n|    Gokce*   |    human   |   striatum  |C1 and Smart-Seq2| [data](https://s3.amazonaws.com/cnobjects/singleCellNet/resources/stList_Gocke.rda)| \n*the expresion data is log-transformed.\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pcahan1/singleCellNet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CahanLab/singleCellNet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CahanLab/singleCellNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "singleCellNet"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm_heldout_pr_041620.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm_heldout_metrics_041620.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm_heldout_hm_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm_heldout_attr_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm_heldout_tp_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm_park_hm_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm_park_vio_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm_park_sky_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_heldout_pr_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_heldout_metrics_041620.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_heldout_hm_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_heldout_attr_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_pr_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_metrics_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_hm_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_vio_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_vio_adjW_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_vio_sub_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_attr_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_attr_sub_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_umap_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet//master/md_img/tm2_pbmc_tp_082219.png"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "singleCellNet",
          "Table of content",
          "Training <a name=\"train\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "```R\ninstall.packages(\"devtools\")\ndevtools::install_github(\"pcahan1/singleCellNet\")\nlibrary(singleCellNet)\n```"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional set up if you are working with loom files",
        "parent_header": [
          "singleCellNet",
          "Table of content",
          "Training <a name=\"train\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "```\ndevtools::install_github(repo = \"hhoeflin/hdf5r\")\ndevtools::install_github(repo = \"mojaveazure/loomR\", ref = \"develop\")\nlibrary(loomR)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Find genes in common to the data sets and limit analysis to these",
        "parent_header": [
          "singleCellNet",
          "Table of content",
          "Training <a name=\"train\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "```R\ncommonGenes = intersect(rownames(expTMraw), genesPark)\nlength(commonGenes)\n[1] 13831\n\nexpTMraw = expTMraw[commonGenes,]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Fetch the data if you have not already done so",
        "type": "Text_excerpt",
        "value": "```R\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/sampTab_Park_MouseKidney_062118.rda\", \"sampTab_Park_MouseKidney_062118.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/expMatrix_Park_MouseKidney_Oct_12_2018.rda\", \"expMatrix_Park_MouseKidney_Oct_12_2018.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/expMatrix_TM_Raw_Oct_12_2018.rda\", \"expMatrix_TM_Raw_Oct_12_2018.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/sampTab_TM_053018.rda\", \"sampTab_TM_053018.rda\")\n\n## For cross-species analyis:\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/human_mouse_genes_Jul_24_2018.rda\", \"human_mouse_genes_Jul_24_2018.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/6k_beadpurfied_raw.rda\", \"6k_beadpurfied_raw.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/stDat_beads_mar22.rda\", \"stDat_beads_mar22.rda\")\n\n## To demonstrate how to integrate loom files to SCN\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/pbmc_6k.loom\", \"pbmc_6k.loom\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8429383544268196,
      "result": {
        "original_header": "How to integrate loom file to SCN <a name=\"loom\"></a>",
        "type": "Text_excerpt",
        "value": "```R\nlfile = loadLoomExpCluster(\"pbmc_6k.loom\", cellNameCol = \"obs_names\", xname = \"description\")\nstQuery = lfile$sampTab\ndim(stQuery)\n[1] 6000    2\n\nexpQuery = lfile$expDat\ndim(expQuery)\n[1] 32643  6000\n\n#With this you can rerun the cross-species analysis and follow the exact same steps\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8334421012234933,
      "result": {
        "original_header": "Fetch the data if you have not already done so",
        "type": "Text_excerpt",
        "value": "```R\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/sampTab_Park_MouseKidney_062118.rda\", \"sampTab_Park_MouseKidney_062118.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/expMatrix_Park_MouseKidney_Oct_12_2018.rda\", \"expMatrix_Park_MouseKidney_Oct_12_2018.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/expMatrix_TM_Raw_Oct_12_2018.rda\", \"expMatrix_TM_Raw_Oct_12_2018.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/sampTab_TM_053018.rda\", \"sampTab_TM_053018.rda\")\n\n## For cross-species analyis:\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/human_mouse_genes_Jul_24_2018.rda\", \"human_mouse_genes_Jul_24_2018.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/6k_beadpurfied_raw.rda\", \"6k_beadpurfied_raw.rda\")\n\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/stDat_beads_mar22.rda\", \"stDat_beads_mar22.rda\")\n\n## To demonstrate how to integrate loom files to SCN\ndownload.file(\"https://s3.amazonaws.com/cnobjects/singleCellNet/examples/pbmc_6k.loom\", \"pbmc_6k.loom\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8492216265207545,
      "result": {
        "original_header": "Assess classifier",
        "type": "Text_excerpt",
        "value": "```R\ntm_heldoutassessment = assess_comm(ct_scores = classRes_val_all, stTrain = stTrain, stQuery = stTest, dLevelSID = \"cell\", classTrain = \"newAnn\", classQuery = \"newAnn\", nRand = 50)\n\nplot_PRs(tm_heldoutassessment)\n```\n<img src=\"md_img/tm_heldout_pr_041620.png\"/>\n```R\nplot_metrics(tm_heldoutassessment)\n```\n<img src=\"md_img/tm_heldout_metrics_041620.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.843295511784959,
      "result": {
        "original_header": "Attribution plot",
        "type": "Text_excerpt",
        "value": "```R\nplot_attr(classRes=classRes_val_all, sampTab=stTest, nrand=nrand, dLevel=\"newAnn\", sid=\"cell\")\n```\n<img src=\"md_img/tm_heldout_attr_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.921118691885406,
      "result": {
        "original_header": "Viusalize average top pairs genes expression for training data",
        "type": "Text_excerpt",
        "value": "```R\ngpTab = compareGenePairs(query_exp = expTest, training_exp = expTrain, training_st = stTrain, classCol = \"newAnn\", sampleCol = \"cell\", RF_classifier = class_info$cnProc$classifier, numPairs = 20, trainingOnly= TRUE)\n\ntrain = findAvgLabel(gpTab = gpTab, stTrain = stTrain, dLevel = \"newAnn\")\n\nhm_gpa_sel(gpTab, genes = class_info$cnProc$xpairs, grps = train, maxPerGrp = 50)\n```\n<img src=\"md_img/tm_heldout_tp_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8056758664263137,
      "result": {
        "original_header": "Visualization <a name=\"visualization\"></a>",
        "type": "Text_excerpt",
        "value": "```R\nsgrp = as.vector(stPark$description1)\nnames(sgrp) = as.vector(stPark$sample_name)\ngrpRand =rep(\"rand\", nqRand)\nnames(grpRand) = paste(\"rand_\", 1:nqRand, sep='')\nsgrp = append(sgrp, grpRand)\n\n# heatmap classification result\nsc_hmClass(crParkall, sgrp, max=5000, isBig=TRUE, cCol=F, font=8)\n```\n<img src=\"md_img/tm_park_hm_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8447584133667213,
      "result": {
        "original_header": "Classification result violin plot",
        "type": "Text_excerpt",
        "value": "```R\nsc_violinClass(sampTab = stPark, classRes = crParkall, sid = \"sample_name\", dLevel = \"description1\", addRand = nqRand)\n```\n<img src=\"md_img/tm_park_vio_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8094060463464152,
      "result": {
        "original_header": "Skyline plot of classification results",
        "type": "Text_excerpt",
        "value": "```R\nlibrary(viridis)\nstKid2 = addRandToSampTab(crParkall, stPark, \"description1\", \"sample_name\")\nskylineClass(crParkall, \"T cell\", stKid2, \"description1\",.25, \"sample_name\")\n```\n<img src=\"md_img/tm_park_sky_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8360202536404259,
      "result": {
        "original_header": "Train Classifier",
        "type": "Text_excerpt",
        "value": "#### Assess classifier\n```R\ntm_heldoutassessment = assess_comm(ct_scores = classRes_val_all2, stTrain = stTrain, stQuery = stTest, dLevelSID = \"cell\", classTrain = \"newAnn\", classQuery = \"newAnn\", nRand = 50)\n\nplot_PRs(tm_heldoutassessment)\n```\n<img src=\"md_img/tm2_heldout_pr_082219.png\">\n```R\nplot_metrics(tm_heldoutassessment)\n```\n<img src=\"md_img/tm2_heldout_metrics_041620.png\">\n \n#### Classification result heatmap\n```R\nnrand=50\nsla = as.vector(stTest$newAnn)\nnames(sla) = as.vector(stTest$cell)\nslaRand = rep(\"rand\", nrand)\nnames(slaRand) = paste(\"rand_\", 1:nrand, sep='')\nsla = append(sla, slaRand)\n\n# heatmap classification result\nsc_hmClass(classRes_val_all2, sla, max=300, font=7, isBig=TRUE)\n```\n<img src=\"md_img/tm2_heldout_hm_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.843295511784959,
      "result": {
        "original_header": "Attribute plot",
        "type": "Text_excerpt",
        "value": "```R\nplot_attr(classRes_val_all2, stTest, nrand=nrand, dLevel=\"newAnn\", sid=\"cell\")\n```\n<img src=\"md_img/tm2_heldout_attr_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8306491169716285,
      "result": {
        "original_header": "Assess classifier with external dataset <a name=\"ex_assess\"></a>",
        "type": "Text_excerpt",
        "value": "```R\ntm_pbmc_assessment = assess_comm(ct_scores = crHS, stTrain = stTrain, stQuery = stQuery, classTrain = \"newAnn\",classQuery=\"description\",dLevelSID=\"sample_name\")\nplot_PRs(tm_pbmc_assessment)\n```\n<img src=\"md_img/tm2_pbmc_pr_082219.png\">\n```R\nplot_metrics(tm_pbmc_assessment)\n```\n<img src=\"md_img/tm2_pbmc_metrics_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8021410815927407,
      "result": {
        "original_header": "Classification violin plot",
        "type": "Text_excerpt",
        "value": "```R\nsc_violinClass(sampTab = stQuery, classRes = crHS, sid = \"sample_name\", dLevel = \"description\")\n```\n<img src=\"md_img/tm2_pbmc_vio_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8887639855583289,
      "result": {
        "original_header": "Classification violin plot with selected cluster",
        "type": "Text_excerpt",
        "value": "#### Attribution plot\n```R\nplot_attr(crHS, stQuery, nrand=nqRand, sid=\"sample_name\", dLevel=\"description\")\n```\n<img src=\"md_img/tm2_pbmc_attr_082219.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CahanLab/singleCellNet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Patrick Cahan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "singleCellNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CahanLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 135351,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pcahan1/singleCellNet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yuqiyuqitan",
          "type": "User"
        },
        "date_created": "2019-09-18T21:54:34Z",
        "date_published": "2019-10-10T19:05:04Z",
        "description": "package most recent update for benchmar",
        "html_url": "https://github.com/CahanLab/singleCellNet/releases/tag/v0.4.1",
        "name": "singleCellNet new release",
        "release_id": 20621049,
        "tag": "v0.4.1",
        "tarball_url": "https://api.github.com/repos/CahanLab/singleCellNet/tarball/v0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/CahanLab/singleCellNet/releases/20621049",
        "value": "https://api.github.com/repos/CahanLab/singleCellNet/releases/20621049",
        "zipball_url": "https://api.github.com/repos/CahanLab/singleCellNet/zipball/v0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yuqiyuqitan",
          "type": "User"
        },
        "date_created": "2019-08-23T17:21:11Z",
        "date_published": "2019-08-23T17:37:58Z",
        "description": "This version introduces \r\n1) a sped up version of training (ptGetTop function)\r\n2) more self-contained training (scn_train) and prediction steps (scn_predict).\r\n3) introduce heatmap to visualize topGenePair expression in both training and query\r\n\r\nIt also removed some of the older functions that is no longer in use.  \r\n",
        "html_url": "https://github.com/CahanLab/singleCellNet/releases/tag/0.4.0",
        "name": "Speed up training",
        "release_id": 19501473,
        "tag": "0.4.0",
        "tarball_url": "https://api.github.com/repos/CahanLab/singleCellNet/tarball/0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/CahanLab/singleCellNet/releases/19501473",
        "value": "https://api.github.com/repos/CahanLab/singleCellNet/releases/19501473",
        "zipball_url": "https://api.github.com/repos/CahanLab/singleCellNet/zipball/0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pcahan1",
          "type": "User"
        },
        "date_created": "2019-07-11T17:31:08Z",
        "date_published": "2019-07-11T17:01:43Z",
        "description": "Minor bug fixes + improved documentation.\r\n",
        "html_url": "https://github.com/CahanLab/singleCellNet/releases/tag/v0.3.1",
        "name": "SingleCellNet v0.3.1",
        "release_id": 18558958,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/CahanLab/singleCellNet/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/CahanLab/singleCellNet/releases/18558958",
        "value": "https://api.github.com/repos/CahanLab/singleCellNet/releases/18558958",
        "zipball_url": "https://api.github.com/repos/CahanLab/singleCellNet/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pcahan1",
          "type": "User"
        },
        "date_created": "2018-12-28T23:35:55Z",
        "date_published": "2018-12-28T23:37:35Z",
        "description": "First public release",
        "html_url": "https://github.com/CahanLab/singleCellNet/releases/tag/v0.2.0",
        "name": "singleCellNet v0.2.0",
        "release_id": 14736512,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/CahanLab/singleCellNet/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/CahanLab/singleCellNet/releases/14736512",
        "value": "https://api.github.com/repos/CahanLab/singleCellNet/releases/14736512",
        "zipball_url": "https://api.github.com/repos/CahanLab/singleCellNet/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pcahan1",
          "type": "User"
        },
        "date_created": "2018-01-18T17:17:52Z",
        "date_published": "2018-06-06T21:30:26Z",
        "description": "This is an initial release to get the ball rolling, with many extraneous functions and limited functionality beyond gpaRecurse",
        "html_url": "https://github.com/CahanLab/singleCellNet/releases/tag/v0.1.0-alpha",
        "name": "gpaRecurse",
        "release_id": 11359085,
        "tag": "v0.1.0-alpha",
        "tarball_url": "https://api.github.com/repos/CahanLab/singleCellNet/tarball/v0.1.0-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/CahanLab/singleCellNet/releases/11359085",
        "value": "https://api.github.com/repos/CahanLab/singleCellNet/releases/11359085",
        "zipball_url": "https://api.github.com/repos/CahanLab/singleCellNet/zipball/v0.1.0-alpha"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:20:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 130
      },
      "technique": "GitHub_API"
    }
  ]
}