{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/varnerlab/POETs.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-05-04T19:31:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-05T14:45:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "POETs implementation in the Julia programming language"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9433072866740124,
      "result": {
        "original_header": "Background",
        "type": "Text_excerpt",
        "value": "POETs.jl is a [Julia](http://http://julialang.org) package that implements the Pareto Optimal Ensemble Techniques (POETs) method for multiobjective optimization. For background on the original POETs algorithm see: \nand for its updated implementation in Julia: \n"
      },
      "source": "https://raw.githubusercontent.com/varnerlab/POETs.jl/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/varnerlab/POETs.jl/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/varnerlab/POETs.jl/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "varnerlab/POETs.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/varnerlab/POETs.jl/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Within [Julia](http://http://julialang.org), use the ``clone`` command of the package manager to download and install the POETs repository:\n\n```\nPkg.clone(\"git://github.com/varnerlab/POETs.jl\")\n```\nTo use POETs in your project (following installation) simply issue the command:\n\n```\nusing POETs\n```\nTo test the POETs installation use:\n\n```\nPkg.test(\"POETs\")\n```\nwhich runs test examples from the ``test`` directory. Lastly, to delete the JuPOETs package use the command:\n\n```\nPkg.rm(\"POETs\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/varnerlab/POETs.jl/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/varnerlab/POETs.jl/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "POETs.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "varnerlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "size": 11103,
        "type": "Programming_language",
        "value": "Julia"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/varnerlab/POETs.jl/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:20:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I get started with JuPOETs?",
        "type": "Text_excerpt",
        "value": "First, make sure [Julia](http://http://julialang.org) is installed on your computer. Next, clone the JuPOETs package to your Julia installation (using the ``Pkg.clone()`` command shown above). Lastly, write your problem specific functions (``objective``,``neighbor``,``cooling`` and ``acceptance``) which are required by JuPOETs, and your ready to go. We've included sample code to help you get started with JuPOETs in your project. The sample can be found in the ``sample/biochemical`` subdirectory. The sample encodes the estimation of an ensemble of biochemical model parameters from four conflicting training data sets. The driver for this sample is given in the ``run_biochemical_test.jl`` file, while the ``objective``,``neighbor``,``cooling`` and ``acceptance`` functions (required by JuPOETs) are encoded in the ``hcmem_lib.jl`` library."
      },
      "source": "https://raw.githubusercontent.com/varnerlab/POETs.jl/master/README.md",
      "technique": "header_analysis"
    }
  ]
}