{
  "application_domain": [
    {
      "confidence": 13.76,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits and Thanks",
        "parent_header": [
          "Nanopolish"
        ],
        "type": "Text_excerpt",
        "value": "The fast table-driven logsum implementation was provided by Sean Eddy as public domain code. This code was originally part of [hmmer3](http://hmmer.janelia.org/). Nanopolish also includes code from Oxford Nanopore's [scrappie](https://github.com/nanoporetech/scrappie) basecaller. This code is licensed under the MPL.\n\nThe `scripts/compare_methylation.py` was originally provided in the [example methylation data bundle](warwick.s3.climb.ac.uk/nanopolish_tutorial/methylation_example.tar.gz) which was obtained using:\n```\ncurl -O warwick.s3.climb.ac.uk/nanopolish_tutorial/methylation_example.tar.gz\ntar xvfz methylation_example.tar.gz\nls methylation_example/compare_methylation.py\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jts/nanopolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-12-17T16:23:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-29T16:56:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Signal-level algorithms for MinION data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9967958109330962,
      "result": {
        "original_header": "Nanopolish",
        "type": "Text_excerpt",
        "value": "Software package for signal-level analysis of Oxford Nanopore sequencing data. Nanopolish can calculate an improved consensus sequence for a draft genome assembly, detect base modifications, call SNPs and indels with respect to a reference genome and more (see Nanopolish modules, below). \n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9052951431687863,
      "result": {
        "original_header": "Release notes",
        "type": "Text_excerpt",
        "value": "* 0.13.3: fix conda build issues, better handling of VBZ-compressed files, integration of module for [nano-COP](https://www.nature.com/articles/s41596-020-00469-y) \n* 0.13.0: modify HMM transitions to allow the balance between insertions and deletions to be changed depending on mode (consensus vs reference variants) \n* 0.12.4: add SupportFractionByStrand and SOR to VCF \n* 0.12.2: add RefContext info to VCF output of `nanopolish variants` \n* 0.12.1: improve how `nanopolish index` handles summary files, add support for selecting reads by BAM read group tags (for `nanopolish variants`) \n* 0.11.1: `nanopolish polya` now supports SQK-RNA-002 kits with automatic backwards-compatibility with SQK-RNA-001 \n* 0.11.0: support for multi-fast5 files. `nanopolish methyltrain` now subsamples input data, improving speed and memory usage \n* 0.10.1: `nanopolish variants --consensus` now only outputs a VCF file instead of a fasta sequence. The VCF file describes the changes that need to be made to turn the draft sequence into the polished assembly. A new program, `nanopolish vcf2fasta`, is provided to generate the polished genome (this replaces `nanopolish_merge.py`, see usage instructions below). This change is to avoid issues when merging segments that end on repeat boundaries (reported by Michael Wykes and Chris Wright).\n \n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9890202207650596,
      "result": {
        "original_header": "Nanopolish modules",
        "type": "Text_excerpt",
        "value": "The main subprograms of nanopolish are:\n```\nnanopolish call-methylation: predict genomic bases that may be methylated\nnanopolish variants: detect SNPs and indels with respect to a reference genome\nnanopolish variants --consensus: calculate an improved consensus sequence for a draft genome assembly\nnanopolish eventalign: align signal-level events to k-mers of a reference genome\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://nanopolish.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/jts/nanopolish/wiki"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jts/nanopolish/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 159
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jts/nanopolish/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jts/nanopolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Nanopolish"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jts/nanopolish/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jts/nanopolish/master/scripts/import_ont_models_from_dir.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing the latest code from github (recommended)",
        "parent_header": [
          "Nanopolish",
          "Installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "You can download and compile the latest code from github as follows:\n\n```\ngit clone --recursive https://github.com/jts/nanopolish.git\ncd nanopolish\nmake\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing a particular release",
        "parent_header": [
          "Nanopolish",
          "Installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "When major features have been added or bugs fixed, we will tag and release a new version of nanopolish. If you wish to use a particular version, you can checkout the tagged version before compiling:\n\n```\ngit clone --recursive https://github.com/jts/nanopolish.git\ncd nanopolish\ngit checkout v0.9.2\nmake\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9438522793496718,
      "result": {
        "original_header": "Release notes",
        "type": "Text_excerpt",
        "value": "* 0.14.1: added the `compare_methylation.py` script from the [methylation example data bundle](warwick.s3.climb.ac.uk/nanopolish_tutorial/methylation_example.tar.gz) to the `nanopolish` package \n* 0.14.0: support modification bam files, compile on M1 apple hardware, support [SLOW5](https://github.com/hasindu2008/slow5lib) files \n* 0.13.3: fix conda build issues, better handling of VBZ-compressed files, integration of module for [nano-COP](https://www.nature.com/articles/s41596-020-00469-y) \n* 0.12.3: fix hdf5 file handle leak \n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jts/nanopolish/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, c-plus-plus, epigenetics, genome-assembly, methylation, science"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2015 Ontario Institute for Cancer Research\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. \n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nanopolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jts"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 6054827,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 59252,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 9579,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 6914,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 603,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 284,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 226,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Nanopolish"
        ],
        "type": "Text_excerpt",
        "value": "A compiler that supports C++11 is needed to build nanopolish. Development of the code is performed using [gcc-4.8](https://gcc.gnu.org/gcc-4.8/).\n\nBy default, nanopolish will download and compile all of its required dependencies. Some users however may want to use system-wide versions of the libraries. To turn off the automatic installation of dependencies set `HDF5=noinstall`, `EIGEN=noinstall`, `HTS=noinstall` or `MINIMAP2=noinstall` parameters when running `make` as appropriate. The current versions and compile options for the dependencies are:\n\n* [libhdf5-1.8.14](http://www.hdfgroup.org/HDF5/release/obtain5.html) compiled with multi-threading support `--enable-threadsafe`\n* [eigen-3.2.5](http://eigen.tuxfamily.org)\n* [htslib-1.15.1](http://github.com/samtools/htslib)\n* [minimap2-fe35e67](http://github.com/lh3/minimap2)\n* [slow5lib-3680e17](https://github.com/hasindu2008/slow5lib)\n\nIn order to use the additional python3 scripts within `/scripts`, install the dependencies via\n\n```\npip install -r scripts/requirements.txt --user\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To run using docker",
        "parent_header": [
          "Nanopolish"
        ],
        "type": "Text_excerpt",
        "value": "First build the image from the dockerfile:\n```\ndocker build .\n```\nNote the uuid given upon successful build.\nThen you can run nanopolish from the image:\n```\ndocker run -v /path/to/local/data/data/:/data/ -it :image_id  ./nanopolish eventalign -r /data/reads.fa -b /data/alignments.sorted.bam -g /data/ref.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:26:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 568
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "A note on R10 support",
        "parent_header": [
          "Nanopolish"
        ],
        "type": "Text_excerpt",
        "value": "Presently nanopolish does not support R10.4 flowcells as variant and methylation calling is accurate enough to not require signal-level analysis. We intend to support signal exploration through `eventalign` but do not currently have a timeline for this as our development time is currently dedicated to other projects.\n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preprocessing",
        "parent_header": [
          "Nanopolish",
          "Analysis workflow examples"
        ],
        "type": "Text_excerpt",
        "value": "Nanopolish needs access to the signal-level data measured by the nanopore sequencer. The first step of any nanopolish workflow is to prepare the input data by telling nanopolish where to find the signal files. If you ran Albacore 2.0 on your data you should run `nanopolish index` on your input reads (-d can be specified more than once if using multiple runs):\n\n```\n# Index the output of the basecaller\nnanopolish index -d /path/to/raw_fast5s/ -s sequencing_summary.txt basecalled_output.fastq # for FAST5 inout\nnanopolish index basecalled_output.fastq --slow5 signals.blow5 # for SLOW5 input\n```\n\nThe `-s` option tells nanopolish to read the `sequencing_summary.txt` file from Albacore to speed up indexing. Without this option `nanopolish index` is extremely slow as it needs to read every fast5 file individually. If you basecalled your run in parallel, so you have multiple `sequencing_summary.txt` files, you can use the `-f` option to pass in a file containing the paths to the sequencing summary files (one per line). When using SLOW5 files as the input (FAST5 can be converted to SLOW5 using [slow5tools](https://github.com/hasindu2008/slow5tools)), `-s` option is not required and does not affect indexing performance. \n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Computing a new consensus sequence for a draft assembly",
        "parent_header": [
          "Nanopolish",
          "Analysis workflow examples"
        ],
        "type": "Text_excerpt",
        "value": "The original purpose of nanopolish was to compute an improved consensus sequence for a draft genome assembly produced by a long-read assembly like [canu](https://github.com/marbl/canu). This section describes how to do this, starting with your draft assembly which should have megabase-sized contigs. We've also posted a tutorial including example data [here](http://nanopolish.readthedocs.io/en/latest/quickstart_consensus.html).\n\n```\n# Index the draft genome\nbwa index draft.fa\n\n# Align the basecalled reads to the draft sequence\nbwa mem -x ont2d -t 8 draft.fa reads.fa | samtools sort -o reads.sorted.bam -T reads.tmp -\nsamtools index reads.sorted.bam\n```\n\nNow, we use nanopolish to compute the consensus sequence (the genome is polished in 50kb blocks and there will be one output file per block). We'll run this in parallel:\n\n```\npython3 nanopolish_makerange.py draft.fa | parallel --results nanopolish.results -P 8 \\\n    nanopolish variants --consensus -o polished.{1}.vcf -w {1} -r reads.fa -b reads.sorted.bam -g draft.fa -t 4 --min-candidate-frequency 0.1\n```\n\nThis command will run the consensus algorithm on eight 50kbp segments of the genome at a time, using 4 threads each. Change the ```-P``` and ```--threads``` options as appropriate for the machines you have available.\n\nAfter all polishing jobs are complete, you can merge the individual 50kb segments together back into the final assembly:\n\n```\nnanopolish vcf2fasta -g draft.fa polished.*.vcf > polished_genome.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jts/nanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ]
}