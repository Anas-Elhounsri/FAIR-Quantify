{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/seryrzu/centroFlye"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "parent_header": [
          "Cloning"
        ],
        "type": "Text_excerpt",
        "value": "Please report any problems to the [issue tracker](https://github.com/seryrzu/centroFlye/issues).\nAlternatively, you can write directly to [abzikadze@ucsd.edu](mailto:abzikadze@ucsd.edu).\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-13T04:47:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-23T00:27:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": " An algorithm for centromere assembly using long error-prone reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9577477725555484,
      "result": {
        "original_header": "centroFlye",
        "type": "Text_excerpt",
        "value": "**UPD May 24, 2021:** The latest version of cenX and cen6 assemblies in CHM13 cell line are available as a part of a complete assembly of a human genome generated by the Telomere-to-Telomere Consortium ([github](https://github.com/marbl/CHM13)).\nAssemblies described below should be considered interim versions and are deprecated. \n**Disclaimer:** To replicate the assemblies from the Nature Biotechnology paper (see `Publications`), please consider branch `cF_NatBiotech_paper_Xv0.8.3-6v0.1.3`.\nThe version of centroFlye (and the corresponding assemblies) in `master` branch can be more recent.\n \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9969621771501974,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "centroFlye (Bzikadze et al., 2020) is an algorithm for centromere assembly using long error-prone reads.\nCurrently it supports assembly of a human centromere 6 (referred to as cen6) and X (referred to as cenX).\nHere we show how to apply it for the cen6 and cenX of the CHM13hTERT human cell line.\nThe comparison of various cenX assemblies can be found in Bzikadze et al., 2020 and Mikheenko et al., 2020.\n \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9694796173207342,
      "result": {
        "original_header": "Availability",
        "type": "Text_excerpt",
        "value": "The assemblies produced by the version of centroFlye in this branch are presented in the Nature Biotechnology paper (see `Publications`).\nThese assemblies and all intermediate results of the pipeline described below are published at [ZENODO](http://doi.org/10.5281/zenodo.3897531).\nFor the latest versions of any assemblies produced by centroFlye please consult the `master` branch.\n \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8516003771515991,
      "result": {
        "original_header": "Pipeline for cenX (centroFlye)",
        "type": "Text_excerpt",
        "value": "In this manual we go step-by-step demonstrating centroFlye algorithm.\nThe detailed information about the algorithm can be found in the paper. \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9686220629454382,
      "result": {
        "original_header": "1. Recruitment of cenX reads",
        "type": "Text_excerpt",
        "value": "We use 50x ultra-long Oxford Nanopore dataset generated by [Telomere2Telomere Consorsium](https://github.com/nanopore-wgs-consortium/CHM13), rel2.\nThis step is run directly on the reads at the [link](https://s3.amazonaws.com/nanopore-human-wgs/chm13/nanopore/rel2/rel2.fastq.gz).\nThe following bash script splits the input file in 50 files and runs DXZ1-based recruitment in 50 threads.\nDXZ1 is supplied in the current repo at ``supplementary_data/DXZ1_rc.fasta``.\nThe result of this step is a fasta file with centromeric reads that is stored at `results_cenX/centromeric_reads/centromeric_reads.fasta` \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9542455450047526,
      "result": {
        "original_header": "1. Recruitment of cen6 reads",
        "type": "Text_excerpt",
        "value": "From the root of the project run \n```\nmake -C scripts/read_recruitment\n```\nand start recruitment (`<path_to_CHM13>` is where the ONT reads are located, see section `Dependencies/Data`):\nBASH2*\n**Required resources**:\n+ Storage space: 150GB\n+ Clock time: 1 hour\n+ RAM: < 50MB \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9723427100172319,
      "result": {
        "original_header": "2. Applying centroFlye to cenX reads",
        "type": "Text_excerpt",
        "value": "At this step we are utilizing centromeric reads from step 1 and run centroFlye on them.\nThe result of this step is the final cenX assembly that is stored at `results_cenX/final_assembly.fasta`.\nThe following command uses 50 threads.\n```\npython centroFlye.py \\\n            --coverage 32 \\\n            --reads results_cenX/centromeric_reads/centromeric_reads.fasta \\\n            -t 50 \\\n            --outdir results_cenX \\\n            --unit supplementary_data/DXZ1_rc.fasta\n```\n**Required resources**:\n+ Storage space: < 3GB\n+ Clock time: ~9 hours (mostly recruitment of unique k-mers)\n+ RAM: peak usage up to 800GB\n \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8516003771515991,
      "result": {
        "original_header": "Pipeline for cen6 (centroFlyeMono)",
        "type": "Text_excerpt",
        "value": "In this manual we go step-by-step demonstrating centroFlyeMono algorithm.\nThe detailed information about the algorithm can be found in the paper. \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9686220629454382,
      "result": {
        "original_header": "1. Recruitment of cen6 reads",
        "type": "Text_excerpt",
        "value": "We use 120x ultra-long Oxford Nanopore dataset generated by [Telomere2Telomere Consorsium](https://github.com/nanopore-wgs-consortium/CHM13), rel3.\nThis step is run directly on the reads at the [link](https://s3.amazonaws.com/nanopore-human-wgs/chm13/nanopore/rel3/rel3.fastq.gz).\nThe following bash script splits the input file in 50 files and runs D6Z1-based recruitment in 50 threads.\nD6Z1 is supplied in the current repo at ``supplementary_data/D6Z1.fasta``.\nThe result of this step is a fasta file with centromeric reads that is stored at `results_cen6/centromeric_reads/centromeric_reads.fasta` \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9865557034730984,
      "result": {
        "original_header": "Publications",
        "type": "Text_excerpt",
        "value": "- Bzikadze A.V., Pevzner P.A. centroFlye: Assembling Centromeres with Long Error-Prone Reads, *Nature Biotechnology, in press*, 2020\n- Dvorkina T., Bzikadze A.V., Pevzner P.A. The String Decomposition Problem and its Applications to Centromere Assembly, *Bioinformatics, in press*, 2020\n- Miga, K.H., Koren, S., Rhie, A., Vollger, M.R., Gershman, A., Bzikadze, A., Brooks, S., Howe, E., Porubsky, D., Logsdon, G.A., et al. Telomere-to-telomere assembly of a complete human X chromosome, *Nature, in press*, 2020\n- Mikheenko, A., Bzikadze, A.V., Gurevich, A., Miga, K.H., and Pevzner, P.A. TandemMapper and TandemQUAST: mapping long reads and assessing/improving assembly quality in extra-long tandem repeats, *Bioinformatics, in press*, 2020 \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/seryrzu/centroFlye/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/seryrzu/centroFlye/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "seryrzu/centroFlye"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "centroFlye"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/run_all_cenX.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/run_all_cen6.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/scripts/read_recruitment/run_read_recruitment.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide for cenX (centroFlye)",
        "parent_header": [
          "Cloning"
        ],
        "type": "Text_excerpt",
        "value": "If you want to run the whole centroFlye pipeline to generate cenX assembly with one command, please run\n```\n./run_all_cenX.sh <path_to_CHM13> results_cenX 50\n```\nYou can customize the output directory and the number of threads:\n```\n./run_all_cenX.sh <path_to_CHM13> <output directory> <number of threads>\n```\nAll intermediate and final results will then be placed in `<output directory>`.\nIf you want to start from scratch you can simply remove this directory.\n\n**Required resources**:\n+ Storage space: ~150GB (mostly from the first step \"Recruitment of centromeric reads\", see below)\n+ Clock time: ~9 hours (mostly recruitment of unique k-mers)\n+ RAM: peak usage up to 800GB\n\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide for cen6 (centroFlyeMono)",
        "parent_header": [
          "Cloning"
        ],
        "type": "Text_excerpt",
        "value": "centroFlye has a special module centroFlyeMono that uses only alpha satellite structure to assemble centromeres.\nThe steps below describe how to apply it to cen6 assembly.\n\nIf you want to run the whole centroFlyeMono pipeline to generate cen6 assembly with one command, please run\n```\n./run_all_cen6.sh <path_to_CHM13> results_cen6 50\n```\nYou can customize the output directory and the number of threads:\n```\n./run_all_cen6.sh <path_to_CHM13> <output directory> <number of threads>\n```\nAll intermediate and final results will then be placed in `<output directory>`.\nIf you want to start from scratch you can simply remove this directory.\n\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999997840234,
      "result": {
        "original_header": "Cloning",
        "type": "Text_excerpt",
        "value": "Please, clone the repository with submodules:\n```\ngit clone --recurse-submodules --single-branch --branch cF_NatBiotech_paper_Xv0.8.3-6v0.1.3 git@github.com:seryrzu/centroFlye.git\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8992517105176574,
      "result": {
        "original_header": "Pipeline for cenX (centroFlye)",
        "type": "Text_excerpt",
        "value": "Please, run all commands from the root of the repository.\nResults of all steps will be stored at `results_cenX` directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9475675506035872,
      "result": {
        "original_header": "1. Recruitment of cen6 reads",
        "type": "Text_excerpt",
        "value": "From the root of the project run \n```\nmake -C scripts/read_recruitment\n```\nand start recruitment (`<path_to_CHM13>` is where the ONT reads are located, see section `Dependencies/Data`):\nBASH2*\n**Required resources**:\n+ Storage space: 150GB\n+ Clock time: 1 hour\n+ RAM: < 50MB \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8992517105176574,
      "result": {
        "original_header": "Pipeline for cen6 (centroFlyeMono)",
        "type": "Text_excerpt",
        "value": "Please, run all commands from the root of the repository.\nResults of all steps will be stored at `results_cen6` directory. \n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/seryrzu/centroFlye/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "centromere, genome-assembly, genomics, long-read-sequencing, long-reads"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2018, The Regents of the University of California\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the University of California nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "centroFlye"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "seryrzu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 137719,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 67683,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 18986,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2680,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 182,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Cloning"
        ],
        "type": "Text_excerpt",
        "value": "+ C++ 14\n+ Python 3.6\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python packages:",
        "parent_header": [
          "Cloning",
          "Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "+ [biopython](https://pypi.org/project/biopython/) (tested on version 1.70)\n+ [click](https://pypi.org/project/click/) (tested on version 7.0)\n+ [joblib](https://pypi.org/project/joblib/) (tested on version 0.14.1)\n+ [matplotlib](https://pypi.org/project/matplotlib/) (tested on version 3.0.2)\n+ [networkx](https://pypi.org/project/networkx/) (tested on version 2.2)\n+ [numpy](https://pypi.org/project/numpy/) (tested on version 1.16.1)\n+ [plotly](https://pypi.org/project/plotly/) (tested on version 4.4.1)\n+ [pydot](https://pypi.org/project/pydot/) (tested on version 1.4.1)\n+ [python-edlib](https://pypi.org/project/edlib/) (tested on version 1.2.4.post1)\n+ [python-slugify](https://pypi.org/project/python-slugify/) (tested on version 4.0.0)\n+ [regex](https://pypi.org/project/regex/) (tested on version 2.4.104)\n\nRequired python packages can be installed through Conda with `conda install --file requirements.txt`.\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "External software",
        "parent_header": [
          "Cloning",
          "Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "+ [Flye](https://github.com/fenderglass/Flye) (*v2.5*, tested on commit: `315122d2ff58025aa4c38227239f431490b557ac`)\n+ [Noise Cancelling Repeat Finder (NCRF)](https://github.com/makovalab-psu/NoiseCancellingRepeatFinder) (Tested on commit : `758206f1689ad1338cf7a841482dbf12548c337a`)\n\nPlease note that all external software has to be in your `PATH`.\nSpecifically binaries `flye` and `NCRF` have to be in `PATH`.\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data",
        "parent_header": [
          "Cloning",
          "Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "+ `<path_to_CHM13>` \u2014 path where the T2T ONT reads are located (rel2, Guppy flip-flop 2.3.1, used for cenX assembly and can be downloaded from [here](https://s3.amazonaws.com/nanopore-human-wgs/chm13/nanopore/rel2/rel2.fastq.gz); rel3, Guppy flip-flop 3.1.5, is used for cen6 assembly and can be downloaded from [here](https://s3.amazonaws.com/nanopore-human-wgs/chm13/nanopore/rel3/rel3.fastq.gz) ; also see [github](https://github.com/nanopore-wgs-consortium/CHM13)). The data is described in Miga, Koren et al., 2020.\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Running String Decomposer on cen6 reads",
        "parent_header": [
          "Cloning",
          "Pipeline for cen6 (centroFlyeMono)"
        ],
        "type": "Text_excerpt",
        "value": "We use String Decomposer (SD; Dvorkina et al., 2020) to partition cen6 reads into distinct monomers of D6Z1.\nThese monomers are supplied in the current repo at ``supplementary_data/D6Z1_monomers.fasta``.\nThe result of this step is the report of SD which is stored at `results_cen6/string_decomposer_report`\n\nThe following commands take 50 threads\n```\npython scripts/ext/stringdecomposer/longreads_decomposer.py \\\n            -s results_cen6/centromeric_reads/centromeric_reads.fasta \\\n            -m supplementary_data/D6Z1_monomers.fasta \\\n            -t 50\nmkdir results_cen6/string_decomposer_report\nmv decomposition{.tsv,_alt.tsv} results_cen6/string_decomposer_report\n```\n**Required resources**:\n+ Storage space: 6GB\n+ Clock time: 9h\n+ RAM: < 10GB\n\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Running centroFlyeMono on cen6 reads using SD output",
        "parent_header": [
          "Cloning",
          "Pipeline for cen6 (centroFlyeMono)"
        ],
        "type": "Text_excerpt",
        "value": "At this step we are utilizing string decomposer output on cen6 reads and run centromFlyeMono on them.\nThe final cen6 assembly is located in `results_cen6/centroFlyeMono_cen6/polishing/scaffold_0/scaffold_0.fasta`.\n```\npython scripts/centroFlyeMono.py \\\n       --sd-report results_cen6/string_decomposer_report/decomposition.tsv \\\n       --monomers supplementary_data/D6Z1_monomers.fasta \\\n       --centromeric-reads results_cen6/centromeric_reads/centromeric_reads.fasta \\\n       --outdir results_cen6/centroFlyeMono_cen6\n```\n**Required resources**:\n+ Storage space: 120MB\n+ Clock time: 30 mins\n+ RAM: < 1GB\n\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:19:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide for cenX (centroFlye)",
        "parent_header": [
          "Cloning"
        ],
        "type": "Text_excerpt",
        "value": "If you want to run the whole centroFlye pipeline to generate cenX assembly with one command, please run\n```\n./run_all_cenX.sh <path_to_CHM13> results_cenX 50\n```\nYou can customize the output directory and the number of threads:\n```\n./run_all_cenX.sh <path_to_CHM13> <output directory> <number of threads>\n```\nAll intermediate and final results will then be placed in `<output directory>`.\nIf you want to start from scratch you can simply remove this directory.\n\n**Required resources**:\n+ Storage space: ~150GB (mostly from the first step \"Recruitment of centromeric reads\", see below)\n+ Clock time: ~9 hours (mostly recruitment of unique k-mers)\n+ RAM: peak usage up to 800GB\n\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide for cen6 (centroFlyeMono)",
        "parent_header": [
          "Cloning"
        ],
        "type": "Text_excerpt",
        "value": "centroFlye has a special module centroFlyeMono that uses only alpha satellite structure to assemble centromeres.\nThe steps below describe how to apply it to cen6 assembly.\n\nIf you want to run the whole centroFlyeMono pipeline to generate cen6 assembly with one command, please run\n```\n./run_all_cen6.sh <path_to_CHM13> results_cen6 50\n```\nYou can customize the output directory and the number of threads:\n```\n./run_all_cen6.sh <path_to_CHM13> <output directory> <number of threads>\n```\nAll intermediate and final results will then be placed in `<output directory>`.\nIf you want to start from scratch you can simply remove this directory.\n\n"
      },
      "source": "https://raw.githubusercontent.com/seryrzu/centroFlye/master/README.md",
      "technique": "header_analysis"
    }
  ]
}