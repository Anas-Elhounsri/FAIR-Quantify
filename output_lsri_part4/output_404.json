{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "citHeader(\"To cite the RapidACi package, use the following information:\")\n\ncitEntry(\nentry=\"article\",\ntitle = \"Measuring Rapid A-Ci Curves in Boreal Conifers: Black Spruce and Balsam fir\",\nyear = \"2019\",\nauthor = c(person(\"Carole\", \"Coursolle\"),\n           person(\"Guillaume\", \"Otis Prud'homme\"),\n           person(\"Manuel\", \"Lamothe\"),\n           person(\"Nathalie\", \"Isabel\")),\njournal = \"Frontiers in Plant Science\",\ndoi = \"10.3389/fpls.2019.01276\",\ntextVersion = paste(\"Coursolle, C., Otis Prud'homme, G., Lamothe, M., and N. Isabel. 2019. Measuring Rapid A-Ci Curves in Boreal Conifers: Black Spruce and Balsam fir. Frontiers in Plant Science. doi: 10.3389/fpls.2019.01276\")\n)"
      },
      "source": "https://raw.githubusercontent.com/ManuelLamothe/RapidACi/master/inst/CITATION",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ManuelLamothe/RapidACi"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-18T18:25:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-09-30T00:55:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "R scripts for automatic correction of Rapid A-Ci curves"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9504923847858238,
      "result": {
        "original_header": "RapidACi",
        "type": "Text_excerpt",
        "value": "An R package for the batch treatment of Rapid carbon dioxide response curves (A-Ci) generated by the LI-COR<sup>&reg;</sup> portable photosynthesis systems.     \nThe Rapid A-Ci measurement method (RACiR<sup>&trade;</sup>) can save a lot of time characterising photosynthetic capacity of multiple plants. However, this gain in time is rapidly lost during post processing following the response curve measurements to obtain the Vcmax and Jmax values, especially since this repetitive task can produce errors. This script was created to help with the analysis of hundreds of measurement files at once. It will automatically match empty chamber measurement files to A-Ci files. When the leaf area does not entirely cover the chamber opening, like in conifers, it will insert the real leaf area into the measurement files and extract recalculated measurement values before correcting the A and Ci values required to compute Vcmax and Jmax.  \nFor more information on the Rapid A-Ci method (RACiR<sup>&trade;</sup>), see [Stinziano et al. (2017)](https://onlinelibrary.wiley.com/doi/full/10.1111/pce.12911) and [this video](https://www.licor.com/env/support/LI-6800/videos/fast-a-ci-curves.html) produced by LI-COR<sup>&reg;</sup> Inc. For the application of this method to conifers, see [Coursolle _et al._ (2019)](https://www.frontiersin.org/articles/10.3389/fpls.2019.01276/abstract).   \nIMPORTANT: the actual version is not yet adapted for files produced by the LI-6400 model.     \n \n"
      },
      "source": "https://raw.githubusercontent.com/ManuelLamothe/RapidACi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ManuelLamothe/RapidACi/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ManuelLamothe/RapidACi/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ManuelLamothe/RapidACi"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RapidACi"
      },
      "source": "https://raw.githubusercontent.com/ManuelLamothe/RapidACi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "RapidACi"
        ],
        "type": "Text_excerpt",
        "value": "```{r}\nif(!require(\"devtools\")) install.packages(\"devtools\")    \ndevtools::install_github(\"ManuelLamothe/RapidACi\")     \n```\nThe package requires the _tidyverse_ and _XLConnect_ packages to work. The plantecophys package is recommended for the calculation of Vcmax and Jmax on the corrected values but is optional (another model could be prefered by the user)\n\n```{r}\nif (!require(\"plantecophys\")) install.packages(\"plantecophys\"); library(plantecophys)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ManuelLamothe/RapidACi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ManuelLamothe/RapidACi/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "6800, automation, jmax, li-cor, photosynthesis, vcmax"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RapidACi"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ManuelLamothe"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 36498,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ManuelLamothe/RapidACi/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:10:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "First step: Generate a list of files",
        "parent_header": [
          "RapidACi",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "- All measurement files (including empty and dark chamber measurements, when available) can be placed in a single folder. The file names must include a common part that identifies each **type of file** (\"mpty\", \"fast\", \"slow\", and \"dark\" are actual default R regex patterns that recognise empty chamber, rapid A-Ci, standard A-Ci, and dark chamber measurements, respectively) and a **unique sample identifier** that can unambiguously be retrieved by a regex pattern (default recognises a sequence of 3 uppercase letters, followed by an underscore and 3 numbers). The build_list function will then generate a list of the files that are present in the folder and that can be used for the calculations.  \n    \n- The empty chamber measurements files are paired to A-Ci measurement files automatically if an A-Ci and an empty chamber measurements are given the same 'match adjustment' during the measurements. Otherwise, the script will take the nearest starting time as timestamp to pair A-Ci and empty chamber measurements. (It is also possible to 'manually' modify a match by placing the same value in the 'Match Time' column (timestamp) of an Excel measurement file and its corresponding Empty chamber measurement file).\n\n- By default, 'Match Time' column is the 66th column in LI-6800 Excel files (\"BN\"). This value can vary depending on the user definable settings. Check this value by opening anyone of your LI-6800 measurement files.\n\n- If, later on, you need to adjust leaf area values, you need to provide a dataframe containing at least one column for the unique sample identifier (named: \u201csample_ID\u201d), and one column with the leaf area in mm2 (named: \u201cLeafArea_mm2\u201d). Note: If you use WinSEEDLE, the following hidden function could work to produce the leaf area dataframe (`your_leafArea_df <- RapidACi:::extr_leafArea(\"some_WinSEEDLE_file.txt\"`)\n\n\n```{r}\nLeafArea_df <- read_tsv(\"data/leafArea.tsv\")   #optional\n\nlist_files <- build_list(path_to_licor_files = \"data/\",\n                         pattern_empty       = \"^(mpty)+.xls\",      \n                         pattern_rapidACi    = \"^(fast)+.xls\",      \n                         pattern_standardACi = \"^(slow)+.xls\",      \n                         pattern_dark        = \"^(dark)+.xls\",\n                         sampleID_format     = \"[:upper:]{3}_[:digit:]{3}\",\n                         timestamp_column    = \"BN\",\n                         leafArea_df         = LeafArea_df)    \n```\n"
      },
      "source": "https://raw.githubusercontent.com/ManuelLamothe/RapidACi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Second step: Use empty chamber measurements to correct A and Ci values",
        "parent_header": [
          "RapidACi",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "There are two possible scenarios. The simple scenario is when leaves cover the whole opening of the chamber, so no leaf areaThese could help you diagnose problems or to verify that the measurements have been carried out correctly correction is required. The alternative, is when the measured leaf area is smaller than the chamber opening and/or when leaves are distributed in multiple layers (e.g. conifers) and a correction is thus required. Since leaf area (\u201cConst_S\u201d) is generally evaluated after theTo produce a file for all samples consisting of multiple diagnostic plots measurements, both the A-Ci measurement files and matching empty chamber files have to be modified with the correct leaf area and their values recalculated before proceeding to the A and Ci corrections. Similarly, if you use your own measures of respiration (from the measurements of the samples in a dark chamber), these values will also be recalculated according to the leaf area provided.    \n\nFor the correction of A and Ci, we use the coefficients of the best fitting polynomial curve (up to the fifth degree, optional with the *max_degree* argument) on the empty chamber measurements. *delta_max* can also be changed from the default settings (0.05). Before doing this, we recommand the use of the function *diagnose_sample* to see the impact of a possible change.    \n\n```{r}\nresults <- Rapid_aci_correction(list_files, \n                                delta_max = 0.05, \n                                max_degree = 3,\n                                priority_curve = \"positive\")\n\n```\nTo produce a file for all samples consisting of multiple plots (they will be place in the _figure/_ directory of your working directory). These could help you diagnose problems or to verify that the measurements have been carried out correctly)\n  \n```{r}\nfor(i in names(results)) diagnose_sample(results, i)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ManuelLamothe/RapidACi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Calculate Vcmax and Jmax",
        "parent_header": [
          "RapidACi",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The plantecophys package by [Duursma (2015)](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0143346) to calculate Vcmax and Jmax for each samples. The option `*useRd* = TRUE` let you use your own measures of respiration (missing values will be estimated).\n\n```{r}\n# We recommand to launch the fitaci function with the *safely* function from the purrr package to produce a list of separated `result` and `error` elements. This prevent the script to fail in the presence of a problematic sample.\n\nX <- map(results, `[[`, \"Raci\") %>%\n     map(safely(~plantecophys::fitaci(., useRd=TRUE, Tcorrect=FALSE)))\n```\n\nHere are useful bit of codes to help you extract data from the list object X:\n\n```{r}     \n# Generate the A-Ci plots\nmap(X, \"result\") %>% compact() %>% walk(plot)     \n\n# See error messages\nmap(X, \"error\") %>% compact() \n\n# See variables names (in an Excel file generated by the LI-6800)\nget_fromExcel(list_files$path[1], show.variables = TRUE)\n\n# Wrapping things up for Vcmax and Jmax!\ntmp <- map(X, \"result\") %>% map(`[[`, \"pars\") %>% compact()\ntmp <- tibble(\n         sample_ID = names(tmp),\n         Vcmax = unlist(map(tmp, `[[`, 1)) %>% as.vector(),\n         Jmax = unlist(map(tmp, `[[`, 2)) %>% as.vector(),\n         GammaStar = map(X, \"result\") %>% map(`[[`, \"GammaStar\") %>% unlist() %>% as.vector())\n                 \n# Extract compensation point (Cp) and other results from Photosyn function (plantecophys)\nY <- map(X, \"result\") %>% map(`[[`, \"Photosyn\") %>% compact()\nZ <- map(X, \"result\") %>% map(`[[`, \"Ci\") %>% compact()\nphoto_res <- vector(\"list\", length(Z))\nfor (i in 1:length(Z)) photo_res[[i]] <- bind_cols(sample_ID = names(Z)[i], Cp = Z[[i]](0), Y[[i]]())\nphoto_res <- plyr::ldply(photo_res) %>% \n             left_join(tmp, by = \"sample_ID\") %>%\n             select(sample_ID, Vcmax, Jmax, GammaStar, Cp, everything())\nrm(tmp, Y, Z)\n\nphoto_res\n\n# Save the results for R\nsaveRDS(X, \"some_name.rds\")     #retrivable with: X <- readRDS(\"some_name.rds\")\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ManuelLamothe/RapidACi/master/README.md",
      "technique": "header_analysis"
    }
  ]
}