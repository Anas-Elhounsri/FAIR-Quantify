{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HuangLab-Fudan/ASJA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-08T10:07:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-24T01:19:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ASJA: a program for Assembling Splice Junctions Analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9325048865831312,
      "result": {
        "original_header": "What is the ASJA",
        "type": "Text_excerpt",
        "value": "RNA splicing may generate different kinds of splice junctions, such as linear, back-splice and fusion junctions. Only a limited number of programs are available for detection and quantification of splice junctions. \nHere, we present Assembling Splice Junctions Analysis (ASJA), a software package that identifies and characterizes all splice junctions from high-throughput RNA sequencing (RNA-seq) data. ASJA processes assembled transcripts and chimeric alignments from the STAR aligner and S tringTie assembler. \nASJA provides the unique position and normalized expression level of each junction. Annotations and integrative analysis of the junctions enable additional filtering. It is also appropriate for the identification of novel junctions.\nImplementation and Dependencies\n------------------------------- \nMoreover, ASJA works based on the STAR and StringTie fearturecount, so these tools also should be installed and their pathway should be added in ~/.bashrc\n* STAR (version <= 2.5)\n* StringTie (version <= 1.2.3)\n* featureCounts (version >= 1.5.0)\n* sambamba (version >=0.6.6)\nASJA Installation\n------------\nDownload the packages and then unzip it in Linux (CentOS or Ubuntu) \nDocumentation\n------------- \nThis chapter provides detailed commands arguments and description of output. the commands are labeled after \u2018usage\u2019\n \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9607324062242868,
      "result": {
        "original_header": "Files Needed:",
        "type": "Text_excerpt",
        "value": "1.\tHuman genome sequence (hg38.fasta) and GTF File (we recommend GENCODE, and the program will report an error if you use GTF from UCSC) are used to generate STAR index.\n2.\tRaw data of RNA-seq (fasta.gz)\n \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8927529324129082,
      "result": {
        "original_header": "*   Note: the absolute pathway is necessary to perform scripts",
        "type": "Text_excerpt",
        "value": "1, Mapping of RNA-seq data\nusage: perl runSTAR.pl [OPTIONS] \nThe arguments of runSTAR.pl are as followings and if you want to work with single-read ,please see more detail of STAR on https://github.com/alexdobin/STAR: \n\t-f1 <FASTA1>  \n               Using Illumina paired-end reads, and the name of read1 has to be supplied.\n\t-f2 <FASTA2>  \n               Using Illumina paired-end reads, and the name of read2 has to be supplied.\n\t-fq_dir <fastq dir> \n               Specifies path to files containing the sequences to be mapped\n\t-G <path_and_gtf> \n                Specifies the path to the file with annotated transcripts in the standard GTF format.\n\t-GA <genomeFastaFiles> \n                Specified one or more FASTA files with the genome reference sequences.\n\t-O <outdir>   \n                Specifies path to the directory (henceforth called \"genome directory\" where the alignment results are stored.)\n\t-pass \n                Running STAR in the 2-pass alignment mode\n\t-index\n                Generating genome index of STAR with default settings\n\t-SI_dir < genome index dir>  \n                specifies path to the genome directory where genome indexes where generated\n\t-I <path>  \n                Specifies path to the directory where the ASJA installation \n\t-S <sample>   \n                Name of sample \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9931046160547742,
      "result": {
        "original_header": "The extraction of extraction fusion junction form Chimeric.out.junction",
        "type": "Text_excerpt",
        "value": "\t\t\nusage: perl filtering.pl [options]\nThe arguments of filtering.pl are as followings:\n\t-read <1>\n               Set threshold for filtration based on counts of junction reads (optional: e.g. 1)\n\t-ratio<0.01>\n               Set threshold for filtration based on ratio (linear weight ratio/back splicing ratio /fused ratio) of junction (optional: e.g. 0.01)\n\t-linear\n               Filtration of linear junctions\n\t-backsplicing\n               Filtration of back splicing junctions\n\t-fusion\n               Filtration of fusion junctions\n\t-IN<input file>\n               Name(s) (with path) of the files for filtration\n\t-O<output file>\n               Name(s) (with path) of the files for result\n \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9816357179191834,
      "result": {
        "original_header": "Generating junctions with high-confidence",
        "type": "Text_excerpt",
        "value": "*\tNOTE: For any kind of junction, there should be a threshold to get a high-confidence junction.\n          For example, we believe that the screening criteria for high-confidence liner junctions should satisfy the condition that ratio is greater than 0.01 and the number of reads are greater than 1.\n\t  \t   \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HuangLab-Fudan/ASJA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HuangLab-Fudan/ASJA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HuangLab-Fudan/ASJA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/scripts/two_pass.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/scripts/star_index.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/scripts/setup/ann_exon.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/scripts/circ/ann.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9891567331673699,
      "result": {
        "original_header": "What is the ASJA",
        "type": "Text_excerpt",
        "value": "ASJA was developed with perl (v5) and shell (bash) language. Before running the program, it is necessary to check or download perl packages as follow:\n*File::Basename;\n*Getopt::Long;\n*List::Util qw/min sum max/; \nMoreover, ASJA works based on the STAR and StringTie fearturecount, so these tools also should be installed and their pathway should be added in ~/.bashrc\n* STAR (version <= 2.5)\n* StringTie (version <= 1.2.3)\n* featureCounts (version >= 1.5.0)\n* sambamba (version >=0.6.6)\nASJA Installation\n------------\nDownload the packages and then unzip it in Linux (CentOS or Ubuntu) \nDocumentation\n------------- \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9372429813720008,
      "result": {
        "original_header": "*   Note: the absolute pathway is necessary to perform scripts",
        "type": "Text_excerpt",
        "value": "\t-f1 <FASTA1>  \n               Using Illumina paired-end reads, and the name of read1 has to be supplied.\n\t-f2 <FASTA2>  \n               Using Illumina paired-end reads, and the name of read2 has to be supplied.\n\t-fq_dir <fastq dir> \n               Specifies path to files containing the sequences to be mapped\n\t-G <path_and_gtf> \n                Specifies the path to the file with annotated transcripts in the standard GTF format.\n\t-GA <genomeFastaFiles> \n                Specified one or more FASTA files with the genome reference sequences.\n\t-O <outdir>   \n                Specifies path to the directory (henceforth called \"genome directory\" where the alignment results are stored.)\n\t-pass \n                Running STAR in the 2-pass alignment mode\n\t-index\n                Generating genome index of STAR with default settings\n\t-SI_dir < genome index dir>  \n                specifies path to the genome directory where genome indexes where generated\n\t-I <path>  \n                Specifies path to the directory where the ASJA installation \n\t-S <sample>   \n                Name of sample \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9749653482524362,
      "result": {
        "original_header": "The integration of three types of junctions",
        "type": "Text_excerpt",
        "value": "*\tNote: These junctions need to be annotated\n****** quick processing*******\nusage: perl ASJA-all.pl [options]\n\t-I <dir ASJA>  \n             Specifies path to the directory where the ASJA installation\n\t-G <path_and_gtf>     \n             Specifies the path to the file with annotated transcripts in the standard GTF format.\n\t-CI < dir alignment >           \n             Specified path with the alignment result of STAR.\n\t-SI <path_and_file >  \n             Name(s) (with path) of the files containing generated transcript by StringTie\n\t-O<outdir>\n            Specifies path to the directory where the results are stored.\n \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HuangLab-Fudan/ASJA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ASJA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "HuangLab-Fudan"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 67367,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2682,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/README.txt"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HuangLab-Fudan",
          "type": "User"
        },
        "date_created": "2019-08-08T10:12:54Z",
        "date_published": "2024-09-27T01:35:51Z",
        "description": "RNA splicing may generate different kinds of splice junctions, such as linear, back-splice and fusion junctions. Only a limited number of programs are available for detection and quantification of splice junctions. Here, we present Assembling Splice Junctions Analysis (ASJA v1.0.0), a software package that identifies and characterizes all splice junctions from high-throughput RNA sequencing (RNA-seq) data. ASJA processes assembled transcripts and chimeric alignments from the STAR aligner and S tringTie assembler. ASJA provides the unique position and normalized expression level of each junction. Annotations and integrative analysis of the junctions enable additional filtering. It is also appropriate for the identification of novel junctions. Implementation and Dependencies",
        "html_url": "https://github.com/HuangLab-Fudan/ASJA/releases/tag/v1.0.0",
        "name": "ASJA",
        "release_id": 177192540,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/HuangLab-Fudan/ASJA/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/HuangLab-Fudan/ASJA/releases/177192540",
        "value": "https://api.github.com/repos/HuangLab-Fudan/ASJA/releases/177192540",
        "zipball_url": "https://api.github.com/repos/HuangLab-Fudan/ASJA/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "running STAR in the 2-pass mode [Kahles et al., 2018, Cancer Cell 34, 1\u201314]",
        "parent_header": [
          "*   Note: the absolute pathway is necessary to perform scripts"
        ],
        "type": "Text_excerpt",
        "value": "Output:  sample_mapped_reads.bam \n\t\t Chimeric.out.junction \n\t\t SJ.out.tab\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n2, the extraction and processing of junctions\n*\tWe provide step-by-step processing (ASJA.pl filtering.pl integration.pl) and quick processing(ASJA-all.pl) program to obtain junctions. However, preparing file for annotation only be implemented with ASJA.pl -setup, and generating transcripts for linear junction only be implemented with StringTie. \n****** step-by-step processing ******\nusage: perl ASJA.pl [options]\nThe arguments of ASJA.pl are as followings:\n\t-I <ASJA dir>  \n                 Specifies path to the directory where the ASJA installation\n\t-G < path_and_gtf >     \n                 Specifies the path to the file with annotated transcripts in the standard GTF format.\n\t-setup           \n                 Preparing reference file for annotation junctions\n\t-linear\n                 Extraction linear junctions\n\t-backsplicing\n                 Extraction back splicing junctions\n\t-fusion\n                 Extraction fusion junctions\n\t-CI < alignment dir>   \n                Specified path with the alignment result of STAR\n\t-SI <path_and_file >  \n                Name(s) (with path) of the files containing generated transcript by StringTie.\n\t\t\t\tThe path is also an out_dir\n\t-ann\n                Annotation for junctions\n\t-ratio\n                Calculation ratio\n\n****** The mapped reads were further used to obtain transcripts by StringTie with reference-based transcriptome assembly. please see http://ccb.jhu.edu/software/stringtie/ ******\n\tusage: stringtie input_mapped_reads.bam -f 0.1 -o path/to/stringtie_assembly.gtf -p 4 -G path/to/gencode.v29.annotation.gtf \n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:11:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage: perl ASJA-all.pl -I /path/to/ASJA -G path/to/gencode.v29.annotation.gtf -CI /path/to/example/alignment/input-SI path/to/example/assembly/input/stringtie_assembly.gtf  -O path/to/result",
        "type": "Text_excerpt",
        "value": "3.Other programs"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "the calculation of TPM from featureCounts",
        "parent_header": [
          "Usage: perl ASJA-all.pl -I /path/to/ASJA -G path/to/gencode.v29.annotation.gtf -CI /path/to/example/alignment/input-SI path/to/example/assembly/input/stringtie_assembly.gtf  -O path/to/result"
        ],
        "type": "Text_excerpt",
        "value": "--------------------------------------------------------------------------------------------------------------------------------------------------------------\nThe description of Output files generated by ASJA\n\nLinear junction primary format\n*\tjunctions: A unique identifier for a linear junction \n*\tCPT: The expression of junction with custom formal (CPT).\n*\tread: The read count of junction that SJ.out.tab matched.\n*\ttransID: The transcript_id in the reference annotation that the instance matched.\n*\tgeneID: The gene_id in the reference annotation that the instance matched.\n*\tgene: The gene_name in the reference annotation that the instance matched.\n*\ttype: The gene_type in the reference annotation that the instance matched.\n*\tWeight ratio: the weight of junction in annotated gene.\n\nBack splicing junction primary format\n*\tcircID: A unique identifier for a back splicing junction \n*\tread: the sum of GT_AG_read and CT_AC_read.\n*\tGT_AG_read: The read count of back splicing that junction type=1(STAR manual) matched.\n*\tCT_AC_read: The read count of back splicing that junction type=2(STAR manual) matched.\n*\tleft_backratio: 5\u2019ratio of circRNA.\n*\tright_backratio: 3\u2019ratio of circRNA.\n*\tannotation: the annotation of circRNA, including gene_id;trans_id;gene_type; gene_name\n*\tlength_exon: the length of exon.\n*\tpos_exon: the position of exon\n\nFusion junction primary format\n*\tfusionID: A unique identifier for a fusion junction\n*\tread: the sum of GT_AG_read and CT_AC_read.\n*\tGT_AG_read: The read count of back splicing that junction type=1(STAR manual) matched.\n*\tCT_AC_read: The read count of back splicing that junction type=2(STAR manual) matched.\n*\tLeftbackratio: the ratio of accepter\n*\tRightbackratio: the ratio of donor\n*\tleft_type: the type of annotation in accepter\n*\tleftann: the annotation of accepter, including gene_id;transcript_id;gene_type;gene_name;exon_number\n*\tright_type: the type of annotation in donor\n*\trightann: the annotation of accepter, including gene_id;transcript_id;gene_type;gene_name;exon_number\n   \nAn integration output:\n*\tGene_name: Gene symbol\n*\tLinear junctions: A unique identifier for a linear junction\n*\tcircRNA: A unique identifier for circRNA related to linear junction and gene, separate the two circRNAs with a semicolon\n*\tfusion: A unique identifier for fusion related to linear junction and gene, separate the two fusions with a semicolon\n"
      },
      "source": "https://raw.githubusercontent.com/HuangLab-Fudan/ASJA/master/readme.md",
      "technique": "header_analysis"
    }
  ]
}