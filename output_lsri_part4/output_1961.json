{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lh3/bfc"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-12-30T21:34:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-26T15:33:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "High-performance error correction for Illumina resequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "BFC is a standalone high-performance tool for correcting sequencing errors from\nIllumina sequencing data. It is specifically designed for high-coverage\nwhole-genome human data, though also performs well for small genomes.\n\nThe BFC algorithm is a variant of the classical spectrum alignment algorithm\nintroduced by [Pevzner et al (2001)][Euler]. It uses an exhaustive search to\nfind a k-mer path through a read that minimizes a heuristic objective function\njointly considering penalties on correction, quality and k-mer support. This\nalgorithm was first implemented in my fermi assembler and then refined a few\ntimes in fermi, fermi2 and now in BFC. In the k-mer counting phase, BFC uses a\nblocked bloom filter to filter out most singleton k-mers and keeps the rest in a\nhash table ([Melsted and Pritchard, 2011][bfcounter]). The use of bloom filter\nis how BFC is named, though other correctors such as [Lighter][lighter] and\n[Bless][bless] actually rely more on bloom filter than BFC.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bfc/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9971546452993476,
      "result": {
        "original_header": "BFC-KMC",
        "type": "Text_excerpt",
        "value": "An alternative implementation of the algorithm is available at the [kmc\nbranch][kmc-branch] of this repository. It uses [KMC2][kmc] for k-mer counting\nand keeps high-occurrence k-mers in a bloom filter. BFC-KMC should be invoked as:\n```sh\nkmc -k55 reads.fq.gz prefix tmpdir\nbfc-kmc -t16 prefix reads.fq.gz | gzip -1 > corrected.fq.gz\n```\nKMC2 source code and precompiled binaries are available at the [KMC\nwebsite][kmc]. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bfc/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/lh3/bfc/wiki"
      },
      "source": "https://raw.githubusercontent.com/lh3/bfc/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lh3/bfc/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lh3/bfc/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lh3/bfc"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/lh3/bfc/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9810558549463523,
      "result": {
        "original_header": "BFC-KMC",
        "type": "Text_excerpt",
        "value": "An alternative implementation of the algorithm is available at the [kmc\nbranch][kmc-branch] of this repository. It uses [KMC2][kmc] for k-mer counting\nand keeps high-occurrence k-mers in a bloom filter. BFC-KMC should be invoked as:\n```sh\nkmc -k55 reads.fq.gz prefix tmpdir\nbfc-kmc -t16 prefix reads.fq.gz | gzip -1 > corrected.fq.gz\n```\nKMC2 source code and precompiled binaries are available at the [KMC\nwebsite][kmc]. \n[Euler]: http://www.ncbi.nlm.nih.gov/pubmed/11504945\n[bfcounter]: http://www.ncbi.nlm.nih.gov/pubmed/21831268\n[lighter]: https://github.com/mourisl/Lighter\n[bless]: https://sourceforge.net/p/bless-ec/wiki/Home/\n[kmc-branch]: https://github.com/lh3/bfc/tree/kmc\n[kmc]: http://sun.aei.polsl.pl/kmc/index.html\n \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bfc/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lh3/bfc/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, genomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bfc"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lh3"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 127458,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 82629,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 11809,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 3180,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1245,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lh3/bfc/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:53:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 69
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "BFC can be invoked as:\n```sh\nbfc -s 3g -t16 reads.fq.gz | gzip -1 > corrected.fq.gz\n```\nwhere option `-s` specifies the approximate size of the genome. It is possible\nto use one set of reads to correct another set:\n```sh\nbfc -s 3g -t16 readset1.fq.gz readset2.fq.gz | gzip -1 > corrected_readset2.fq.gz\n```\nand to process data from Unix pipes (\"<(command)\" is bash specific):\n```sh\nbash -c \"bfc -s 3g -t16 <(bzip2 -dc reads.fq.bz2) <(bzip2 -dc reads.fq.bz2) | gzip -1 > out.fq.gz\"\n```\nBFC also offers an option to trim reads containing singleton k-mers (don't switch\n`-s` and `-k` as some options are ordered):\n```sh\nbfc -1 -s 3g -k51 -t16 corrected.fq.gz | gzip -1 > trimmed.fq.gz\n```\nThis command line keeps k-mer occurring twice or more in a bloom filter (with\nsome false positives) and identifies the longest stretch in a read that has\nhits in the bloom filter. K-mer trimming is about four times as fast as error\ncorrection.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bfc/master/README.md",
      "technique": "header_analysis"
    }
  ]
}