{
  "application_domain": [
    {
      "confidence": 41.56,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you use this work in your research, please cite it as follows:\n\nAriane Saliani, Aldo Zaimi, Harris Nami, Tanguy Duval, Nikola Stikov, Julien Cohen-Adad, Construction of a rat spinal cord atlas of axon morphometry, NeuroImage, Volume 202, 2019, 116156, ISSN 1053-8119, https://doi.org/10.1016/j.neuroimage.2019.116156.\n\nCopyright (c) 2017 NeuroPoly (Polytechnique Montreal)\n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/neuropoly/atlas-rat"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributors",
        "type": "Text_excerpt",
        "value": "Julien Cohen-Adad, Tanguy Duval, Harris Nami, Ariane Saliani, Aldo Zaimi.\n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-04T18:49:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-28T08:22:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Scripts to generate a microstructure atlas of the rat spinal cord"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9373354546668136,
      "result": {
        "original_header": "Pipeline for generating spinal cord atlas from electron microscopy",
        "type": "Text_excerpt",
        "value": "This pipeline is designed to generate an atlas of the spinal cord based on electron microscopy images.\nThe output is a 4D nifti volume containing metrics obtained from scanning electron microscopy. \nThe 4th dimension contains the different metrics, in this order:\n- Axon Density (AD)\n- Axon Equivalent Diameter (AED)\n- G-Ratio (GR)\n- Myelin Thickness (MT)\n- Myelin Volume Fraction (MVF)\n \n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8863204411152907,
      "result": {
        "original_header": "Dataset available",
        "type": "Text_excerpt",
        "value": "The dataset that this pipeline is based on is available at: https://osf.io/g7kx8/. It contains the following data: \n- Rats perfusion + histology\n- Acquisition with EM\n- **Segment axon+myelin**: Using [Axonseg](https://github.com/neuropoly/axonseg). Outputs: Axon density, Axon diameter, g-ratio, myelin thickness and MVF, downsampled at 50 um maps. \n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/neuropoly/atlas-rat/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/neuropoly/atlas-rat/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "neuropoly/atlas-rat"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/./doc/mipav.png"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/./doc/Label1.png"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/./doc/Label2.png"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/./doc/template_fig_git.png"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "How to run"
        ],
        "type": "Text_excerpt",
        "value": "- Open a terminal\n- Clone this repository:\n~~~\ngit clone https://github.com/neuropoly/atlas-rat\n~~~\n- Open Matlab\n- Add the folder of this repository to the Matlab's dir using `pathtool` (include subfolders)\n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Dataset available",
        "type": "Text_excerpt",
        "value": "The data are organized as follows:\n```\ndata_rat_spinalcord_atlas/\n  C1/\n    Sample1/\n      Sample1_AD.nii.gz\n      Sample1_AED.nii.gz\n      Sample1_GR.nii.gz\n      Sample1_MT.nii.gz\n      Sample1_MVF.nii.gz\n    Sample2/\n      Sample2_AD.nii.gz\n      Sample2_AED.nii.gz\n      Sample2_GR.nii.gz\n      Sample2_MT.nii.gz\n      Sample2_MVF.nii.gz\n    ...\n    SampleN/\n      SampleN_AD.nii.gz\n      SampleN_AED.nii.gz\n      SampleN_GR.nii.gz\n      SampleN_MT.nii.gz\n      SampleN_MVF.nii.gz\n\n  C2/\n    Sample1/\n      Sample1_AD.nii.gz\n      Sample1_AED.nii.gz\n      Sample1_GR.nii.gz\n      Sample1_MT.nii.gz\n      Sample1_MVF.nii.gz\n    Sample2/\n      Sample2_AD.nii.gz\n      Sample2_AED.nii.gz\n      Sample2_GR.nii.gz\n      Sample2_MT.nii.gz\n      Sample2_MVF.nii.gz\n    ...\n    SampleN/\n      SampleN_AD.nii.gz\n      SampleN_AED.nii.gz\n      SampleN_GR.nii.gz\n      SampleN_MT.nii.gz\n      SampleN_MVF.nii.gz\n    ...\n  L5/\n    ...\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/neuropoly/atlas-rat/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2017 NeuroPoly, \u00c9cole Polytechnique, Universit\u00e9 de Montr\u00e9al\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "atlas-rat"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "neuropoly"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 112144,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alzaia",
          "type": "User"
        },
        "date_created": "2018-12-19T20:19:23Z",
        "date_published": "2019-01-11T18:42:49Z",
        "description": "`digital_Paxinos_after_symmetrization.zip` contains the digitized Watson atlas, and registered to the template.",
        "html_url": "https://github.com/neuropoly/atlas-rat/releases/tag/v1.0",
        "release_id": 14933161,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/neuropoly/atlas-rat/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/neuropoly/atlas-rat/releases/14933161",
        "value": "https://api.github.com/repos/neuropoly/atlas-rat/releases/14933161",
        "zipball_url": "https://api.github.com/repos/neuropoly/atlas-rat/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "- [AxonSeg v3.4](https://github.com/neuropoly/axonseg/releases/tag/v3.4)\n- [Spinal Cord Toolbox v3.1.1](https://github.com/neuropoly/spinalcordtoolbox/releases/tag/v3.1.1)\n- [ANTs (commit 82dcdd647211004f3220e4073ea4daf06fdf89f9)](https://github.com/ANTsX/ANTs)\n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate atlas",
        "parent_header": [
          "How to run"
        ],
        "type": "Text_excerpt",
        "value": "- Copy the file scatlas_parameters_template.m --> scatlas_parameters.m\n- Edit `scatlas_parameters.m` and adjust parameters according to your setup.\n\n- [scatlas_create_mask.m](./scatlas_create_mask.m): Create white matter masks and output referential image.\n\nAlternative approach (faster, but not used here):\nUse [MIPAV]() > LineWireVOI. Example below:\n\n<img src=\"./doc/mipav.png\" alt=\"mipav\"/>\n\n- [scatlas_create_labels.m](scatlas_create_labels.m): This step is optional (labels are already included in the dataset). From the axon density map (), created labels by running:\n\nThe following labels need to be created:\n  - `Label1.mat`: single point in the central canal\n\n  <img src=\"./doc/Label1.png\" alt=\"Label1\" width=\"400\"/>\n\n  - `Label2.mat`: single point in the anterior median fissure.\n\n  <img src=\"./doc/Label2.png\" alt=\"Label2\" width=\"400\"/>\n\n\n- [scatlas_transform_to_common_space.m](./scatlas_transform_to_common_space.m): Estimate a 2D rigid transformation in order to put the original(axon density) maps into a common space, centered at Label #1 and oriented such that the line defined by Label #1 and Label #2 is vertical. Apply transformation to axon density map. Loop across subject and levels.\n\n- [scatlas_linear_bias_correction.m](./scatlas_linear_bias_correction.m): Due to the limited spatial resolution, the blurry\nappearance of the images induces bias in the estimation of the myelin+axon segmentation.\nBased on high-resolution SEM data, we estimate the bias introduced by the\nautomatic axon+myelin segmentation.\n\n- [scatlas_apply_correction.m](./scatlas_apply_correction.m): Apply the correction factors estimated in the previous\nstep on the MVF, AVF and g-ratio maps.\n\n- [scatlas_generate_template.m](./scatlas_generate_template.m): Create average 2D template based on the WM masks, using\n antsmultivariateTemplateConstrusction2.sh. QC figures are generated at the\n root of all level folders (qc_template_*.gif).\n\n- [scatlas_apply_warp.m](./scatlas_apply_warp.m): Apply the rigid transformation + warping fields to all metrics maps and\n generate spatial statistics (mean, STD). Note that the output volume is\n 4d in shape, but the 3rd dimension (corresponding to z) is a singleton\n to anticipate future concatenation (done in later scripts).\nOutputs are: `Volume4D.nii.gz` (Mean across samples) and `Volume4D_std.nii.gz`(STD).\n\n- [scatlas_symmetrize_and_clean_template.m](./scatlas_symmetrize_and_clean_template.m): This script takes the `Volume4D.nii.gz` and `Volume4D_std.nii.gz` files of each level as inputs and (i) uses the\n left-right flips to symmetrize the output (the average is computed\n between the template and its flipped version); (ii) cleans the template\n by only keeping the spinal cord (i.e. white + gray matter) and removing\n the outer content. Outputs are: `Volume4D_sym_cleaned.nii.gz` and `Volume4D_sym_std_cleaned.nii.gz`\n\n- [scatlas_concatenate_all_levels.m](./scatlas_concatenate_all_levels.m):\nGenerates 3D volumes of each metric across all levels, as well as cord and WM\nmasks, and save them under a separate folder \"AtlasRat/\".\n\n- [scatlas_create_spinal_levels.m](./scatlas_create_spinal_levels.m): Create file with spinal levels.\n\n- [scatlas_create_package.m](./scatlas_create_package.m): Copy documentation into output atlas folder and zip the folder for convenient upload to web server (e.g. OSF).\n\n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Register external atlas to the generated template",
        "parent_header": [
          "How to run"
        ],
        "type": "Text_excerpt",
        "value": "- [scatlas_create_mirror_image.m](./scatlas_create_mirror_image.m): Digitalization and symmetrization of an existing atlas. Here, we used the rat spinal cord atlas from Watson et al.: https://www.sciencedirect.com/science/article/pii/B9780123742476500195?via%3Dihub\n\n- [scatlas_atlas_fix_tract_interface.m](./scatlas_atlas_fix_tract_interface.m): In the current implementation of `scatlas_create_mirror_image.m`, there are issues at tract interfaces, i.e.: the tracts are summed at the interface and/or there are null pixels. This creates subsequent issues in the pipeline. This script fixes that problem by applying a median filter, which effectively removes spurious pixels at interface.\n\n- [scatlas_register_atlas_to_template.m](./scatlas_register_atlas_to_template.m): Register the digitized atlas to the created rat template.\n\nThe digitized and registered Watson atlas is available [here](https://github.com/neuropoly/atlas-rat/releases/download/v1.0/digital_Paxinos_after_symmetrization.zip). \n\n- **Metrics extraction**: Extract metrics within tracts defined by the atlas. 1) Creates an image showing a metric with an overlay of the atlas, where each tract is shown with a different color. 2) Extracts metrics. 3) Generate violin plot form and stats.\n\n~~~\nscatlas_extract_metrics.m\n~~~\n\nBefore running the script, add to path the violin function that can be downloaded here: https://www.mathworks.com/matlabcentral/fileexchange/45134-violin-plot\n\n![alt tag](./doc/template_fig_git.png)\n\nADD PIPELINE OVERVIEW FIGURE HERE\n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Other tools",
        "parent_header": [
          "How to run"
        ],
        "type": "Text_excerpt",
        "value": "To generate figures with colormaps for each metric from a **'Volume4D.nii.gz'** template, you can use the following script:\n```\ngenerate_metrics_figures.m\n```\n"
      },
      "source": "https://raw.githubusercontent.com/neuropoly/atlas-rat/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:01:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ]
}