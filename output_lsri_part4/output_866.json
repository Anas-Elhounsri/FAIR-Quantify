{
  "application_domain": [
    {
      "confidence": 17.45,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/multicom-toolbox/DNSS2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-09T02:11:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-20T14:04:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Deep learning architectures for protein secondary structure prediction (version 2)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8791934650110421,
      "result": {
        "original_header": "DNSS2",
        "type": "Text_excerpt",
        "value": "Deep learning architectures for protein secondary structure prediction (version 2). Both 3-class and 8-class prediction supported!\n \n"
      },
      "source": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/multicom-toolbox/DNSS2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/multicom-toolbox/DNSS2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "multicom-toolbox/DNSS2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DNSS2"
      },
      "source": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/get_training_features.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/FracNet1Dconv_ss/scripts/runFracNetSS_train_3class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/FracNet1Dconv_ss/scripts/runFracNetSS_train_8class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/Resnet1Dconv_ss/scripts/runResSS_train_8class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/Resnet1Dconv_ss/scripts/runResSS_train_3class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/Deep1Dconv_ss/scripts/runCNNSS_train_8class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/Deep1Dconv_ss/scripts/runCNNSS_train_3class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/CRMN1Dconv_ss/scripts/runCRMNSS_train_3class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/CRMN1Dconv_ss/scripts/runCRMNSS_train_8class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/RCNN1Dconv_ss/scripts/runRCNNSS_train_3class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/RCNN1Dconv_ss/scripts/runRCNNSS_train_8class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/Inception1Dconv_ss/scripts/runIncepSS_train_3class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/train_DNSS2/models/Inception1Dconv_ss/scripts/runIncepSS_train_8class.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/scripts/generate-hmm_withDB.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/scripts/generate-pssm_withDB.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/scripts/gen-pssm-less-stringent_withDB.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Steps",
        "parent_header": [
          "DNSS2"
        ],
        "type": "Text_excerpt",
        "value": "--------------------------------------------------------------------------------------\n\n**(A) Download and Unzip DNSS2 source package**  \n\nCreate a working directory called 'DNSS2' where all scripts, programs and databases will reside:\n\nDownload the DNSS2 code:\n```\ncd ~/\ngit clone https://github.com/multicom-toolbox/DNSS2.git\ncd DNSS2\n```\n\n**(B) Install tensorflow, Keras, and h5py and Update keras.json**  \n\n(a) Create python2 virtual environment (if not installed)\n```\nvirtualenv -p /usr/bin/python2  ./python_virtualenv_DNSS2\nsource ./python_virtualenv_DNSS2/bin/activate\npip install --upgrade pip\n```\n\n(b) Install python packages:\n```\npip install -r requirements.txt\n```\n\n\n(f) Add the entry [\u201cimage_dim_ordering\": \"tf\u201d,] to your keras..json file at ~/.keras/keras.json. After the update, your keras.json should look like the one below:  \n```\n{\n    \"epsilon\": 1e-07,\n    \"floatx\": \"float32\",\n    \"image_dim_ordering\":\"tf\",\n    \"image_data_format\": \"channels_last\",\n    \"backend\": \"tensorflow\"\n}\n```\n**(C) Download programs**\n```\nmkdir programs\ncd programs\nwget https://ftp.ncbi.nih.gov/blast/executables/blast+/2.2.25/ncbi-blast-2.2.25+-x64-linux.tar.gz\ntar -zxf ncbi-blast-2.2.25+-x64-linux.tar.gz\n\n\nwget https://github.com/soedinglab/hh-suite/releases/download/v3.0-beta.3/hhsuite-3.0-beta.3-Linux.tar.gz\ntar -zxf hhsuite-3.0-beta.3-Linux.tar.gz\n\n```\n\n**(D) Download database**\n\n* DNSS2 requires non-redundent sequence database formated by blast(i.e., uniref90) and hhblits database(i.e., uniclust30_2017_10). If the two databases haven't been downloaded and formated, please try following steps:\n\n```\nmkdir database\ncd database\nmkdir uniref90\ncd uniref90\nwget ftp://ftp.uniprot.org/pub/databases/uniprot/uniref/uniref90/uniref90.fasta.gz\ngzip -d uniref90.fasta.gz\n../../programs/ncbi-blast-2.2.25+/bin/makeblastdb -in  uniref90.fasta\n\ncd database\nmkdir uniclust30_2017_10\ncd uniclust30_2017_10\nwget http://wwwuser.gwdg.de/~compbiol/uniclust/2017_10/uniclust30_2017_10_hhsuite.tar.gz\n\n```\n\n\n**(E) Configuration**\n\n* Update the database paths for the following variables in the script 'configure.pl'\n```\n$uniref90db = 'your_db_path/uniref90/uniref90.fasta';\n$uniclust30db = 'your_db_path/uniclust30_2017_10/uniclust30_2017_10';\n```\n\n(b) run 'configure.pl'\n```\nperl configure.pl\n```\n\n\n**(F) Test**\n* There are two ways to indicate the protein to predict:\n\n(1) Predict from protein file:\n```\n   Usage:\n   $ perl run_DNSS2.pl -seq <file name>.fasta -file -out <output folder>\n\n   Example:\n   $ source ~/python_virtualenv_DNSS2/bin/activate\n   $ mkdir -p ./output/2SN3-A\n   $ perl run_DNSS2.pl -seq test/2SN3-A.fasta -file -out ./output/2SN3-A\n```\n\n```\n[07/10/2020 23:19:49]  Generating Testing File...\n[07/10/2020 23:19:49]  Accessing model deepss_1dconv\n[07/10/2020 23:20:32]  Accessing model deepss_1dCRMN\n[07/10/2020 23:21:05]  Accessing model deepss_1dFrac\n[07/10/2020 23:21:35]  Accessing model deepss_1dInception\n[07/10/2020 23:22:03]  Accessing model deepss_1dRCNN\n[07/10/2020 23:22:29]  Accessing model deepss_1dResnet\n[07/10/2020 23:22:54]  Ensemble predictions ...\n[07/10/2020 23:25:54]  2SN3-A prediction (3-class) successful! Saved to ./output/2SN3-A/2SN3-A.ss8.dnss and ./output/2SN3-A/2SN3-A.ss8.vdnss\n[07/10/2020 23:22:55]  Accessing model deepss_1dconv\n[07/10/2020 23:23:19]  Accessing model deepss_1dCRMN\n[07/10/2020 23:23:44]  Accessing model deepss_1dFrac\n[07/10/2020 23:24:09]  Accessing model deepss_1dInception\n[07/10/2020 23:24:35]  Accessing model deepss_1dRCNN\n[07/10/2020 23:25:00]  Accessing model deepss_1dResnet\n[07/10/2020 23:25:25]  Ensemble predictions ...\n[07/10/2020 23:25:25]  2SN3-A prediction (8-class) successful! Saved to ./output/2SN3-A/2SN3-A.ss8.dnss and ./output/2SN3-A/2SN3-A.ss8.vdnss\n[07/10/2020 23:25:25]  100% complete!\n```\n\n(2) Predicting multiple proteins:\n\n```\n   Usage:\n   $ perl run_DNSS2.pl -indir <input directory> -out <output directory>\n\n   Example:\n   $ source ~/python_virtualenv_DNSS2/bin/activate\n   $ mkdir ./output/\n   $ perl run_DNSS2.pl -indir ./test/ -out ./output/\n```\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.999741490960739,
      "result": {
        "original_header": "Test Environment",
        "type": "Text_excerpt",
        "value": "--------------------------------------------------------------------------------------\nRed Hat Enterprise Linux Server release 6.4 (Santiago), perl 5, version 16, subversion 3 (v5.16.3)\n \n"
      },
      "source": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/multicom-toolbox/DNSS2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DNSS2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "multicom-toolbox"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 388306,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 160757,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 58542,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 22428,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 281,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/multicom-toolbox/DNSS2/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:09:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ]
}