{
  "application_domain": [
    {
      "confidence": 0.9821093459235539,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "FACS (Fast and Accurate Classification of Sequences) C implementation"
        ],
        "type": "Text_excerpt",
        "value": "Henrik Stranneheim, Max K\u00e4ller, Tobias Allander, Bj\u00f6rn Andersson, Lars Arvestad, Joakim Lundeberg: Classification of DNA sequences using Bloom filters. Bioinformatics 26(13): 1595-1600 (2010)\n\n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SciLifeLab/facs"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2011-01-26T14:09:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-19T16:39:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast and Accurate Classification of Sequences using Bloom filters"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "FACS (Fast and Accurate Classification of Sequences) C implementation"
        ],
        "type": "Text_excerpt",
        "value": "FACS is the C implementation of a previous Perl module, please select the\n<a href=\"https://github.com/SciLifeLab/facs/tree/perl\">perl branch</a> if\nyou want to have a look at the old (unsupported) implementation.\n\nSome components of this work are based in the excellent Perl `Bloom::Faster`\n<a href='http://search.cpan.org/~palvaro/Bloom-Faster-1.7/lib/Bloom/Faster.pm'>implementation</a>.\n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.991429548289357,
      "result": {
        "original_header": "FACS (Fast and Accurate Classification of Sequences) C implementation",
        "type": "Text_excerpt",
        "value": "WARNING: This program is under active development and this documentation might not reflect reality.\nPlease file a GitHub issue and we will take care of it as soon as we can.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9792603766634841,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "* 'build' is for building a bloom filter from a reference file.\nIt supports large genome files (>4GB), human genome, for instance.\n* 'query' is for querying a fastq/fasta file against the bloom filter.\n* 'remove' is for removing contamination sequences from a fastq/fasta file. \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8510953269112775,
      "result": {
        "original_header": "Quickstart",
        "type": "Text_excerpt",
        "value": "For the python interface, it is highly recommended to install and run FACS under\na python virtual environment. Python virtual environments provide and isolated\nenvironment to run your python code, solving dependency and version problems, and \nindirectly permissions. Read more about virtualenv [here](https://pypi.python.org/pypi/virtualenv). \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9568717909445016,
      "result": {
        "original_header": "MPI facs2.0 version",
        "type": "Text_excerpt",
        "value": "MPI facs2.0 version can be used in multi-cpu system, for instance, a cluster, in order to take advantage \nof both multiple cores and multiple cpus at the same time.    \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8258253797202958,
      "result": {
        "original_header": "Python interface",
        "type": "Text_excerpt",
        "value": "A python C-Extension provides a very simple API to build, query and remove sequences,\njust as described above with the plain C-based commandline.\n```\n$ python\nPython 2.6.6 (r266:84292, Jun 18 2012, 09:57:52) \n[GCC 4.4.6 20110731 (Red Hat 4.4.6-3)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import facs\n>>> facs.build(\"ecoli.fasta\", \"ecoli.bloom\")\n>>> facs.query(\"contaminated_sample.fastq.gz\", \"ecoli.bloom\")\n>>> facs.remove(\"contaminated_sample.fastq\", \"ecoli.bloom\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8909887002624881,
      "result": {
        "original_header": "Update results to a database",
        "type": "Text_excerpt",
        "value": "FACS provides results in [JSON](http://www.json.org/) format, which eases the\nstorage of these results in a CouchDB instance. To do so, you need to create a\nconfiguration file with the information for your CouchDB instance.  \nThe file should be named either .facsrc or .facs.cnf and should be located in \nyour home directory. For system wide installations it can also be located at\n/etc/facs.conf. \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/SciLifeLab/facs/wiki"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SciLifeLab/facs/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SciLifeLab/facs/master/facs/utils/benchmarks_facs.ipynb"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/facs/utils/benchmarks_facs.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SciLifeLab/facs/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SciLifeLab/facs"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FACS (Fast and Accurate Classification of Sequences) C implementation"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.999976906688817,
      "result": {
        "original_header": "FACS (Fast and Accurate Classification of Sequences) C implementation",
        "type": "Text_excerpt",
        "value": "[![Build Status](https://travis-ci.org/SciLifeLab/facs.png?branch=master)](https://travis-ci.org/SciLifeLab/facs)\n<a href=\"https://scan.coverity.com/projects/1599\">\n  <img alt=\"Coverity Scan Build Status\"\n       src=\"https://scan.coverity.com/projects/1599/badge.svg\"/>\n</a> \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999556078208,
      "result": {
        "original_header": "Quickstart",
        "type": "Text_excerpt",
        "value": "In order to fetch the source code run:\n```\n$ git clone https://github.com/SciLifeLab/facs\n```\n \nFor the python interface, it is highly recommended to install and run FACS under\na python virtual environment. Python virtual environments provide and isolated\nenvironment to run your python code, solving dependency and version problems, and \nindirectly permissions. Read more about virtualenv [here](https://pypi.python.org/pypi/virtualenv). \nTo easily install a virtual environment you can use [virtualenv-burrito](https://github.com/brainsik/virtualenv-burrito).\nFollow the instructions in the link provided in order to create a new virtual \nenvironment. \n \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998869983004484,
      "result": {
        "original_header": "MPI facs2.0 version",
        "type": "Text_excerpt",
        "value": "First download facs package and 'make', then 'make mpi'. A unique binary file 'facs_mpi' will be generated.\n```\n$mpirun -np number_of_cpu ./facs_mpi -r reference_bloom_filter -q query_sequence\n```\nBe advised, besides openmp library, MPI facs2.0 requires MPI library (OpenMpi or Mpich, etc.)  \n \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9423893922018658,
      "result": {
        "original_header": "Update results to a database",
        "type": "Text_excerpt",
        "value": "The format should be like this:\n```\n[facs]\nSERVER: <your server address>\nFACS_DB: <DB name>\nFASTQ_SCREEN_DB: <DB name>\nDECONSEQ_DB: <DB name>\nUSER: <username>\nPASSWORD: <password>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SciLifeLab/facs/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Fast and Accurate Classification of Sequences using Bloom filters \nhttp://facs.scilifelab.se/\nCopyright (C) 2013 Enze Liu\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "FACS (Fast and Accurate Classification of Sequences) C implementation"
        ],
        "type": "Text_excerpt",
        "value": "The code is freely available under MIT license as well as the hashing algorithm 'lookup8', which is developed by Bob Jenkins and used under MIT license.\n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "facs"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "SciLifeLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 284171,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 91794,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 57398,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2721,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 2191,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jinja",
        "size": 1093,
        "type": "Programming_language",
        "value": "Jinja"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:11:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "FACS (Fast and Accurate Classification of Sequences) C implementation"
        ],
        "type": "Text_excerpt",
        "value": "Facs uses a similar commandline structure to the one found in the popular <a href=\"https://github.com/lh3/bwa\">bwa</a>.\nThere are three main commands: build, query and remove. Each of them might have slightly different flags but should\nbehave similarly.\n\n```\n$ ./facs -h\n\nProgram: facs - Sequence analysis using bloom filters\nVersion: 2.0 \nContact: Enze Liu <enze.liu@scilifelab.se>\n\nUsage:   facs <command> [options]\n\nCommand: build         build a bloom filter from a FASTA/FASTQ reference file\n         query         query a bloom filter given a FASTA/FASTQ file\n         remove        remove (contamination) sequences from FASTQ/FASTA file\n```\n\nFor example, to build a bloom filter out of a FASTA reference genome, one should type:\n\n```\n$ ./facs build -r ecoli.fasta -o ecoli.bloom\n```\n\nThat would generate a ecoli bloom filter that could be used to query a FASTQ file:\n\n```\n$ ./facs query -r ecoli.bloom -q contaminated_sample.fastq.gz -f \"json\"\n```\n\nNote that both plaintext fastq files and gzip-compressed files are supported transparently\nto the user.\n\nWhich would return some metrics, in json format, indicating how many reads might\nbe contaminated with ecoli in that particular sample:\n\n```\n{\n    \"timestamp\": \"2013-03-27T11:16:21.809+0100\"\n    \"organism\": \"test200.fastq\"\n    \"bloom_filter\": \"eschColi_K12.bloom\"\n    \"total_read_count\": 201,\n    \"contaminated_reads\": 1,\n    \"total_hits\": 36,\n    \"contamination_rate\": 0.004975,\n    \"p_value\": 1.522929e-01\n}\n```\n\nIf one wishes to get `tsv` format to easily import in \n<a href=\"http://www.libreoffice.org/\">LibreOffice.org</a> or Excel, indicate\n`-f \"tsv\"` in the commandline, and a tsv file will be written in the local directory:\n\n```\n$ cat test200.fastq.tsv\norganism    bloom_filter    total_read_count    contaminated_reads  contamination_rate\ntest200.fastq   eschColi_K12.bloom  201 1   0.004975\n```\n\nFinally, if one wants to remove those reads from the sample, one should run the following\ncommand:\n\n```\n$ ./facs remove -r ecoli.bloom -q contaminated_sample.fastq\n```\n\nOutput:\nBy using stdout and stderr, clean sequences will be stored in stdout, contaminated sequences\nwill be stored in stderr. They can be stored into specific files, for instance:\n\n```\n$(./facs remove -r ecoli.bloom -q contaminated_sample.fastq > clean_part.fastq ) >& contaminated_part.fastq\n```\n\nIf output_path '-o' is specified, two output files will be generated:\n\n`contaminated_sample_ecoli_contam.fastq`\n`contaminated_sample_ecoli_clean.fastq`\n"
      },
      "source": "https://raw.githubusercontent.com/SciLifeLab/facs/master/README.md",
      "technique": "header_analysis"
    }
  ]
}