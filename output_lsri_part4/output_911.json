{
  "application_domain": [
    {
      "confidence": 23.7,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "> [1] Kent WJ, Sugnet CW, Furey TS, Roskin KM, Pringle TH, Zahler AM, et al. The human genome browser at UCSC. Genome Research. 2002;12(6):996-1006.\n\n> [2] Consortium EP. The ENCODE (ENCyclopedia of DNA elements) project. Science. 2004;306(5696):636-40.\n\n> [3] Davydov EV, Goode DL, Sirota M, Cooper GM, Sidow A, Batzoglou S. Identifying a High Fraction of the Human Genome to be under Selective Constraint Using GERP++. Plos Computational Biology. 2010;6(12):e1001025.\n\n> [4] Ke G, Meng Q, Finley T,Wang T, Chen W, Ma W, et al. LightGBM: A Highly Efficient Gradient Boosting Decision Tree. Advances in Neural Information Processing Systems. 2017, 3146\u20133154.\n\n> [5] Chen T, He T, Benesty M, Khotilovich V, Tang Y. XGBoost: A Scalable Tree Boosting System. Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. 2016.\n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/guofei-tju/LightCpG"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-06-07T18:42:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-16T08:24:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8276552524111764,
      "result": {
        "original_header": "Input\uff1aBED format file",
        "type": "Text_excerpt",
        "value": "> The format of BED file as follow \n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9326475463820625,
      "result": {
        "original_header": "Sequence feature",
        "type": "Text_excerpt",
        "value": "> In this paper, according to the position of the CpG sites in the raw data files, we first extracted the sequence from the reference hg19, \n> including the extracted DNA sequence of 101 bp with 50 bp before and 50 bp after the CpG site. \n> Then, we employ the method of n-gram to extract sequence feature from sequence. \n> ### DNA sequence is extracted by using the [**sequence_extract.py**](https://github.com/guofei-tju/LightCpG/tree/master/feature/sequence%20feature), in which hg19 database is necessary. \n>>> The 'f' is the folder where hg19 database is stored. \n>>> The 'sub_f' is the folder where input file is stored \n> In this paper, structural feature includes CGI status (CGI, CGI shore, CGI shelf), cis-regulatory elements (TFBS, DNase, chromatin states, histone modification), and DNA properties (iHS, constrain score). These features reprsent the attribute of CpG site in genome.  \n> ### Structural feature is extracted by using [**demo.txt**](https://github.com/guofei-tju/LightCpG/tree/master/feature/structural%20feature), in which structural feature files are necessary. \n>> Integrated Haplotype Score (iHS) is downloaded from http://hgdp.uchicago.edu/Browser_tracks/iHS. \n>> GERP++ Constraint Score is downloaded from the SidowLab GERP++ tracks on hg19 [3]. \n> We posit that some of the same CpG sites with unknown methylation states can be detected in multiple cells, and that the states of these sites can vary between different cells. \n> We use positional feature to reprsent the information of methylation distribution in multiple cell. \n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9527311244925384,
      "result": {
        "original_header": "<a href=\"https://github.com/guofei-tju/LightCpG/tree/master/feature/positional%20feature\">**positional_feature.m**</a> is used to extract positional feature, in which multiple single-cell sequencing files are necessary.",
        "type": "Text_excerpt",
        "value": "> ### [**positional_feature.m**](https://github.com/guofei-tju/LightCpG/tree/master/feature/positional%20feature) is used to extract positional feature, in which multiple single-cell sequencing files are necessary.\n \n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9095430682062358,
      "result": {
        "original_header": "Sequence feature",
        "type": "Text_excerpt",
        "value": "> In our paper, five classifiers are employed to construct prediction model, including [**LightGBM[4]**](https://github.com/guofei-tju/LightCpG/tree/master/classifier), [**XGboost[5]**](https://github.com/guofei-tju/LightCpG/tree/master/classifier), [**Deep learning**](https://github.com/guofei-tju/LightCpG/tree/master/classifier), [**Random Forset**](https://github.com/guofei-tju/LightCpG/tree/master/classifier) and [**GBDT**](https://github.com/guofei-tju/LightCpG/tree/master/classifier). \n> [2] Consortium EP. The ENCODE (ENCyclopedia of DNA elements) project. Science. 2004;306(5696):636-40. \n> [3] Davydov EV, Goode DL, Sirota M, Cooper GM, Sidow A, Batzoglou S. Identifying a High Fraction of the Human Genome to be under Selective Constraint Using GERP++. Plos Computational Biology. 2010;6(12):e1001025. \n> [5] Chen T, He T, Benesty M, Khotilovich V, Tang Y. XGBoost: A Scalable Tree Boosting System. Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. 2016.\n \n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9184712114630648,
      "result": {
        "original_header": "DNA sequence is extracted by using the <a href=\"https://github.com/guofei-tju/LightCpG/tree/master/feature/sequence%20feature\">**sequence_extract.py**</a>, in which hg19 database is necessary.",
        "type": "Text_excerpt",
        "value": "## The Framework of LightCpG \n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/guofei-tju/LightCpG/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/guofei-tju/LightCpG/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "guofei-tju/LightCpG"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LightCpG"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/Framework.jpg"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9938780096441432,
      "result": {
        "original_header": "DNA sequence is extracted by using the <a href=\"https://github.com/guofei-tju/LightCpG/tree/master/feature/sequence%20feature\">**sequence_extract.py**</a>, in which hg19 database is necessary.",
        "type": "Text_excerpt",
        "value": "<div align=center><img width=\"600\" height=\"400\" src=\"https://github.com/guofei-tju/LightCpG/blob/master/Framework.jpg\"/></div> \n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9129951177975926,
      "result": {
        "original_header": "Sequence feature",
        "type": "Text_excerpt",
        "value": ">> In the code, the following questions need to be attention. \n>> In the code, the following question need to be attention. \n>> CGI file is downloaded from the UCSC genome browser [1]. \n>> Transcription factor binding sites (TFBS), histone modification marks, chromatin states, and DNase I hypersensitive sites (DHSs) feature files are downloaded from the [ENCODE](https://www.encodeproject.org/) [2]. \n>> Integrated Haplotype Score (iHS) is downloaded from http://hgdp.uchicago.edu/Browser_tracks/iHS. \n>> GERP++ Constraint Score is downloaded from the SidowLab GERP++ tracks on hg19 [3]. \n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8526919821673801,
      "result": {
        "original_header": "DNA sequence is extracted by using the <a href=\"https://github.com/guofei-tju/LightCpG/tree/master/feature/sequence%20feature\">**sequence_extract.py**</a>, in which hg19 database is necessary.",
        "type": "Text_excerpt",
        "value": "# Input\uff1aBED format file \n"
      },
      "source": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/guofei-tju/LightCpG/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LightCpG"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "guofei-tju"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 10237,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 8606,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guofei-tju/LightCpG/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:17:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}