{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgments",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>"
        ],
        "type": "Text_excerpt",
        "value": "The logos (![alt text][ncmLogo] & ![alt text][ncmIcon]) have been created by [Fritz Lekschas][flekschas]. They are composed of the following great icons:\n - [DNA][iconDna] created by Irene Hoffman ([CC BY 3.0 US][cc])\n - [King][iconKing] created by Yuri Mazursky ([CC BY 3.0 US][cc])\n - [Queen][iconQueen] created by Yuri Mazursky ([CC BY 3.0 US][cc])\n\n[ejalicelee]: https://github.com/ejalicelee\n[sejooning]: https://github.com/sejooning\n[SooLee]: https://github.com/SooLee\n[cc]: https://creativecommons.org/licenses/by/3.0/us/\n[flekschas]: https://github.com/flekschas\n[iconDna]: https://thenounproject.com/term/dna/57369/\n[iconKing]: https://thenounproject.com/term/king/224748/\n[iconQueen]: https://thenounproject.com/term/queen/224753/\n[ncmLogo]: https://parklab.github.io/NGSCheckMate/logo-16px.png \"NGS CheckMate Logo\"\n[ncmIcon]: https://parklab.github.io/NGSCheckMate/icon-16px.png \"NGS CheckMate Icon\"\n\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 5.07,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/parklab/NGSCheckMate"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-01-08T22:36:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-11-02T12:48:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Software program for checking sample matching for NGS data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9809880718626499,
      "result": {
        "original_header": "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
        "type": "Text_excerpt",
        "value": "\nNGSCheckMate is a software package for identifying next generation sequencing (NGS) data files from the same individual. It analyzes various types of NGS data files including (but not limited to) whole genome sequencing (WGS), whole exome sequencing (WES), RNA-seq, ChIP-seq, and targeted sequencing of various depths. Data types can be mixed (e.g. WES and RNA-seq, or RNA-seq and ChIP-seq). It takes BAM (reads aligned to the genome), VCF (variants) or FASTQ (unaligned reads) files as input. NGSCheckMate uses depth-dependent correlation models of allele fractions of known single-nucleotide polymorphisms (SNPs) to identify samples from the same individual. Our alignment-free module is fast (e.g., less than one minute for RNA-seq using a single core) and we recommend it for a quick initial quality check, before pooling / aligning sequenced reads. The BAM and VCF modules can be used after the alignment and variant calling steps, respectively, to ensure correct sample annotation before further downstream analysis. Currently, it works only for human data. \nNGSCheckMate paper is now published in [_Nucleic Acids Research_](https://academic.oup.com/nar/article-lookup/doi/10.1093/nar/gkx193). \n* pdf documentation is included in the package. [Documentation.pdf](Documentation.pdf)\n  \n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9367172531558218,
      "result": {
        "original_header": "1) PREFIX_all.txt",
        "type": "Text_excerpt",
        "value": "This output file lists both matched and unmatched sample pairs with VAF correlation coefficients and representative sequencing depths. \n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9799719906318474,
      "result": {
        "original_header": "3) PREFIX.pdf",
        "type": "Text_excerpt",
        "value": "This pdf file shows a dendrogram image of hierarchical clustering of samples based on VAF correlation coefficients.\n \n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1) Downloading NGSCheckMate",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\ncd <installation_dir>\ngit clone https://github.com/parklab/NGSCheckMate.git\n\n## set NCM_HOME according to you shell environment \n## for example, when using bash, add the following in your .bashrc \nexport NCM_HOME=<installation_dir>/NGSCheckMate\n```\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/parklab/NGSCheckMate/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 48
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/parklab/NGSCheckMate/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "parklab/NGSCheckMate"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NGSCheckMate"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/install_ncmfastq.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/49300513"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://parklab.github.io/NGSCheckMate/icon-16px.png"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Configuration (required only for the BAM module)",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If your input is BAM/VCF files, add the following lines in your ncm.conf file in the package directory. If your input is FASTQ files, you can skip this step.\n```\nREF=<path for the reference FASTA file >  \nSAMTOOLS=<path for samtools> \nBCFTOOLS=<path for bcftools>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Buid for fastq module / patterngenerator",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you want to build your own fastq module or patterngenerator from source do the following.\n```\ncd $NCM_HOME\nsource install_ncmfastq.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Containers",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The tool is available through software containers for ease of installation:\n* Docker: https://quay.io/repository/biocontainers/ngscheckmate?tab=tags&tag=latest\n* Singularity/Apptainer: https://depot.galaxyproject.org/singularity/ngscheckmate:1.0.0--py27r41hdfd78af_3\n* Conda: `bioconda::ngscheckmate=1.0.0`\n\nAdditionally, there is a Nextflow subworkflow for use on bam files available as part of the nf-core project, https://github.com/nf-core/modules/blob/master/subworkflows/nf-core/bam_ngscheckmate/main.nf.\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9576066172014871,
      "result": {
        "original_header": "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
        "type": "Text_excerpt",
        "value": "[![DOI](https://zenodo.org/badge/49300513.svg)](https://zenodo.org/badge/latestdoi/49300513)  <img src=\"https://travis-ci.org/parklab/NGSCheckMate.svg?branch=master\"> \n<p align=\"center\">\n  <img src=\"https://parklab.github.io/NGSCheckMate/logo.svg\"\n       alt=\"NGS CheckMate\" />\n</p> \n* pdf documentation is included in the package. [Documentation.pdf](Documentation.pdf)\n  \n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9217502884140188,
      "result": {
        "original_header": "1) BAM/VCF mode",
        "type": "Text_excerpt",
        "value": "```\nUsage: python ncm.py <-B | -V> <\u2013d INPUT_DIR | -l INPUT_LIST_FILE> <-bed BED_FILE> <\u2013O OUTPUT_DIR> [options]\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/parklab/NGSCheckMate/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2016 Park Lab at Harvard Medical School\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://parklab.github.io/NGSCheckMate/logo-16px.png"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NGSCheckMate"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "parklab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 159710,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 47048,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 7236,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 5811,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1342,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 570,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 10,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sejooning",
          "type": "User"
        },
        "date_created": "2023-08-15T13:00:01Z",
        "date_published": "2023-08-15T13:28:28Z",
        "description": "# A new version of NGSCheckMate (1.0.1) has been released. \r\n\r\n**Bug Fixes:**\r\n- Addressed a crash issue in BAM mode when samples with very few reads (e.g., failed samples) are provided, which previously caused a divide by zero error. (Incorporated from: [GitHub Pull Request #31](https://github.com/parklab/NGSCheckMate/pull/31))\r\n- Updated directory splitting to occur only once, even if the directory name contains \"=\" character. (Incorporated from: [GitHub Pull Request #37](https://github.com/parklab/NGSCheckMate/pull/37))\r\n\r\n**Additional Changes:**\r\n- Added the output_tag prefix to the output_corr_matrix.txt file.\r\n- Improved the scalability of the dendrogram PDF size with the addition of more samples (100+).\r\n- Ensured the generation of a dendrogram even when only two samples are compared.\r\n- Modified the dendrogram background color from grey to white.\r\n\r\nSpecial thanks to @SPPearce for these updates.\r\nThank you for your continuous support and contribution!\r\n\r\nBest regards,\r\nSejoon Lee\r\n\r\n\r\n\r\n\r\n",
        "html_url": "https://github.com/parklab/NGSCheckMate/releases/tag/v1.0.1",
        "name": "ncm-1.0.1",
        "release_id": 117308453,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/parklab/NGSCheckMate/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/NGSCheckMate/releases/117308453",
        "value": "https://api.github.com/repos/parklab/NGSCheckMate/releases/117308453",
        "zipball_url": "https://api.github.com/repos/parklab/NGSCheckMate/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "SooLee",
          "type": "User"
        },
        "date_created": "2017-04-04T06:49:50Z",
        "date_published": "2017-04-05T01:05:48Z",
        "html_url": "https://github.com/parklab/NGSCheckMate/releases/tag/v1.0.0",
        "name": "ncm-1.0.0",
        "release_id": 5978311,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/parklab/NGSCheckMate/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/NGSCheckMate/releases/5978311",
        "value": "https://api.github.com/repos/parklab/NGSCheckMate/releases/5978311",
        "zipball_url": "https://api.github.com/repos/parklab/NGSCheckMate/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1) Software environment",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "```\n- Unix/Linux System\n- Python 2.6 or above\n- R 3.1 or above (required to generate a PDF of sample clustering dendrogram and \n     a xgmml graphical output for sample clustering; see Output and Supporting scripts)\n```\n\n* For the BAM module,\n```\n- samtools (tested on version 0.1.19 and 1.3.1) \n- bcftools 0.1.19 (a utility program included in samtools) \n  \n  To install both programs:\n  you download Samtools 0.1.19 (e.g.) https://sourceforge.net/projects/samtools/files/samtools/0.1.19/ \n  \n  tar xvf samtools-0.1.19.tar.bz2\n  cd samtools-0.1.19\n  make\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Additional files",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "* For the BAM module,\n```\n- Human reference genome FASTA file (hg19 or GRCh37)\n- A bed file (.bed) that lists the locations of selected SNPs (included in the package)\n```\n* For the VCF module, (VCF generated by samtools or GATK)\n```\n- A bed file (.bed) that lists the locations of selected SNPs (included in the package)\n```\n* For the FASTQ module,\n```\n- A binary pattern file (.pt) that lists the flanking sequences of selected SNPs (included in the package)\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:58:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 124
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Supporting scripts",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>"
        ],
        "type": "Text_excerpt",
        "value": "-"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1) Patterngenerator",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Supporting scripts"
        ],
        "type": "Text_excerpt",
        "value": "The set of scripts in the patterngenerator folder in the package generate the .pt file used by the FSTQ module, in cases when the user wants to generate a custom .pt file. It requires a bed file containing a set of SNP positions, a genome reference file (both FASTA and bowtie 1 index) and the bowtie alignment program (http://bowtie-bio.sourceforge.net/index.shtml). \nUsage: makesnvpattern.pl bedfile genomefasta genome(bowtie)index outdir outprefix\n\t"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Graph generator (Rscript)",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Supporting scripts"
        ],
        "type": "Text_excerpt",
        "value": "This script with a set of xgmml templates is used for generating a graph representing matching files as connected nodes. The output format is in .xgmml, which can be read by Cytoscape.\n\n````\nsource(\"graph/ngscheckmate2xgmml.R\")\ncreate.xgmml.from.ngscheckmateout(label.file,ngscheckmateoutput.file,output.xgmml)\n````\n\n- Label file: a tab-delimited text file containing a BAM file name (1st column), an individual identifier (2nd column) and optionally, a file identifier (3rd column) for each line. An individual identifier must be unique to a subject (e.g. both tumor and normal samples from the same individual must have the same individual identifier). A file identifier must be unique to a file name.\n\n- ngscheckmateoutput.file: the output text file of NGSCheckMate. It is a tab-delimited text file containing two BAM file names (1st and 2nd columns), VAF correlation (3rd column) and average depth (4th column). It may contain either all pairs or matched pairs, depending on the option used to run NGSCheckMate. Both options may be used to run this program.\n\n- Sample label file (sample.label.txt) and ngscheckmateouput.file (sample.input.txt) can be found in the subdirectory graph/.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Speed up to analyze multiple large BAM files",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "You may need to analyze a large number of large BAM files. For example, you may want to identify the proper pairing of 100 cancer WGS data with their matched blood WGS data sequenced at high depth. In this case, it would take a long time to run NGSCheckMate on the set of BAM files, and we recommend the following procedures. \n\n* STEP1: Generate a VCF file for each BAM file as follows. \nThis step can be parallelized depending on your computing system. For example, the LSF-based system can perform this step in parallel using \u2018bsub\u2019 command. \n\n```\n# an example for generating sample.vcf from sample.bam mapped to hg19 (after 0.1.19 version)\nsamtools mpileup -I -uf hg19.fasta -l SNP_GRCh37_hg19_woChr.bed sample.bam | bcftools call -c - > ./sample.vcf\n  \n# an example for generating sample.vcf from sample.bam mapped to hg19 (0.1.19 version)\nsamtools mpileup -I -uf hg19.fasta -l SNP_GRCh37_hg19_woChr.bed sample.bam | bcftools view -cg - > ./sample.vcf\n```\n   \n* STEP2: Run NGSCheckMate on the set of VCF files as input.\n```\npython ncm.py -V \u2026\n```\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3) FASTQ mode",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nUsage: python ncm_fastq.py <-l INPUT_LIST_FILE> <-pt PT_FILE> <\u2013O OUTPUT_DIR> [options]\n```\n\n* Required arguments\n```\n-l FILE\t\tA text file that lists input fastq (or fastq.gz) files and sample names (one per line; see Input file format)\n\n-pt FILE\tA binary pattern file (.pt) that lists flanking sequences of selected SNPs (included in the package; SNP/SNP.pt)\n\n-O DIR\t\tAn output directory\n```\n\n* Optional arguments\n```\n-N PREFIX  \tA prefix for output files (default: \u201coutput\u201d)\n\n-f \t\tUse strict VAF correlation cutoffs. Recommended when your data may include   \n \t\trelated individuals (parents-child, siblings)\n \t\t\n-nz            Use the mean of non-zero depths across the SNPs as a reference depth\n \t\t(default: Use the mean depth across all the SNPs)\n\n-s FLOAT\tThe read subsampling rate (default: 1.0)\n  or\n-d INT\t\tThe target depth for read subsampling. NGSCheckMate calculates a subsampling rate based on this target depth. \n\n-R INT\t\tThe length of the genomic region with read mapping (default: 3x10^9) used to compute subsampling rate. If your data is \t\tNOT human WGS and you use the -d option, it is highly recommended that you specify this value. For instance, if your data is \t\thuman RNA-seq, the genomic length with read mapping is ~3% of the human genome (1x10^8).\n\n-L INT\t\tThe length of the flanking sequences of the SNPs (default: 21bp). It is not recommended that you change this value \t\t\tunless you create your own pattern file (.pt) with a different length. See Supporting Scripts for how to generate \t\t\tyour own pattern file.\n\n-p INT\t\tThe number of threads (default: 1)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4) FASTQ mode (alternative way)",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A C program, ngscheckmate_fastq, can be directly called to generate a VAF file from one FASTQ file (single-end sequencing) or two FASTQ files(paired-end sequencing). Then, another script, vaf_ncm.py is used to read a set of VAF files to complete the downstream analysis. When you need to analyze many FASTQ files, the first VAF file generation using ngscheckmate_fastq can be parallelized. \n\n* ngscheckmate_fastq\n```\nUsage: ngscheckmate_fastq <-1 FASTQ_FILE1> [-2 FASTQ_FILE2] <PT_FILE (.pt)> [options] > output.vaf\n```\n* Required arguments\n```\n-1, --fastq1 FILE \tFASTQ file for single-end or the first FASTQ file for paired-end. File can be gzipped (auto-detect).\n\nPT_FILE\t\t\tA binary pattern file (.pt) that lists flanking sequences of selected SNPs \t\t\t\t\t\t\t\t(included in the package; SNP/SNP.pt)\n\t\t\nOptional arguments\n-2, --fastq2 FILE \tThe second FASTQ file for paired-end. File can be gzipped (auto-detect).\n\n-s, --ss FLOAT\t\tThe read subsampling rate (default: 1.0)\nor\n-d, --depth INT \tThe target depth for read subsampling. NGSCheckMate calculates a \n\t\t\tsubsampling rate based on this target depth. \n\n-R, --reference_length INT \tThe length of the genomic region with read mapping (default: 3x10^9) to compute a subsampling rate. If \t\t\t\tyour data is NOT human WGS and you use the -d option, it is highly recommended that you specify this value. \t\t\t\t\tFor nstance, if your data is human RNA-seq, the genomic length with read mapping is ~3% of the \t\t\t\t\t\thuman genome (1x10^8).\n\n-L, --pattern_length INT \tThe length of flanking sequences of SNPs (default: 21bp). It is recommended not to change this value \t\t\t\t\tunless you create your own pattern file (.pt) with a different length. see Supporting Scripts for \t\t\t\t\thow to generate your own pattern file.\n\n-p, --maxthread INT  \tThe number of threads to use (default : 1 )\n\n```\nvaf_ncm.py\n```\nUsage: python vaf_ncm.py -f -I <INPUT_DIR> -O <OUTPUT_DIR > <-N PREFIX>\n```\n* Required arguments\n```\n-I DIR\t\tInput directory that contains the output VAF files of ngscheckmate_fastq\n\n-O DIR\t\tOutput directory\n\n-N PREFIX\tOuput file prefix\n\n-nz            \tUse the mean of non-zero depths across the SNPs as a reference depth\n \t\t(default: Use the mean depth across all the SNPs)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1) Test sample pairing using BAM input",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "- BAM files in `/data/wgs_download/LUAD/`:\n\n````bash\npython ncm.py -B -f -d /data/wgs_download/LUAD/ -O LUAD_WGS/ -N LUAD -bed SNP/SNP_GRCh37_hg19_woChr.bed\n````\n - BAM files listed in `bam_list_file`:\n \n```bash\npython ncm.py -B -f -l bam_list_file -O output_dir -N outputfile_prefix -bed SNP/SNP_GRCh37_hg19_woChr.bed\n```\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Test sample pairing using VCF input",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "- VCF files in `/data/wgs_download/LUAD/`:\n\n```bash\npython ncm.py -V -f -d /data/wgs_download/LUAD/ -O LUAD_WGS/ -N LUAD -bed SNP/SNP_GRCh37_hg19_woChr.bed\n```\n- VCF files listed in `vcf_list_file`:\n\n```bash\npython ncm.py -V -f -l vcf_list_file -O output_dir -N outputfile_prefix -bed SNP/SNP_GRCh37_hg19_woChr.bed\n```"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3) Test sample pairing using FASTQ input",
        "parent_header": [
          "<a href=\"https://github.com/parklab/NGSCheckMate/\">NGSCheckMate</a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```bash\npython ncm_fastq.py -l fastq_list.txt -O output -N ChIP_batch -p 4 -pt SNP/SNP.pt\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/NGSCheckMate/master/README.md",
      "technique": "header_analysis"
    }
  ]
}