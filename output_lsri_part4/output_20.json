{
  "application_domain": [
    {
      "confidence": 12.31,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/harmancilab/EpiSAFARI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-25T13:41:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-26T13:57:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EpiSAFARI: Sensitive Detection of Valley Shaped Patterns in Epigenetic Signal Profiles"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9329724846037201,
      "result": {
        "original_header": "EpiSAFARI",
        "type": "Text_excerpt",
        "value": "- Signal Profile in bedGraph format, <br>\n- Mapped reads in SAM/bowtie/eland/... format. <br>\n</div><br>\nand outputs:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- The spline smoothed signal profile. <br>\n- The valleys, local minima and maxima in the signal profile. <br>\n- Gene and transcription factors annotations, mappability values and nucleotide content for the valley.\n</div> \nIn addition, EpiSAFARI can compare the valleys detected in 2 samples and identify the \"differential valleys\". This enables comparing 2 samples generated under different conditions.\n<br> \nThe output is formatted as an extended BED file with multiple columns. Please refer below for the specification of output file format. \n<h2>Parameter Selection and Impact of Parameters on Detected Valleys</h2>\nEpiSAFARI uses a spline smoothing procedure with several parameters and these parameters can have impact on the sensitivity of the method.<br> \nThe spline smoothing is based on projecting the epigenetic signal profile on basis splines and removing noise. The basis splines are defined in terms of a spline degree and a set of knots. <br> \nWe generally observed that overly simple and complex smoothing causes underfitting and overfitting of the data and this decreases sensitivity of valley detection. \n<h3>Knot Selection</h3>\nThe number of knots, and the placement of knots are important factors while smoothing the signal. We generally observed that increasing knot number above 7 creates overfitting when using windows of length 1000 base pairs.  \nThe placements of knots along the signal domain is an open problem in spline based smoothing of signals. We compared several knot placement strategies (Uniform, Derivative-based, and Random) and found that uniform knot placement generally works comparable in accuracy as other knot placement strategies.<br> \n<h3>Spline Degree</h3>\nThe spline degree tunes polynomial complexity of the basis spline curves. We observed that increasing the degree above 5 may cause overfitting and setting it below 3 may cause underfitting. Thus, by\ndefault, EpiSAFARI uses degree of 5. \nIf it is necessary, this parameter while data is being smoothed using \"-bspline_encode\" option (See below). \n<h3>Setting the Number of Coefficients with new Spline Degree and Knot Selections</h3>\nIf the spline degree or knot number is changed, the number of coefficients can be computed simply as (number of knots) + (spline degree) - 2. This value should be used as the number of coefficients\nparameter while spline smoothing the data. \n<h3>Window length</h3>\nThe window length specifies the length of the window that is used while smoothing the data. Signal in each window is smoothed then concatenated. The large window lengths creates a large signal for smoothing.\nTherefore the knot numbers must be adjusted with the increasing window length. By fefault, EpiSAFARI's parameters are selections work well with 1000 base pair windows for dense signals. For sparse signals, such as\nDNA methylation, EpiSAFARI uses 5000 base pair long windows by default. \nThis parameter can be changed while data is being smoothed. \n<h3>Hill Score Thresholds</h3>\nEpiSAFARI reports a hill score between 0 and 1 that is used to measure the topological quality of valleys. Hill score of 1 represents a valley that shows monotonically increasing signal while moving from the valley's dip to the summits.<br> \nThe reported valleys must be filtered with respect to the reported hill scores. We observed that there is very high enrichment of valleys with hill scores close to 1.0. These valleys represent biologically meaningful valleys. Therefore EpiSAFARI uses hill score threshold of 0.90<br> \nIf the hill score threshold is decreased, the valley redundancy increases: The fraction of reported valleys with overlaps increase. Depending on the application, this may be a useful and intended behaviour.<br> \n<h2>Usage Examples</h2>\nEpiSAFARI run starts with setting up the input files. (Note that we use samtools for converting BAM file to SAM files.). EpiSAFARI can take bedGraph files and mapped reads\ndirectly as input. It is necessary to divide the data into chromosomes. \n<h2>Building input with bedGraph and bigWig files</h2> \n<h2>Building input with mapped read files</h2> \nEpiSAFARI can also process mapped read files, for example in SAM format. We show again an example from the ENCODE Project:\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam\n\nrm -f -r processed_reads\nmkdir processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\n```\nThis example pools the 2 replicates of data. If there are more multiple replicates of reads to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the reads automatically and uses the total signal profile in the analyses as in the example above.<br>\n \n<h2>Spline Fitting to the Data</h2> \nAfter input files are setup, we perform spline fitting to the read coverage signals. The raw data generated by EpiSAFARI is rather large so it is useful to gzip them:\n```\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=5\nmax_avg_err=3\nl_win=1000\nl_step_win=1000\nsparse_data=0\nl_post_filter=50\nbrkpt_type=1\nmin_POI_distance_in_bps=50\n\n## bedGraph files:\n./bin/EpiSAFARI -bspline_encode -signal_dir bedGraphs -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n\n## mapped read files:\n./bin/EpiSAFARI -bspline_encode -signal_dir processed_reads/dedup -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n``` \n<i>n_spline_coeffs</i> controls the number of knots that are used to fit b-spline. It should not be set to a very high value as this may cause overfitting of the data.<br> \nWe finally perform valley annotation. We first download the GENCODE gene annotation gff file:\n```\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\nl_promoter=1000\n\n## bedGraph files:\n./bin/EpiSAFARI -annotate_features merged_sign.bed gencode.v19.annotation.gff3.gz ${l_promoter} annotated_features.bed\n\n```\nFinally, you can also add ENCODE2 transcription factor binding annotations. We have built the GFF file for the uniformly processed peaks of 690 transcription factors from the ENCODE2 cell lines that you can download and use to annotate the features:\n```\nwget -c http://harmancilab.org/tools/EpiSAFARI/wgEncodeAwgTfbs.gff.gz\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n```\n \nAnnotation adds a new annotation column to every entry in the valleys file and automatically updates the header. \nEpiSAFARI can also process sparse signals. Examples of these include DNA methylation data, which happens only at cytosine nucleotides. For this, run EpiSAFARI with sparse_data=1 to enable sparse signal smoothing. We also turn on post-median filter on.<br> \n<h2>Visualization of the Signal</h2> \nIGV can be used to visualize the spline coded signals. These are stored as bedGraphs files under data directory. <br><br> \nThis is an extended bed file with following columns:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n<i><font face=\"courier\">\n<ol>\n<li>[Chromosome]: Chromosome ID </li>\n<li>[Left maxima position]: Position the left maximum of the valley\t</li>\n<li>[Right maxima position]: Position the right maximum of the valley </li>\n<li>[Minima position]: Position of the minimum of the valley </li>\n<li>[Left maxima signal]: Signal at the left maxima\t</li>\n<li>[Right maxima signal]: Signal at the right maxima </li>\n<li>[Minima signal]: Signal at the minima </li>\n<li>[Average multi-mappability signal]: Average multi-mappability signal on the valley </li>\n<li>[Maximum multi-mappability signal]: MAximum multi-mappability signal on the valley </li>\n<li>[Left hill quality]: Fraction of the nucleotides on the left hill</li>\n<li>[Right hill quality]: Fraction of the nucleotides on the right hill</li>\n<li>[A count]: Count of A nucleotides in the valley</li>\n<li>[C count]: Count of C nucleotides in the valley</li>\n<li>[G count]: Count of G nucleotides in the valley</li>\n<li>[T count]: Count of T nucleotides in the valley</li>\n<li>[CpG count]: Count of CpG dinucleotides in the valley\n<li>[P-value]: P-value of the valley\n<li>[FDR]: False discovery rate at which valley is deemed significant\n<li>[Annotation]: Annotated element's name and type of the element (gene, exon, transcript, promoter, TF_peak)</li>\n</font></i>\n</div><br> \n<h2>Assigning Valleys to Promoters and Detection of Supervalleys</h2> \n<h2>Detection of Differential Valleys</h2>\nWhen there are multiple samples (different cell lines, samples generated under different conditions),  an important downstream analysis is comparison of the valleys detected in these samples.  \nEpiSAFARI can be used to compare the valleys in the two samples. For this, use the 2 sample comparison option. Below, we assume the GM12878 and K562 valleys are detected using above commands. We perform valley comparison as below:\n```\n# Compare samples.\nsample1_signal_dir=./GM12878/processed_reads/dedup\nsample1_valleys_fp=./GM12878/merged_sign.bed \nsample2_signal_dir=./K562/processed_reads/dedup\nsample2_valleys_fp=./K562/merged_sign.bed \n./bin/EpiSAFARI -get_2_sample_differential_valleys ${sample1_valleys_fp} ${sample1_signal_dir} ${sample2_valleys_fp} ${sample2_signal_dir} 0 2\n\n# Now we filter out the valleys with respect to p-value.\nawk '{if(NR==1)print $0;if(NR>1 && $17<-10 && $18>-2){print $0}}' 2_sample_differential_stats.txt > gm12878_specific_valleys.bed\nawk '{if(NR==1)print $0;if(NR>1 && $18<-10 && $17>-2){print $0}}' 2_sample_differential_stats.txt > k562_specific_valleys.bed\n```\nFile named '2_sample_differential_stats.txt' contains the differential valley statistics in all the valleys pooled from GM12878 and K562 cell lines. This file is a tab-delimited file that contains significance and signals around all the valleys from the two samples. This file can be processed as above to filter valleys or it can be loaded into R and processed as a data frame. \n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9407529178171272,
      "result": {
        "original_header": "Download and Installation",
        "type": "Text_excerpt",
        "value": "<html>\n<font face=\"arial\">\n<div style=\"text-align:center\"><img src=\"episafari_logo.png\" alt=\"Could not load logo.\" width=\"800\" align=\"center\"></div>\n<h1>EpiSAFARI</h1>\nValley patterns, a dip between two summits, are prevalently observed in the genomewide profiles of many functional genomics signals such as ChIP-Seq, WGBS, RepliSeq, etc. The valleys potentially delineate the locations of functionally important elements, e.g. cis-regulatory elements such as enhancers, promoters, etc.<br><br> \nEpiSAFARI is a command line tool for detection, annotation, and characterization of the valley shaped patterns within the functional genomics signal profiles. It takes:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- Signal Profile in bedGraph format, <br>\n- Mapped reads in SAM/bowtie/eland/... format. <br>\n</div><br>\nand outputs:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- The spline smoothed signal profile. <br>\n- The valleys, local minima and maxima in the signal profile. <br>\n- Gene and transcription factors annotations, mappability values and nucleotide content for the valley.\n</div> \n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9021107784661793,
      "result": {
        "type": "Text_excerpt",
        "value": "EpiSAFARI\nValley patterns, a dip between two summits, are prevalently observed in the genomewide profiles of many functional genomics signals such as ChIP-Seq, WGBS, RepliSeq, etc. The valleys potentially delineate the locations of functionally important elements, e.g. cis-regulatory elements such as enhancers, promoters, etc. \n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and Installation",
        "parent_header": [
          "EpiSAFARI"
        ],
        "type": "Text_excerpt",
        "value": "<html>\n<font face=\"arial\">\n<div style=\"text-align:center\"><img src=\"episafari_logo.png\" alt=\"Could not load logo.\" width=\"800\" align=\"center\"></div>\n<h1>EpiSAFARI</h1>\nValley patterns, a dip between two summits, are prevalently observed in the genomewide profiles of many functional genomics signals such as ChIP-Seq, WGBS, RepliSeq, etc. The valleys potentially delineate the locations of functionally important elements, e.g. cis-regulatory elements such as enhancers, promoters, etc.<br><br>\n\nEpiSAFARI is a command line tool for detection, annotation, and characterization of the valley shaped patterns within the functional genomics signal profiles. It takes:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- Signal Profile in bedGraph format, <br>\n- Mapped reads in SAM/bowtie/eland/... format. <br>\n</div><br>\nand outputs:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- The spline smoothed signal profile. <br>\n- The valleys, local minima and maxima in the signal profile. <br>\n- Gene and transcription factors annotations, mappability values and nucleotide content for the valley.\n</div>\n\nIn addition, EpiSAFARI can compare the valleys detected in 2 samples and identify the \"differential valleys\". This enables comparing 2 samples generated under different conditions.\n<br>\n\nThe output is formatted as an extended BED file with multiple columns. Please refer below for the specification of output file format.\n\n<h2>Download and Installation</h2>\nYou can download EpiSAFARI code by clicking on the green \"Clone or Download\" button and downloading zip or by checking out via git. After that, navigate to the checkout (or download) directory. If you downloaded the zip file of the source, unzip it using \"unzip master.zip\".<br><br>\n\nYou need to have g++, gzip, and the GSL libraries installed for building EpiSAFARI. These are installed in most Unix distributions but if they are not installed, type:\n```\nsudo yum -y install gsl gsl-devel gcc-c++ gzip\n```\n\nThis should install the necessary GSL libraries for building EpiSAFARI correctly.<br><br>\n\nNow EpiSAFARI can be built using:<br>\n```\nmake clean\nmake\n```\nThe executable is located under directory <font face=\"courier\">bin/</font>. \n\nIt may be useful to install <a href=\"http://samtools.sourceforge.net/\">samtools</a> for processing BAM files.\n\nTo get help on which options are available, use:\n```\n./bin/EpiSAFARI -help\n```\n\n<h2>Parameter Selection and Impact of Parameters on Detected Valleys</h2>\nEpiSAFARI uses a spline smoothing procedure with several parameters and these parameters can have impact on the sensitivity of the method.<br>\n\nThe spline smoothing is based on projecting the epigenetic signal profile on basis splines and removing noise. The basis splines are defined in terms of a spline degree and a set of knots. <br>\n\nWe generally observed that overly simple and complex smoothing causes underfitting and overfitting of the data and this decreases sensitivity of valley detection.\n\n<h3>Knot Selection</h3>\nThe number of knots, and the placement of knots are important factors while smoothing the signal. We generally observed that increasing knot number above 7 creates overfitting when using windows of length 1000 base pairs. \n\nOn the other hand, the using a knot number below 6 seems to decrease sensitivitiy similarly because smoothed signal profile is underfit, i.e., does not represent the original signal well. Thus EpiSAFARI uses 7 knots by default.<br>\n\nThe placements of knots along the signal domain is an open problem in spline based smoothing of signals. We compared several knot placement strategies (Uniform, Derivative-based, and Random) and found that uniform knot placement generally works comparable in accuracy as other knot placement strategies.<br>\n\nIf it is necessary, the users can change the knot selection parameters while spline smoothing the data (See below)\n\n<h3>Spline Degree</h3>\nThe spline degree tunes polynomial complexity of the basis spline curves. We observed that increasing the degree above 5 may cause overfitting and setting it below 3 may cause underfitting. Thus, by\ndefault, EpiSAFARI uses degree of 5.\n\nIf it is necessary, this parameter while data is being smoothed using \"-bspline_encode\" option (See below).\n\n<h3>Setting the Number of Coefficients with new Spline Degree and Knot Selections</h3>\nIf the spline degree or knot number is changed, the number of coefficients can be computed simply as (number of knots) + (spline degree) - 2. This value should be used as the number of coefficients\nparameter while spline smoothing the data.\n\n<h3>Window length</h3>\nThe window length specifies the length of the window that is used while smoothing the data. Signal in each window is smoothed then concatenated. The large window lengths creates a large signal for smoothing.\nTherefore the knot numbers must be adjusted with the increasing window length. By fefault, EpiSAFARI's parameters are selections work well with 1000 base pair windows for dense signals. For sparse signals, such as\nDNA methylation, EpiSAFARI uses 5000 base pair long windows by default.\n\nThis parameter can be changed while data is being smoothed.\n\n<h3>Hill Score Thresholds</h3>\nEpiSAFARI reports a hill score between 0 and 1 that is used to measure the topological quality of valleys. Hill score of 1 represents a valley that shows monotonically increasing signal while moving from the valley's dip to the summits.<br>\n\nThe reported valleys must be filtered with respect to the reported hill scores. We observed that there is very high enrichment of valleys with hill scores close to 1.0. These valleys represent biologically meaningful valleys. Therefore EpiSAFARI uses hill score threshold of 0.90<br>\n\nIf the hill score threshold is decreased, the valley redundancy increases: The fraction of reported valleys with overlaps increase. Depending on the application, this may be a useful and intended behaviour.<br>\n\n<h2>Usage Examples</h2>\nEpiSAFARI run starts with setting up the input files. (Note that we use samtools for converting BAM file to SAM files.). EpiSAFARI can take bedGraph files and mapped reads\ndirectly as input. It is necessary to divide the data into chromosomes.\n\n<h2>Building input with bedGraph and bigWig files</h2>\n\nWe show an example from ENCODE project below:\n\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig\nwget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nchmod 755 bigWigToBedGraph\n./bigWigToBedGraph wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr\nmkdir bedGraphs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr bedGraphs\n```\nIf there are multiple replicates to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the bedGraphs automatically and uses the total signal profile in the analyses.<br>\n\n<h2>Building input with mapped read files</h2>\n\nEpiSAFARI can also process mapped read files, for example in SAM format. We show again an example from the ENCODE Project:\n\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam\n\nrm -f -r processed_reads\nmkdir processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\n```\nThis example pools the 2 replicates of data. If there are more multiple replicates of reads to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the reads automatically and uses the total signal profile in the analyses as in the example above.<br>\n\nWe strongly recommend removing duplicates from the reads. This decreases valley detection time quite much:<br>\n```\nmkdir processed_reads/sorted processed_reads/dedup\n./bin/EpiSAFARI -sort_reads processed_reads processed_reads/sorted\n./bin/EpiSAFARI -remove_duplicates processed_reads/sorted 2 processed_reads/dedup\n```\n\n<h2>Spline Fitting to the Data</h2>\n\nAfter input files are setup, we perform spline fitting to the read coverage signals. The raw data generated by EpiSAFARI is rather large so it is useful to gzip them:\n```\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=5\nmax_avg_err=3\nl_win=1000\nl_step_win=1000\nsparse_data=0\nl_post_filter=50\nbrkpt_type=1\nmin_POI_distance_in_bps=50\n\n## bedGraph files:\n./bin/EpiSAFARI -bspline_encode -signal_dir bedGraphs -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n\n## mapped read files:\n./bin/EpiSAFARI -bspline_encode -signal_dir processed_reads/dedup -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n```\n\n<i>n_spline_coeffs</i> controls the number of knots that are used to fit b-spline. It should not be set to a very high value as this may cause overfitting of the data.<br>\n\n<h2>Valley Detection</h2>\nWe next perform valley identification. We first download the multi-mappability signal then identify the valleys:<br>\n\n```\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmkdir hg19_36bp\ncd hg19_36bp\nwget -c http://archive.gersteinlab.org/proj/MUSIC/multimap_profiles/hg19/hg19_36bp.tar.bz2\ntar -xvjf hg19_36bp.tar.bz2\ncd ..\nmkdir hg19_seq\ncd hg19_seq\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz\ntar -xvzf chromFa.tar.gz\n../bin/EpiSAFARI -preprocess_FASTA . fa .\ncd ..\nmax_trough_sig=1000\nmin_summit_sig=5\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=1000\nmin_summit2trough_dist=0\nmin_multimapp=1.2\nsparse_data=0\npval_type=0\n\n## bedGraph files:\n./bin/EpiSAFARI -get_valleys -signal_dir bedGraphs -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=bedGraphs/significant_valleys.bed.gz\n\n## mapped read files:\n./bin/EpiSAFARI -get_valleys -signal_dir processed_reads/dedup -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=processed_reads/dedup/significant_valleys.bed.gz\n\n\n# Filter: Remove valleys with FDR higher than log(0.05), hill scores lower than 0.90 and average multi-mappability higher than 1.2.\ngzip -cd ${all_valleys_fp} | awk {'if(NR==1){print $0};if($18<-3 && $10>=0.90 && $11>=0.90 && $8<1.2)print $0'} > sign.bed\n\n# Merge valleys with dips closer than 200 base pairs.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n```\n\n<h2>Valley Annotation</h2>\n\nWe finally perform valley annotation. We first download the GENCODE gene annotation gff file:\n\n```\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\nl_promoter=1000\n\n## bedGraph files:\n./bin/EpiSAFARI -annotate_features merged_sign.bed gencode.v19.annotation.gff3.gz ${l_promoter} annotated_features.bed\n\n```\n\nFinally, you can also add ENCODE2 transcription factor binding annotations. We have built the GFF file for the uniformly processed peaks of 690 transcription factors from the ENCODE2 cell lines that you can download and use to annotate the features:\n\n```\nwget -c http://harmancilab.org/tools/EpiSAFARI/wgEncodeAwgTfbs.gff.gz\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n```\n\nAnnotation adds a new annotation column to every entry in the valleys file and automatically updates the header.\n\n<h2>Sparse Mode</h2>\n\nEpiSAFARI can also process sparse signals. Examples of these include DNA methylation data, which happens only at cytosine nucleotides. For this, run EpiSAFARI with sparse_data=1 to enable sparse signal smoothing. We also turn on post-median filter on.<br>\n\nWe demonstrate this option on the DNA methylation data for H1hESC cell line from Roadmap Epigenome Project:\n```\nwget -c ftp://ftp.genboree.org/EpigenomeAtlas/Current-Release/experiment-sample/Bisulfite-Seq/H1_Cell_Line/UCSD.H1.Bisulfite-Seq.combined.wig.gz\n\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes\nchmod 755 fetchChromSizes\nchmod 755 wigToBigWig\nchmod 755 bigWigToBedGraph\n\ngzip -cd UCSD.H1.Bisulfite-Seq.combined.wig.gz > UCSD.H1.Bisulfite-Seq.combined.wig\n./fetchChromSizes hg19 > hg19.list\n./wigToBigWig UCSD.H1.Bisulfite-Seq.combined.wig hg19.list UCSD.H1.Bisulfite-Seq.combined.wig.bw\n./bigWigToBedGraph UCSD.H1.Bisulfite-Seq.combined.wig.bw UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr\n\nmkdir DNAm_bgrs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr DNAm_bgrs\n\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=0.3\nmax_avg_err=0.3\nl_win=5000\nsparse_data=1 \nl_post_filter=50\nbrkpt_type=0\n\n./bin/EpiSAFARI -bspline_encode DNAm_bgrs ${n_spline_coeffs} ${spline_order} ${brkpt_type} ${max_max_err} ${max_avg_err} ${l_win} ${sparse_data} ${l_post_filter}\n \n# Compute valleys.\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmax_trough_sig=1000\nmin_summit_sig=0.7\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=2000\nmin_summit2trough_dist=250\nmin_multimapp=1.2\nsparse_data=1\npval_type=0\n\n./bin/EpiSAFARI -get_significant_extrema DNAm_bgrs ${max_trough_sig} ${min_summit_sig} ${min_summit2trough_frac} ${min_summit2trough_dist} ${max_summit2trough_dist} ${mmap_dir} ${min_multimapp} ${seq_dir} 0.1 ${sparse_data} ${pval_type}\n\n# Filter: Remove methyl-valleys with FDR higher than log(0.05), CpG count less than 20, hill score less than 0.99, and GC content less than 0.4.\ncat DNAm_bgrs/significant_valleys.bed | awk {'if(NR==1){print $0};if($18<-3 && $16>20 && $10>=0.99 && $11>=0.99 && $8<1.2 && ($13+$14)/($12+$13+$14+$15)>0.4)print $0'} > sign.bed\n\n# Merge the methl-valleys whose minima are within 200 base pairs of each other.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n\n```\n\n<h2>Visualization of the Signal</h2>\n\nIGV can be used to visualize the spline coded signals. These are stored as bedGraphs files under data directory. <br><br>\n\nTo visualize the spline smoothed signal profile for chromosome 1, use following:\n```\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig\nchmod 755 bedGraphToBigWig\ngzip -cd bedGraphs/spline_coded_1.bgr.gz > bedGraphs/spline_coded_1.bgr\nsed -i 's/chr//g' hg19.list\nbedGraphToBigWig bedGraphs/spline_coded_1.bgr hg19.list spline_coded_1.bgr.bw\n```\n\nThe bigWig file named <i>spline_coded_1.bgr.bw</i> can be opened in IGV to visualize the spline smoothed signal. An example is shown below:<br><br>\n\n<div style=\"text-align:center;\"><img src=\"example.png\" alt=\"Could not load example.\" width=\"1000\" align=\"center\"></div>\n\n<h2>Output format</h2>\nEpiSAFARI outputs the identified valleys to a BED file named \"significant_valleys.bed\".<br><br>\n\nThis is an extended bed file with following columns:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n<i><font face=\"courier\">\n<ol>\n<li>[Chromosome]: Chromosome ID </li>\n<li>[Left maxima position]: Position the left maximum of the valley\t</li>\n<li>[Right maxima position]: Position the right maximum of the valley </li>\n<li>[Minima position]: Position of the minimum of the valley </li>\n<li>[Left maxima signal]: Signal at the left maxima\t</li>\n<li>[Right maxima signal]: Signal at the right maxima </li>\n<li>[Minima signal]: Signal at the minima </li>\n<li>[Average multi-mappability signal]: Average multi-mappability signal on the valley </li>\n<li>[Maximum multi-mappability signal]: MAximum multi-mappability signal on the valley </li>\n<li>[Left hill quality]: Fraction of the nucleotides on the left hill</li>\n<li>[Right hill quality]: Fraction of the nucleotides on the right hill</li>\n<li>[A count]: Count of A nucleotides in the valley</li>\n<li>[C count]: Count of C nucleotides in the valley</li>\n<li>[G count]: Count of G nucleotides in the valley</li>\n<li>[T count]: Count of T nucleotides in the valley</li>\n<li>[CpG count]: Count of CpG dinucleotides in the valley\n<li>[P-value]: P-value of the valley\n<li>[FDR]: False discovery rate at which valley is deemed significant\n<li>[Annotation]: Annotated element's name and type of the element (gene, exon, transcript, promoter, TF_peak)</li>\n</font></i>\n</div><br>\n\n<h2>Assigning Valleys to Promoters and Detection of Supervalleys</h2>\n\nEpiSAFARI can assign the valleys to the gene promoters to identify a tentative list of supervalleys around gene promoters.\n\n```\n# Download GENCODE Annotations.\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\n# Parse the promoters as TSS +/- 10kb.\ngzip -cd gencode.v19.annotation.gff3.gz | awk 'BEGIN{FS=\"\\t\"}{if($3==\"gene\"){gene_start=$4;if($7==\"-\"){gene_start=$5;};split($9, arr, \";\");for(i=1;i<=length(arr);i++){if (arr[i] ~/gene_name=/){gene_name=arr[i]}};print $1\"\\t\"gene_start-10000\"\\t\"gene_start+10000\"\\t\"gene_name\"\\t.\\t\"$7}}' > promoters.bed\n\n# Assign the valleys to the gene promoters.\n./bin/EpiSAFARI -assign_valleys_2_regions promoters.bed merged_sign.bed valleys_2_promoters.bed\n\n# Sort the promoters with respect to number of valleys around promoter and get a list of the gene symbols.\nsort -n -k7,7 valleys_2_promoters.bed -r | head -n 200 | awk {'print $4'} | sort -u > genes_with_supervalleys.list\n```\n\nAbove code assigns the valleys to the promoters. The output file 'valleys_2_promoters.bed' contains the number (and the list) of valleys around the promoters of all the genes.\n\n<h2>Detection of Differential Valleys</h2>\nWhen there are multiple samples (different cell lines, samples generated under different conditions),  an important downstream analysis is comparison of the valleys detected in these samples. \n\nEpiSAFARI can be used to compare the valleys in the two samples. For this, use the 2 sample comparison option. Below, we assume the GM12878 and K562 valleys are detected using above commands. We perform valley comparison as below:\n```\n# Compare samples.\nsample1_signal_dir=./GM12878/processed_reads/dedup\nsample1_valleys_fp=./GM12878/merged_sign.bed \nsample2_signal_dir=./K562/processed_reads/dedup\nsample2_valleys_fp=./K562/merged_sign.bed \n./bin/EpiSAFARI -get_2_sample_differential_valleys ${sample1_valleys_fp} ${sample1_signal_dir} ${sample2_valleys_fp} ${sample2_signal_dir} 0 2\n\n# Now we filter out the valleys with respect to p-value.\nawk '{if(NR==1)print $0;if(NR>1 && $17<-10 && $18>-2){print $0}}' 2_sample_differential_stats.txt > gm12878_specific_valleys.bed\nawk '{if(NR==1)print $0;if(NR>1 && $18<-10 && $17>-2){print $0}}' 2_sample_differential_stats.txt > k562_specific_valleys.bed\n```\nFile named '2_sample_differential_stats.txt' contains the differential valley statistics in all the valleys pooled from GM12878 and K562 cell lines. This file is a tab-delimited file that contains significance and signals around all the valleys from the two samples. This file can be processed as above to filter valleys or it can be loaded into R and processed as a data frame.\n\nEpiSAFARI can be used to add annotations to the differential valleys ('2_sample_differential_stats.txt' file) using '-annotate_features' option:\n```\n./bin/EpiSAFARI -annotate_features 2_sample_differential_stats.txt gencode.v19.annotation.gff3.gz ${l_promoter} annotated_2_sample_differential_stats.txt\n```\n</html>\n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/harmancilab/EpiSAFARI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/harmancilab/EpiSAFARI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "harmancilab/EpiSAFARI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EpiSAFARI"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and Installation",
        "parent_header": [
          "EpiSAFARI"
        ],
        "type": "Text_excerpt",
        "value": "<html>\n<font face=\"arial\">\n<div style=\"text-align:center\"><img src=\"episafari_logo.png\" alt=\"Could not load logo.\" width=\"800\" align=\"center\"></div>\n<h1>EpiSAFARI</h1>\nValley patterns, a dip between two summits, are prevalently observed in the genomewide profiles of many functional genomics signals such as ChIP-Seq, WGBS, RepliSeq, etc. The valleys potentially delineate the locations of functionally important elements, e.g. cis-regulatory elements such as enhancers, promoters, etc.<br><br>\n\nEpiSAFARI is a command line tool for detection, annotation, and characterization of the valley shaped patterns within the functional genomics signal profiles. It takes:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- Signal Profile in bedGraph format, <br>\n- Mapped reads in SAM/bowtie/eland/... format. <br>\n</div><br>\nand outputs:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- The spline smoothed signal profile. <br>\n- The valleys, local minima and maxima in the signal profile. <br>\n- Gene and transcription factors annotations, mappability values and nucleotide content for the valley.\n</div>\n\nIn addition, EpiSAFARI can compare the valleys detected in 2 samples and identify the \"differential valleys\". This enables comparing 2 samples generated under different conditions.\n<br>\n\nThe output is formatted as an extended BED file with multiple columns. Please refer below for the specification of output file format.\n\n<h2>Download and Installation</h2>\nYou can download EpiSAFARI code by clicking on the green \"Clone or Download\" button and downloading zip or by checking out via git. After that, navigate to the checkout (or download) directory. If you downloaded the zip file of the source, unzip it using \"unzip master.zip\".<br><br>\n\nYou need to have g++, gzip, and the GSL libraries installed for building EpiSAFARI. These are installed in most Unix distributions but if they are not installed, type:\n```\nsudo yum -y install gsl gsl-devel gcc-c++ gzip\n```\n\nThis should install the necessary GSL libraries for building EpiSAFARI correctly.<br><br>\n\nNow EpiSAFARI can be built using:<br>\n```\nmake clean\nmake\n```\nThe executable is located under directory <font face=\"courier\">bin/</font>. \n\nIt may be useful to install <a href=\"http://samtools.sourceforge.net/\">samtools</a> for processing BAM files.\n\nTo get help on which options are available, use:\n```\n./bin/EpiSAFARI -help\n```\n\n<h2>Parameter Selection and Impact of Parameters on Detected Valleys</h2>\nEpiSAFARI uses a spline smoothing procedure with several parameters and these parameters can have impact on the sensitivity of the method.<br>\n\nThe spline smoothing is based on projecting the epigenetic signal profile on basis splines and removing noise. The basis splines are defined in terms of a spline degree and a set of knots. <br>\n\nWe generally observed that overly simple and complex smoothing causes underfitting and overfitting of the data and this decreases sensitivity of valley detection.\n\n<h3>Knot Selection</h3>\nThe number of knots, and the placement of knots are important factors while smoothing the signal. We generally observed that increasing knot number above 7 creates overfitting when using windows of length 1000 base pairs. \n\nOn the other hand, the using a knot number below 6 seems to decrease sensitivitiy similarly because smoothed signal profile is underfit, i.e., does not represent the original signal well. Thus EpiSAFARI uses 7 knots by default.<br>\n\nThe placements of knots along the signal domain is an open problem in spline based smoothing of signals. We compared several knot placement strategies (Uniform, Derivative-based, and Random) and found that uniform knot placement generally works comparable in accuracy as other knot placement strategies.<br>\n\nIf it is necessary, the users can change the knot selection parameters while spline smoothing the data (See below)\n\n<h3>Spline Degree</h3>\nThe spline degree tunes polynomial complexity of the basis spline curves. We observed that increasing the degree above 5 may cause overfitting and setting it below 3 may cause underfitting. Thus, by\ndefault, EpiSAFARI uses degree of 5.\n\nIf it is necessary, this parameter while data is being smoothed using \"-bspline_encode\" option (See below).\n\n<h3>Setting the Number of Coefficients with new Spline Degree and Knot Selections</h3>\nIf the spline degree or knot number is changed, the number of coefficients can be computed simply as (number of knots) + (spline degree) - 2. This value should be used as the number of coefficients\nparameter while spline smoothing the data.\n\n<h3>Window length</h3>\nThe window length specifies the length of the window that is used while smoothing the data. Signal in each window is smoothed then concatenated. The large window lengths creates a large signal for smoothing.\nTherefore the knot numbers must be adjusted with the increasing window length. By fefault, EpiSAFARI's parameters are selections work well with 1000 base pair windows for dense signals. For sparse signals, such as\nDNA methylation, EpiSAFARI uses 5000 base pair long windows by default.\n\nThis parameter can be changed while data is being smoothed.\n\n<h3>Hill Score Thresholds</h3>\nEpiSAFARI reports a hill score between 0 and 1 that is used to measure the topological quality of valleys. Hill score of 1 represents a valley that shows monotonically increasing signal while moving from the valley's dip to the summits.<br>\n\nThe reported valleys must be filtered with respect to the reported hill scores. We observed that there is very high enrichment of valleys with hill scores close to 1.0. These valleys represent biologically meaningful valleys. Therefore EpiSAFARI uses hill score threshold of 0.90<br>\n\nIf the hill score threshold is decreased, the valley redundancy increases: The fraction of reported valleys with overlaps increase. Depending on the application, this may be a useful and intended behaviour.<br>\n\n<h2>Usage Examples</h2>\nEpiSAFARI run starts with setting up the input files. (Note that we use samtools for converting BAM file to SAM files.). EpiSAFARI can take bedGraph files and mapped reads\ndirectly as input. It is necessary to divide the data into chromosomes.\n\n<h2>Building input with bedGraph and bigWig files</h2>\n\nWe show an example from ENCODE project below:\n\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig\nwget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nchmod 755 bigWigToBedGraph\n./bigWigToBedGraph wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr\nmkdir bedGraphs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr bedGraphs\n```\nIf there are multiple replicates to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the bedGraphs automatically and uses the total signal profile in the analyses.<br>\n\n<h2>Building input with mapped read files</h2>\n\nEpiSAFARI can also process mapped read files, for example in SAM format. We show again an example from the ENCODE Project:\n\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam\n\nrm -f -r processed_reads\nmkdir processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\n```\nThis example pools the 2 replicates of data. If there are more multiple replicates of reads to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the reads automatically and uses the total signal profile in the analyses as in the example above.<br>\n\nWe strongly recommend removing duplicates from the reads. This decreases valley detection time quite much:<br>\n```\nmkdir processed_reads/sorted processed_reads/dedup\n./bin/EpiSAFARI -sort_reads processed_reads processed_reads/sorted\n./bin/EpiSAFARI -remove_duplicates processed_reads/sorted 2 processed_reads/dedup\n```\n\n<h2>Spline Fitting to the Data</h2>\n\nAfter input files are setup, we perform spline fitting to the read coverage signals. The raw data generated by EpiSAFARI is rather large so it is useful to gzip them:\n```\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=5\nmax_avg_err=3\nl_win=1000\nl_step_win=1000\nsparse_data=0\nl_post_filter=50\nbrkpt_type=1\nmin_POI_distance_in_bps=50\n\n## bedGraph files:\n./bin/EpiSAFARI -bspline_encode -signal_dir bedGraphs -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n\n## mapped read files:\n./bin/EpiSAFARI -bspline_encode -signal_dir processed_reads/dedup -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n```\n\n<i>n_spline_coeffs</i> controls the number of knots that are used to fit b-spline. It should not be set to a very high value as this may cause overfitting of the data.<br>\n\n<h2>Valley Detection</h2>\nWe next perform valley identification. We first download the multi-mappability signal then identify the valleys:<br>\n\n```\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmkdir hg19_36bp\ncd hg19_36bp\nwget -c http://archive.gersteinlab.org/proj/MUSIC/multimap_profiles/hg19/hg19_36bp.tar.bz2\ntar -xvjf hg19_36bp.tar.bz2\ncd ..\nmkdir hg19_seq\ncd hg19_seq\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz\ntar -xvzf chromFa.tar.gz\n../bin/EpiSAFARI -preprocess_FASTA . fa .\ncd ..\nmax_trough_sig=1000\nmin_summit_sig=5\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=1000\nmin_summit2trough_dist=0\nmin_multimapp=1.2\nsparse_data=0\npval_type=0\n\n## bedGraph files:\n./bin/EpiSAFARI -get_valleys -signal_dir bedGraphs -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=bedGraphs/significant_valleys.bed.gz\n\n## mapped read files:\n./bin/EpiSAFARI -get_valleys -signal_dir processed_reads/dedup -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=processed_reads/dedup/significant_valleys.bed.gz\n\n\n# Filter: Remove valleys with FDR higher than log(0.05), hill scores lower than 0.90 and average multi-mappability higher than 1.2.\ngzip -cd ${all_valleys_fp} | awk {'if(NR==1){print $0};if($18<-3 && $10>=0.90 && $11>=0.90 && $8<1.2)print $0'} > sign.bed\n\n# Merge valleys with dips closer than 200 base pairs.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n```\n\n<h2>Valley Annotation</h2>\n\nWe finally perform valley annotation. We first download the GENCODE gene annotation gff file:\n\n```\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\nl_promoter=1000\n\n## bedGraph files:\n./bin/EpiSAFARI -annotate_features merged_sign.bed gencode.v19.annotation.gff3.gz ${l_promoter} annotated_features.bed\n\n```\n\nFinally, you can also add ENCODE2 transcription factor binding annotations. We have built the GFF file for the uniformly processed peaks of 690 transcription factors from the ENCODE2 cell lines that you can download and use to annotate the features:\n\n```\nwget -c http://harmancilab.org/tools/EpiSAFARI/wgEncodeAwgTfbs.gff.gz\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n```\n\nAnnotation adds a new annotation column to every entry in the valleys file and automatically updates the header.\n\n<h2>Sparse Mode</h2>\n\nEpiSAFARI can also process sparse signals. Examples of these include DNA methylation data, which happens only at cytosine nucleotides. For this, run EpiSAFARI with sparse_data=1 to enable sparse signal smoothing. We also turn on post-median filter on.<br>\n\nWe demonstrate this option on the DNA methylation data for H1hESC cell line from Roadmap Epigenome Project:\n```\nwget -c ftp://ftp.genboree.org/EpigenomeAtlas/Current-Release/experiment-sample/Bisulfite-Seq/H1_Cell_Line/UCSD.H1.Bisulfite-Seq.combined.wig.gz\n\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes\nchmod 755 fetchChromSizes\nchmod 755 wigToBigWig\nchmod 755 bigWigToBedGraph\n\ngzip -cd UCSD.H1.Bisulfite-Seq.combined.wig.gz > UCSD.H1.Bisulfite-Seq.combined.wig\n./fetchChromSizes hg19 > hg19.list\n./wigToBigWig UCSD.H1.Bisulfite-Seq.combined.wig hg19.list UCSD.H1.Bisulfite-Seq.combined.wig.bw\n./bigWigToBedGraph UCSD.H1.Bisulfite-Seq.combined.wig.bw UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr\n\nmkdir DNAm_bgrs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr DNAm_bgrs\n\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=0.3\nmax_avg_err=0.3\nl_win=5000\nsparse_data=1 \nl_post_filter=50\nbrkpt_type=0\n\n./bin/EpiSAFARI -bspline_encode DNAm_bgrs ${n_spline_coeffs} ${spline_order} ${brkpt_type} ${max_max_err} ${max_avg_err} ${l_win} ${sparse_data} ${l_post_filter}\n \n# Compute valleys.\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmax_trough_sig=1000\nmin_summit_sig=0.7\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=2000\nmin_summit2trough_dist=250\nmin_multimapp=1.2\nsparse_data=1\npval_type=0\n\n./bin/EpiSAFARI -get_significant_extrema DNAm_bgrs ${max_trough_sig} ${min_summit_sig} ${min_summit2trough_frac} ${min_summit2trough_dist} ${max_summit2trough_dist} ${mmap_dir} ${min_multimapp} ${seq_dir} 0.1 ${sparse_data} ${pval_type}\n\n# Filter: Remove methyl-valleys with FDR higher than log(0.05), CpG count less than 20, hill score less than 0.99, and GC content less than 0.4.\ncat DNAm_bgrs/significant_valleys.bed | awk {'if(NR==1){print $0};if($18<-3 && $16>20 && $10>=0.99 && $11>=0.99 && $8<1.2 && ($13+$14)/($12+$13+$14+$15)>0.4)print $0'} > sign.bed\n\n# Merge the methl-valleys whose minima are within 200 base pairs of each other.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n\n```\n\n<h2>Visualization of the Signal</h2>\n\nIGV can be used to visualize the spline coded signals. These are stored as bedGraphs files under data directory. <br><br>\n\nTo visualize the spline smoothed signal profile for chromosome 1, use following:\n```\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig\nchmod 755 bedGraphToBigWig\ngzip -cd bedGraphs/spline_coded_1.bgr.gz > bedGraphs/spline_coded_1.bgr\nsed -i 's/chr//g' hg19.list\nbedGraphToBigWig bedGraphs/spline_coded_1.bgr hg19.list spline_coded_1.bgr.bw\n```\n\nThe bigWig file named <i>spline_coded_1.bgr.bw</i> can be opened in IGV to visualize the spline smoothed signal. An example is shown below:<br><br>\n\n<div style=\"text-align:center;\"><img src=\"example.png\" alt=\"Could not load example.\" width=\"1000\" align=\"center\"></div>\n\n<h2>Output format</h2>\nEpiSAFARI outputs the identified valleys to a BED file named \"significant_valleys.bed\".<br><br>\n\nThis is an extended bed file with following columns:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n<i><font face=\"courier\">\n<ol>\n<li>[Chromosome]: Chromosome ID </li>\n<li>[Left maxima position]: Position the left maximum of the valley\t</li>\n<li>[Right maxima position]: Position the right maximum of the valley </li>\n<li>[Minima position]: Position of the minimum of the valley </li>\n<li>[Left maxima signal]: Signal at the left maxima\t</li>\n<li>[Right maxima signal]: Signal at the right maxima </li>\n<li>[Minima signal]: Signal at the minima </li>\n<li>[Average multi-mappability signal]: Average multi-mappability signal on the valley </li>\n<li>[Maximum multi-mappability signal]: MAximum multi-mappability signal on the valley </li>\n<li>[Left hill quality]: Fraction of the nucleotides on the left hill</li>\n<li>[Right hill quality]: Fraction of the nucleotides on the right hill</li>\n<li>[A count]: Count of A nucleotides in the valley</li>\n<li>[C count]: Count of C nucleotides in the valley</li>\n<li>[G count]: Count of G nucleotides in the valley</li>\n<li>[T count]: Count of T nucleotides in the valley</li>\n<li>[CpG count]: Count of CpG dinucleotides in the valley\n<li>[P-value]: P-value of the valley\n<li>[FDR]: False discovery rate at which valley is deemed significant\n<li>[Annotation]: Annotated element's name and type of the element (gene, exon, transcript, promoter, TF_peak)</li>\n</font></i>\n</div><br>\n\n<h2>Assigning Valleys to Promoters and Detection of Supervalleys</h2>\n\nEpiSAFARI can assign the valleys to the gene promoters to identify a tentative list of supervalleys around gene promoters.\n\n```\n# Download GENCODE Annotations.\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\n# Parse the promoters as TSS +/- 10kb.\ngzip -cd gencode.v19.annotation.gff3.gz | awk 'BEGIN{FS=\"\\t\"}{if($3==\"gene\"){gene_start=$4;if($7==\"-\"){gene_start=$5;};split($9, arr, \";\");for(i=1;i<=length(arr);i++){if (arr[i] ~/gene_name=/){gene_name=arr[i]}};print $1\"\\t\"gene_start-10000\"\\t\"gene_start+10000\"\\t\"gene_name\"\\t.\\t\"$7}}' > promoters.bed\n\n# Assign the valleys to the gene promoters.\n./bin/EpiSAFARI -assign_valleys_2_regions promoters.bed merged_sign.bed valleys_2_promoters.bed\n\n# Sort the promoters with respect to number of valleys around promoter and get a list of the gene symbols.\nsort -n -k7,7 valleys_2_promoters.bed -r | head -n 200 | awk {'print $4'} | sort -u > genes_with_supervalleys.list\n```\n\nAbove code assigns the valleys to the promoters. The output file 'valleys_2_promoters.bed' contains the number (and the list) of valleys around the promoters of all the genes.\n\n<h2>Detection of Differential Valleys</h2>\nWhen there are multiple samples (different cell lines, samples generated under different conditions),  an important downstream analysis is comparison of the valleys detected in these samples. \n\nEpiSAFARI can be used to compare the valleys in the two samples. For this, use the 2 sample comparison option. Below, we assume the GM12878 and K562 valleys are detected using above commands. We perform valley comparison as below:\n```\n# Compare samples.\nsample1_signal_dir=./GM12878/processed_reads/dedup\nsample1_valleys_fp=./GM12878/merged_sign.bed \nsample2_signal_dir=./K562/processed_reads/dedup\nsample2_valleys_fp=./K562/merged_sign.bed \n./bin/EpiSAFARI -get_2_sample_differential_valleys ${sample1_valleys_fp} ${sample1_signal_dir} ${sample2_valleys_fp} ${sample2_signal_dir} 0 2\n\n# Now we filter out the valleys with respect to p-value.\nawk '{if(NR==1)print $0;if(NR>1 && $17<-10 && $18>-2){print $0}}' 2_sample_differential_stats.txt > gm12878_specific_valleys.bed\nawk '{if(NR==1)print $0;if(NR>1 && $18<-10 && $17>-2){print $0}}' 2_sample_differential_stats.txt > k562_specific_valleys.bed\n```\nFile named '2_sample_differential_stats.txt' contains the differential valley statistics in all the valleys pooled from GM12878 and K562 cell lines. This file is a tab-delimited file that contains significance and signals around all the valleys from the two samples. This file can be processed as above to filter valleys or it can be loaded into R and processed as a data frame.\n\nEpiSAFARI can be used to add annotations to the differential valleys ('2_sample_differential_stats.txt' file) using '-annotate_features' option:\n```\n./bin/EpiSAFARI -annotate_features 2_sample_differential_stats.txt gencode.v19.annotation.gff3.gz ${l_promoter} annotated_2_sample_differential_stats.txt\n```\n</html>\n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting the Number of Coefficients with new Spline Degree and Knot Selections",
        "parent_header": [
          "EpiSAFARI",
          "Parameter Selection and Impact of Parameters on Detected Valleys"
        ],
        "type": "Text_excerpt",
        "value": "<html>\n<font face=\"arial\">\n<div style=\"text-align:center\"><img src=\"episafari_logo.png\" alt=\"Could not load logo.\" width=\"800\" align=\"center\"></div>\n<h1>EpiSAFARI</h1>\nValley patterns, a dip between two summits, are prevalently observed in the genomewide profiles of many functional genomics signals such as ChIP-Seq, WGBS, RepliSeq, etc. The valleys potentially delineate the locations of functionally important elements, e.g. cis-regulatory elements such as enhancers, promoters, etc.<br><br>\n\nEpiSAFARI is a command line tool for detection, annotation, and characterization of the valley shaped patterns within the functional genomics signal profiles. It takes:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- Signal Profile in bedGraph format, <br>\n- Mapped reads in SAM/bowtie/eland/... format. <br>\n</div><br>\nand outputs:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- The spline smoothed signal profile. <br>\n- The valleys, local minima and maxima in the signal profile. <br>\n- Gene and transcription factors annotations, mappability values and nucleotide content for the valley.\n</div>\n\nIn addition, EpiSAFARI can compare the valleys detected in 2 samples and identify the \"differential valleys\". This enables comparing 2 samples generated under different conditions.\n<br>\n\nThe output is formatted as an extended BED file with multiple columns. Please refer below for the specification of output file format.\n\n<h2>Download and Installation</h2>\nYou can download EpiSAFARI code by clicking on the green \"Clone or Download\" button and downloading zip or by checking out via git. After that, navigate to the checkout (or download) directory. If you downloaded the zip file of the source, unzip it using \"unzip master.zip\".<br><br>\n\nYou need to have g++, gzip, and the GSL libraries installed for building EpiSAFARI. These are installed in most Unix distributions but if they are not installed, type:\n```\nsudo yum -y install gsl gsl-devel gcc-c++ gzip\n```\n\nThis should install the necessary GSL libraries for building EpiSAFARI correctly.<br><br>\n\nNow EpiSAFARI can be built using:<br>\n```\nmake clean\nmake\n```\nThe executable is located under directory <font face=\"courier\">bin/</font>. \n\nIt may be useful to install <a href=\"http://samtools.sourceforge.net/\">samtools</a> for processing BAM files.\n\nTo get help on which options are available, use:\n```\n./bin/EpiSAFARI -help\n```\n\n<h2>Parameter Selection and Impact of Parameters on Detected Valleys</h2>\nEpiSAFARI uses a spline smoothing procedure with several parameters and these parameters can have impact on the sensitivity of the method.<br>\n\nThe spline smoothing is based on projecting the epigenetic signal profile on basis splines and removing noise. The basis splines are defined in terms of a spline degree and a set of knots. <br>\n\nWe generally observed that overly simple and complex smoothing causes underfitting and overfitting of the data and this decreases sensitivity of valley detection.\n\n<h3>Knot Selection</h3>\nThe number of knots, and the placement of knots are important factors while smoothing the signal. We generally observed that increasing knot number above 7 creates overfitting when using windows of length 1000 base pairs. \n\nOn the other hand, the using a knot number below 6 seems to decrease sensitivitiy similarly because smoothed signal profile is underfit, i.e., does not represent the original signal well. Thus EpiSAFARI uses 7 knots by default.<br>\n\nThe placements of knots along the signal domain is an open problem in spline based smoothing of signals. We compared several knot placement strategies (Uniform, Derivative-based, and Random) and found that uniform knot placement generally works comparable in accuracy as other knot placement strategies.<br>\n\nIf it is necessary, the users can change the knot selection parameters while spline smoothing the data (See below)\n\n<h3>Spline Degree</h3>\nThe spline degree tunes polynomial complexity of the basis spline curves. We observed that increasing the degree above 5 may cause overfitting and setting it below 3 may cause underfitting. Thus, by\ndefault, EpiSAFARI uses degree of 5.\n\nIf it is necessary, this parameter while data is being smoothed using \"-bspline_encode\" option (See below).\n\n<h3>Setting the Number of Coefficients with new Spline Degree and Knot Selections</h3>\nIf the spline degree or knot number is changed, the number of coefficients can be computed simply as (number of knots) + (spline degree) - 2. This value should be used as the number of coefficients\nparameter while spline smoothing the data.\n\n<h3>Window length</h3>\nThe window length specifies the length of the window that is used while smoothing the data. Signal in each window is smoothed then concatenated. The large window lengths creates a large signal for smoothing.\nTherefore the knot numbers must be adjusted with the increasing window length. By fefault, EpiSAFARI's parameters are selections work well with 1000 base pair windows for dense signals. For sparse signals, such as\nDNA methylation, EpiSAFARI uses 5000 base pair long windows by default.\n\nThis parameter can be changed while data is being smoothed.\n\n<h3>Hill Score Thresholds</h3>\nEpiSAFARI reports a hill score between 0 and 1 that is used to measure the topological quality of valleys. Hill score of 1 represents a valley that shows monotonically increasing signal while moving from the valley's dip to the summits.<br>\n\nThe reported valleys must be filtered with respect to the reported hill scores. We observed that there is very high enrichment of valleys with hill scores close to 1.0. These valleys represent biologically meaningful valleys. Therefore EpiSAFARI uses hill score threshold of 0.90<br>\n\nIf the hill score threshold is decreased, the valley redundancy increases: The fraction of reported valleys with overlaps increase. Depending on the application, this may be a useful and intended behaviour.<br>\n\n<h2>Usage Examples</h2>\nEpiSAFARI run starts with setting up the input files. (Note that we use samtools for converting BAM file to SAM files.). EpiSAFARI can take bedGraph files and mapped reads\ndirectly as input. It is necessary to divide the data into chromosomes.\n\n<h2>Building input with bedGraph and bigWig files</h2>\n\nWe show an example from ENCODE project below:\n\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig\nwget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nchmod 755 bigWigToBedGraph\n./bigWigToBedGraph wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr\nmkdir bedGraphs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr bedGraphs\n```\nIf there are multiple replicates to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the bedGraphs automatically and uses the total signal profile in the analyses.<br>\n\n<h2>Building input with mapped read files</h2>\n\nEpiSAFARI can also process mapped read files, for example in SAM format. We show again an example from the ENCODE Project:\n\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam\n\nrm -f -r processed_reads\nmkdir processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\n```\nThis example pools the 2 replicates of data. If there are more multiple replicates of reads to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the reads automatically and uses the total signal profile in the analyses as in the example above.<br>\n\nWe strongly recommend removing duplicates from the reads. This decreases valley detection time quite much:<br>\n```\nmkdir processed_reads/sorted processed_reads/dedup\n./bin/EpiSAFARI -sort_reads processed_reads processed_reads/sorted\n./bin/EpiSAFARI -remove_duplicates processed_reads/sorted 2 processed_reads/dedup\n```\n\n<h2>Spline Fitting to the Data</h2>\n\nAfter input files are setup, we perform spline fitting to the read coverage signals. The raw data generated by EpiSAFARI is rather large so it is useful to gzip them:\n```\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=5\nmax_avg_err=3\nl_win=1000\nl_step_win=1000\nsparse_data=0\nl_post_filter=50\nbrkpt_type=1\nmin_POI_distance_in_bps=50\n\n## bedGraph files:\n./bin/EpiSAFARI -bspline_encode -signal_dir bedGraphs -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n\n## mapped read files:\n./bin/EpiSAFARI -bspline_encode -signal_dir processed_reads/dedup -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n```\n\n<i>n_spline_coeffs</i> controls the number of knots that are used to fit b-spline. It should not be set to a very high value as this may cause overfitting of the data.<br>\n\n<h2>Valley Detection</h2>\nWe next perform valley identification. We first download the multi-mappability signal then identify the valleys:<br>\n\n```\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmkdir hg19_36bp\ncd hg19_36bp\nwget -c http://archive.gersteinlab.org/proj/MUSIC/multimap_profiles/hg19/hg19_36bp.tar.bz2\ntar -xvjf hg19_36bp.tar.bz2\ncd ..\nmkdir hg19_seq\ncd hg19_seq\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz\ntar -xvzf chromFa.tar.gz\n../bin/EpiSAFARI -preprocess_FASTA . fa .\ncd ..\nmax_trough_sig=1000\nmin_summit_sig=5\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=1000\nmin_summit2trough_dist=0\nmin_multimapp=1.2\nsparse_data=0\npval_type=0\n\n## bedGraph files:\n./bin/EpiSAFARI -get_valleys -signal_dir bedGraphs -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=bedGraphs/significant_valleys.bed.gz\n\n## mapped read files:\n./bin/EpiSAFARI -get_valleys -signal_dir processed_reads/dedup -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=processed_reads/dedup/significant_valleys.bed.gz\n\n\n# Filter: Remove valleys with FDR higher than log(0.05), hill scores lower than 0.90 and average multi-mappability higher than 1.2.\ngzip -cd ${all_valleys_fp} | awk {'if(NR==1){print $0};if($18<-3 && $10>=0.90 && $11>=0.90 && $8<1.2)print $0'} > sign.bed\n\n# Merge valleys with dips closer than 200 base pairs.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n```\n\n<h2>Valley Annotation</h2>\n\nWe finally perform valley annotation. We first download the GENCODE gene annotation gff file:\n\n```\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\nl_promoter=1000\n\n## bedGraph files:\n./bin/EpiSAFARI -annotate_features merged_sign.bed gencode.v19.annotation.gff3.gz ${l_promoter} annotated_features.bed\n\n```\n\nFinally, you can also add ENCODE2 transcription factor binding annotations. We have built the GFF file for the uniformly processed peaks of 690 transcription factors from the ENCODE2 cell lines that you can download and use to annotate the features:\n\n```\nwget -c http://harmancilab.org/tools/EpiSAFARI/wgEncodeAwgTfbs.gff.gz\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n```\n\nAnnotation adds a new annotation column to every entry in the valleys file and automatically updates the header.\n\n<h2>Sparse Mode</h2>\n\nEpiSAFARI can also process sparse signals. Examples of these include DNA methylation data, which happens only at cytosine nucleotides. For this, run EpiSAFARI with sparse_data=1 to enable sparse signal smoothing. We also turn on post-median filter on.<br>\n\nWe demonstrate this option on the DNA methylation data for H1hESC cell line from Roadmap Epigenome Project:\n```\nwget -c ftp://ftp.genboree.org/EpigenomeAtlas/Current-Release/experiment-sample/Bisulfite-Seq/H1_Cell_Line/UCSD.H1.Bisulfite-Seq.combined.wig.gz\n\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes\nchmod 755 fetchChromSizes\nchmod 755 wigToBigWig\nchmod 755 bigWigToBedGraph\n\ngzip -cd UCSD.H1.Bisulfite-Seq.combined.wig.gz > UCSD.H1.Bisulfite-Seq.combined.wig\n./fetchChromSizes hg19 > hg19.list\n./wigToBigWig UCSD.H1.Bisulfite-Seq.combined.wig hg19.list UCSD.H1.Bisulfite-Seq.combined.wig.bw\n./bigWigToBedGraph UCSD.H1.Bisulfite-Seq.combined.wig.bw UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr\n\nmkdir DNAm_bgrs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr DNAm_bgrs\n\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=0.3\nmax_avg_err=0.3\nl_win=5000\nsparse_data=1 \nl_post_filter=50\nbrkpt_type=0\n\n./bin/EpiSAFARI -bspline_encode DNAm_bgrs ${n_spline_coeffs} ${spline_order} ${brkpt_type} ${max_max_err} ${max_avg_err} ${l_win} ${sparse_data} ${l_post_filter}\n \n# Compute valleys.\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmax_trough_sig=1000\nmin_summit_sig=0.7\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=2000\nmin_summit2trough_dist=250\nmin_multimapp=1.2\nsparse_data=1\npval_type=0\n\n./bin/EpiSAFARI -get_significant_extrema DNAm_bgrs ${max_trough_sig} ${min_summit_sig} ${min_summit2trough_frac} ${min_summit2trough_dist} ${max_summit2trough_dist} ${mmap_dir} ${min_multimapp} ${seq_dir} 0.1 ${sparse_data} ${pval_type}\n\n# Filter: Remove methyl-valleys with FDR higher than log(0.05), CpG count less than 20, hill score less than 0.99, and GC content less than 0.4.\ncat DNAm_bgrs/significant_valleys.bed | awk {'if(NR==1){print $0};if($18<-3 && $16>20 && $10>=0.99 && $11>=0.99 && $8<1.2 && ($13+$14)/($12+$13+$14+$15)>0.4)print $0'} > sign.bed\n\n# Merge the methl-valleys whose minima are within 200 base pairs of each other.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n\n```\n\n<h2>Visualization of the Signal</h2>\n\nIGV can be used to visualize the spline coded signals. These are stored as bedGraphs files under data directory. <br><br>\n\nTo visualize the spline smoothed signal profile for chromosome 1, use following:\n```\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig\nchmod 755 bedGraphToBigWig\ngzip -cd bedGraphs/spline_coded_1.bgr.gz > bedGraphs/spline_coded_1.bgr\nsed -i 's/chr//g' hg19.list\nbedGraphToBigWig bedGraphs/spline_coded_1.bgr hg19.list spline_coded_1.bgr.bw\n```\n\nThe bigWig file named <i>spline_coded_1.bgr.bw</i> can be opened in IGV to visualize the spline smoothed signal. An example is shown below:<br><br>\n\n<div style=\"text-align:center;\"><img src=\"example.png\" alt=\"Could not load example.\" width=\"1000\" align=\"center\"></div>\n\n<h2>Output format</h2>\nEpiSAFARI outputs the identified valleys to a BED file named \"significant_valleys.bed\".<br><br>\n\nThis is an extended bed file with following columns:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n<i><font face=\"courier\">\n<ol>\n<li>[Chromosome]: Chromosome ID </li>\n<li>[Left maxima position]: Position the left maximum of the valley\t</li>\n<li>[Right maxima position]: Position the right maximum of the valley </li>\n<li>[Minima position]: Position of the minimum of the valley </li>\n<li>[Left maxima signal]: Signal at the left maxima\t</li>\n<li>[Right maxima signal]: Signal at the right maxima </li>\n<li>[Minima signal]: Signal at the minima </li>\n<li>[Average multi-mappability signal]: Average multi-mappability signal on the valley </li>\n<li>[Maximum multi-mappability signal]: MAximum multi-mappability signal on the valley </li>\n<li>[Left hill quality]: Fraction of the nucleotides on the left hill</li>\n<li>[Right hill quality]: Fraction of the nucleotides on the right hill</li>\n<li>[A count]: Count of A nucleotides in the valley</li>\n<li>[C count]: Count of C nucleotides in the valley</li>\n<li>[G count]: Count of G nucleotides in the valley</li>\n<li>[T count]: Count of T nucleotides in the valley</li>\n<li>[CpG count]: Count of CpG dinucleotides in the valley\n<li>[P-value]: P-value of the valley\n<li>[FDR]: False discovery rate at which valley is deemed significant\n<li>[Annotation]: Annotated element's name and type of the element (gene, exon, transcript, promoter, TF_peak)</li>\n</font></i>\n</div><br>\n\n<h2>Assigning Valleys to Promoters and Detection of Supervalleys</h2>\n\nEpiSAFARI can assign the valleys to the gene promoters to identify a tentative list of supervalleys around gene promoters.\n\n```\n# Download GENCODE Annotations.\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\n# Parse the promoters as TSS +/- 10kb.\ngzip -cd gencode.v19.annotation.gff3.gz | awk 'BEGIN{FS=\"\\t\"}{if($3==\"gene\"){gene_start=$4;if($7==\"-\"){gene_start=$5;};split($9, arr, \";\");for(i=1;i<=length(arr);i++){if (arr[i] ~/gene_name=/){gene_name=arr[i]}};print $1\"\\t\"gene_start-10000\"\\t\"gene_start+10000\"\\t\"gene_name\"\\t.\\t\"$7}}' > promoters.bed\n\n# Assign the valleys to the gene promoters.\n./bin/EpiSAFARI -assign_valleys_2_regions promoters.bed merged_sign.bed valleys_2_promoters.bed\n\n# Sort the promoters with respect to number of valleys around promoter and get a list of the gene symbols.\nsort -n -k7,7 valleys_2_promoters.bed -r | head -n 200 | awk {'print $4'} | sort -u > genes_with_supervalleys.list\n```\n\nAbove code assigns the valleys to the promoters. The output file 'valleys_2_promoters.bed' contains the number (and the list) of valleys around the promoters of all the genes.\n\n<h2>Detection of Differential Valleys</h2>\nWhen there are multiple samples (different cell lines, samples generated under different conditions),  an important downstream analysis is comparison of the valleys detected in these samples. \n\nEpiSAFARI can be used to compare the valleys in the two samples. For this, use the 2 sample comparison option. Below, we assume the GM12878 and K562 valleys are detected using above commands. We perform valley comparison as below:\n```\n# Compare samples.\nsample1_signal_dir=./GM12878/processed_reads/dedup\nsample1_valleys_fp=./GM12878/merged_sign.bed \nsample2_signal_dir=./K562/processed_reads/dedup\nsample2_valleys_fp=./K562/merged_sign.bed \n./bin/EpiSAFARI -get_2_sample_differential_valleys ${sample1_valleys_fp} ${sample1_signal_dir} ${sample2_valleys_fp} ${sample2_signal_dir} 0 2\n\n# Now we filter out the valleys with respect to p-value.\nawk '{if(NR==1)print $0;if(NR>1 && $17<-10 && $18>-2){print $0}}' 2_sample_differential_stats.txt > gm12878_specific_valleys.bed\nawk '{if(NR==1)print $0;if(NR>1 && $18<-10 && $17>-2){print $0}}' 2_sample_differential_stats.txt > k562_specific_valleys.bed\n```\nFile named '2_sample_differential_stats.txt' contains the differential valley statistics in all the valleys pooled from GM12878 and K562 cell lines. This file is a tab-delimited file that contains significance and signals around all the valleys from the two samples. This file can be processed as above to filter valleys or it can be loaded into R and processed as a data frame.\n\nEpiSAFARI can be used to add annotations to the differential valleys ('2_sample_differential_stats.txt' file) using '-annotate_features' option:\n```\n./bin/EpiSAFARI -annotate_features 2_sample_differential_stats.txt gencode.v19.annotation.gff3.gz ${l_promoter} annotated_2_sample_differential_stats.txt\n```\n</html>\n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9874443039330598,
      "result": {
        "original_header": "EpiSAFARI",
        "type": "Text_excerpt",
        "value": "<h2>Download and Installation</h2>\nYou can download EpiSAFARI code by clicking on the green \"Clone or Download\" button and downloading zip or by checking out via git. After that, navigate to the checkout (or download) directory. If you downloaded the zip file of the source, unzip it using \"unzip master.zip\".<br><br> \nYou need to have g++, gzip, and the GSL libraries installed for building EpiSAFARI. These are installed in most Unix distributions but if they are not installed, type:\n```\nsudo yum -y install gsl gsl-devel gcc-c++ gzip\n``` \nThis should install the necessary GSL libraries for building EpiSAFARI correctly.<br><br> \nNow EpiSAFARI can be built using:<br>\n```\nmake clean\nmake\n```\nThe executable is located under directory <font face=\"courier\">bin/</font>.  \nIt may be useful to install <a href=\"http://samtools.sourceforge.net/\">samtools</a> for processing BAM files. \nTo get help on which options are available, use:\n```\n./bin/EpiSAFARI -help\n``` \nIf it is necessary, the users can change the knot selection parameters while spline smoothing the data (See below) \nIf it is necessary, this parameter while data is being smoothed using \"-bspline_encode\" option (See below). \nWe show an example from ENCODE project below:\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig\nwget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nchmod 755 bigWigToBedGraph\n./bigWigToBedGraph wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr\nmkdir bedGraphs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr bedGraphs\n```\nIf there are multiple replicates to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the bedGraphs automatically and uses the total signal profile in the analyses.<br>\n \n```\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmkdir hg19_36bp\ncd hg19_36bp\nwget -c http://archive.gersteinlab.org/proj/MUSIC/multimap_profiles/hg19/hg19_36bp.tar.bz2\ntar -xvjf hg19_36bp.tar.bz2\ncd ..\nmkdir hg19_seq\ncd hg19_seq\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz\ntar -xvzf chromFa.tar.gz\n../bin/EpiSAFARI -preprocess_FASTA . fa .\ncd ..\nmax_trough_sig=1000\nmin_summit_sig=5\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=1000\nmin_summit2trough_dist=0\nmin_multimapp=1.2\nsparse_data=0\npval_type=0\n\n## bedGraph files:\n./bin/EpiSAFARI -get_valleys -signal_dir bedGraphs -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=bedGraphs/significant_valleys.bed.gz\n\n## mapped read files:\n./bin/EpiSAFARI -get_valleys -signal_dir processed_reads/dedup -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=processed_reads/dedup/significant_valleys.bed.gz\n\n\n# Filter: Remove valleys with FDR higher than log(0.05), hill scores lower than 0.90 and average multi-mappability higher than 1.2.\ngzip -cd ${all_valleys_fp} | awk {'if(NR==1){print $0};if($18<-3 && $10>=0.90 && $11>=0.90 && $8<1.2)print $0'} > sign.bed\n\n# Merge valleys with dips closer than 200 base pairs.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n``` \nWe finally perform valley annotation. We first download the GENCODE gene annotation gff file:\n```\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\nl_promoter=1000\n\n## bedGraph files:\n./bin/EpiSAFARI -annotate_features merged_sign.bed gencode.v19.annotation.gff3.gz ${l_promoter} annotated_features.bed\n\n```\nFinally, you can also add ENCODE2 transcription factor binding annotations. We have built the GFF file for the uniformly processed peaks of 690 transcription factors from the ENCODE2 cell lines that you can download and use to annotate the features:\n```\nwget -c http://harmancilab.org/tools/EpiSAFARI/wgEncodeAwgTfbs.gff.gz\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n```\n \nWe demonstrate this option on the DNA methylation data for H1hESC cell line from Roadmap Epigenome Project:\n```\nwget -c ftp://ftp.genboree.org/EpigenomeAtlas/Current-Release/experiment-sample/Bisulfite-Seq/H1_Cell_Line/UCSD.H1.Bisulfite-Seq.combined.wig.gz\n\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes\nchmod 755 fetchChromSizes\nchmod 755 wigToBigWig\nchmod 755 bigWigToBedGraph\n\ngzip -cd UCSD.H1.Bisulfite-Seq.combined.wig.gz > UCSD.H1.Bisulfite-Seq.combined.wig\n./fetchChromSizes hg19 > hg19.list\n./wigToBigWig UCSD.H1.Bisulfite-Seq.combined.wig hg19.list UCSD.H1.Bisulfite-Seq.combined.wig.bw\n./bigWigToBedGraph UCSD.H1.Bisulfite-Seq.combined.wig.bw UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr\n\nmkdir DNAm_bgrs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr DNAm_bgrs\n\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=0.3\nmax_avg_err=0.3\nl_win=5000\nsparse_data=1 \nl_post_filter=50\nbrkpt_type=0\n\n./bin/EpiSAFARI -bspline_encode DNAm_bgrs ${n_spline_coeffs} ${spline_order} ${brkpt_type} ${max_max_err} ${max_avg_err} ${l_win} ${sparse_data} ${l_post_filter}\n \n# Compute valleys.\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmax_trough_sig=1000\nmin_summit_sig=0.7\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=2000\nmin_summit2trough_dist=250\nmin_multimapp=1.2\nsparse_data=1\npval_type=0\n\n./bin/EpiSAFARI -get_significant_extrema DNAm_bgrs ${max_trough_sig} ${min_summit_sig} ${min_summit2trough_frac} ${min_summit2trough_dist} ${max_summit2trough_dist} ${mmap_dir} ${min_multimapp} ${seq_dir} 0.1 ${sparse_data} ${pval_type}\n\n# Filter: Remove methyl-valleys with FDR higher than log(0.05), CpG count less than 20, hill score less than 0.99, and GC content less than 0.4.\ncat DNAm_bgrs/significant_valleys.bed | awk {'if(NR==1){print $0};if($18<-3 && $16>20 && $10>=0.99 && $11>=0.99 && $8<1.2 && ($13+$14)/($12+$13+$14+$15)>0.4)print $0'} > sign.bed\n\n# Merge the methl-valleys whose minima are within 200 base pairs of each other.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n\n``` \nTo visualize the spline smoothed signal profile for chromosome 1, use following:\n```\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig\nchmod 755 bedGraphToBigWig\ngzip -cd bedGraphs/spline_coded_1.bgr.gz > bedGraphs/spline_coded_1.bgr\nsed -i 's/chr//g' hg19.list\nbedGraphToBigWig bedGraphs/spline_coded_1.bgr hg19.list spline_coded_1.bgr.bw\n``` \nEpiSAFARI can assign the valleys to the gene promoters to identify a tentative list of supervalleys around gene promoters.\n```\n# Download GENCODE Annotations.\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\n# Parse the promoters as TSS +/- 10kb.\ngzip -cd gencode.v19.annotation.gff3.gz | awk 'BEGIN{FS=\"\\t\"}{if($3==\"gene\"){gene_start=$4;if($7==\"-\"){gene_start=$5;};split($9, arr, \";\");for(i=1;i<=length(arr);i++){if (arr[i] ~/gene_name=/){gene_name=arr[i]}};print $1\"\\t\"gene_start-10000\"\\t\"gene_start+10000\"\\t\"gene_name\"\\t.\\t\"$7}}' > promoters.bed\n\n# Assign the valleys to the gene promoters.\n./bin/EpiSAFARI -assign_valleys_2_regions promoters.bed merged_sign.bed valleys_2_promoters.bed\n\n# Sort the promoters with respect to number of valleys around promoter and get a list of the gene symbols.\nsort -n -k7,7 valleys_2_promoters.bed -r | head -n 200 | awk {'print $4'} | sort -u > genes_with_supervalleys.list\n```\n \nEpiSAFARI can be used to add annotations to the differential valleys ('2_sample_differential_stats.txt' file) using '-annotate_features' option:\n```\n./bin/EpiSAFARI -annotate_features 2_sample_differential_stats.txt gencode.v19.annotation.gff3.gz ${l_promoter} annotated_2_sample_differential_stats.txt\n```\n</html>\n \n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8643409234067974,
      "result": {
        "original_header": "EpiSAFARI",
        "type": "Text_excerpt",
        "value": "<div style=\"text-align:center;\"><img src=\"example.png\" alt=\"Could not load example.\" width=\"1000\" align=\"center\"></div> \nEpiSAFARI can be used to add annotations to the differential valleys ('2_sample_differential_stats.txt' file) using '-annotate_features' option:\n```\n./bin/EpiSAFARI -annotate_features 2_sample_differential_stats.txt gencode.v19.annotation.gff3.gz ${l_promoter} annotated_2_sample_differential_stats.txt\n```\n</html>\n \n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/harmancilab/EpiSAFARI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EpiSAFARI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "harmancilab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 413769,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2575,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1013,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 01:31:02",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage Examples",
        "parent_header": [
          "EpiSAFARI"
        ],
        "type": "Text_excerpt",
        "value": "<html>\n<font face=\"arial\">\n<div style=\"text-align:center\"><img src=\"episafari_logo.png\" alt=\"Could not load logo.\" width=\"800\" align=\"center\"></div>\n<h1>EpiSAFARI</h1>\nValley patterns, a dip between two summits, are prevalently observed in the genomewide profiles of many functional genomics signals such as ChIP-Seq, WGBS, RepliSeq, etc. The valleys potentially delineate the locations of functionally important elements, e.g. cis-regulatory elements such as enhancers, promoters, etc.<br><br>\n\nEpiSAFARI is a command line tool for detection, annotation, and characterization of the valley shaped patterns within the functional genomics signal profiles. It takes:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- Signal Profile in bedGraph format, <br>\n- Mapped reads in SAM/bowtie/eland/... format. <br>\n</div><br>\nand outputs:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n- The spline smoothed signal profile. <br>\n- The valleys, local minima and maxima in the signal profile. <br>\n- Gene and transcription factors annotations, mappability values and nucleotide content for the valley.\n</div>\n\nIn addition, EpiSAFARI can compare the valleys detected in 2 samples and identify the \"differential valleys\". This enables comparing 2 samples generated under different conditions.\n<br>\n\nThe output is formatted as an extended BED file with multiple columns. Please refer below for the specification of output file format.\n\n<h2>Download and Installation</h2>\nYou can download EpiSAFARI code by clicking on the green \"Clone or Download\" button and downloading zip or by checking out via git. After that, navigate to the checkout (or download) directory. If you downloaded the zip file of the source, unzip it using \"unzip master.zip\".<br><br>\n\nYou need to have g++, gzip, and the GSL libraries installed for building EpiSAFARI. These are installed in most Unix distributions but if they are not installed, type:\n```\nsudo yum -y install gsl gsl-devel gcc-c++ gzip\n```\n\nThis should install the necessary GSL libraries for building EpiSAFARI correctly.<br><br>\n\nNow EpiSAFARI can be built using:<br>\n```\nmake clean\nmake\n```\nThe executable is located under directory <font face=\"courier\">bin/</font>. \n\nIt may be useful to install <a href=\"http://samtools.sourceforge.net/\">samtools</a> for processing BAM files.\n\nTo get help on which options are available, use:\n```\n./bin/EpiSAFARI -help\n```\n\n<h2>Parameter Selection and Impact of Parameters on Detected Valleys</h2>\nEpiSAFARI uses a spline smoothing procedure with several parameters and these parameters can have impact on the sensitivity of the method.<br>\n\nThe spline smoothing is based on projecting the epigenetic signal profile on basis splines and removing noise. The basis splines are defined in terms of a spline degree and a set of knots. <br>\n\nWe generally observed that overly simple and complex smoothing causes underfitting and overfitting of the data and this decreases sensitivity of valley detection.\n\n<h3>Knot Selection</h3>\nThe number of knots, and the placement of knots are important factors while smoothing the signal. We generally observed that increasing knot number above 7 creates overfitting when using windows of length 1000 base pairs. \n\nOn the other hand, the using a knot number below 6 seems to decrease sensitivitiy similarly because smoothed signal profile is underfit, i.e., does not represent the original signal well. Thus EpiSAFARI uses 7 knots by default.<br>\n\nThe placements of knots along the signal domain is an open problem in spline based smoothing of signals. We compared several knot placement strategies (Uniform, Derivative-based, and Random) and found that uniform knot placement generally works comparable in accuracy as other knot placement strategies.<br>\n\nIf it is necessary, the users can change the knot selection parameters while spline smoothing the data (See below)\n\n<h3>Spline Degree</h3>\nThe spline degree tunes polynomial complexity of the basis spline curves. We observed that increasing the degree above 5 may cause overfitting and setting it below 3 may cause underfitting. Thus, by\ndefault, EpiSAFARI uses degree of 5.\n\nIf it is necessary, this parameter while data is being smoothed using \"-bspline_encode\" option (See below).\n\n<h3>Setting the Number of Coefficients with new Spline Degree and Knot Selections</h3>\nIf the spline degree or knot number is changed, the number of coefficients can be computed simply as (number of knots) + (spline degree) - 2. This value should be used as the number of coefficients\nparameter while spline smoothing the data.\n\n<h3>Window length</h3>\nThe window length specifies the length of the window that is used while smoothing the data. Signal in each window is smoothed then concatenated. The large window lengths creates a large signal for smoothing.\nTherefore the knot numbers must be adjusted with the increasing window length. By fefault, EpiSAFARI's parameters are selections work well with 1000 base pair windows for dense signals. For sparse signals, such as\nDNA methylation, EpiSAFARI uses 5000 base pair long windows by default.\n\nThis parameter can be changed while data is being smoothed.\n\n<h3>Hill Score Thresholds</h3>\nEpiSAFARI reports a hill score between 0 and 1 that is used to measure the topological quality of valleys. Hill score of 1 represents a valley that shows monotonically increasing signal while moving from the valley's dip to the summits.<br>\n\nThe reported valleys must be filtered with respect to the reported hill scores. We observed that there is very high enrichment of valleys with hill scores close to 1.0. These valleys represent biologically meaningful valleys. Therefore EpiSAFARI uses hill score threshold of 0.90<br>\n\nIf the hill score threshold is decreased, the valley redundancy increases: The fraction of reported valleys with overlaps increase. Depending on the application, this may be a useful and intended behaviour.<br>\n\n<h2>Usage Examples</h2>\nEpiSAFARI run starts with setting up the input files. (Note that we use samtools for converting BAM file to SAM files.). EpiSAFARI can take bedGraph files and mapped reads\ndirectly as input. It is necessary to divide the data into chromosomes.\n\n<h2>Building input with bedGraph and bigWig files</h2>\n\nWe show an example from ENCODE project below:\n\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig\nwget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nchmod 755 bigWigToBedGraph\n./bigWigToBedGraph wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr\nmkdir bedGraphs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes wgEncodeBroadHistoneGm12878H3k04me3StdSigV2.bigWig.bgr bedGraphs\n```\nIf there are multiple replicates to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the bedGraphs automatically and uses the total signal profile in the analyses.<br>\n\n<h2>Building input with mapped read files</h2>\n\nEpiSAFARI can also process mapped read files, for example in SAM format. We show again an example from the ENCODE Project:\n\n```\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeBroadHistone/wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam\n\nrm -f -r processed_reads\nmkdir processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep1.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\nsamtools view wgEncodeBroadHistoneGm12878H3k4me3StdAlnRep2.bam | ./bin/EpiSAFARI -preprocess_reads SAM stdin processed_reads\n```\nThis example pools the 2 replicates of data. If there are more multiple replicates of reads to be pooled, they can be done at once or separately. If done separately, EpiSAFARI pools the reads automatically and uses the total signal profile in the analyses as in the example above.<br>\n\nWe strongly recommend removing duplicates from the reads. This decreases valley detection time quite much:<br>\n```\nmkdir processed_reads/sorted processed_reads/dedup\n./bin/EpiSAFARI -sort_reads processed_reads processed_reads/sorted\n./bin/EpiSAFARI -remove_duplicates processed_reads/sorted 2 processed_reads/dedup\n```\n\n<h2>Spline Fitting to the Data</h2>\n\nAfter input files are setup, we perform spline fitting to the read coverage signals. The raw data generated by EpiSAFARI is rather large so it is useful to gzip them:\n```\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=5\nmax_avg_err=3\nl_win=1000\nl_step_win=1000\nsparse_data=0\nl_post_filter=50\nbrkpt_type=1\nmin_POI_distance_in_bps=50\n\n## bedGraph files:\n./bin/EpiSAFARI -bspline_encode -signal_dir bedGraphs -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n\n## mapped read files:\n./bin/EpiSAFARI -bspline_encode -signal_dir processed_reads/dedup -n_spline_coeff ${n_spline_coeffs} -bspline_order ${spline_order} -max_max_err ${max_max_err} -max_avg_err ${max_avg_err} -l_win ${l_win} -min_POI_distance ${min_POI_distance_in_bps} -sparse_profile ${sparse_data} -brkpts_type ${brkpt_type} -l_step_win ${l_step_win} -l_post_filt_win ${l_post_filter}\n```\n\n<i>n_spline_coeffs</i> controls the number of knots that are used to fit b-spline. It should not be set to a very high value as this may cause overfitting of the data.<br>\n\n<h2>Valley Detection</h2>\nWe next perform valley identification. We first download the multi-mappability signal then identify the valleys:<br>\n\n```\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmkdir hg19_36bp\ncd hg19_36bp\nwget -c http://archive.gersteinlab.org/proj/MUSIC/multimap_profiles/hg19/hg19_36bp.tar.bz2\ntar -xvjf hg19_36bp.tar.bz2\ncd ..\nmkdir hg19_seq\ncd hg19_seq\nwget -c http://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz\ntar -xvzf chromFa.tar.gz\n../bin/EpiSAFARI -preprocess_FASTA . fa .\ncd ..\nmax_trough_sig=1000\nmin_summit_sig=5\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=1000\nmin_summit2trough_dist=0\nmin_multimapp=1.2\nsparse_data=0\npval_type=0\n\n## bedGraph files:\n./bin/EpiSAFARI -get_valleys -signal_dir bedGraphs -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=bedGraphs/significant_valleys.bed.gz\n\n## mapped read files:\n./bin/EpiSAFARI -get_valleys -signal_dir processed_reads/dedup -mmapp_dir ${mmap_dir} -genome_dir ${seq_dir} -max_signal_at_trough ${max_trough_sig} -min_signal_at_summit ${min_summit_sig} -f_min ${min_summit2trough_frac} -l_min ${min_summit2trough_dist} -l_max ${max_summit2trough_dist} -max_mmap ${min_multimapp} -max_qval 0.01 -sparse_profile ${sparse_data} -pval_type ${pval_type}\nall_valleys_fp=processed_reads/dedup/significant_valleys.bed.gz\n\n\n# Filter: Remove valleys with FDR higher than log(0.05), hill scores lower than 0.90 and average multi-mappability higher than 1.2.\ngzip -cd ${all_valleys_fp} | awk {'if(NR==1){print $0};if($18<-3 && $10>=0.90 && $11>=0.90 && $8<1.2)print $0'} > sign.bed\n\n# Merge valleys with dips closer than 200 base pairs.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n```\n\n<h2>Valley Annotation</h2>\n\nWe finally perform valley annotation. We first download the GENCODE gene annotation gff file:\n\n```\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\nl_promoter=1000\n\n## bedGraph files:\n./bin/EpiSAFARI -annotate_features merged_sign.bed gencode.v19.annotation.gff3.gz ${l_promoter} annotated_features.bed\n\n```\n\nFinally, you can also add ENCODE2 transcription factor binding annotations. We have built the GFF file for the uniformly processed peaks of 690 transcription factors from the ENCODE2 cell lines that you can download and use to annotate the features:\n\n```\nwget -c http://harmancilab.org/tools/EpiSAFARI/wgEncodeAwgTfbs.gff.gz\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n```\n\nAnnotation adds a new annotation column to every entry in the valleys file and automatically updates the header.\n\n<h2>Sparse Mode</h2>\n\nEpiSAFARI can also process sparse signals. Examples of these include DNA methylation data, which happens only at cytosine nucleotides. For this, run EpiSAFARI with sparse_data=1 to enable sparse signal smoothing. We also turn on post-median filter on.<br>\n\nWe demonstrate this option on the DNA methylation data for H1hESC cell line from Roadmap Epigenome Project:\n```\nwget -c ftp://ftp.genboree.org/EpigenomeAtlas/Current-Release/experiment-sample/Bisulfite-Seq/H1_Cell_Line/UCSD.H1.Bisulfite-Seq.combined.wig.gz\n\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bigWigToBedGraph\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes\nchmod 755 fetchChromSizes\nchmod 755 wigToBigWig\nchmod 755 bigWigToBedGraph\n\ngzip -cd UCSD.H1.Bisulfite-Seq.combined.wig.gz > UCSD.H1.Bisulfite-Seq.combined.wig\n./fetchChromSizes hg19 > hg19.list\n./wigToBigWig UCSD.H1.Bisulfite-Seq.combined.wig hg19.list UCSD.H1.Bisulfite-Seq.combined.wig.bw\n./bigWigToBedGraph UCSD.H1.Bisulfite-Seq.combined.wig.bw UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr\n\nmkdir DNAm_bgrs\n./bin/EpiSAFARI -separate_bedGraph_2_chromosomes UCSD.H1.Bisulfite-Seq.combined.wig.bw.bgr DNAm_bgrs\n\nn_spline_coeffs=10\nspline_order=5\nmax_max_err=0.3\nmax_avg_err=0.3\nl_win=5000\nsparse_data=1 \nl_post_filter=50\nbrkpt_type=0\n\n./bin/EpiSAFARI -bspline_encode DNAm_bgrs ${n_spline_coeffs} ${spline_order} ${brkpt_type} ${max_max_err} ${max_avg_err} ${l_win} ${sparse_data} ${l_post_filter}\n \n# Compute valleys.\nseq_dir=hg19_seq\nmmap_dir=hg19_36bp\nmax_trough_sig=1000\nmin_summit_sig=0.7\nmin_summit2trough_frac=1.2\nmax_summit2trough_dist=2000\nmin_summit2trough_dist=250\nmin_multimapp=1.2\nsparse_data=1\npval_type=0\n\n./bin/EpiSAFARI -get_significant_extrema DNAm_bgrs ${max_trough_sig} ${min_summit_sig} ${min_summit2trough_frac} ${min_summit2trough_dist} ${max_summit2trough_dist} ${mmap_dir} ${min_multimapp} ${seq_dir} 0.1 ${sparse_data} ${pval_type}\n\n# Filter: Remove methyl-valleys with FDR higher than log(0.05), CpG count less than 20, hill score less than 0.99, and GC content less than 0.4.\ncat DNAm_bgrs/significant_valleys.bed | awk {'if(NR==1){print $0};if($18<-3 && $16>20 && $10>=0.99 && $11>=0.99 && $8<1.2 && ($13+$14)/($12+$13+$14+$15)>0.4)print $0'} > sign.bed\n\n# Merge the methl-valleys whose minima are within 200 base pairs of each other.\n./bin/EpiSAFARI -merge_valleys sign.bed 200 merged_sign.bed\n\n./bin/EpiSAFARI -annotate_features merged_sign.bed wgEncodeAwgTfbs.gff.gz 0 annotated_features.bed\n\n```\n\n<h2>Visualization of the Signal</h2>\n\nIGV can be used to visualize the spline coded signals. These are stored as bedGraphs files under data directory. <br><br>\n\nTo visualize the spline smoothed signal profile for chromosome 1, use following:\n```\nwget http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig\nchmod 755 bedGraphToBigWig\ngzip -cd bedGraphs/spline_coded_1.bgr.gz > bedGraphs/spline_coded_1.bgr\nsed -i 's/chr//g' hg19.list\nbedGraphToBigWig bedGraphs/spline_coded_1.bgr hg19.list spline_coded_1.bgr.bw\n```\n\nThe bigWig file named <i>spline_coded_1.bgr.bw</i> can be opened in IGV to visualize the spline smoothed signal. An example is shown below:<br><br>\n\n<div style=\"text-align:center;\"><img src=\"example.png\" alt=\"Could not load example.\" width=\"1000\" align=\"center\"></div>\n\n<h2>Output format</h2>\nEpiSAFARI outputs the identified valleys to a BED file named \"significant_valleys.bed\".<br><br>\n\nThis is an extended bed file with following columns:<br>\n<div style=\"padding:8px;background-color:#ddd;line-height:1.4;\">\n<i><font face=\"courier\">\n<ol>\n<li>[Chromosome]: Chromosome ID </li>\n<li>[Left maxima position]: Position the left maximum of the valley\t</li>\n<li>[Right maxima position]: Position the right maximum of the valley </li>\n<li>[Minima position]: Position of the minimum of the valley </li>\n<li>[Left maxima signal]: Signal at the left maxima\t</li>\n<li>[Right maxima signal]: Signal at the right maxima </li>\n<li>[Minima signal]: Signal at the minima </li>\n<li>[Average multi-mappability signal]: Average multi-mappability signal on the valley </li>\n<li>[Maximum multi-mappability signal]: MAximum multi-mappability signal on the valley </li>\n<li>[Left hill quality]: Fraction of the nucleotides on the left hill</li>\n<li>[Right hill quality]: Fraction of the nucleotides on the right hill</li>\n<li>[A count]: Count of A nucleotides in the valley</li>\n<li>[C count]: Count of C nucleotides in the valley</li>\n<li>[G count]: Count of G nucleotides in the valley</li>\n<li>[T count]: Count of T nucleotides in the valley</li>\n<li>[CpG count]: Count of CpG dinucleotides in the valley\n<li>[P-value]: P-value of the valley\n<li>[FDR]: False discovery rate at which valley is deemed significant\n<li>[Annotation]: Annotated element's name and type of the element (gene, exon, transcript, promoter, TF_peak)</li>\n</font></i>\n</div><br>\n\n<h2>Assigning Valleys to Promoters and Detection of Supervalleys</h2>\n\nEpiSAFARI can assign the valleys to the gene promoters to identify a tentative list of supervalleys around gene promoters.\n\n```\n# Download GENCODE Annotations.\nwget -c ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gff3.gz\n\n# Parse the promoters as TSS +/- 10kb.\ngzip -cd gencode.v19.annotation.gff3.gz | awk 'BEGIN{FS=\"\\t\"}{if($3==\"gene\"){gene_start=$4;if($7==\"-\"){gene_start=$5;};split($9, arr, \";\");for(i=1;i<=length(arr);i++){if (arr[i] ~/gene_name=/){gene_name=arr[i]}};print $1\"\\t\"gene_start-10000\"\\t\"gene_start+10000\"\\t\"gene_name\"\\t.\\t\"$7}}' > promoters.bed\n\n# Assign the valleys to the gene promoters.\n./bin/EpiSAFARI -assign_valleys_2_regions promoters.bed merged_sign.bed valleys_2_promoters.bed\n\n# Sort the promoters with respect to number of valleys around promoter and get a list of the gene symbols.\nsort -n -k7,7 valleys_2_promoters.bed -r | head -n 200 | awk {'print $4'} | sort -u > genes_with_supervalleys.list\n```\n\nAbove code assigns the valleys to the promoters. The output file 'valleys_2_promoters.bed' contains the number (and the list) of valleys around the promoters of all the genes.\n\n<h2>Detection of Differential Valleys</h2>\nWhen there are multiple samples (different cell lines, samples generated under different conditions),  an important downstream analysis is comparison of the valleys detected in these samples. \n\nEpiSAFARI can be used to compare the valleys in the two samples. For this, use the 2 sample comparison option. Below, we assume the GM12878 and K562 valleys are detected using above commands. We perform valley comparison as below:\n```\n# Compare samples.\nsample1_signal_dir=./GM12878/processed_reads/dedup\nsample1_valleys_fp=./GM12878/merged_sign.bed \nsample2_signal_dir=./K562/processed_reads/dedup\nsample2_valleys_fp=./K562/merged_sign.bed \n./bin/EpiSAFARI -get_2_sample_differential_valleys ${sample1_valleys_fp} ${sample1_signal_dir} ${sample2_valleys_fp} ${sample2_signal_dir} 0 2\n\n# Now we filter out the valleys with respect to p-value.\nawk '{if(NR==1)print $0;if(NR>1 && $17<-10 && $18>-2){print $0}}' 2_sample_differential_stats.txt > gm12878_specific_valleys.bed\nawk '{if(NR==1)print $0;if(NR>1 && $18<-10 && $17>-2){print $0}}' 2_sample_differential_stats.txt > k562_specific_valleys.bed\n```\nFile named '2_sample_differential_stats.txt' contains the differential valley statistics in all the valleys pooled from GM12878 and K562 cell lines. This file is a tab-delimited file that contains significance and signals around all the valleys from the two samples. This file can be processed as above to filter valleys or it can be loaded into R and processed as a data frame.\n\nEpiSAFARI can be used to add annotations to the differential valleys ('2_sample_differential_stats.txt' file) using '-annotate_features' option:\n```\n./bin/EpiSAFARI -annotate_features 2_sample_differential_stats.txt gencode.v19.annotation.gff3.gz ${l_promoter} annotated_2_sample_differential_stats.txt\n```\n</html>\n"
      },
      "source": "https://raw.githubusercontent.com/harmancilab/EpiSAFARI/master/README.md",
      "technique": "header_analysis"
    }
  ]
}