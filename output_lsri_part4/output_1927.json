{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Table of contents"
        ],
        "type": "Text_excerpt",
        "value": "If you use `GRAbB.pl` or any of the helper programs, please,\ncite the [paper](http://journals.plos.org/ploscompbiol/article?id=10.1371%2Fjournal.pcbi.1004753) describing the program.\n\nBrankovics B, Zhang H, van Diepeningen AD, van der Lee TAJ, Waalwijk\nC, et al. (2016) **GRAbB: Selective Assembly of Genomic Regions, a New\nNiche for Genomic Research**. PLoS Comput Biol 12(6):\ne1004753. doi: 10.1371/journal.pcbi.1004753\n\n--------------------------------"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/b-brankovics/grabb"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "Table of contents"
        ],
        "type": "Text_excerpt",
        "value": "Bal\u00e1zs Brankovics <balazs.brankovics@wur.nl>\n- [ORCID](http://orcid.org/0000-0003-0536-7787)\n- [LinkedIn](https://www.linkedin.com/in/balazs-brankovics/)\n- [ResearchGate](https://www.researchgate.net/profile/Balazs_Brankovics)\n- Contact details at [Wageningen Plant Research](https://www.wur.nl/en/Persons/Balazs-B-Balazs-Brankovics.htm)\n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-06-17T07:46:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-09-10T05:17:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GRAbB (Genome Region Assembly by Baiting) is a program designed to assemble selected regions of the genome or transcriptome using reference sequences and NGS data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9916547619902026,
      "result": {
        "original_header": "GRAbB",
        "type": "Text_excerpt",
        "value": "GRAbB (Genome Region Assembly by Baiting) is program designed to assemble selected regions of the genome or transcriptome using reference sequences and NGS data. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9605452252869154,
      "result": {
        "original_header": "Seqtk",
        "type": "Text_excerpt",
        "value": "OR you may also use [create\\_readpool\\.pl](perl_programs/create_readpool.pl),\nwhich is less efficient, but uses only perl and standard Unix commands\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.816341400565817,
      "result": {
        "original_header": "get_overlaps",
        "type": "Text_excerpt",
        "value": "This program reads the contigs from a fasta file and checks if they\nare overlapping with each other by using a minimal overlap size that is\nspecified at invocation. Finally, prints all the overlaps found. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8620551244412816,
      "result": {
        "original_header": "merge_contigs",
        "type": "Text_excerpt",
        "value": "This program reads the contigs from a fasta file and checks if they\nare overlapping with each other by using a minimal overlap size that is\nspecified at invocation. Afterwards it loops through all the contigs\nand merges contig pairs that only overlap with each other at the given\nside. In the end it saves the contigs that were created into a file. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8063129716698002,
      "result": {
        "original_header": "single2pairs",
        "type": "Text_excerpt",
        "value": "This program creates paired-end read files from single-end files \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8461496552710621,
      "result": {
        "original_header": "uniform_length",
        "type": "Text_excerpt",
        "value": "This program creates a read file with reads with uniform length \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9346353766491653,
      "result": {
        "original_header": "fasta_shift",
        "type": "Text_excerpt",
        "value": "This program takes a fasta file and shifts the sequence in it\naccording to a position value or a reference file the output is\nprinted to STDOUT \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9350564848989167,
      "result": {
        "original_header": "pairwise_alignment_score",
        "type": "Text_excerpt",
        "value": "This program compares two sequences and prints a few metrics \nOutput: <total length>   <# of identical bases>   <percentage of identity>  <# of identical bases, not counting '-'>  <percentage of identity w/o '-'> \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8917460894619104,
      "result": {
        "original_header": "reverse_complement",
        "type": "Text_excerpt",
        "value": "This program prints the reverse complement of the input to STDOUT \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9585393521613992,
      "result": {
        "original_header": "Algorithm overview",
        "type": "Text_excerpt",
        "value": "GRAbB is written in Perl and it uses only modules that are part of the\ncore distribution of Perl. In addition to basic UNIX commands, the\nfollowing third-party programs are used by GRAbB: mirabait (from the\n[MIRA](http://sourceforge.net/projects/mira-assembler/) package),\n[Seqtk](https://github.com/lh3/seqtk),\n[EDENA](http://www.genomic.ch/edena.php),\n[Velvet](https://www.ebi.ac.uk/~zerbino/velvet/) and\n[Exonerate](https://www.ebi.ac.uk/~guy/exonerate/). \nThe program is designed to be versatile and flexible with the\nfollowing functionalities: \n+ Use pairing information\n+ Use additional bait sequences\n+ Assemble multiple regions separately in a single run\n+ Use any of a range of completion criteria (may use different ones for each region) \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9216724622090299,
      "result": {
        "original_header": "Main loop",
        "type": "Text_excerpt",
        "value": "The main loop of GRAbB can be summarized as follows: \nIf [multi-mode](#modes) is selected, then the general\nbaiting step is followed by specific baiting, _de novo_ assembling and\ncompletion testing for each of the threads. The threads are generated\nby splitting the reference file into single-entry FASTA files. These\nnewly created reference files are used as bait for the initial\nspecific baiting steps for the given thread. At the end of each cycle\nof the main loop, the program checks whether there is any thread that\nis not completed yet, then it continues or stops accordingly.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9142866405004115,
      "result": {
        "original_header": "Creating the bait",
        "type": "Text_excerpt",
        "value": "At the invocation of GRAbB it is possible to specify a [length\nfilter](#min_length) that excludes all contigs from\nthe assembly that are shorter than the specified length from being\nused for generating the bait file for the next iteration. \n    At the start of the run an initial (general) bait file is created\n    by concatenating the [reference](#ref) and\n    [bait](#bait) files. This bait files is used for\n    the first general baiting step. \n    The specific bait file is only created in\n    [multi-mode](#modes). At the start of the run the\n    reference file is split into single-entry FASTA files and these\n    are used as initial specific bait files. In latter iterations the\n    latest assembly for the give thread is used as the new bait file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9338187156971943,
      "result": {
        "original_header": "Baiting",
        "type": "Text_excerpt",
        "value": "Reads belonging to the specified sequence are identified by using\nexact k-mer (31 bp) matching that is implemented by mirabait (from the\n[MIRA](http://sourceforge.net/projects/mira-assembler/) package). The\nnames of the reads thus identified, are collected and added to the\nlist of read names from previous iterations (There is a separate list\nfor the general baiting and for each thread.) If there are no new\nreads identified, then the program stops the iteration, either for the\ngiven thread (specific) or for all the threads (general). \nBy using a general baiting step before the specific baiting it is\npossible to reduce the required run time, because the large input read\nfile(s) is/are only screened once per iteration and the specific\nbaiting is confined to screening the reads that are already identified\nto be specific during the general baiting.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.845183407239951,
      "result": {
        "original_header": "Collecting reads",
        "type": "Text_excerpt",
        "value": "The identified reads are collected from the read files using\n[Seqtk](https://github.com/lh3/seqtk) into internal read files. The\nprogram identifies reads based on the read names, thus the first word\nof the identifier line should be unique for each read if they are\nsingle-end or should be the same for both reads of the pair.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9567584085345269,
      "result": {
        "original_header": "Assembly",
        "type": "Text_excerpt",
        "value": "The program can use two assemblers,\n[EDENA](http://www.genomic.ch/edena.php) and\n[Velvet](https://www.ebi.ac.uk/~zerbino/velvet/), by default, but\nthere is a skeleton code to add a new assembler to the source code of\nthe program. Also it is also possible to write [an external perl\nscript](#using-external_skeleton) that is used by\nGRAbB for the assembly. By default\n[EDENA](http://www.genomic.ch/edena.php) is used for assembly, but\nusing command line options the other assemblers can be selected, as\nwell. \nThe fact that [single](#modes)- or\n[paired-mode](#modes) is selected is passed on to the\nassembler program that assembles the specific reads _de novo_. Also,\nit is possible to pass additional arguments, such as overlap size\n([EDENA](http://www.genomic.ch/edena.php)), to the assembler program\nat the invocation of the main program.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9516152881050389,
      "result": {
        "original_header": "Testing completion",
        "type": "Text_excerpt",
        "value": "There are multiple completion criteria that can be specified for the\nprogram. These can be specified for each thread separately\n([multi-diff-mode](#modes) or for all of the threads\nat once. Also, it is possible to specify multiple criteria for the\nsame thread or run. In this case the program stops when any one of\nthese criteria is met. \n    This is the simplest explicit completion criterion. There are\n    three options that can be used for this setting: total assembly\n    size, the length of the longest contig or the N50 value of the\n    assembly. This criterion is tested independently for each of the\n    threads in [multi-mode](#modes) or, otherwise, for\n    the single thread. As mentioned before, multiple criteria can be\n    used in a single run, this also applies for the different size\n    criteria. These settings are useful when exploring the vicinity of\n    a specified sequence region. \n     In this case the specific reference sequence is used to identify\n     the homologous region within the assembly. To identify the\n     matching region, GRAbB uses Exonerate with settings that ensure\n     that the whole reference sequence is aligned to the assembly\n     contigs. This makes it possible to match sequences that are\n     somewhat dissimilar to the reference and may also contain indels,\n     causing gaps in the alignment. The possible results of the\n     matching can be divided into two groups: the whole sequence is\n     matched\u2014also if there are internal regions that correspond to\n     gaps in the other sequence\u2014or it is not. In the first case the\n     completion criterion is met, and the matched region is extracted\n     from the assembly in the same orientation as the reference\n     sequence and saved to an output file. In the latter case there\n     are two possibilities. If the matched region is larger than the\n     one for the previous iteration, then the thread or run will\n     continue, but if the size of the match has not improved than the\n     thread or run will stop.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8972450171456565,
      "result": {
        "original_header": "Modes",
        "type": "Text_excerpt",
        "value": "    This information is passed on to the assembler program. \n        It is the default if two read files are specified. \n    Multi-mode is selected by using [--type\n    multi](#type) option at invocation. In multi-mode\n    the reference file is split into single-entry FASTA files, these\n    are referred to as specific references files. Also for each entry\n    a separate thread is created. The individual threads are\n    independent from each other, thus multiple regions can be\n    assembled in a single run without interference from each\n    other. The specific reference file is used as initial specific\n    bait file. Also in [exonerate-mode](#modes) the\n    specific reference file is used for the homology matching. \n    Multi-diff-mode is selected by using [--type multi-diff](#type) option at invocation.\nIt also belongs to the multi-mode with all its properties. The\ndifference is that when the specific reference files are created if\nthere is completion criterion specified in the identification line of\nthe FASTA entry, than this is added to the completion criteria to be\nused for the given thread. \n    Exonerate-mode is selected by using [--type\n    exonerate](#type) option at invocation. In this\n    case the specific reference sequence is used to identify the\n    homologous region within the assembly. To identify the matching\n    region, GRAbB uses Exonerate with settings that ensure that the\n    whole reference sequence is aligned to the assembly contigs. This\n    makes it possible to match sequences that are somewhat dissimilar\n    to the reference and may also contain indels, causing gaps in the\n    alignment. The possible results of the matching can be divided\n    into two groups: the whole sequence is matched\u2014also if there are\n    internal regions that correspond to gaps in the other sequence\u2014or\n    it is not. In the first case the completion criterion is met, and\n    the matched region is extracted from the assembly in the same\n    orientation as the reference sequence and saved to an output\n    file. In the latter case there are two possibilities. If the\n    matched region is larger than the one for the previous iteration,\n    then the thread or run will continue, but if the size of the match\n    has not improved than the thread or run will stop. \n        It is selected by [--clean](#clean).\n        GRAbB will remove some internal files to save disk space. But\n        there is no information lost, because all the deleted files\n        can be reconstructed using the remaining files. \n        It is selected by [--clean --clean](#clean).\n        GRAbB will remove some internal files to save disk space.\n        At the end of the run all the output files and folders are\n        deleted except for the result files. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.932510545675972,
      "result": {
        "original_header": "Arguments",
        "type": "Text_excerpt",
        "value": "The order of the arguments is not important.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9599107190451025,
      "result": {
        "original_header": "ref",
        "type": "Text_excerpt",
        "value": "The reference file is a FASTA formatted file that contains one or more\nsequences. The sequence IDs have to be unique for each sequence (as\nrequired by mirabait). If the file contains multiple sequences and the\nprogram is run in [multi-mode](#modes) then the\nreference file is split into separate reference files that contain\nonly a single sequence, the handling of these files is discussed in\nthe segment on the [main\nloop](#main-loop). Furthermore, the description lines\nmay contain specification for the completion criterion to be used for\nthe given sequence that is used if [multi-diff\nmode](#modes) is selected. Because the read selection\nis based on exact k-mer (31 bp) matching, the reference sequence does\nnot have to be highly similar to the target sequence.\n\t\t\t\t\t       \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.94686622826621,
      "result": {
        "original_header": "reads",
        "type": "Text_excerpt",
        "value": "Multiple read files can be specified as input. If two read files are\ngiven, then it is assumed that reads are\n[paired](#modes), but in\n[single-mode](#modes), reads are considered as single\nreads. The program identifies read pairs based on the read names, thus\nthe first word of the identifier line should be the same for both\nsequences. The read files may be in FASTA or FASTQ format and may be\ncompressed (using gnuzip). If [EDENA](http://www.genomic.ch/edena.php)\nis selected as assembler program, then all the reads should be of the\nsame length.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8877198327847464,
      "result": {
        "original_header": "folder",
        "type": "Text_excerpt",
        "value": "        * assembly.fas\n        * new\\_collection.list\n        * readpool*\\<int\\>*.fastq\n        * (files or __folders__ generated by the assembler)\n        * exonerate.log (if exonerate-mode is selected)\n        * result.fas (if exonerate-mode is selected and the sequence was matched) \n    + assembly.fas\n    + assembly\\_*\\<int\\>*.fas\n    + bait.fas\n    + final\\_assembly.fas\n    + old\\_collection.list\n    + reference.fas\n    + reference.fas.exonerate (if exonerate-mode is selected)\n    + result.fas (if exonerate-mode is selected and the sequence was matched)\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9157780029884941,
      "result": {
        "original_header": "min_length",
        "type": "Text_excerpt",
        "value": "Minimum size required for a contig to be included for completion\ntesting and baiting\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8970994311548083,
      "result": {
        "original_header": "type",
        "type": "Text_excerpt",
        "value": "        - Length of the assembly \n    \t- Length of the longest contig of the assembly \n    \t- N50 value of the assembly \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8339823250354198,
      "result": {
        "original_header": "clean",
        "type": "Text_excerpt",
        "value": "Remove some internal files to save disk space. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9659004207310531,
      "result": {
        "original_header": "Adding to the source code of GRAbB",
        "type": "Text_excerpt",
        "value": "In addition, there is a skeleton code within the source code of GRAbB\nmarked by `# Assemble (Alternative)` at the end of the lines. Within\nthis block of code there are six lines that need to be changed to add\nthe new assembler. These lines have exclamation marks at the end. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9414344387389366,
      "result": {
        "original_header": "Using external_skeleton",
        "type": "Text_excerpt",
        "value": "There is a skeleton script that maybe copied and modified to run the\nassembly if **external** is selected as assembler. \n    #!/usr/bin/perl -w\n    use strict;\n    \n    # A perl script that allows you to use an assembler that is not\n      specified in the GRAbB source code\n    \n    # Get all the parameters\n    my ($reads, $paired, $parameters1, $parameters2, $outfile, $format) = @ARGV;\n    # Create an array containing the read files\n    my @reads = split / /, $reads;\n    my @param1 = split / /, $parameters1;\n    my @param2 = split / /, $parameters2;\n    \n    # If there were no extra arguments passed for the assembler at the invocation of GRAbB\n    #   then the value passed to this script is \"-\" ($param1[0] and/or $param2[0]) \n    # For mapping-assemblers a reference is needed\n    #my $ref = &get_reference();  # For reference based assembly uncomment this line \n        #my $ref = &get_reference();  # For reference based assembly uncomment this line \n* The command line to execute the assembly. The list of read files is\n  stored in the array `@reads`, the arguments specified after\n  **--arg1** are stored in the array `@param1`, the arguments\n  specified after **--arg2** are stored in the array `@param1`,\n  the fact that the assembly is for a single-end or paired-end library\n  is stored in the variable `$paired` (the value of the variable is\n  either \"*single*\" or \"*paired*\") and the variable `$format` stores the\n  file format of the read files (either \"*fasta*\" or \"*fastq*\"). \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9386265707436431,
      "result": {
        "original_header": "Using SPAdes as assembler",
        "type": "Text_excerpt",
        "value": "[external_SPAdes.pl](external_SPAdes.pl) is a skeleton script that\nmaybe downloaded (and modified)  to run the assembly if **external**\nis selected as assembler (`--assembler external external_SPAdes.pl`). \n1. Modify line 22 of `external_SPAdes.pl`, from\n    ```\n    my $assmebler = \"spades.py\"; # ADD executable here! \n    ```\n    to specify where your SPAdes executable is located. If it is at\n    `~/SPAdes-3.10.0/bin/spades.py`, then line 22 should look like this:\n    BASH4*\n2. Save the modified file\n3. And use it as described above. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/b-brankovics/grabb/tree/master/3rd_party_programs/mira_4.0rc4_linux-gnu_x86_64_static/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "Table of contents"
        ],
        "type": "Text_excerpt",
        "value": "Run GRAbB.pl without any arguments and it prints the Usage information\n\nThe documentation is this file and the files mentioned at the [examples](#examples).\n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/b-brankovics/grabb/wiki"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/b-brankovics/grabb/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/b-brankovics/grabb/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "b-brankovics/grabb"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GRAbB"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/b-brankovics/grabb/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/b-brankovics/grabb/master/3rd_party_programs/velvet_1.2.10/update_velvet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/b-brankovics/grabb/master/3rd_party_programs/velvet_1.2.10/contrib/shuffleSequences_fasta/shuffleSequences_fasta.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/b-brankovics/grabb/master/3rd_party_programs/velvet_1.2.10/contrib/read_prepare/run_example_read_prepare.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://asciinema.org/a/30303.png"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://asciinema.org/a/30306.png"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://asciinema.org/a/30305.png"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Table of contents"
        ],
        "type": "Text_excerpt",
        "value": "**Asciinema casts:**\n- Ubuntu:\n[![asciicast](https://asciinema.org/a/30303.png)](https://asciinema.org/a/30303)\n- Centos:\n[![asciicast](https://asciinema.org/a/30306.png)](https://asciinema.org/a/30306)\n- Fedora:\n[![asciicast](https://asciinema.org/a/30305.png)](https://asciinema.org/a/30305)\n\n**Steps:**\n\n1. Install prerequisites (If this step is skipped, then\n   **configure_GRAbB.pl** tries to use prerequisites included in the package)\n    - Minimal set:\n        + Baiting program: **mirabait** _(recommended)_ OR\n\t\tkmer\\_bait\\.pl (no installation needed)\n\t    + Read collecting program: **seqtk** _(recommended)_ OR\n          create\\_readpool\\.pl (no installation needed)\n\t\t+ Assembler: Edena OR Vevlet OR external\\_scaffold\\.pl (needs\n          to be modified and requires a working installation of an assembler)\n\n    - Assemblers:\n\t\t+ Edena: default assembler for GRAbB.pl\n\t\t+ Vevlet\n\t\t+ Other assembler: external\\_scaffold\\.pl has to be also edited\n\n    - Exonerate:\n\t\t+ Required for running GRAbB.pl in exonerate mode\n\n2. Configure GRAbB.pl\n\n        ./configure_GRAbB.pl\n\n    Recommended to add prerequisites to the Path Or add the absolute\n    path of the executables to the source code of GRAbB.pl before\n\trunning configure_GRAbB.pl\n\n    Configured GRAbB.pl can be found in bin directory\n\n    **Bug:** On some systems the exonerate binary included in the\n      package runs extremely slow. Configure can get stuck at 'Testing\n      exonerate'\n\t  block, then issue **Ctrl + c**.\n\t  On these systems exonerate has to be installed or build from\n      source code (See [Prerequisites::exonerate](#exonerate), before\n      rerunning the configuration script.\n\n2. To test installation run the following (assembler has to be\n   adjusted unless GRAbB.pl is configured without **Edena**)\n\n        bin/GRAbB.pl --ref for_testing/assembly.fas --reads for_testing/read* --folder test --prefix test\n\nOR\n\nUse Docker (See __[Docker.md](Docker.md)__ for more detailed instructions)\n\n* Either download the docker repository via docker interface `docker pull brankovics/grabb`\n* Or create a local docker image:\n\n        git clone https://github.com/b-brankovics/grabb\n        cd grabb/docker\n        docker build -t localhost:5000/$USER/grabb .\n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999989844910755,
      "result": {
        "original_header": "mirabait",
        "type": "Text_excerpt",
        "value": "1. Download MIRA (4.0) assembler (http://sourceforge.net/projects/mira-assembler/)\n2. Extract it. The executable files are in the _bin_ folder.\n3. Copy/move or symlink '**mirabait**' into somewhere in the path or add the folder to the path (This program uses only mirabait) \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Edena",
        "type": "Text_excerpt",
        "value": "1. Download [EDENA](http://www.genomic.ch/edena.php) and extract it or use the copy in the 3rd_party_programs\n2. Change to the directory\n3. Type `make` on the command line (g++ needs to be installed, on ubuntu type `sudo apt-get install g++`)\n4. Copy/move or symlink '**edena**' into somewhere in the path or add the folder to the path (The files in the bin folder)\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999999432,
      "result": {
        "original_header": "Velvet",
        "type": "Text_excerpt",
        "value": "1. Download [Velvet](https://www.ebi.ac.uk/~zerbino/velvet/) and extract it or use the copy in the 3rd_party_programs\n2. Change to the directory. First zlib needs to be installed\n3. Change to 'third-party/zlib-1.2.3/'\n4. Type `make` on the command line\n5. Type `sudo make install` on the command line\n6. Go back to the parent directory (`cd ../..`)\n7. Type `make` on the command line\n8. Copy/move or symlink '__velveth__' and '__velvetg__' into somewhere in the path or add the folder to the path\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Seqtk",
        "type": "Text_excerpt",
        "value": "1. Download [Seqtk](https://github.com/lh3/seqtk.git) from github and uncompress it or `git clone https://github.com/lh3/seqtk.git`\n2. Change to the directory\n3. Type `make` on the command line (zlib needs to be installed, see 1.3) for instructions)\n4. Copy/move or symlink '__seqtk__' into somewhere in the path or add the folder to the path (The files in the bin folder) \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999998752028573,
      "result": {
        "original_header": "exonerate",
        "type": "Text_excerpt",
        "value": "For Ubuntu run `sudo apt-get install exonerate` \n1. Download [exonerate](https://www.ebi.ac.uk/sites/ebi.ac.uk/files/groups/flicek/exonerate/exonerate-2.2.0.tar.gz)\n   from the EBI website and uncompress it or use the version included\n   in the GRAbB package (3rd\\_party\\_programs)\n2. Change to the directory\n3. Type the following commands (The following packages have to be\n   installed on the system before running `./configure`: **gcc**, **make** and **glib2**) \n\t    ./configure\n\t    make\n\t    make check\n\t    make install\n4. The executable is found at `src/program/exonerate`. Copy/move or\n   symlink '__exonerate__' into somewhere in the path or add the folder to\n   the path (The files in the src/program folder)\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999916652119257,
      "result": {
        "original_header": "PRINSEQ lite",
        "type": "Text_excerpt",
        "value": "1. Download [PRINSEQ lite](http://prinseq.sourceforge.net/) and extract it or use the copy in the 3rd_party_programs\n2. Copy/move or symlink '**prinseq-lite.pl**' into somewhere in the path or add the folder to the path \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8161185758671948,
      "result": {
        "original_header": "Algorithm overview",
        "type": "Text_excerpt",
        "value": "These functionalities are detailed below at the appropriate steps of\nthe algorithm.\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9798194509462853,
      "result": {
        "original_header": "Arguments",
        "type": "Text_excerpt",
        "value": "    GRAbB.pl --ref <reference file> --reads <read file 1> [<read file 2>] --folder <directory> --prefix <prefix> [options] \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9233644816751401,
      "result": {
        "original_header": "folder",
        "type": "Text_excerpt",
        "value": "The directory where all the output will be saved. If the directory is\nnon-empty then the files it contains can be used like internal\nfiles. In this manner previous runs can be continued, make sure to\nremove or replace files that would suggest completion: \n- reference.fas\n- bait.fas\n- extra_bait.fas\n- *\\<prefix\\>*\\_assembly\\_thread\\_*\\<int\\>*.fas\n- *\\<prefix\\>*\\_result\\_thread\\_*\\<int\\>*.fas (if exonerate-mode is selected and the sequence was matched)\n- *\\<prefix\\>*.log\n- old\\_collection.list\n- reads*\\<int\\>*.fastq or reads*\\<int\\>*.fasta\n- __Round*\\<int\\>*__/ \n    + hashstat.bin\n    + mirabait.log\n    + new\\_collection.list\n    + positive\\_*\\<int\\>*.txt\n    + readpool*\\<int\\>*.fastq\n    + reads*\\<int\\>*.fastq\n    + __thread\\_*\\<int\\>*__/ \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8718237651065043,
      "result": {
        "original_header": "prefix",
        "type": "Text_excerpt",
        "value": "    --prefix <prefix_of_output> \nThe prefix for the output files: \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8610089667036364,
      "result": {
        "original_header": "type",
        "type": "Text_excerpt",
        "value": "    + Extra criteria: \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9054851969672789,
      "result": {
        "original_header": "clean",
        "type": "Text_excerpt",
        "value": "    --clean --clean \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8610174216093116,
      "result": {
        "original_header": "Adding to the source code of GRAbB",
        "type": "Text_excerpt",
        "value": "\n`$alt_1_cmd` and `$alt_2_cmd` are the commands defined above. The\nfour command line strings (`$single_first`, `$single_second`,\n`$paired_first` and `$paired_second`) have to be completed with\nall necessary arguments that are required by the assembler for the\ndifferent assembly steps. \nAfter all these modifications are completed, then GRAbB maybe run with\nthe newly specified assembler program. Using the proper argument: \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9494254794443531,
      "result": {
        "original_header": "Using external_skeleton",
        "type": "Text_excerpt",
        "value": "    sub get_reference {\n        # This subroutine finds the reference file for the current thread\n        my $ref;\n        my $pwd = $ENV{\"PWD\"};\n        $pwd =~ /(thread_\\d+)$/;\n        my $thread = $1;\n        $ref = \"../../$thread/bait.fas\";\n        return $ref;\n    } \n* If the user wishes to add a mapping-assembler then the following\n  command has to be uncommented. Afterwards the reference file will be\n  referred to by `$ref`. \n* The absolute path or the command for the assembler \nAfter all these modifications are completed and save to the files\n_\\<external.pl\\>_ (the file name can be anything that does not already\nexist in the directory), then GRAbB maybe run with the newly specified\nassembler program. Using the proper argument: \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9532476078693186,
      "result": {
        "original_header": "Using SPAdes as assembler",
        "type": "Text_excerpt",
        "value": "[external_SPAdes.pl](external_SPAdes.pl) is a skeleton script that\nmaybe downloaded (and modified)  to run the assembly if **external**\nis selected as assembler (`--assembler external external_SPAdes.pl`). \nThe script is configured to use SPAdes by calling\n`spades.py`. Therefore, if you have the `spades.py` command in your\n_PATH_, then you do not have to modify the script and use it\ndirectly by specifying it as the assembler script by including the\nfollowing in the `GRAbB.pl` invocation:\n```\n--assembler external external_SPAdes.pl\n```\n \nWhere `external_SPAdes.pl` stands for the relative path (you can also\nuse the absolute path) of the script. In the above example\n`external_SPAdes.pl` has to be in the current working directory. \nTo specify arguments for the SPAdes assembly within the GRAbB.pl run\nuse `--arg1` option. For example:\n```\n--arg1 '-k 31,61,91 --only-assembler --cov-cutoff 200'\n```\n \n**If `spades.py` command is not in the _PATH_**, then you can\n- either add it to the _PATH_\n- or modify the `external_SPAdes.pl` script. \n1. Modify line 22 of `external_SPAdes.pl`, from\n    ```\n    my $assmebler = \"spades.py\"; # ADD executable here! \n    ```\n    to specify where your SPAdes executable is located. If it is at\n    `~/SPAdes-3.10.0/bin/spades.py`, then line 22 should look like this:\n    BASH4*\n2. Save the modified file\n3. And use it as described above. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8428414654308141,
      "result": {
        "original_header": "fastq2fasta",
        "type": "Text_excerpt",
        "value": "This program creates a FASTA format read file for each FASTQ read file specified. \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8247899859815168,
      "result": {
        "original_header": "rename_fastq",
        "type": "Text_excerpt",
        "value": "This program creates a FASTA format read file for each FASTQ read file \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8013273354045498,
      "result": {
        "original_header": "single2pairs",
        "type": "Text_excerpt",
        "value": "The output file will be created in the current working directory \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8377636756493518,
      "result": {
        "original_header": "Creating the bait",
        "type": "Text_excerpt",
        "value": "+ Initial bait file \n+ Specific bait file \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8129696555032755,
      "result": {
        "original_header": "Testing completion",
        "type": "Text_excerpt",
        "value": "1. Exhaustive run \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9020874264969921,
      "result": {
        "original_header": "Arguments",
        "type": "Text_excerpt",
        "value": "    GRAbB.pl --ref <reference file> --reads <read file 1> [<read file 2>] --folder <directory> --prefix <prefix> [options] \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8986268368104999,
      "result": {
        "original_header": "prefix",
        "type": "Text_excerpt",
        "value": "* log file\n* assembly file\n* result file\n \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8397712769933976,
      "result": {
        "original_header": "Using external_skeleton",
        "type": "Text_excerpt",
        "value": "\n    # The program to be used for assembly\n    my $assmebler = \"\"; # ADD\n    \n    # Run the assembly\n    `$assmebler @reads`; # ADD\n    \n    # Specify the expected result file\n    my $result = \"\"; # ADD\n    \n    # Copy the result file to the expected position\n    `perl -ne 'if (/^>/) {print} else {tr/acgtwmrskybvdh/ACGTWMRSKYBVDH/; print}' $result >$outfile`; \n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/b-brankovics/grabb/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2015 b-brankovics\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "grabb"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "b-brankovics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 4221025,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 1353816,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 1189992,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 631441,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 355909,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 53746,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 50363,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 31588,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "GAP",
        "size": 26645,
        "type": "Programming_language",
        "value": "GAP"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 22736,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Tcl",
        "size": 17013,
        "type": "Programming_language",
        "value": "Tcl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 977,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 431,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PostScript",
        "size": 37,
        "type": "Programming_language",
        "value": "PostScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "b-brankovics",
          "type": "User"
        },
        "date_created": "2018-06-19T12:11:39Z",
        "date_published": "2018-10-05T15:00:12Z",
        "description": "GRAbB (**G**enome **R**egion **A**ssembly **b**y **B**aiting) is a program designed to assemble selected regions of the genome or transcriptome using reference sequences and NGS data. This release corresponds to the version used in the [publication](https://doi.org/10.1371/journal.pcbi.1004753).",
        "html_url": "https://github.com/b-brankovics/grabb/releases/tag/v1.0",
        "name": "GRAbB-v1.0",
        "release_id": 13269736,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/b-brankovics/grabb/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/b-brankovics/grabb/releases/13269736",
        "value": "https://api.github.com/repos/b-brankovics/grabb/releases/13269736",
        "zipball_url": "https://api.github.com/repos/b-brankovics/grabb/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:45:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Table of contents"
        ],
        "type": "Text_excerpt",
        "value": "See the wiki or the files __[Docker.md](Docker.md)__, __[Examples.md](Examples.md)__ and __[Tutorial.md](Tutorial.md)__.\n\n--------------------------------"
      },
      "source": "https://raw.githubusercontent.com/b-brankovics/grabb/master/README.md",
      "technique": "header_analysis"
    }
  ]
}