{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/EESI/nbc"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-05-28T15:10:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-03-30T07:46:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Naive Bayes Classification Tool"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9414475618468464,
      "result": {
        "type": "Text_excerpt",
        "value": "It uses a method similar to that used in many email spam filters to\nscore a genetic sample against different genomes, to possibly identify\nthe closest match. The method is described in the paper <> \nTo compile this code you need the following (versions given are the\nversions we used, but slightly older or newer versions probably work too): \nSince it is now written in Standard ML, it may in theory be compilable\nwith other Standard ML compilers, such as Standard ML of New Jersey,\nMLKit, PolyML, etc. We have not attempted this. Some changes would\nprobably be necessary since the MLton foreign function interface (used\nfor judy array and gzip support) is different from the interface used\nby other compilers. \nFor all the example commands, the $ indicates the shell prompt. Don't type\nthe $, just everything after the $. And most of these examples should\nnot be typed in verbatim (unless you happen to have the genomes for a\nunicorn and a wumpus lying around - in that case, lucky you!). Instead\nmodify the examples to suit your particular circumstances. \nThe first step is to set up your genome data. Create a new directory,\nfor example \"genomes\", and inside that directory, create a directory\nfor each genome: \nThen you run count on the FASTA files containing the genome (and any\nplasmids), for each word size you want to score against: \ncount and score load the entire genome into memory. For large genomes this\nrequires a stupendous amount of memory. \n"
      },
      "source": "https://raw.githubusercontent.com/EESI/nbc/master/README",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/EESI/nbc/wiki"
      },
      "source": "https://raw.githubusercontent.com/EESI/nbc/master/README",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/EESI/nbc/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/EESI/nbc/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EESI/nbc"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/EESI/nbc/master/README",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/EESI/nbc/master/clean.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/EESI/nbc/master/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.948658624811274,
      "result": {
        "type": "Text_excerpt",
        "value": "REQUIREMENTS \nTo compile this code you need the following (versions given are the\nversions we used, but slightly older or newer versions probably work too): \nMLton 20100608\nGNU binutils 2.18.1\nGNU C Compiler 4.3.2\nGNU Make 3.81\nJudy 1.0.5\nzlib 1.2.3.3 \nBUILDING \nRun \"make\" to build: \nAssuming it completes without any problems, you will have three\nprograms: count, score, and tabulate. Install them somewhere in your path: \n$ cp count score tabulate /usr/local/bin \nSETUP \n$ mkdir genomes\n$ mkdir genomes/Unicorn\n$ mkdir genomes/Wumpus \n$ count -w genomes/Unicorn/15perword.gz -t genomes/Unicorn/15total \\\n\t-r 15 Unicorn.fasta Unicorn_plasmid.fasta\n$ count -w genomes/Unicorn/13perword.gz -t genomes/Unicorn/13total \\\n\t-r 13 Unicorn.fasta Unicorn_plasmid.fasta\n$ count -w genomes/Wumpus/15perword.gz -t genomes/Wumpus/15total \\\n\t-r 15 Wumpus.fasta\n$ count -w genomes/Wumpus/13perword.gz -t genomes/Wumpus/13total \\\n\t-r 13 Wumpus.fasta \nFor this example, you would get two files:\n\tsemen_sample-15-Unicorn.txt\n\tsemen_sample-15-Wumpus.txt \n$ tabulate semen_sample-15-Unicorn.txt semen_sample-15-Wumpus.txt \nEach command has a --help option, which may be helpful. \nAny feedback should be directed to gailr@gmail.com.\n \n"
      },
      "source": "https://raw.githubusercontent.com/EESI/nbc/master/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8400478956009733,
      "result": {
        "type": "Text_excerpt",
        "value": "For easy import into a spreadsheet, you can run tabulate to put it in\nCSV format: \n"
      },
      "source": "https://raw.githubusercontent.com/EESI/nbc/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/EESI/nbc/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD:\n\nCopyright 2008, 2009, 2010 Drexel University\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the University nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\nGPL:\n\nCopyright 2008, 2009, 2010 Drexel University\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see http://www.gnu.org/licenses/.\n"
      },
      "source": "https://raw.githubusercontent.com/EESI/nbc/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nbc"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "EESI"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Standard ML",
        "size": 83383,
        "type": "Programming_language",
        "value": "Standard ML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "OCaml",
        "size": 7016,
        "type": "Programming_language",
        "value": "OCaml"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 257,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 201,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 102,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/EESI/nbc/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:13:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}