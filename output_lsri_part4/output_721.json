{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mjenior/riptide"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-04T17:00:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-21T16:28:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Reaction Inclusion by Parsimony and Transcript Distribution"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9340083188214312,
      "result": {
        "original_header": "RIPTiDe",
        "type": "Text_excerpt",
        "value": "**R**eaction **I**nclusion by **P**arsimony and **T**ranscript **D**istribution \nTranscriptomic analyses of bacteria have become instrumental to our understanding of their responses to changes in their environment. While traditional analyses have been informative, leveraging these datasets within genome-scale metabolic network reconstructions (GENREs) can provide greatly improved context for shifts in pathway utilization and downstream/upstream ramifications for changes in metabolic regulation. Many previous techniques for GENRE transcript integration have focused on creating maximum consensus with input datasets, but these approaches have been shown to generate less accurate metabolic predictions than a transcript-agnostic method of flux minimization (pFBA), which identifies the most efficient/economic patterns of metabolism given certain growth constraints. Despite this success, growth conditions are not always easily quantifiable and highlights the need for novel platforms that build from these findings. This method, known as RIPTiDe, combines these concepts and utilizes overall minimization of flux weighted by transcriptomic analysis to identify the most energy efficient pathways to achieve growth that include more highly transcribed enzymes, without previous insight into extracellular conditions. This platform could be important for revealing context-specific bacterial phenotypes in line with governing principles of adaptive evolution, that drive disease manifestation or interactions between microbes. \n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9180758222548421,
      "result": {
        "original_header": "Additional Information",
        "type": "Text_excerpt",
        "value": "Thank you for your interest in RIPTiDe! \n\nIf you encounter any problems, please [file an issue](https://github.com/mjenior/riptide/issues) along with a detailed description. \nDistributed under the terms of the [MIT](http://opensource.org/licenses/MIT) license, \"riptide\" is free and open source software\n \n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mjenior/riptide/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mjenior/riptide/master/src/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/src/.ipynb_checkpoints/Untitled-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mjenior/riptide/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mjenior/riptide"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RIPTiDe"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "RIPTiDe"
        ],
        "type": "Text_excerpt",
        "value": "Installation is:\n```\n$ pip install riptide\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Arguments for core RIPTiDe functions:",
        "parent_header": [
          "RIPTiDe",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "**riptide.read_transcription_file() - Generates dictionary of transcriptomic abundances from a file**\n```\nREQUIRED\nfile : string\n    User-provided file name which contains gene IDs as rows and associated transcription values as columns per replicate\n\nOPTIONAL\nheader : boolean\n    Defines if read abundance file has a header that needs to be ignored\n    Default is no header\nsep: string\n    Defines what character separates entries on each line\n    Defaults to tab (.tsv)\nrarefy : bool\n    Rarefies rounded transcript abundances to 90% of the smallest replicate\n    Default is False\nlevel : int\n    Level by which to rarefy samples\n    Default is 100000\nbinning : boolean\n    Perform discrete binning of transcript abundances into quantiles\n    OPTIONAL, not advised\n    Default is False\nquant_max : float\n    Largest quantile to consider\n    Default is 0.9\nquant_min : float\n    Smallest quantile to consider\n    Default is 0.5\nstep : float\n    Step size for parsing quantiles\n    Default is 0.125\nnorm : bool\n    Normalize transcript abundances using RPM calculation\n    Performed by default\nfactor : numeric\n    Denominator for read normalization calculation\n    Default is 1e6 (RPM)\nsilent  : bool\n    Silences std out \n    Default is False\n```\n\n**riptide.maxfit() - Create context-specific model based on transcript distribution with maximum fit of flux distribution to input transctiptome**\n```\nREQUIRED\nmodel : cobra.Model\n    The model to be contextualized\ntranscriptome : dictionary\n    Dictionary of transcript abundances, output of read_transcription_file()\n\nOPTIONAL\nfrac_min : float\n    Lower bound for range of minimal fractions to test\n    Default is 0.25\nfrac_max : float\n    Upper bound for range of minimal fractions to test\n    Default is 0.85\nfrac_step : float\n    Starting interval size within fraction range\n    Default is 0.1\nprune : bool\n    Perform pruning step\n    Default is True\nsamples : int \n    Number of flux samples to collect\n    Default is 500\nsilent  : bool\n    Silences std out \n    Default is False\nminimum : float\n    Minimum linear coefficient allowed during weight calculation for pFBA\n    Default is False\nconservative : bool\n    Conservatively remove inactive reactions based on GPR rules (all member reactions must be inactive to prune)\n    Default is False\nobjective : bool\n    Sets previous objective function as a constraint with minimum flux equal to user input fraction\n    Default is True\nadditive : bool\n    Pool transcription abundances for reactions with multiple contributing gene products\n    Default is False\ndirect : bool\n    Assigns both minimization and maximization step coefficents directly, instead of relying on abundance distribution\n    Default is False\nset_bounds : bool\n    Uses flux variability analysis results from constrained model to set new bounds for all reactions\n    Default is True\ntasks : list\n    List of gene or reaction ID strings for forced inclusion in final model (metabolic tasks or essential genes)\ntask_lb : float\n    Minimum flux bound for metabolic task reactions during pruning\n    Default is equal to threshold var\nexclude : list\n    List of reaction ID strings for forced exclusion from final model\ngpr : bool\n    Determines if GPR rules will be considered during coefficient assignment\n    Default is False\nthreshold : float\n    Minimum flux a reaction must acheive in order to avoid pruning during flux sum minimization step\n    Default is 1e-8\ndefined : False or list\n    User defined range of linear coeffients, needs to be defined in a list like [1, 0.5, 0.1, 0.01, 0.001]\n    Works best paired with binned abundance catagories from riptide.read_transcription_file()\n    Default is False\n```\n\n**riptide.contextualize() - Create context-specific model based on transcript distribution with user-defined objective flux minimum**\n```\nREQUIRED\nmodel : cobra.Model\n    The model to be contextualized\n\nOPTIONAL\ntranscriptome : dictionary\n    Dictionary of transcript abundances, output of read_transcription_file()\n    With default, an artifical transcriptome is generated where all abundances equal 1.0\nfraction : float\n    Minimum objective fraction used during single run setting\n    Default is 0.8\n\n* Other arguments from iterative implementation are carried over (excluding frac_min and frac_max)\n```\n\n**riptide.save_output() - Writes RIPTiDe results to files in a new directory**\n```\nREQUIRED\nriptide_obj : RIPTiDe object\n    Class object creared by riptide.contextualize()\n\nOPTIONAL\npath : str\n    New directory to write output files\nfile_type : str\n    Type of output file for RIPTiDe model\n    Accepts either sbml or json\n    Default is JSON\nsilent  : bool\n    Silences std out \n    Default is False\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8964507331784062,
      "result": {
        "original_header": "Additional Information",
        "type": "Text_excerpt",
        "value": "\nIf you encounter any problems, please [file an issue](https://github.com/mjenior/riptide/issues) along with a detailed description. \n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mjenior/riptide/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cobrapy, flux-sampling, flux-variability, metabolism, opencobra, pfba, transcriptomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "riptide"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mjenior"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 55112,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1486,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "RIPTiDe"
        ],
        "type": "Text_excerpt",
        "value": "```\n>=python-3.6.4\n>=cobra-0.15.3\n>=pandas-0.24.1\n>=symengine-0.4.0\n>=scipy-1.3.0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:34:40",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example riptide.contextualize() stdout report:",
        "parent_header": [
          "RIPTiDe",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\n\nInitializing model and integrating transcriptomic data...\nPruning zero flux subnetworks...\nAnalyzing context-specific flux distributions...\n\nRunning max fit RIPTiDe for objective fraction range: 0.65 to 0.85\nProgress: 100%\n\nTesting local fractions to 0.3...\nProgress: 100%\n\nContext-specific metabolism fit with 0.35 of optimal objective flux\n\nReactions pruned to 285 from 1129 (74.76% change)\nMetabolites pruned to 285 from 1132 (74.82% change)\nFlux through the objective DECREASED to ~54.71 from ~65.43 (16.38% change)\nContext-specific metabolism correlates with transcriptome (r=0.149, p=0.011 *)\n\nMax fit RIPTiDe completed in, 4 minutes and 33 seconds  \n\n```\n\nIn the final step, RIPTiDe assesses the fit of transcriptomic data for the calculated network activity through correlation of transcript abundance and median flux value for each corresponding reaction. The Spearman correlation coefficient and associated p-value are the reported following the fraction of network topology that is pruned during the flux minimization step.\n\nMax fit RIPTiDe tests all minimum objective flux fractions over the provided range and returns only the model with the best Spearman correlation between context-specific flux for reactions and the associated transcriptomic values. Note, terminating search if a subsequent iteration has a lower correlation coefficient than the last could result from a local maxima and must be considered if an exhaustive analysis is preferred.\n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "RIPTiDe"
        ],
        "type": "Text_excerpt",
        "value": "**Comments before starting:** \n- Make sure that genes in the transcriptome file matches those that are in your model.\n- Check the example files for proper data formatting\n- Binning genes into discrete thresholds for coefficient assignment is available in riptide.read_transcription_file() (not recommended)\n- Opening the majority of exchange reactions (bounds = +/- 1000) may yeild better prediction when extracellular conditions are unknown\n- The resulting RIPTiDe object has multiple properties including the context-specific model and flux analyses, accessing each is described below\n\n```python\nimport riptide\n\nmy_model = cobra.io.read_sbml_model('tests/genre.sbml')\n\ntranscript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')\ntranscript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates\n\nriptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)\nriptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])\n\nriptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example riptide.contextualize() stdout report:",
        "parent_header": [
          "RIPTiDe",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\n\nInitializing model and integrating transcriptomic data...\nPruning zero flux subnetworks...\nAnalyzing context-specific flux distributions...\n\nRunning max fit RIPTiDe for objective fraction range: 0.65 to 0.85\nProgress: 100%\n\nTesting local fractions to 0.3...\nProgress: 100%\n\nContext-specific metabolism fit with 0.35 of optimal objective flux\n\nReactions pruned to 285 from 1129 (74.76% change)\nMetabolites pruned to 285 from 1132 (74.82% change)\nFlux through the objective DECREASED to ~54.71 from ~65.43 (16.38% change)\nContext-specific metabolism correlates with transcriptome (r=0.149, p=0.011 *)\n\nMax fit RIPTiDe completed in, 4 minutes and 33 seconds  \n\n```\n\nIn the final step, RIPTiDe assesses the fit of transcriptomic data for the calculated network activity through correlation of transcript abundance and median flux value for each corresponding reaction. The Spearman correlation coefficient and associated p-value are the reported following the fraction of network topology that is pruned during the flux minimization step.\n\nMax fit RIPTiDe tests all minimum objective flux fractions over the provided range and returns only the model with the best Spearman correlation between context-specific flux for reactions and the associated transcriptomic values. Note, terminating search if a subsequent iteration has a lower correlation coefficient than the last could result from a local maxima and must be considered if an exhaustive analysis is preferred.\n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Resulting RIPTiDe object (class) properties:",
        "parent_header": [
          "RIPTiDe",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The resulting object is a container for the following data structures.\n\n- **model** - Contextualized genome-scale metabolic network reconstruction\n- **transcriptome** - Transcriptomic replicate abundances provided by user\n- **percent_of_mapping** - Percent of genes in mapping file found in input GENRE\n- **minimization_coefficients** - Linear coefficients used during flux sum minimization (based on transcriptome replicates)\n- **maximization_coefficients** - Linear coefficients for each reaction based used during flux sampling\n- **pruned** - Dictionary containing the IDs of genes, reactions, and metabolites pruned by RIPTiDe\n- **flux_samples** - Flux samples from constrained model\n- **flux_variability** - Flux variability analysis from constrained model\n- **fraction_of_optimum** - Minimum specified percentage of optimal objective flux during contextualization\n- **metabolic_tasks** - User defined reactions whose activity is saved from pruning\n- **concordance** - Spearman correlation results between linear coefficients and median fluxes from sampling\n- **gpr_integration** - Whether GPR rules were considered during assignment of linear coefficients\n- **defined_coefficients** - Range of linear coefficients RIPTiDe is allowed to utilize provided as a list\n- **included_important** - Reactions or Genes included in the final model which the user defined as important\n- **additional_parameters** - Dictionary of additional parameters RIPTiDe uses\n- **fraction_bounds** - Minimum and maximum values for the range of objective flux minimum fractions tested\n- **maxfit_iters** - Objective flux and fit to transcriptome for each minimum flux fraction tested\n\n**Examples of accessing components of RIPTiDe output:**\n```python\ncontext_specific_GENRE = riptide_object.model\ncontext_specific_FVA = riptide_object.flux_variability\ncontext_specific_flux_samples = riptide_object.flux_samples\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mjenior/riptide/master/README.md",
      "technique": "header_analysis"
    }
  ]
}