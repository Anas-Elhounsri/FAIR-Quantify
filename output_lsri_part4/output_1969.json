{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Please cite following article if you have used PyWATER:\n\nPatel,H. *et al.* (2014) PyWATER: a PyMOL plug-in to find conserved water molecules in proteins by clustering. *Bioinformatics*, **30**, 2978\u22122980. \n\n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hiteshpatel379/PyWATER"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-01-08T10:10:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-31T10:01:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8932325514917734,
      "result": {
        "original_header": "Graphical User Interface",
        "type": "Text_excerpt",
        "value": "Start PyMOL\nOpen PyWATER plugin fromPyMWOLTcl-Tk GUI: Plugin\uf0e0 PyWATER\nFigure 1 shows the snapshot of PyWATER as PyMOL plugin. \n\nFigure 1. Snapshot of PyWATER plugin \nEnter required input parameters. PDB and chain identifiers are mandatory. The remaining parameters are optional. Consult table 1 for more details of all input parameters and their default values.\nChange the default values if desired and click on \u2018Find Conserved Water Molecules\u2019 \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9505118892052086,
      "result": {
        "original_header": "Using from command line in PyMOL",
        "type": "Text_excerpt",
        "value": "PyWATER [PDB id , Chain id [, sequence identity cutoff [, resolution cutoff [, refinement assessing method [, user defined proteins list [, linkage method [, inconsistency coefficient threshold [, degree of conservation]]]]]]]] \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8892997804553376,
      "result": {
        "original_header": "Accessing via PyMOL\u2019s API",
        "type": "Text_excerpt",
        "value": "  from pymol import cmd\n  cmd.pywater(PDB id , Chain id [, sequence identity cutoff [, resolution cutoff [, refinement assessing method [, user defined proteins list [, linkage method [, inconsistency coefficient threshold [, degree of conservation]]]]]]]) \nTable 1: Input parameters and default values \n+-------------+----------------+------------------------------------------------------------------------+\n|  Value      | Default value  | Explanation                                                            |   \n+=============+================+========================================================================+\n| PDB ID      |      --        |The PDB identifier of the protein for which you want to                 |\n|             |                |find conserved waters.                                                  |\n+-------------+----------------+------------------------------------------------------------------------+\n| Chain id    |      --        |The chain identifier of the protein for which you want to find conserved| \n|             |                |water molecules in the above mentioned PDB.                             |\n+-------------+----------------+------------------------------------------------------------------------+\n| Sequence    |      95%       |The sequence identity cutoff to find similar proteins clustered         | \n| Identity    |                |by BlastClust.                                                          |\n+-------------+----------------+------------------------------------------------------------------------+\n| Resolution  |      2.0 \u00c5     |All the protein structures will be filtered first according to the      | \n| cutoff      |                |structure resolution cutoff. Only structures with better resolution     |\n|             |                |than given cutoff will be used further.                                 |\n+-------------+----------------+------------------------------------------------------------------------+\n|Refinement   |    Mobility    |Choose either 'Mobility' or 'Normalized B-factor' or 'No refinement'    | \n|assessing    |                |as criteria to assess the refinement quality of crystal structure.      |\n|method       |                |Program will filter out the water molecules with bad refinement quality.|\n+-------------+----------------+------------------------------------------------------------------------+\n|Protein      |      --        |Give a custom list of protein structures to superimpose. Specifying     | \n|List         |                |this list will disable \u2018sequence identity\u2019 and \u2018resolution cutoff\u2019      |\n|             |                |parameters.                                                             |\n+-------------+----------------+------------------------------------------------------------------------+\n| Linkage     |    complete    |Linkage method for hierarchical clustering. Choose one from single,     | \n| Method      |                |complete, average.                                                      |\n+-------------+----------------+------------------------------------------------------------------------+\n| Sequence    |      95%       |The sequence identity cutoff to find similar proteins clustered         | \n| Identity    |                |by BlastClust.                                                          |\n+-------------+----------------+------------------------------------------------------------------------+\n|Inconsistency|      2.0 \u00c5     |Any two clusters of water molecules will not be closer than given       | \n|coefficient  |                |inconsistency coefficient threshold. Value ranges from 0 to 2.4.        |\n|threshold    |                |                                                                        |\n+-------------+----------------+------------------------------------------------------------------------+\n| degree of   |      0.7       |Water molecules will be considered CONSERVED if their probability       | \n| conservation|                |of being conserved is above given cutoff. Value ranges from 0.4 to 1.   |\n+-------------+----------------+------------------------------------------------------------------------+ \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9804029517329438,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "pyWATER will create a bunch of different output files. The most impartant informations are included in your PyMOL session for visual inspection.\nA detailed log file, summary files and optionally intermediate files will be stored under your $HOME directory in a folder called ``PyWATER_outdir``.\nFor every run a subfolder with the naming schema ``PDBid_CHAINid`` will be created and we recommend to go once through all files to get a feeling of all stored informations.\nThe following list will describe all different result files created by PyWATER: \n    - The query protein structure is saved with all indentified conserved water molecules in PDB file format\n    - A PyMOL session is given with predifend coloring and highlighting the important water molecules\n    \n        - conserved water molecules, with H-bonds in between them or with protein and/or the ligand are displayed\n        - all conserved water molecules are colored according to their degree of conservation \n    - A log file ``pywater.log`` with all input parameters, program messages, warning and errors\n    - The degree of conservation of each cluster is given in a tabular file with all atom numbers of water molecules from each superimposed pdb structure \nWe tried hard to output as many information as possible to enable further post-processing steps. For example, user can analyze the surroundings of a water molecule which is conserved in most proteins but not present in some. Rotameric conformations of side chains of nearby residues may result in displacement of water molecule. \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8635002410853225,
      "result": {
        "type": "Text_excerpt",
        "value": "Important or conserved waters are the water molecules which are present in most or all available pdb structures when superimposed.\nPyWATER script and this documentation is available at https://github.com/hiteshpatel379/PyWATER. \nPyMOL is available at http://www.pymol.org/ or http://sourceforge.net/projects/pymol/.\nTutorial of PyWATER is also availble at http://hiteshpatel379.github.io/PyWATER/. \n\nCopyright 2013 Hitesh Patel and B. Gruening \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/hiteshpatel379/PyWATER/wiki"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hiteshpatel379/PyWATER/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hiteshpatel379/PyWATER/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hiteshpatel379/PyWATER"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Installation"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Scipy and Numpy python modules installed on Python 2.7 are required to run PyWATER.\nPyWATER should be installed as a PyMOL plugin.\n\n- Run PyMOL\n- Install the pyWATER plugin in PyMOL by selecting PyWATER.py in the PyMOL Plugin Manager (Plugins \u2192 Manage Plugins \u2192 Install)\n- Restart PyMOL to use plugin\n\n - If you start PyMOL with administrator priviliges, PyWATER results and log files will be only accessible by the administrator.\n\n\n**Enabling Plugins in MacPyMOL**   \nIn order to install plug-ins from inside MacPyMOL, you have to rename the \"MacPyMOL.app\" to \"PyMOLX11Hybrid.app\" in your Applications folder, which will start PyMOL in the X Window System (X11) mode (requires an installation of [XQuartz](http://xquartz.macosforge.org/landing/)).\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9989436212736859,
      "result": {
        "original_header": "User Interface",
        "type": "Text_excerpt",
        "value": "After installation as plugin, PyWATER can be run from PyMOL's Graphical User Interface, via the commandline or PyMOL\u2019s python API. \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9945284952108191,
      "result": {
        "original_header": "Graphical User Interface",
        "type": "Text_excerpt",
        "value": "Start PyMOL\nOpen PyWATER plugin fromPyMWOLTcl-Tk GUI: Plugin\uf0e0 PyWATER\nFigure 1 shows the snapshot of PyWATER as PyMOL plugin. \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9930987811772916,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "pyWATER will create a bunch of different output files. The most impartant informations are included in your PyMOL session for visual inspection.\nA detailed log file, summary files and optionally intermediate files will be stored under your $HOME directory in a folder called ``PyWATER_outdir``.\nFor every run a subfolder with the naming schema ``PDBid_CHAINid`` will be created and we recommend to go once through all files to get a feeling of all stored informations.\nThe following list will describe all different result files created by PyWATER: \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8575327083141849,
      "result": {
        "original_header": "History",
        "type": "Text_excerpt",
        "value": "- v1.0: Initial public release\n \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999806988742,
      "result": {
        "type": "Text_excerpt",
        "value": "Important or conserved waters are the water molecules which are present in most or all available pdb structures when superimposed.\nPyWATER script and this documentation is available at https://github.com/hiteshpatel379/PyWATER. \nPyMOL is available at http://www.pymol.org/ or http://sourceforge.net/projects/pymol/.\nTutorial of PyWATER is also availble at http://hiteshpatel379.github.io/PyWATER/. \n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hiteshpatel379/PyWATER/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Licence (MIT)",
        "type": "Text_excerpt",
        "value": "Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyWATER"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hiteshpatel379"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 46349,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hiteshpatel379/PyWATER/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:54:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}