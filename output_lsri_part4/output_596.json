{
  "application_domain": [
    {
      "confidence": 9.97,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "citation",
        "type": "Text_excerpt",
        "value": "The gencore paper has been published in  BMC Bioinformatics: https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-019-3280-9. If you used gencore in your research work, please cite it as:\n\nChen, S., Zhou, Y., Chen, Y. et al. Gencore: an efficient tool to generate consensus reads for error suppressing and duplicate removing of NGS data. BMC Bioinformatics 20, 606 (2019) doi:10.1186/s12859-019-3280-9\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenGene/gencore"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-05-03T06:00:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-21T19:29:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Generate duplex/single consensus reads to reduce sequencing noises and remove duplications"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9777049967120448,
      "result": {
        "original_header": "what's gencore?",
        "type": "Text_excerpt",
        "value": "`gencore` is a tool for fast and powerful deduplication for paired-end next-generation sequencing (NGS) data. It is much faster and uses much less memory than Picard and other tools. It generates very informative reports in both HTML and JSON formats. It's based on an algorithm for `generating consensus reads`, and that's why it's named `gencore`. \n`gencore` supports the data with unique molecular identifiers (UMI). If your FASTQ data has UMI integrated, you can use [fastp](https://github.com/OpenGene/fastp) to shift the UMI to read query names, and use `gencore` to generate consensus reads. \nThis tool can eliminate the errors introduced by library preparation and sequencing processes, and consenquently reduce the false positives for downstream variant calling. This tool can also be used to remove duplicated reads. Since it generates consensus reads from duplicated reads, it outputs much cleaner data than conventional duplication remover. ***Due to these advantages, it is especially useful for processing ultra-deep sequencing data for cancer samples.*** \n`gencore` accepts a sorted BAM/SAM with its corresponding reference fasta as input, and outputs an unsorted BAM/SAM.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9679081898465246,
      "result": {
        "original_header": "QC result reported by gencore",
        "type": "Text_excerpt",
        "value": "gencore also performs some quality control when processing deduplication and generating consensus reads. Basically it reports mapping rate, duplication rate, mismatch rate and some statisticical results. Especially, gencore reports the coverate statistics of input BAM file in genome scale, and in capturing regions (if a BED file is specified). \ngencore reports the results both in HTML format and JSON format for manually checking and downstream analysis. See the examples of interactive [HTML](http://opengene.org/gencore/gencore.html) report and [JSON](http://opengene.org/gencore/gencore.json) reports.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.975991310673516,
      "result": {
        "original_header": "understand the output",
        "type": "Text_excerpt",
        "value": "gencore outputs following files:\n1. the processed BAM. In this BAM, each consensus read will have a tag `FR`, which means `forward read number of this consensus read`. If the read is a duplex consensus read, it will also has a tag `RR`, which means `reverse read number of this consensus read`. Downstream tools can read the `FR` and `RR` tags for further processing or variant calling. In following example, the first read is a single-stranded consensus sequence (only has a `FR` tag), and the second read is a duplex consensus sequence (has both `FR` and `RR` tags):\n```\nA00250:28:H2HC3DSX2:1:1117:3242:5321:UMI_GCT_CTA        161     chr12   25377992        60      143M    =       25378431        582\n     GCAATAATTTTTGTCAGAAAAATGCATTAAATGAATAACAGAATTTCTGTTGGCTTTCTGGGTATTGTCTTTCTTTAATGAGACCTTTCTCCAGAAATAAACACATCCTCAAAAAAATTCTGCCAAAGTAAAATTCTTCAAAT FFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NM:i:1  MD:Z:34G108     AS:i:138        XS:i:21 RG:Z:cfdna      FR:i:2\nA00250:28:H2HC3DSX2:1:2316:10547:25989:UMI_AAC_AGA      161     chr12   25377993        60      143M    =       25378462        612\n     CAATAATTTTTGTCAGAAAAATGCATTAAATGAATAACAGAATTTCTGTTGGCTTTCTGGGTATTGTCTTTCTTTAATGAGACCTTTCTCCAGAAATAAACACATCCTCAAAAAAATTCTGCCAAAGTAAAATTCTTCAAATA FFFFF:FFFFFFFFFFFFFFFFFFFFF:FF:FFFFFFFFFF,FFFFFFFFFFFF,:FFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFF:FFF,!FF:F:F:F,FFF,F:FFFF,,:F,FFFF:FF:,:FF:F,:, NM:i:1  MD:Z:33G67A41   AS:i:133        XS:i:21 RG:Z:cfdna      FR:i:1  RR:i:5\n```\n2. the JSON report. A json file contains lots of statistical informations.\n3. the HTML report. A html file visualizes the information of the JSON.\n4. the plain text output.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9796970175459845,
      "result": {
        "original_header": "how it works",
        "type": "Text_excerpt",
        "value": "important steps:\n1. clusters the reads by their mapping positions and UMIs (if UMIs are applicable).\n2. for each cluster, compares its supporting reads number (the number of reads/pairs for this DNA fragment) with the threshold specified by `supporting_reads`. If it passes, start to generate a consensus read for it.\n3. if the reads are paired, finds the overlapped region of each pair, and scores the bases in the overlapped regions according their concordance and base quality.\n4. for each base position at this cluster, computes the total scores of each different nucleotide (A/T/C/G/N).\n5. if there exists a major nucleotide with good quality, use this nucleotide for this position; otherwise, check the reference nucleotide from reference genome (if reference is specified).\n6. when checking the reference, if there exists one or more reads are concordant with reference genome with high quality, or all reads at this positions are with low quality, use the reference nucleotide for this position.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9782096136138274,
      "result": {
        "original_header": "the scoring",
        "type": "Text_excerpt",
        "value": "`gencore` assigns a score to each base in a read of a read cluster, the score means the confidence of this base. The score is given by following rules: \nIn this table:\n* `this_qual` is the quality of this base\n* `pair_qual` is the quality of the corresponding in the overlapped region of a pair.\n* `HIGH_QUAL` is the quality threshold that can be specified by `--high_qual`\n* `MODERATE_QUAL` is the quality threshold that can be specified by `--moderate_qual`\n* `LOW_QUAL` is the quality threshold that can be specified by `--low_qual` \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.991052976632789,
      "result": {
        "original_header": "UMI format",
        "type": "Text_excerpt",
        "value": "`gencore` supports calling consensus reads with or without UMI. Although UMI is not required, it is strongly recommended. If your FASTQ data has UMI integrated, you can use [fastp](https://github.com/OpenGene/fastp) to shift the UMI to read query names.\u00a0  \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8557051945874051,
      "result": {
        "original_header": "all options",
        "type": "Text_excerpt",
        "value": "```\noptions:\n  -i, --in                       input sorted bam/sam file. STDIN will be read from if it's not specified (string [=-])\n  -o, --out                      output bam/sam file. STDOUT will be written to if it's not specified (string [=-])\n  -r, --ref                      reference fasta file name (should be an uncompressed .fa/.fasta file) (string)\n  -b, --bed                      bed file to specify the capturing region, none by default (string [=])\n  -x, --duplex_only              only output duplex consensus sequences, which means single stranded consensus sequences will be discarded.\n      --no_duplex                don't merge single stranded consensus sequences to duplex consensus sequences.\n  -u, --umi_prefix               the prefix for UMI, if it has. None by default. Check the README for the defails of UMI formats. (string [=auto])\n  -s, --supporting_reads         only output consensus reads/pairs that merged by >= <supporting_reads> reads/pairs. The valud should be 1~10, and the default value is 1. (int [=1])\n  -a, --ratio_threshold          if the ratio of the major base in a cluster is less than <ratio_threshold>, it will be further compared to the reference. The valud should be 0.5~1.0, and the default value is 0.8 (double [=0.8])\n  -c, --score_threshold          if the score of the major base in a cluster is less than <score_threshold>, it will be further compared to the reference. The valud should be 1~20, and the default value is 6 (int [=6])\n  -d, --umi_diff_threshold       if two reads with identical mapping position have UMI difference <= <umi_diff_threshold>, then they will be merged to generate a consensus read. Default value is 1. (int [=1])\n  -D, --duplex_diff_threshold    if the forward consensus and reverse consensus sequences have <= <duplex_diff_threshold> mismatches, then they will be merged to generate a duplex consensus sequence, otherwise will be discarded. Default value is 2. (int [=2])\n      --high_qual                the threshold for a quality score to be considered as high quality. Default 30 means Q30. (int [=30])\n      --moderate_qual            the threshold for a quality score to be considered as moderate quality. Default 20 means Q20. (int [=20])\n      --low_qual                 the threshold for a quality score to be considered as low quality. Default 15 means Q15. (int [=15])\n      --coverage_sampling        the sampling rate for genome scale coverage statistics. Default 10000 means 1/10000. (int [=10000])\n  -j, --json                     the json format report file name (string [=gencore.json])\n  -h, --html                     the html format report file name (string [=gencore.html])\n      --debug                    output some debug information to STDERR.\n      --quit_after_contig        stop when <quit_after_contig> contigs are processed. Only used for fast debugging. Default 0 means no limitation. (int [=0])\n  -?, --help                     print this message\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "download binary",
        "parent_header": [
          "get gencore"
        ],
        "type": "Text_excerpt",
        "value": "This binary is only for Linux systems: http://opengene.org/gencore/gencore\n```shell\n# this binary was compiled on CentOS, and tested on CentOS/Ubuntu\nwget http://opengene.org/gencore/gencore\nchmod a+x ./gencore\n```"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OpenGene/gencore/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 32
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OpenGene/gencore/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenGene/gencore"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gencore"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://www.opengene.org/gencore/original.png"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://www.opengene.org/gencore/processed.png"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://www.opengene.org/gencore/coverage-genome.jpeg"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://www.opengene.org/gencore/coverage-bed.jpeg"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "install with Bioconda",
        "parent_header": [
          "get gencore"
        ],
        "type": "Text_excerpt",
        "value": "[![install with conda](\nhttps://anaconda.org/bioconda/gencore/badges/version.svg)](https://anaconda.org/bioconda/gencore)\n```shell\nconda install -c bioconda gencore\n```"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999834608737008,
      "result": {
        "original_header": "the scoring",
        "type": "Text_excerpt",
        "value": "| in overlapped region? | matched with its pair? | condition? | score for this base |\n| - | - | - | - |\n| NO | N/A | HIGH_QUAL <= this_qual | 8 |\n| NO | N/A | MODERATE_QUAL <= this_qual < HIGH_QUAL | 6 |\n| NO | N/A | LOW_QUAL <= this_qual < MODERATE_QUAL | 4 |\n| NO | N/A | this_qual < LOW_QUAL | 2 |\n| YES | YES | 2 * HIGH_QUAL <= this_qual + pair_qual | 12 |\n| YES | YES | 2 * MODERATE_QUAL <= this_qual + pair_qual < 2 * HIGH_QUAL | 10 |\n| YES | YES | 2 * LOW_QUAL <= this_qual + pair_qual < 2 * MODERATE_QUAL | 8 |\n| YES | YES | this_qual + pair_qual < 2 * LOW_QUAL | 6 |\n| YES | NO | HIGH_QUAL <= this_qual - pair_qual | 5 |\n| YES | NO | MODERATE_QUAL <= this_qual - pair_qual < HIGH_QUAL | 3 |\n| YES | NO | LOW_QUAL <= this_qual - pair_qual < MODERATE_QUAL | 1 |\n| YES | NO | this_qual - pair_qual < LOW_QUAL | 0 | \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.944989809141545,
      "result": {
        "original_header": "UMI format",
        "type": "Text_excerpt",
        "value": "`gencore` supports calling consensus reads with or without UMI. Although UMI is not required, it is strongly recommended. If your FASTQ data has UMI integrated, you can use [fastp](https://github.com/OpenGene/fastp) to shift the UMI to read query names.\u00a0  \n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OpenGene/gencore/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, consensus, deduplication, deep-sequencing, duplex, duplex-sequencing, duplication, ngs, sequencing, sequencing-error, sequencing-noise, somatic"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 OpenGene - Open Source Genetics Toolbox\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gencore"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "OpenGene"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 157890,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 597,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 351,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2021-10-29T14:32:21Z",
        "date_published": "2021-10-29T23:47:54Z",
        "description": "fix the issue that the output bam may be unordered",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.17.2",
        "name": "Fix possible unordered output",
        "release_id": 52352763,
        "tag": "v0.17.2",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.17.2",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/52352763",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/52352763",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.17.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2021-10-13T14:00:54Z",
        "date_published": "2021-10-13T14:19:11Z",
        "description": "Fix some bugs of duplex merging.\r\nRevise scoring.\r\nAdd no_duplex option.",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.17.1",
        "name": "Bug fix to duplex merging",
        "release_id": 51289201,
        "tag": "v0.17.1",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.17.1",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/51289201",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/51289201",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.17.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2021-10-11T14:10:36Z",
        "date_published": "2021-10-11T14:14:07Z",
        "description": "Support generating duplex consensus sequences.\r\nRevise cluster/molecule statistics.\r\nAdd `FR`, `RR` tags into BAM reads.",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.17.0",
        "name": "Support duplex merging",
        "release_id": 51145925,
        "tag": "v0.17.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.17.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/51145925",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/51145925",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.17.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2019-07-08T09:21:28Z",
        "date_published": "2019-07-09T02:29:00Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.13.0",
        "name": "Implement ordered output",
        "release_id": 18485249,
        "tag": "v0.13.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.13.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/18485249",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/18485249",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.13.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2019-06-28T06:03:26Z",
        "date_published": "2019-07-01T01:12:06Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.12.0",
        "name": "Support HTML reporting and improve JSON reporting",
        "release_id": 18320058,
        "tag": "v0.12.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.12.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/18320058",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/18320058",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.12.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2019-04-22T09:56:43Z",
        "date_published": "2019-04-23T05:32:35Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.11.0",
        "name": "Revise clustering by UMI",
        "release_id": 16911749,
        "tag": "v0.11.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.11.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/16911749",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/16911749",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.11.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-12-05T08:59:43Z",
        "date_published": "2018-12-06T00:58:33Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.10.0",
        "name": "Optimize memory and speed",
        "release_id": 14376288,
        "tag": "v0.10.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.10.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/14376288",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/14376288",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.10.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-10-30T09:22:38Z",
        "date_published": "2018-11-01T01:53:09Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.9.0",
        "name": "Support JSON report",
        "release_id": 13768560,
        "tag": "v0.9.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.9.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/13768560",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/13768560",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.9.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-09-04T09:43:04Z",
        "date_published": "2018-09-04T09:44:41Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.8.0",
        "name": "improve the speed by skipping large low complexity cluster",
        "release_id": 12715585,
        "tag": "v0.8.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.8.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/12715585",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/12715585",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.8.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-08-27T14:38:08Z",
        "date_published": "2018-08-27T14:39:38Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.7.0",
        "name": "Improve SE data processing",
        "release_id": 12592454,
        "tag": "v0.7.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.7.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/12592454",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/12592454",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.7.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-08-20T09:12:07Z",
        "date_published": "2018-08-20T09:14:19Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.6.0",
        "name": "ignore ref bases other than A/T/C/G",
        "release_id": 12478054,
        "tag": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/12478054",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/12478054",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-08-20T08:16:05Z",
        "date_published": "2018-08-20T08:18:56Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.5.0",
        "name": "Fixed an error of reporting UMI mismatch",
        "release_id": 12477241,
        "tag": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/12477241",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/12477241",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-08-14T10:03:02Z",
        "date_published": "2018-08-14T10:05:18Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.4.0",
        "name": "Better paired-end support",
        "release_id": 12393021,
        "tag": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/12393021",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/12393021",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-05-24T03:43:28Z",
        "date_published": "2018-05-24T03:47:07Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.3.0",
        "name": "small fix for aligned by right reads",
        "release_id": 11149095,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/11149095",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/11149095",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-05-17T05:36:18Z",
        "date_published": "2018-05-17T05:39:03Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.2.0",
        "name": "Skip unmapped reads to speed up",
        "release_id": 11040680,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/11040680",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/11040680",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sfchen",
          "type": "User"
        },
        "date_created": "2018-05-03T06:23:16Z",
        "date_published": "2018-05-03T06:25:19Z",
        "html_url": "https://github.com/OpenGene/gencore/releases/tag/v0.1.0",
        "name": "First public release",
        "release_id": 10826975,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/OpenGene/gencore/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/OpenGene/gencore/releases/10826975",
        "value": "https://api.github.com/repos/OpenGene/gencore/releases/10826975",
        "zipball_url": "https://api.github.com/repos/OpenGene/gencore/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:06:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 114
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "take a quick glance of the informative report",
        "type": "Text_excerpt",
        "value": "* Sample HTML report: http://opengene.org/gencore/gencore.html\n* Sample JSON report: http://opengene.org/gencore/gencore.json\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "try gencore to generate above reports",
        "type": "Text_excerpt",
        "value": "* BAM file for testing: http://opengene.org/gencore/input.sorted.bam\n* BED file for testing: http://opengene.org/gencore/test.bed\n* Reference genome file: [ftp://ftp.ncbi.nlm.nih.gov/sra/reports/Assembly/GRCh37-HG19_Broad_variant/Homo_sapiens_assembly19.fasta](ftp://ftp.ncbi.nlm.nih.gov/sra/reports/Assembly/GRCh37-HG19_Broad_variant/Homo_sapiens_assembly19.fasta)\n* Command for testing: \n```shell\ngencore -i input.sorted.bam -o output.bam -r Homo_sapiens_assembly19.fasta -b test.bed --coverage_sampling=50000\n```\n* After the processing is finished, check the `gencore.html` and `gencore.json` in the working directory. The option `--coverage_sampling=50000` is to change the default setting `(coverage_sampling=10000)` to generate smaller report files by reducing the coverage sampling rate.\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "quick examples",
        "type": "Text_excerpt",
        "value": "The simplest way\n```shell\ngencore -i input.sorted.bam -o output.bam -r hg19.fasta\n```\nWith a BED file to specify the capturing regions\n```shell\ngencore -i input.sorted.bam -o output.bam -r hg19.fasta -b test.bed\n```\nOnly output the fragment with >=2 supporting reads (useful for aggressive denoising)\n```shell\ngencore -i input.sorted.bam -o output.bam -r hg19.fasta -b test.bed -s 2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "or compile from source",
        "parent_header": [
          "get gencore"
        ],
        "type": "Text_excerpt",
        "value": "```shell\n# step 1: download and compile htslib from: https://github.com/samtools/htslib\n# step 2: get gencore source (you can also use browser to download from master or releases)\ngit clone https://github.com/OpenGene/gencore.git\n\n# step 3: build\ncd gencore\nmake\n\n# step 4: install\nsudo make install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "why to use gencore?",
        "type": "Text_excerpt",
        "value": "As described above, gencore can eliminate the errors introduced by library preparation and sequencing processes, and consenquently it can greatly reduce the false positives for downstream variant calling. Let me show your an example.\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "original BAM",
        "parent_header": [
          "why to use gencore?"
        ],
        "type": "Text_excerpt",
        "value": "![image](http://www.opengene.org/gencore/original.png)   \n\n***This is an image showing a pileup of the original BAM. A lot of sequencing errors can be observed.***\n\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "gencore processed BAM",
        "parent_header": [
          "why to use gencore?"
        ],
        "type": "Text_excerpt",
        "value": "![image](http://www.opengene.org/gencore/processed.png)   \n\n***This is the image showing the result of gencore processed BAM. It becomes much cleaner. Cheers!***\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "command examples",
        "type": "Text_excerpt",
        "value": "If you want to get very clean data, we can only keep the clusters with 2 or more supporting reads (recommended for ultra-deep sequencing with higher dup-rate):\n```\ngencore -i in.bam -o out.bam -r hg19.fa -s 2\n```\nIf you want to keep all the DNA fragments, we can set `supporting_reads` to 1 (this option can be used to replace `picard markduplicate` to deduplication):\n```\ngencore -i in.bam -o out.bam -r hg19.fa -s 1\n```\n(Recommanded) If you want to keep all the DNA fragments, and for each output read you want to discard all the low quality unoverlapped mutations to obtain a relative clean data (recommended for dup-rate < 50%):\n```\ngencore -i in.bam -o out.bam -r hg19.fa -s 1 --score_threshold=9\n```\nIf you want to obtain fewer but ultra clean data, and your data has UMI, you can enable the `duplex_only` option, and increase the `supporting_reads` and the `ratio_threshold`:\n```\ngencore -i in.bam -o out.bam -r hg19.fa --duplex_only -s 3 --ratio_threshold=0.9\n```\nPlease note that only UMI-integrated paired-end data can be used to generate duplex consensuses sequences.\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "UMI examples",
        "parent_header": [
          "UMI format"
        ],
        "type": "Text_excerpt",
        "value": "* Read query name = `\"NB551106:8:H5Y57BGX2:1:13304:3538:1404:UMI_GAGCATAC\"`, prefix = `\"UMI\"`, umi = `\"GAGCATAC\"`\n* Read query name = `\"NB551106:8:H5Y57BGX2:1:13304:3538:1404:umi_GAGC_ATAC\"`, prefix = `\"umi\"`, umi = `\"GAGC_ATAC\"`\n* Read query name = `\"NB551106:8:H5Y57BGX2:1:13304:3538:1404:GAGCATAC\"`, prefix = `\"\"`, umi = `\"GAGCATAC\"`\n* Read query name = `\"NB551106:8:H5Y57BGX2:1:13304:3538:1404:GAGC_ATAC\"`, prefix = `\"\"`, umi = `\"GAGC_ATAC\"`\n"
      },
      "source": "https://raw.githubusercontent.com/OpenGene/gencore/master/README.md",
      "technique": "header_analysis"
    }
  ]
}