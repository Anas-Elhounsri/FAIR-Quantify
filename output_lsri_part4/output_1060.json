{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qiao-xin/DupGen_finder"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-25T08:50:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T08:33:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A pipeline used to identify different modes of duplicated gene pairs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8584269760842458,
      "result": {
        "original_header": "DupGen_finder",
        "type": "Text_excerpt",
        "value": "The DupGen_finder was developed to identify different modes of duplicated gene pairs. [MCScanX](http://chibba.pgml.uga.edu/mcscan2/) algorithm was incorporated in this pipeline. \n"
      },
      "source": "https://raw.githubusercontent.com/qiao-xin/DupGen_finder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9327341323924733,
      "result": {
        "original_header": "The schematic diagram of DupGen_finder pipeline",
        "type": "Text_excerpt",
        "value": "<t align=\"center\">\n  Figure 1: The flowchart of DupGen_finder pipeline\n</t> \nDupGen_finder software package includes a custom MCScanX algorithm which can output sorted `gff` files such as `Ath.gff.sorted`, and is slightly different from the original MCScanX algorithm implemented in [MCScanX](http://chibba.pgml.uga.edu/mcscan2/) software package. \n2. For the outgroup genome, please prepare two input files:\n\t- ```[target_species]_[outgroup_species].gff```, a gene position file for the target_species and outgroup_species, following a tab-delimited format.\n\t- BASH6*, a blastp output file (-outfmt 6) between the target and outgroup species (cross-genome comparison). \nThe data in ```Ath.gff``` looks like this (tab separated):\nBASH12* \nThe data in ```Ath_Nnu.gff``` looks like this (tab separated):\nBASH14* \nThe data in ```Ath.blast``` looks like this (tab separated):\nBASH16* \nThis command will print a full list of options:\n```\nUsage: DupGen_finder.pl -i data_directory -t target_species -c outgroup_species -o output_directory\n#####################\nOptional:\n-a 1 or 0(are segmental duplicates ancestral loci or not? default: 1, yes)\n-d number_of_genes(maximum distance to call proximal, default: 10)\n#####################\nThe following are optional MCScanX parameters:\n-k match_score(cutoff score of collinear blocks for MCScanX, default: 50)\n-g gap_penalty(gap penalty for MCScanX, default: -1)\n-s match_size(number of genes required to call a collinear block for MCScanX, default: 5)\n-e e_value(alignment significance for MCScanX, default: 1e-05)\n-m max_gaps(maximum gaps allowed for MCScanX, default: 25)\n-w overlap_window(maximum distance in terms of gene number, to collapse BLAST matches for MCScanX, default: 5)\n``` \nA typical command to identify different modes of duplicated gene pairs in a given species could look like this:\n```bash\nDupGen_finder.pl -i data -t Ath -c Nnu -o results\n```\nHere, **DupGen_finder** attempts to identify the different modes of duplicated gene pairs in *A.thaliana* by using *N.nucifera* as outgroup. All required data files should be stored under this directory BASH22*. The output files will be stored under this directory BASH23*. For more details please see below. Ath: *A.thaliana*, Nnu: *N.nucifera*. \n### *DupGen_finder-unique*\nMoreover, to eliminate redundant duplicate genes among different modes, we provide a stricter version of **DupGen_finder** named **DupGen_finder-unique** by which each duplicate gene was assigned to a unique mode after all of the duplicated gene pairs were classified into different gene duplication types. The priority of the duplicate genes is as follows: WGD > tandem > proximal > transposed > dispersed.\n```bash\nDupGen_finder-unique.pl -i data -t Ath -c Nnu -o results\n```\n \nThe number of duplicated gene pairs derived from different modes.\n```\nTypes\tNO. of gene pairs\nWGD-pairs\t4352\nTD-pairs\t2063\nPD-pairs\t788\nTRD-pairs\t4447\nDSD-pairs\t16130\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/qiao-xin/DupGen_finder/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qiao-xin/DupGen_finder/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qiao-xin/DupGen_finder/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "qiao-xin/DupGen_finder"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DupGen_finder"
      },
      "source": "https://raw.githubusercontent.com/qiao-xin/DupGen_finder/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qiao-xin/DupGen_finder/master/set_PATH.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9301427746198511,
      "result": {
        "original_header": "The schematic diagram of DupGen_finder pipeline",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n<img src=\"https://github.com/LQHHHHH/DupGen_finder/blob/master/data/The%20flowchart%20of%20DupGen_finder%20pipeline.png\"  height=\"500\" width=\"300\">\n<p align=\"center\"> \n## Dependencies \n## Installation\n```bash\ncd ~/software  # or any directory of your choice\ngit clone https://github.com/qiao-xin/DupGen_finder.git\ncd DupGen_finder\nmake\nchmod 775 DupGen_finder.pl\nchmod 775 DupGen_finder-unique.pl\nchmod 775 set_PATH.sh\nsource set_PATH.sh\n```\n \nTest you can run DupGen_finder:\n```bash\nDupGen_finder.pl\n```\nDupGen_finder should print its 'help' text. \n**\\*\\*Note\\*\\*** \nThe below command can be used to creat ```Ath_Nnu.gff```:\nBASH13* \nRun the following command to get help information about **DupGen_finder**:\n```bash\nDupGen_finder.pl\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qiao-xin/DupGen_finder/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9277757441310496,
      "result": {
        "original_header": "The schematic diagram of DupGen_finder pipeline",
        "type": "Text_excerpt",
        "value": "Test you can run DupGen_finder:\n```bash\nDupGen_finder.pl\n```\nDupGen_finder should print its 'help' text. \n"
      },
      "source": "https://raw.githubusercontent.com/qiao-xin/DupGen_finder/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qiao-xin/DupGen_finder/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LQHHHHH/DupGen_finder/master/data/The%20flowchart%20of%20DupGen_finder%20pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/qiao-xin/DupGen_finder/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DupGen_finder"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "qiao-xin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 34353,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 26147,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 617,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 480,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 180,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qiao-xin/DupGen_finder/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:50:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 92
      },
      "technique": "GitHub_API"
    }
  ]
}