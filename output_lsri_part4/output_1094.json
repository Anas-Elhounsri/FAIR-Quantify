{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "SJARACNe"
        ],
        "type": "Text_excerpt",
        "value": "Alireza Khatamian, Evan O. Paull, Andrea Califano* & Jiyang Yu*. SJARACNe: a scalable \nsoftware tool for gene network reverse engineering from big data. Bioinformatics (2018). *Corresponding authors.\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jyyulab/SJARACNe"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-01-19T21:29:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-12T16:43:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Scalable Tool for Gene Network Reverse Engineering"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9708477766897672,
      "result": {
        "original_header": "SJARACNe",
        "type": "Text_excerpt",
        "value": "SJARACNe is a scalable solution of ARACNe that dramatically improves the computational \nperformance, especially on the memory usage to allow even researchers with modest \ncomputational power to generate networks from thousands of samples. The algorithm uses \nadaptive partitioning mutual information to calculate the correlation between all pairs \nof genes to reconstruct the regulatory network. \n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "parent_header": [
          "SJARACNe"
        ],
        "type": "Text_excerpt",
        "value": "```git clone https://github.com/jyyulab/SJARACNe  # Clone the repo```\n\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jyyulab/SJARACNe/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jyyulab/SJARACNe/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jyyulab/SJARACNe"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SJARACNe"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "SJARACNe"
        ],
        "type": "Text_excerpt",
        "value": "Depends on the runtime environment, [node.js](https://nodejs.org/en/download/) may be installed manually to run \ncwltool locally; [cwlexec](https://github.com/yuch7/cwlexec) may be installed manually to run on IBM LSF platform. \n\nThere are two options to install SJARACNe and its dependencies:"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(Option 1) Install via pip",
        "parent_header": [
          "SJARACNe",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```$ pip install SJARACNe```\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(Option 2) Install from source",
        "parent_header": [
          "SJARACNe",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n$ git clone https://github.com/jyyulab/SJARACNe\n$ cd SJARACNe\n$ python setup.py build     # build SJARACNe binary\n$ python setup.py install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install optional packages depends on runtime platform",
        "parent_header": [
          "SJARACNe",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "SJARACNe workflow is implemented in [Common Workflow Language](https://www.commonwl.org/). \nInstall node.js for running locally using cwltool; install cwlexec to run on IBM LSF platform. \nUsers may check [Common Workflow Language](https://www.commonwl.org/) site for available workflow engines \nto run on other platforms, e.g., [Toil](https://toil.readthedocs.io/en/latest/).\n\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999020372788,
      "result": {
        "original_header": "Using conda to create a virtual environment",
        "type": "Text_excerpt",
        "value": "The recommended method of setting up the required Python environment and dependencies is to use the\n[conda](https://conda.io/en/latest/) dependency manager:\n```bash\n$ conda create -n py392 python=3.9.2\n$ source activate py392\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jyyulab/SJARACNe/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gene-network, inference, mutual-information"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "This software evaluation license agreement (\"License\") is between The Trustees of Columbia University in the City of New York, (\"University\") and You (as defined below).\n\n1. Definitions\n\na. Documentation shall mean all manuals, user documentation, and other related materials, if any, pertaining to the Program which are furnished to You by University in connection with the Program.\n\nb. Program shall mean the SJARACNe software computer program developed in the laboratories of Dr. Jiyang Yu from St. Jude Children\u00eds Research Hospital (by Dr. Alireza Khatamian and Dr. Liang Ding) and Dr. Andrea Califano from Columbia University and supplied to You pursuant to this Agreement.\n\nc. \"You\" (or \"Your\") means an individual or legal entity exercising rights under, and complying with all of the terms of, this License. If \"You\" are an individual, You hereby represent and warrant to Columbia that You are an employee of a non-profit or a not-for-profit entity. If \"You\" are a legal entity, You hereby represent and warrant to Columbia that You are a non-profit or not-for-profit entity, and \u00ecYou\u00ee includes any entity that controls, is controlled by, or is under common control with You.\n\n1. Grant of Rights\n\na. The Program and Documentation is owned by the University and University retains all right, title, and interest in and to the Program. You shall not assert any right, title or interest in the Program and/or Documentation.\n\nb. University hereby grants, and You accept, subject to the terms and conditions of this License, a limited nonexclusive, nontransferable and non-assignable license to use the Program for non-commercial, academic or educational research purposes only.\n\nc. You agree that You will only use the Program and Documentation for non-commercial internal academic or educational research purposes only. You will not (i) reproduce or copy the Program (ii) use, or cause or permit the use of, the Program in whole or in part for any purpose other than as permitted under this License; (iii) distribute, sell, lease, license or otherwise make the Program available to a third party outside Your organization; or (iv) reverse engineer, decompile, or disassemble the Program.\n\nd. You agree that the Program and Documentation are University's confidential information and shall treat and handle confidential information in accordance with the terms of this Agreement. You further acknowledge that the Program in any form provided by University hereunder are the sole property of University. You shall not have any right, title, or interest to any such Program or copies thereof except as provided in this Agreement. All rights not specifically granted herein are reserved to University. Except as expressly provided under this Section 2, no right or license is granted (expressly or by implication) by University to You under any tangible or intellectual property, materials, patent, patent application, trademark, copyright, trade secret, know-how, technical information, data or other proprietary right.\n\ne. The term of this License shall commence on the date on which You commence use of the Program until the date that You return or cease use of the Program or as specified in Section 6 below.\n\nf. Prior to any commercial use, lease, distribution, transfer, sublicense or sale of any product utilizing, derived from, or incorporating, in whole or any part, the Program and/or Documentation hereunder, You must obtain a license permitting commercial use of the Program and Documentation from University or if applicable, the University\u00eds exclusive licensee. Any such use, lease, distribution, transfer, sublicense or sale without a written license from University or University\u00eds exclusive licensee permitting such commercial use, distribution, sublicense or sale shall be VOID AND EXPRESSLY PROHIBITED.\n\nTo negotiate such license agreement, contact:\n\nScience and Technology Ventures Columbia University 80 Claremont Avenue #4F New York, NY 10027 (212) 854-8444 stvinfo@columbia.edu\n\n1. No Obligation to Support. It is understood and agreed that University will provide no maintenance or installation services of any kind, error corrections, bug fixes, patches, updates or other modifications hereunder. In the event that University, at its sole option, provides updates, error corrections, bug fixes, patches or other modifications to the Program to You (\"Software Updates\"), the Software Updates will be considered part of the Program, and subject to the terms and conditions of this License.\n\n2. NO WARRANTY. YOU ACKNOWLEDGE AND ACCEPT THAT COLUMBIA UNIVERSITY IS PROVIDING THE PROGRAM ON AN \u00ecAS IS\u00ee BASIS. COLUMBIA UNIVERSITY EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS PROGRAM AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF NON-INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OF A THIRD PARTY, MERCHANTABILITY AND/OR FITNESS FOR ANY PARTICULAR PURPOSE, AND WARRANTIES OF PERFORMANCE, AND ANY WARRANTY THAT MIGHT OTHERWISE ARISE FROM COURSE OF DEALING OR USAGE OF TRADE. NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH RESPECT TO THE USE OF THE PROGRAM OR DOCUMENTATION. Under no circumstances shall Columbia University, any of its trustees, officers, faculty members, students, employees or agents be liable for incidental, special, indirect, direct or consequential damages or loss of profits, interruption of business, or related expenses which may arise from Your use of Program and/or Documentation, including but not limited to those resulting from defects in Program and/or Documentation, or loss or inaccuracy of data of any kind.\n\n3. Confidentiality\n\na. You acknowledge that the Program and Documentation are proprietary and confidential to the University. You agree to protect the Program, Documentation and any feedback provided by You, if applicable, from unauthorized disclosure, use, or release and to treat the Program and feedback with at least the same level of care as You use to protect Your own proprietary computer programs and/or confidential information, but in no event less than a reasonable standard of care.\n\nb. The obligations of this Section 5 shall not apply to such confidential information that the receiving party can demonstrate: (a) was known publicly or was known by the receiving party prior to receipt thereof by the disclosing party; (b) was or becomes a matter of public information or publicly available through no act or failure to act on part of the receiving party; (c) is acquired by the receiving party from a third party entitled to disclose it; or (e) the receiving party discovers, develops independently without reference to or use of such confidential information, as evidenced by written documentation.\n\n1. Termination. This License is effective until terminated, as provided herein, or until the expiration of the time period specified in Section 2 above. You may terminate this Agreement at any time by ceasing use of the Program. This Agreement, and the rights granted hereunder, will terminate automatically, and without any further notice from or action by University, if You fail to comply with any obligation set forth herein. Upon termination, You must immediately cease use of the Program. Sections 2(a), 2(d), 2(e), 2(f), 4-7 and 9-12 shall survive expiration or termination of this Agreement.\n\n2. Use of Name. You will not use the name of Columbia University or the name of any faculty member, trustee, other employee or student of Columbia University for any purpose whatsoever without University's prior written consent.\n\n3. Nonassignability. You shall not assign or transfer this License or its rights hereunder without the prior written consent of University. Any attempt to assign without compliance with this provision shall be void.\n\n4. Governing Law; Jurisdiction and Venue. The validity, interpretation, construction and performance of this Agreement shall be governed by the laws of the State of New York, without reference to the conflict of law principles of any jurisdiction. The New York state courts of New York County, New York (or, if there is exclusive federal jurisdiction, the United States District Court for the Southern District of New York) shall have exclusive jurisdiction and venue over any dispute arising out of this Agreement, and You hereby consent to the jurisdiction of such courts.\n\n5. Export Requirements. The Program, Documentation and all related technical information or materials are subject to export controls and U.S. Government export regulations. You will comply strictly with all legal requirements established under these controls and will not, in connection with its limited evaluation rights hereunder, export, re-export, divert, transfer or disclose, directly or indirectly the Program, Documentation and any related technical information or materials without the prior approval of the U.S. Department of Commerce.\n\n6. Severability. If any provision of this License shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, the remaining provisions shall remain in full force and effect.\n\n7. Miscellaneous. This License and its exhibits contain the entire understanding and agreement between the parties respecting the subject matter hereof. This License may not be supplemented, modified, amended, released or discharged except by an instrument in writing signed by each party's duly authorized representative. All captions and headings in this License are for purposes of convenience only and shall not affect the construction or interpretation of any of its provisions. Any waiver by either party of any default or breach hereunder shall not constitute a waiver of any provision of this License or of any subsequent default or breach of the same or a different kind. This License may be executed in counterparts and signatures sent by facsimile transmission shall be binding as evidence of acceptance of the terms of this License by such signatory party.\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SJARACNe"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "jyyulab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 67301,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 29066,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Common Workflow Language",
        "size": 9287,
        "type": "Programming_language",
        "value": "Common Workflow Language"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 4137,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1601,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1113,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://toil.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamdingliang",
          "type": "User"
        },
        "date_created": "2021-12-03T00:19:04Z",
        "date_published": "2021-12-03T00:56:16Z",
        "description": "## SJARACNe 0.2.1 includes two bug fixes compared to 0.2.0\r\n\r\n### Highlights of this release\r\n\r\nFixed two bugs: \r\n    1. TF_run_000 was the same as TF_run_001; \r\n    2. The total number of edges calculation for a bootstrap run was incorrect, this causes the wrong calculation of the probability of the Bernoulli distribution.\r\nUpdated corresponding tests. \r\nImproved README documentation.",
        "html_url": "https://github.com/jyyulab/SJARACNe/releases/tag/0.2.1",
        "name": "SJARACNe 0.2.1",
        "release_id": 54543735,
        "tag": "0.2.1",
        "tarball_url": "https://api.github.com/repos/jyyulab/SJARACNe/tarball/0.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/jyyulab/SJARACNe/releases/54543735",
        "value": "https://api.github.com/repos/jyyulab/SJARACNe/releases/54543735",
        "zipball_url": "https://api.github.com/repos/jyyulab/SJARACNe/zipball/0.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamdingliang",
          "type": "User"
        },
        "date_created": "2019-08-04T07:25:48Z",
        "date_published": "2019-08-04T23:31:48Z",
        "description": "## SJARACNe 0.2.0 includes some major improvements and bug fixes compared to 0.1.0.\r\n\r\n### Highlights of this release\r\n1. Implement the workflow using CWL that supports running on multiple platforms.\r\n2. Allow users to control resource usage (runner depended on different platforms).\r\n3. Merging consensus network creation and enhanced consensus network creation into one step. Refactoring to increase its speed/memory and reliability.\r\n4. Acceptance tests and unit tests (python) using Travis CI.\r\n5. Entry wrapper script that supports local and IBM LSF. \r\n6. Improved documentation.",
        "html_url": "https://github.com/jyyulab/SJARACNe/releases/tag/0.2.0",
        "name": "SJARACNe 0.2.0",
        "release_id": 19067364,
        "tag": "0.2.0",
        "tarball_url": "https://api.github.com/repos/jyyulab/SJARACNe/tarball/0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jyyulab/SJARACNe/releases/19067364",
        "value": "https://api.github.com/repos/jyyulab/SJARACNe/releases/19067364",
        "zipball_url": "https://api.github.com/repos/jyyulab/SJARACNe/zipball/0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jimmyv9",
          "type": "User"
        },
        "date_created": "2019-04-11T19:07:58Z",
        "date_published": "2019-07-01T15:24:26Z",
        "description": "SJARACNe is a scalable solution of ARACNe that dramatically improves the computational performance, especially on the memory usage to allow even researchers with modest computational power to generate networks from thousands of samples. The algorithm uses adaptive partitioning mutual information to calculate the correlation between all pairs of genes and reconstruct the regulatory network.",
        "html_url": "https://github.com/jyyulab/SJARACNe/releases/tag/v0.1.0",
        "name": "SJARACNe 0.1.0",
        "release_id": 18335306,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/jyyulab/SJARACNe/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jyyulab/SJARACNe/releases/18335306",
        "value": "https://api.github.com/repos/jyyulab/SJARACNe/releases/18335306",
        "zipball_url": "https://api.github.com/repos/jyyulab/SJARACNe/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "SJARACNe"
        ],
        "type": "Text_excerpt",
        "value": "* [Python>=3.7.6](https://www.python.org/downloads/)\n    * [numpy>=1.20.1](https://www.scipy.org/scipylib/download.html)\n    * [scipy>=1.6.1](https://www.scipy.org/install.html)\n    * [pandas>=1.2.3](https://pandas.pydata.org/)\n    * [cwltool>=3.0.20201117141248](https://github.com/common-workflow-language/cwltool/releases)\n    * [node.js>=4.4.4](https://nodejs.org/fa/blog/release/v4.4.4/) (required by cwltool to run locally)\n* [cwlexec==0.2.2](https://github.com/IBMSpectrumComputing/cwlexec/releases) (CWL engine to run on IBM LSF)\n\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running on a single machine (Linux/OSX)",
        "parent_header": [
          "SJARACNe",
          "Examples to create a transcription factor network"
        ],
        "type": "Text_excerpt",
        "value": "```sjaracne local -e ./test_data/inputs/BRCA100.exp -g ./test_data/inputs/tf.txt -n 2 -o ./test_data/outputs/cwl/cwltool/SJARACNE_out.final -pc 1.0 -tmp ./test_data/outputs/cwl/cwltool/tmp/```\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running on an IBM LSF cluster",
        "parent_header": [
          "SJARACNe",
          "Examples to create a transcription factor network"
        ],
        "type": "Text_excerpt",
        "value": "```sjaracne lsf -j ./SJARACNe/config/config_cwlexec.json -e ./test_data/inputs/BRCA100.exp -g ./test_data/inputs/tf.txt -n 2 -o ./test_data/outputs/cwl/cwltool/SJARACNE_out.final -pc 1.0```\n\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:58:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "SJARACNe"
        ],
        "type": "Text_excerpt",
        "value": "```$ sjaracne \nusage: sjaracne [-h] {local,lsf} ...\n\nSJARACNe is a scalable tool for gene network reverse engineering.\n\noptional arguments:\n  -h, --help   show this help message and exit\n\nSubcommands:\n  {local,lsf}  platforms\n    local      run cwltool in a local workstation\n    lsf        run cwlexec as in a IBM LSf cluster\n```\n```sjaracne``` workflow is implemented with [CWL](https://www.commonwl.org/). It supports multiple\n computing platforms. We have tested it locally using [cwltool](https://github.com/common-workflow-language/cwltool) \n and on an IBM LSF cluster using [cwlexec](https://github.com/IBMSpectrumComputing/cwlexec). \n For the convenience, a python wrapper is developed for you to choose computing platform using ```subcommand```.\n \nThe local mode (sjaracne local) runs in parallel by default using cwltool's --parallel option. To run it in serial, \nuse --serial option.\n\nTo use LSF mode, editing the LSF-specific configuration file SJARACNe/config/config_cwlexec.json to change the default \nqueue and adjust memory reservation for each step is necessary. Consider increasing memory reservation for bootstrap \nstep and consensus step if the dimension of your expression matrix file is large.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inputs",
        "parent_header": [
          "SJARACNe",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The main input for SJARACNe is a tab-separated genes/protein by cells/samples expression matrix\nwith the first two columns being ID and symbol. The second required input file is the list of\nsignificant genes/proteins IDs to be considered as hubs in the reconstructed network (**the most recent version of curated \ntranscription factors and signaling proteins can be found in ./SJARACNe/config/TF_list.txt and ./SJARACNe/config/SIG_list.txt, respectively**). \nAn output directory is required for storing output files. Additional parameters (e.g., LSF queue) for running on different platforms are required. \nThose are available in the helping information of the corresponding subcommands, e.g., ```sjaracne lsf -h```.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Outputs",
        "parent_header": [
          "SJARACNe",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The main output of SJARACNe is a network file, which is a tab delimited text file with the following columns: source,\ntarget, mutual information, Pearson and Spearman correlations coefficients, regression line slope and p-value. SJARACNe\nalso outputs two meta information files: parameter_info_.txt and bootstrap_info_.txt, which stores SJARACNe \ninput parameters and bootstrap parameters respectively.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples to create a transcription factor network",
        "parent_header": [
          "SJARACNe"
        ],
        "type": "Text_excerpt",
        "value": "**Note:** for testing purpose, the number of bootstraps (```-n```) is set to 2, the consensus p-value threshold \n```-pc``` is set to 1.0 in the following examples. ```-n 100``` and ```-pc 1e-5``` are recommended for real \napplications. Note that there is no / at the end of the -o option but there is a / at the end of the -tmp option.\n"
      },
      "source": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jyyulab/SJARACNe/master/SJARACNe/cwl/sjaracne_workflow.cwl"
      },
      "technique": "file_exploration"
    }
  ]
}