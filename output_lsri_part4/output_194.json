{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "[Mineeva, Olga, Mateo Rojas-Carulla, Ruth E. Ley, Bernhard Sch\u00f6lkopf, and Nicholas D. Youngblut. 2020. \"DeepMAsED: Evaluating the Quality of Metagenomic Assemblies.\" Bioinformatics , February.](https://doi.org/10.1093/bioinformatics/btaa124)\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/leylabmpi/DeepMAsED"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-02T08:29:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-05T14:45:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Deep learning for Metagenome Assembly Error Detection"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Main Description",
        "type": "Text_excerpt",
        "value": "The tool is divided into two main parts:\n\n* **DeepMAsED-SM**\n  * A snakemake pipeline for generating DeepMAsED train/test datasets from reference genomes\n* **DeepMAsED-DL**\n  * A python package for misassembly detection via deep learning\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/leylabmpi/DeepMAsED/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/01_true_error_assess/02_genome-n10.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/01_true_error_assess/02_genome-n10.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/01_true_error_assess/01_genome-n8.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/01_true_error_assess/01_genome-n8.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/01_true_error_assess/.ipynb_checkpoints/01_genome-n8-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/01_true_error_assess/.ipynb_checkpoints/01_genome-n8-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/01_true_error_assess/.ipynb_checkpoints/02_genome-n10-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/01_true_error_assess/.ipynb_checkpoints/02_genome-n10-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/06_all_dataset_summary/01_summarize.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/06_all_dataset_summary/01_summarize.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/06_all_dataset_summary/.ipynb_checkpoints/01_summarize-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/01_simulation_datasets/06_all_dataset_summary/.ipynb_checkpoints/01_summarize-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/01_GTDB_test-val_genomes-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/01_GTDB_test-val_genomes-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/02_train_run_eval-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/02_train_run_eval-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/03_test_run_eval-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/03_test_run_eval-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/01a_GTDB_test-val_genomes_ANI-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/01a_GTDB_test-val_genomes_ANI-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/00_ref_genome_list-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/.ipynb_checkpoints/00_ref_genome_list-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/02_real_datasets/01_AlmeidaA-2019.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/02_real_datasets/01_AlmeidaA-2019.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/02_real_datasets/02_PasolliE-2019.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/02_real_datasets/02_PasolliE-2019.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/02_real_datasets/.ipynb_checkpoints/01_AlmeidaA-2019-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/02_real_datasets/.ipynb_checkpoints/01_AlmeidaA-2019-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/02_real_datasets/.ipynb_checkpoints/02_PasolliE-2019-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/02_real_datasets/.ipynb_checkpoints/02_PasolliE-2019-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/04_contig_viewing/01_true_dataset.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/04_contig_viewing/01_true_dataset.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/04_contig_viewing/00_sandbox.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/04_contig_viewing/00_sandbox.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/04_contig_viewing/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/04_contig_viewing/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/04_contig_viewing/.ipynb_checkpoints/01_true_dataset-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/04_contig_viewing/.ipynb_checkpoints/01_true_dataset-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/04_REAPR/00_sandbox.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/04_REAPR/00_sandbox.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/04_REAPR/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/04_REAPR/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/01_ALE_on_sim-train.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/01_ALE_on_sim-train.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/02b_ALE_on_sim-test_r25.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/02b_ALE_on_sim-test_r25.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/04_ALE_on_PasolliE-2019.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/04_ALE_on_PasolliE-2019.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/02a_ALE_on_sim-test_r5.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/02a_ALE_on_sim-test_r5.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/00_sandbox.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/00_sandbox.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/03_ALE_on_AlmeidaA-2019.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/03_ALE_on_AlmeidaA-2019.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/04_ALE_on_PasolliE-2019-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/04_ALE_on_PasolliE-2019-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/02b_ALE_on_sim-test_r25-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/02b_ALE_on_sim-test_r25-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/01_ALE_on_sim-train-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/01_ALE_on_sim-train-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/03_ALE_on_AlmeidaA-2019-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/03_ALE_on_AlmeidaA-2019-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/02a_ALE_on_sim-test_r5-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/02_ALE/.ipynb_checkpoints/02a_ALE_on_sim-test_r5-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/02_VALET_on_PasolliE-2019.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/02_VALET_on_PasolliE-2019.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/01_VALET_on_AlmeidaA-2019.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/01_VALET_on_AlmeidaA-2019.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/00_sandbox.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/00_sandbox.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/.ipynb_checkpoints/01_VALET_on_AlmeidaA-2019-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/.ipynb_checkpoints/01_VALET_on_AlmeidaA-2019-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/.ipynb_checkpoints/02_VALET_on_PasolliE-2019-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/05_VALET/.ipynb_checkpoints/02_VALET_on_PasolliE-2019-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/03_LAP/00_sandbox.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/03_LAP/00_sandbox.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/03_LAP/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/03_LAP/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/01_SuRankCo/00_sandbox.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/01_SuRankCo/00_sandbox.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/01_SuRankCo/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/03_stateOfTheArt/01_SuRankCo/.ipynb_checkpoints/00_sandbox-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/05_predictions/01_sim_DM-accuracy_vs_ANI.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/05_predictions/01_sim_DM-accuracy_vs_ANI.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/05_predictions/.ipynb_checkpoints/01_sim_DM-accuracy_vs_ANI-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/notebooks/05_predictions/.ipynb_checkpoints/01_sim_DM-accuracy_vs_ANI-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/leylabmpi/DeepMAsED/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "leylabmpi/DeepMAsED"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepMAsED"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/DeepMAsED-SM/snakemake_sge.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Via the conda recipe",
        "parent_header": [
          "Setup"
        ],
        "type": "Text_excerpt",
        "value": "The simplest approach is to use the conda recipe:\n\n`conda create -n deepmased bioconda::deepmased`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency setup via conda",
        "parent_header": [
          "Setup",
          "[alternative] The piecemeal setup"
        ],
        "type": "Text_excerpt",
        "value": "* [If needed] Install miniconda (or anaconda)\n* See the `conda create` line in the [.travis.yml](./.travis.yml) file.\n* If just using DeepMAsED-SM:\n  * `conda create -n snakemake conda-forge::pandas bioconda::snakemake`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing the DeepMAsED package (optional)",
        "parent_header": [
          "Setup",
          "[alternative] The piecemeal setup",
          "Dependency setup via conda"
        ],
        "type": "Text_excerpt",
        "value": "`pytest -s`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing the DeepMAsED package into the conda environment",
        "parent_header": [
          "Setup",
          "[alternative] The piecemeal setup",
          "Dependency setup via conda"
        ],
        "type": "Text_excerpt",
        "value": "* Via `setup.py`\n  * `python setup.py install`\n* Via `pip`\n  * `pip install DeepMAsED`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/leylabmpi/DeepMAsED/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, deep-learning, metagenome-assembly, metagenomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Nicholas Youngblut\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepMAsED"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "leylabmpi"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 21318647,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 156020,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 5342,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5212,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 3622,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nick-youngblut",
          "type": "User"
        },
        "date_created": "2019-09-11T07:07:36Z",
        "date_published": "2019-09-11T07:08:23Z",
        "description": "Release coinciding with the manuscript publication on biorxiv",
        "html_url": "https://github.com/leylabmpi/DeepMAsED/releases/tag/0.2.0",
        "name": "biorxiv",
        "release_id": 19902084,
        "tag": "0.2.0",
        "tarball_url": "https://api.github.com/repos/leylabmpi/DeepMAsED/tarball/0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/leylabmpi/DeepMAsED/releases/19902084",
        "value": "https://api.github.com/repos/leylabmpi/DeepMAsED/releases/19902084",
        "zipball_url": "https://api.github.com/repos/leylabmpi/DeepMAsED/zipball/0.2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency setup via conda",
        "parent_header": [
          "Setup",
          "[alternative] The piecemeal setup"
        ],
        "type": "Text_excerpt",
        "value": "* [If needed] Install miniconda (or anaconda)\n* See the `conda create` line in the [.travis.yml](./.travis.yml) file.\n* If just using DeepMAsED-SM:\n  * `conda create -n snakemake conda-forge::pandas bioconda::snakemake`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing the DeepMAsED package (optional)",
        "parent_header": [
          "Setup",
          "[alternative] The piecemeal setup",
          "Dependency setup via conda"
        ],
        "type": "Text_excerpt",
        "value": "`pytest -s`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running locally",
        "parent_header": [
          "Usage",
          "Creating training datasets with `DeepMAsED-SM`",
          "Input"
        ],
        "type": "Text_excerpt",
        "value": "> See the \"Setup\" section above for snakemake installation instructions. \n\n`cd ./DeepMAsED-SM/`\n\n> Edit the config.yaml file as needed (eg., changing input & output paths)\n\n`snakemake --use-conda -j <NUMBER_OF_THREADS> --configfile <MY_CONFIG.yaml_FILE>`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running on SGE cluster",
        "parent_header": [
          "Usage",
          "Creating training datasets with `DeepMAsED-SM`",
          "Input"
        ],
        "type": "Text_excerpt",
        "value": "`./snakemake_sge.sh <MY_CONFIG.yaml_FILE> cluster.json <PATH_FOR_SGE_LOGS> <NUMBER_OF_PARALLEL_JOBS> [additional snakemake options]`\n\nIt should be rather easy to update the code to run on other cluster architectures.\nSee the following resources for help:\n\n* [Snakemake docs on cluster config](https://snakemake.readthedocs.io/en/stable/snakefiles/configuration.html)\n* [Snakemake profiles](https://github.com/Snakemake-Profiles)\n\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:26:50",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of classifying contig misassemblies",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "You need to have the following input:\n\n* fasta of metagenome assembly contigs (uncompressed)\n* BAM file of metagenome reads mapped to the contigs\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create table mapping BAM &amp; fasta files",
        "parent_header": [
          "Usage",
          "Example of classifying contig misassemblies"
        ],
        "type": "Text_excerpt",
        "value": "If multiple sets of contigs (eg., MAGs) and BAM files,\nthen which contigs go with which BAM files?\n\nCreate a tab-delim table of: `bam<tab>fasta` (header required)\n\nThis will be your `bam_fasta_table`, which is need for creating the features.\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create feature table(s)",
        "parent_header": [
          "Usage",
          "Example of classifying contig misassemblies"
        ],
        "type": "Text_excerpt",
        "value": "`DeepMAsED features $bam_fasta_table`\n\nThis generates >=1 feature table and a table listing all output files\n(the \"feature_file_table\"). This feature_file_table will be the input\nfor `predict`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Predict misassemblies",
        "parent_header": [
          "Usage",
          "Example of classifying contig misassemblies"
        ],
        "type": "Text_excerpt",
        "value": "`DeepMAsED predict $feature_file_table`\n\n...where `feature_filt_table` is the path to a table that lists\nall feature files (see above). \n\n`--force-ovewrite` forces the re-creation of the pkl files, which is a bit slower\nbut can prevent issues.\n\nChange `--save-path` to set the output directory.\nUse `--cpu-only` to just use CPUs instead of a GPU.\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Third, inspect the output",
        "parent_header": [
          "Usage",
          "Example of classifying contig misassemblies",
          "Predict misassemblies"
        ],
        "type": "Text_excerpt",
        "value": "By default, the predictions will be written to `deepmased_predictions.tsv`.\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example output",
        "parent_header": [
          "Usage",
          "Example of classifying contig misassemblies",
          "Predict misassemblies",
          "Third, inspect the output"
        ],
        "type": "Text_excerpt",
        "value": "```\nCollection     Contig  Deepmased_score\n0       NODE_1156_length_5232_cov_4.046938      0.0007264018\n0       NODE_1563_length_3868_cov_5.851298      0.03783685\n0       NODE_4288_length_1225_cov_3.235897      0.070887744\n1       k141_9081       8.8751316e-05\n1       k141_2594       6.720424e-05\n1       k141_4878       0.0015754104\n2       NODE_5204_length_1290_cov_3.283401      0.00036007166\n2       NODE_2848_length_2164_cov_2.982456      0.0005029738\n2       NODE_446_length_6027_cov_5.812291       0.068261534\n```\n\nSee [Mineeva et al., 2020](https://doi.org/10.1093/bioinformatics/btaa124)\nto help decide what score cutoff is prudent for classifying\nmisassembled contigs.\n\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating training datasets with `DeepMAsED-SM`",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "This is useful for training `DeepMAsED-DL` with a custom\ntrain/test dataset (e.g., just biome-specific taxa). \n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input",
        "parent_header": [
          "Usage",
          "Creating training datasets with `DeepMAsED-SM`"
        ],
        "type": "Text_excerpt",
        "value": "* A table listing refernce genomes. Two possible formats:\n  * Genome-accession: `<Taxon>\\t<Accession>`\n     * \"Taxon\" = the species/strain name\n     * \"Accession\" = the NCBI genbank genome accession \n     * The genomes will be downloaded based on the accession\n  * Genome-fasta: `<Taxon>\\t<Fasta>`\n     * \"Taxon\" = the species/strain name of the genome\n     * \"Fasta\" = the fasta of the genome sequence\n     * Use this option if you already have the genome fasta files (uncompressed or gzip'ed)\n* The snakemake config file (e.g., `config.yaml`). This includes:\n  * Config params on MG communities\n  * Config params on assemblers & parameters\n\n> The column order for the tables doesn't matter, but the column names must be exact.\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output",
        "parent_header": [
          "Usage",
          "Creating training datasets with `DeepMAsED-SM`",
          "Input"
        ],
        "type": "Text_excerpt",
        "value": "The output will the be same as for feature generation, but with extra directories:\n\n* `./output/genomes/`\n  * Reference genomes\n* `./output/MGSIM/`\n  * Simulated metagenomes\n* `./output/assembly/`\n  * Metagenome assemblies\n* `./output/true_errors/`\n  * Metagenome assembly errors determined by using the references\n* `./output/map/`\n  * Feature tables for each simulation\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "DeepMAsED-DL",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Main interface: `DeepMAsED -h`\n\n> `DeepMAsED [train|predict]` can be run without GPUs,\nbut the will be substantially slower.\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Predicting with existing model",
        "parent_header": [
          "Usage",
          "DeepMAsED-DL"
        ],
        "type": "Text_excerpt",
        "value": "See `DeepMAsED predict -h` \n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training a new model",
        "parent_header": [
          "Usage",
          "DeepMAsED-DL"
        ],
        "type": "Text_excerpt",
        "value": "See `DeepMAsED train -h` \n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Evaluating a model",
        "parent_header": [
          "Usage",
          "DeepMAsED-DL"
        ],
        "type": "Text_excerpt",
        "value": "See `DeepMAsED evalulate -h`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating features for `predict`",
        "parent_header": [
          "Usage",
          "DeepMAsED-DL"
        ],
        "type": "Text_excerpt",
        "value": "See `DeepMAsED features -h`\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Features table",
        "parent_header": [
          "Usage",
          "DeepMAsED-DL",
          "Creating features for `predict`"
        ],
        "type": "Text_excerpt",
        "value": "* **Basic info**\n  * assembler\n    * metagenome assembler used\n  * contig\n    * contig ID\n  * position\n    * position on the contig (bp)\n  * ref_base\n    * nucleotide at that position on the contig\n* **Extracted from the bam file**\n  * num_query_A\n    * number of reads mapping to that position with 'A'\n  * num_query_C\n    * number of reads mapping to that position with 'C'\n  * num_query_G\n    * number of reads mapping to that position with 'G'\n  * num_query_T\n    * number of reads mapping to that position with 'T'\n  * num_SNPs\n    * number of SNPs at that position\n  * coverage\n    * number of reads mapping to that position\n  * num_discordant\n    * discordant reads according to the read mapper definition\n  * num_supplementary\n    * number of reads mapping to that position where the alignment is supplementary\n    * see the [samtools docs](https://samtools.github.io/hts-specs/SAMv1.pdf) for more info\n  * num_secondary\n    * number of reads mapping to that position where the alignment is secondary\n    * see the [samtools docs](https://samtools.github.io/hts-specs/SAMv1.pdf) for more info\n* **MetaQUAST info**\n  * Extensive_misassembly\n    * the \"extensive misassembly\" classification set by MetaQUAST\n"
      },
      "source": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/leylabmpi/DeepMAsED/master/DeepMAsED-SM/bin/Snakefile"
      },
      "technique": "file_exploration"
    }
  ]
}