{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "ChIPulate"
        ],
        "type": "Text_excerpt",
        "value": "* Sridhar Hannenhalli, Rahul Siddharthan for helping set up each aspect of the ChIPulate pipeline.\n* Sandeep Krishna, Gautam Menon for useful discussions on the binding model employed in ChIPulate.\n* Parul Singh for discussions on the ChIP-seq protocol and peak callers. \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vishakad/chipulate"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-03T22:34:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-27T15:16:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Python3 framework to simulate read counts in a ChIP-seq experiment."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.873869194953412,
      "result": {
        "original_header": "ChIPulate",
        "type": "Text_excerpt",
        "value": "A Python3 framework to simulate read counts in a ChIP-seq experiment. \n \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9977374955327085,
      "result": {
        "original_header": "Input file",
        "type": "Text_excerpt",
        "value": "\tchr --- Chromosome coordinate of each genomic region. This is mandatory for BED and FASTQ files to be generated.\n\tstart --- Starting position of each genomic region. This is mandatory for BED and FASTQ files to be generated.\n\tend ---- End position of each genomic region. This is mandatory for BED and FASTQ files to be generated.\n\tname --- Names for each entry. This is optional. If this column is not specified, each entry will be called region_1, region_2, ... .\n\tp_ext --- The extraction efficiency at each genomic location. The value must\n\tlie between 0 and 1.\n\tp_amp --- PCR efficiency at each genomic location, which must lie between 0\n\tand 1. The mean number of amplified fragments at a location is (1 + p)^n, where\n\tp is the PCR efficiency at the location and n is the number of PCR cycles. Note\n\tthat the PCR efficiencies are truncated to two decimal places in order to speed\n\tup the process of computing the number of amplified fragments obtained at each\n\tgenomic location.  \n\tenergy_A --- Binding energies of TF A at each location, which is the\n\ttarget TF of the ChIP-seq. A binding energy of 0 represents the strongest\n\tbinding site with positive values representing weaker binding. \n\tenergy_B --- Binding energies of TF B at each location. This is only\n\tin case a second TF is being simulated.\n\tbinding_type --- When no second TF is supplied, every location is considered\n\tto be directly bound by the TF A i.e., the value at each location defaults to\n\t\"direct\". If a second TF is supplied, the binding_type can be either be\n\t\"direct\" or \"indirect\". \n\tint_energy--- When binding energies for A and B are supplied, the\n\tinteraction energy at each location determines whether it is cooperatively,\n\tcompetitively or independently bound. At a given location, a negative value\n\trepresents a cooperative interaction, a positive value represents a competitive\n\tinteraction and a value of zero represents no interaction i.e., independent\n\tbinding. \n\tsequence--- The sequence of the region being bound. This sequence can be of\n\tany length. \n\tchrom_accessibility--- The chromatin accessibility at each location. This is\n\ta value that lies between 0 and 1.\n \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9612614068970968,
      "result": {
        "original_header": "Output generated",
        "type": "Text_excerpt",
        "value": "\tchip_reads --- The number of reads in the ChIP sample at each genomic\n\tlocation. This includes both unique reads and duplicate reads arising from\n\tsequencing PCR duplicate fragments during library preparation.\n\tunique_chip_reads --- The number of unique reads in the ChIP sample at each\n\tgenomic location.\n\tcontrol_reads --- The number of reads in the control sample at each genomic\n\tlocation. This includes both unique reads and duplicate reads arising from\n\tsequencing PCR duplicate fragments during library preparation.\n\tunique_control_reads --- The number of unique reads in the control sample at\n\teach genomic location.\n\t\nTwo more files are generated in addition to the ```.chipulate.out``` file, which are suffixed with BASH2* and BASH3*. The run_info file conains the parameters with which the output was generated  while the '.diag_output' contains results from the intermediate steps of computation when the read counts are generated. See\nthe Examples section for more details. \nIf `chr`,`start` and `end` positions are supplied in the input file, then additional `.bed` and `.fastq` files are generated by ChIPulate, one each for the ChIP and control samples. The `.bed` file generated contains six columns (these are the first six columns of the standard BED format https://genome.ucsc.edu/FAQ/FAQformat.html#format1). These columns are coordinates of single-end reads, the name of each read (with duplicates marked), and the strand from which they originated. The `.fastq` files contain the sequences of each read, along with a fixed quality score of each read in the phred+33 scale. \n \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8244467564679876,
      "result": {
        "original_header": "Notes on parameters and performance of ChIPulate",
        "type": "Text_excerpt",
        "value": "The running time of ChIPulate is largely determined by the number of amplified fragments that are generated during the simulation. The parameters that increase the number of amplified fragments generated (while other parameters are held constant) are --- \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9873215157778521,
      "result": {
        "original_header": "PCR efficiency to amplification ratio table",
        "type": "Text_excerpt",
        "value": "The key quantity to control while setting the PCR efficiency column in the input file is the amplification ratio. This is defined as A = (1 + p)^{n}, where A is the amplification ratio, p is the PCR efficiency and n is the number of PCR cycles. The table below gives values of p and n and the amplification ratios corresponding to them. \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9675625678248961,
      "result": {
        "original_header": "PCR simulation process",
        "type": "Text_excerpt",
        "value": "The probability mass functions of the number of amplified fragments obtained after 15 cycles of PCR are present in the ```output/pcr-data/``` folder. This considerably speeds up the simulation process since this distribution does not have to be computed afresh. These are files named BASH2*, BASH3* to BASH4*. The filename convention is BASH5*. Note that if PCR efficiencies other than these values are specified in the BASH6* column in the input file, they will be rounded down to 2 decimal places.  \nThis is because the computation of the probability mass function of the number of amplified fragments obtained from a single fragment becomes a slow process beyond $n = 10$ cycles. If you wish to simulate more cycles of PCR, or any number other than 15 cycles, this can still be specified in the ```--pcr-cycles``` command-line switch. ChIPulate will first compute these distributions for all efficiencies between 0.01 and 0.99 in steps of 0.01 and then store them in the BASH1* for future use. Later runs of ChIPulate with this number of PCR cycles will then be fast since these stored distributions will be loaded from disk. \n \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8756614626195959,
      "result": {
        "original_header": "Reproducing results from our manuscript",
        "type": "Text_excerpt",
        "value": "Email vishakadatta@gmail.com in case of any issues. \n \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vishakad/chipulate/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vishakad/chipulate/master/paper/Manuscript.ipynb"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/paper/Manuscript.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vishakad/chipulate/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vishakad/chipulate"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ChIPulate"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vishakad/chipulate/master/examples/pipeline.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vishakad/chipulate/master/examples/igv_region_7_snapshot1.png"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vishakad/chipulate/master/examples/igv_region_7_snapshot2.png"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vishakad/chipulate/master/examples/igv_region_7_snapshot_paired_50bp.png"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vishakad/chipulate/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 vishakad\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "ChIPulate"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chipulate"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "vishakad"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 158990,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 117658,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running ChIPulate",
        "parent_header": [
          "ChIPulate"
        ],
        "type": "Text_excerpt",
        "value": "\tusage: chipulate.py [-h] [--mu-A MU_A] [--mu-B MU_B]\n\t\t\t    [-c CONTROL_CELL_FRACTION] [-b INPUT_BG] [-n NUM_CELLS]\n\t\t\t    [-d DEPTH] [-p PCR_CYCLES] -i INPUT_FILE\n\t\t\t    [--chrom-size-file CHROM_SIZE_FILE] [-g GENOME_FILE]\n\t\t\t    [-o OUTPUT_PREFIX] [--output-dir OUTPUT_DIR]\n\t\t\t    [--read-length READ_LENGTH]\n\t\t\t    [--fragment-length FRAGMENT_LENGTH]\n\t\t\t    [--fragment-jitter FRAGMENT_JITTER]\n\n\tThe ChIPulate pipeline for simulating read counts in a ChIP-seq experiment\n\n\toptional arguments:\n\t  -h, --help            show this help message and exit\n\t  --mu-A MU_A           Chemical potential (in units of k_B T) of TF A, where\n\t\t\t\tA is the target TF of the ChIP-seq. (default: 3.0)\n\t  --mu-B MU_B           Chemical potential (in units of k_B T) of TF B, where\n\t\t\t\tB is a second TF that may be involved in cooperative\n\t\t\t\tor indirect interactions with A, the target TF of the\n\t\t\t\tChIP-seq. (default: 3.0)\n\t  -c CONTROL_CELL_FRACTION, --control-cell-fraction CONTROL_CELL_FRACTION\n\t\t\t\tControl cell ratio. This is the fraction ofthe number\n\t\t\t\tof cells used in the ChIP sample that is used for the\n\t\t\t\tcontrol sample. This value should be between 0 and 1.\n\t\t\t\tSetting this parameter to 1 sets the number of cells\n\t\t\t\tused in the ChIP and control samples to 1. (default:\n\t\t\t\t0.1)\n\t  -b INPUT_BG, --input-bg INPUT_BG\n\t\t\t\tBackground binding energy (in units of k_BT) in the\n\t\t\t\tinput sample of the ChIP-seq experiment. Must be less\n\t\t\t\tthan the unbound energy. A higher value indicates\n\t\t\t\tweaker binding in the input sample. (default: 1.0)\n\t  -n NUM_CELLS, --num-cells NUM_CELLS\n\t\t\t\tNumber of cells used in the ChIP sample of the\n\t\t\t\texperiment. A progressive increase in this value slows\n\t\t\t\tdown the simulation. (default: 100000)\n\t  -d DEPTH, --depth DEPTH\n\t\t\t\tSequencing depth. We define this as the number of\n\t\t\t\treads expected per binding location if an equal number\n\t\t\t\tof reads came from each location. The total number of\n\t\t\t\tsequence reads used is the product of the sequencing\n\t\t\t\tdepth and the number of binding locations. A\n\t\t\t\tfractional value can be passed if the total number of\n\t\t\t\treads is less than the number of binding locations.\n\t\t\t\tThe depth is set to be equal in both ChIP and input\n\t\t\t\tsamples. (default: 100)\n\t  -p PCR_CYCLES, --pcr-cycles PCR_CYCLES\n\t\t\t\tNumber of cycles employed in the PCR amplification\n\t\t\t\tstep. (default: 15)\n\t  -i INPUT_FILE, --input-file INPUT_FILE\n\t\t\t\tFile name of a tab-separated file that contains\n\t\t\t\tlocation-wise information about the genome being\n\t\t\t\tsimulated and the experimental parameters of the ChIP-\n\t\t\t\tseq. Each line contains an entry of the form <p_ext>\n\t\t\t\t<p_amp> <binding_energy_A> <|binding_energy_B|>\n\t\t\t\t<|binding_type|> <|interaction energy|> <|sequence|>\n\t\t\t\t<|chrom_accessibility|>, where the columns enclosed in\n\t\t\t\t|..| are optional. See README for more information on\n\t\t\t\teach column. (default: None)\n\t  --chrom-size-file CHROM_SIZE_FILE\n\t\t\t\tFile containing sizes of each chromosome. This\n\t\t\t\targument is ignored when the chr, start and end\n\t\t\t\tcolumns are not specified in the input file. If these\n\t\t\t\tcolumns are specified, a tab-separated file where the\n\t\t\t\tfirst two columns contain the chromosome name and\n\t\t\t\tsize, respectively, must be supplied. (default: )\n\t  -g GENOME_FILE, --genome-file GENOME_FILE\n\t\t\t\tFile containing a genome sequence in FASTA format. If\n\t\t\t\tFASTA output is requested (by specifying the chr,\n\t\t\t\tstart and end columns in the input file), a single\n\t\t\t\tFASTA file containing the genome sequence must be\n\t\t\t\tspecified. If chr, start and end columns are not\n\t\t\t\tspecified in the input, then this argument is ignored.\n\t\t\t\t(default: )\n\t  -o OUTPUT_PREFIX, --output-prefix OUTPUT_PREFIX\n\t\t\t\tPrefix of the output file. The\\ output is a tab\n\t\t\t\tseparated file that lists the following\\ columns ---\n\t\t\t\t<chip_reads> <unique_chip_reads> <control_reads>\\\n\t\t\t\t<unique_control_reads>. See README for more\n\t\t\t\tinformation on\\ each column. (default: None)\n\t  --output-dir OUTPUT_DIR\n\t\t\t\tDirectory to which all output should be written.\n\t\t\t\tEnsure that you have write privileges to this\n\t\t\t\tdirectory. (default: None)\n\t  --read-length READ_LENGTH\n\t\t\t\tRead length (in base pairs) to simulate. This must be\n\t\t\t\tsmaller than the fragment length(s) specified in the\n\t\t\t\t--fragment-length argument, and is a required argument\n\t\t\t\tif FASTQ output is requested. Only single-end reads\n\t\t\t\tare simulated. (default: 150)\n\t  --fragment-length FRAGMENT_LENGTH\n\t\t\t\tFragment length (in base pairs) to simulate. This must\n\t\t\t\tbe larger than the read length specified for --read-\n\t\t\t\tlength. (default: 200)\n\t  --fragment-jitter FRAGMENT_JITTER\n\t\t\t\tVariation in the starting position of fragments (in\n\t\t\t\tbase pairs) at a genomic region. A larger value leads\n\t\t\t\tto a greater variation in start positions of fragments\n\t\t\t\tin the ChIP sample only. This parameter does not\n\t\t\t\taffect the starting position of fragments in the\n\t\t\t\tcontrol sample. (default: 20)\n\t\t\t\t\n\t  --library-type LIBRARY_TYPE\n\t\t\t\tType of sequencing library. This can be set to either\n\t\t\t\t\"single-end\" or \"paired-end\". If single-end is\n\t\t\t\tspecified, a single BED and FASTQ file is generated\n\t\t\t\tfor ChIP and control samples. If \"paired-end\" is\n\t\t\t\tspecified, paired-end reads are simulated. In this\n\t\t\t\tcase, two sets of BED and FASTQ files are produced for\n\t\t\t\teach of the ChIP and control samples.The BED and FASTQ\n\t\t\t\tfiles containing reads from the forward and reverse\n\t\t\t\tstrands are suffixed with _R1 and _R2, respectively.\n\t\t\t\t(default: single-end)\n\t\t\t\t\n\t"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Main output",
        "parent_header": [
          "ChIPulate",
          "Running the examples",
          "Minimum working example"
        ],
        "type": "Text_excerpt",
        "value": "In a run of the command ```python3 chipulate.py -i basicExample.tsv```, the contents of ```basicExample.chipulate.out``` are ---\n\n\tp_ext\tp_amp\tenergy_A\tchip_reads\tunique_chip_reads\tcontrol_reads\tunique_control_reads\n\t0.539179\t0.18\t0.15\t0\t0\t0\t0\n\t0.505944\t0.58\t0.15\t84\t70\t82\t66\n\t0.498672\t0.58\t0.41\t84\t66\t98\t81\n\t0.479857\t0.79\t0.15\t481\t185\t487\t187\n\t0.494356\t0.58\t0.15\t73\t57\t76\t65\n\t0.554812\t0.58\t0.15\t71\t58\t77\t69\n\t0.545281\t0.38\t0.41\t11\t11\t6\t6\n\t0.49219700000000005\t0.58\t0.41\t81\t66\t75\t64\n\t0.5036510000000001\t0.58\t0.41\t109\t80\t93\t71\n\t0.578344\t0.28\t0.15\t6\t5\t6\t6\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": ".run_info output",
        "parent_header": [
          "ChIPulate",
          "Running the examples",
          "Minimum working example"
        ],
        "type": "Text_excerpt",
        "value": "The information on the parameters used to generate this output are in ```basicExample.chipulate.out.run_info``` ---\n\n\tNumber of cells in ChIP sample : 100000\n\tControl cell ratio : 0.1\n\tNumber of cells in control sample : 10000\n\tChemical Potential of A : 3.0\n\tNumber of PCR cycles : 15\n\tSequencing depth : 100\n\tTotal read count : 1000\n\t"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": ".diag_output diagnostic output",
        "parent_header": [
          "ChIPulate",
          "Running the examples",
          "Minimum working example"
        ],
        "type": "Text_excerpt",
        "value": "The diagnostic output generated is in ```basicExample.chipulate.out.diag_output``` ---\n\n\tname\tenergy_A\tbinding\tsequence\tp_occ_chip\tp_occ_bg\tchip_fragments\tcontrol_fragments\tunique_control_reads\tcontrol_reads\tunique_chip_reads\tchip_reads\tamp_control_fragments\tamp_chip_fragments\text_control_fragments\text_chip_fragments\tread_count_ratio\n\t1\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94473\t497\t0\t0\t0\t0\t3396\t2674\t284\t239\t\n\t2\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94503\t478\t66\t82\t70\t84\t234729\t204422\t245\t222\t1.0606060606060606\n\t3\t0.41\tdirect\t\t0.9302152171234199\t0.04742587317756678\t93037\t463\t81\t98\t66\t84\t238212\t227874\t243\t233\t0.8148148148148148\n\t4\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94359\t455\t187\t487\t185\t481\t1298190\t1352338\t211\t217\t0.9893048128342246\n\t5\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94461\t465\t65\t76\t57\t73\t215390\t214698\t235\t224\t0.8769230769230769\n\t6\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94465\t461\t69\t77\t58\t71\t239417\t251417\t257\t240\t0.8405797101449275\n\t7\t0.41\tdirect\t\t0.9302152171234199\t0.04742587317756678\t93046\t472\t6\t6\t11\t11\t31739\t35954\t248\t265\t1.8333333333333333\n\t8\t0.41\tdirect\t\t0.9302152171234199\t0.04742587317756678\t93064\t456\t64\t75\t66\t81\t206097\t221844\t220\t227\t1.03125\n\t9\t0.41\tdirect\t\t0.9302152171234199\t0.04742587317756678\t93089\t456\t71\t93\t80\t109\t209127\t273018\t221\t260\t1.1267605633802817\n\t10\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94540\t500\t6\t6\t5\t6\t11240\t11229\t279\t285\t0.8333333333333334\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running ChIPulate with command-line parameters different from the default values",
        "parent_header": [
          "ChIPulate",
          "Running the examples"
        ],
        "type": "Text_excerpt",
        "value": "The sequencing depth, chemical potential, number of cells used in the control sample, and the number of PCR cycles can be changed from the command line. The remaining experimental parameters such as extraction efficiency, amplification efficiency need to be changed in the input file. \n\nThe following command runs the file ```basicExample.tsv``` with different parameters and the output prefix set to a user-defined value ---\n\n\tpython3 chipulate.py -i examples/basicExample.tsv --mu-A 1.5 --depth 300 --num-cells 10000 --control-cell-fraction 0.4 -o examples/mwe\n\t\nThe main output is now written to ```examples/mwe.chipulate.out``` ---\n\n\tp_ext\tp_amp\tenergy_A\tchip_reads\tunique_chip_reads\tcontrol_reads\tunique_control_reads\n\t0.539179\t0.18\t0.15\t2\t2\t1\t1\n\t0.505944\t0.58\t0.15\t207\t64\t240\t84\n\t0.498672\t0.58\t0.41\t301\t82\t247\t83\n\t0.479857\t0.79\t0.15\t1368\t69\t1513\t91\n\t0.494356\t0.58\t0.15\t221\t71\t211\t65\n\t0.554812\t0.58\t0.15\t264\t85\t234\t80\n\t0.545281\t0.38\t0.41\t40\t28\t39\t31\n\t0.49219700000000005\t0.58\t0.41\t261\t84\t240\t84\n\t0.5036510000000001\t0.58\t0.41\t329\t91\t260\t79\n\t0.578344\t0.28\t0.15\t7\t7\t15\t13\n\t\nThe file ```examples/mwe.chipulate.run_info``` shows the modified parameters ---\n\n\tNumber of cells in ChIP sample : 10000\n\tControl cell ratio : 0.4\n\tNumber of cells in control sample : 4000\n\tChemical Potential of A : 1.5\n\tNumber of PCR cycles : 15\n\tSequencing depth : 300.0\n\tTotal read count : 3000.0\n\t\nThe diagnostic output is written to ```examples/mwe.chipulate.diag_output``` ---\n\n\tname\tenergy_A\tbinding\tsequence\tp_occ_chip\tp_occ_bg\tchip_fragments\tcontrol_fragments\tunique_control_reads\tcontrol_reads\tunique_chip_reads\tchip_reads\tamp_control_fragments\tamp_chip_fragments\text_control_fragments\text_chip_fragments\tread_count_ratio\n\t1\t0.15\tdirect\t\t0.7941296281990528\t0.04742587317756678\t7964\t169\t1\t1\t2\t2\t1096\t1431\t90\t102\t2.0\n\t2\t0.15\tdirect\t\t0.7941296281990528\t0.04742587317756678\t7959\t172\t84\t240\t64\t207\t95250\t65008\t98\t77\t0.7619047619047619\n\t3\t0.41\tdirect\t\t0.7483817216070642\t0.04742587317756678\t7487\t181\t83\t247\t82\t301\t88268\t84959\t93\t94\t0.9879518072289156\n\t4\t0.15\tdirect\t\t0.7941296281990528\t0.04742587317756678\t7983\t184\t91\t1513\t69\t1368\t546708\t436389\t92\t69\t0.7582417582417582\n\t5\t0.15\tdirect\t\t0.7941296281990528\t0.04742587317756678\t7907\t163\t65\t211\t71\t221\t64847\t73790\t71\t79\t1.0923076923076922\n\t6\t0.15\tdirect\t\t0.7941296281990528\t0.04742587317756678\t7980\t184\t80\t234\t85\t264\t88031\t90382\t102\t101\t1.0625\n\t7\t0.41\tdirect\t\t0.7483817216070642\t0.04742587317756678\t7451\t193\t31\t39\t28\t40\t13153\t10078\t100\t82\t0.9032258064516129\n\t8\t0.41\tdirect\t\t0.7483817216070642\t0.04742587317756678\t7478\t199\t84\t240\t84\t261\t97850\t88916\t98\t95\t1.0\n\t9\t0.41\tdirect\t\t0.7483817216070642\t0.04742587317756678\t7551\t187\t79\t260\t91\t329\t88385\t103121\t93\t106\t1.1518987341772151\n\t10\t0.15\tdirect\t\t0.7941296281990528\t0.04742587317756678\t7963\t191\t13\t15\t7\t7\t4572\t3334\t102\t84\t0.5384615384615384\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running ChIPulate with indirect binding between two transcription factors",
        "parent_header": [
          "ChIPulate",
          "Running the examples"
        ],
        "type": "Text_excerpt",
        "value": "When indirect binding between two TFs is to be simulated, the ```binding_type```, ```energy_B``` and ```int_energy``` columns need to be specified. See ```examples/indirectExample.tsv``` for an example. Its contents are pasted below ---\n\n\tp_ext\tp_amp\tenergy_A\tbinding_type\tenergy_B\tint_energy\n\t0.539179\t0.18\t2.15\tdirect\t0.20\t0\n\t0.505944\t0.58\t1.85\tdirect\t0.20\t0\n\t0.498672\t0.58\t3.41\tdirect\t0.31\t0\n\t0.479857\t0\t9.79\tdirect\t2\t0\n\t0.494356\t0.58\t6.15\tdirect\t0\t0\n\t0.554812\t0.58\t5.15\tdirect\t0.20\t0\n\t0.545281\t0.38\t2.15\tindirect\t0\t0\n\t0.492197\t0.58\t1.85\tindirect\t0\t0\n\t0.503651\t0.58\t3.41\tindirect\t0\t0\n\t0.578344\t0.28\t9.79\tindirect\t0\t0\n\t0.578344\t0.28\t5.15\tindirect\t0\t0\n\t0.578344\t0.28\t2.15\tindirect\t0\t0\n\nAfter running ChIPulate with the command ```python3 chipulate.py -i examples/indirectExample.tsv -o examples/indirectExample```, the output is written to ```indirectExample.chipulate.out``` ---\n\n\tp_ext\tp_amp\tenergy_A\tbinding_type\tenergy_B\tint_energy\tchip_reads\tunique_chip_reads\tcontrol_reads\tunique_control_reads\n\t0.539179\t0.18\t2.15\tdirect\t0.2\t0\t3\t3\t1\t1\n\t0.505944\t0.58\t1.85\tdirect\t0.2\t0\t266\t167\t197\t123\n\t0.498672\t0.58\t3.41\tdirect\t0.31\t0\t143\t84\t167\t110\n\t0.479857\t0.0\t9.79\tdirect\t2.0\t0\t0\t0\t0\t0\n\t0.494356\t0.58\t6.15\tdirect\t0.0\t0\t14\t11\t169\t109\n\t0.554812\t0.58\t5.15\tdirect\t0.2\t0\t35\t21\t231\t155\n\t0.545281\t0.38\t2.15\tindirect\t0.0\t0\t35\t32\t25\t25\n\t0.49219700000000005\t0.58\t1.85\tindirect\t0.0\t0\t316\t186\t190\t129\n\t0.5036510000000001\t0.58\t3.41\tindirect\t0.0\t0\t319\t197\t194\t114\n\t0.578344\t0.28\t9.79\tindirect\t0.0\t0\t17\t16\t10\t10\n\t0.578344\t0.28\t5.15\tindirect\t0.0\t0\t30\t29\t10\t10\n\t0.578344\t0.28\t2.15\tindirect\t0.0\t0\t22\t21\t6\t6\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulating cooperative and competitive binding with ChIPulate, along with sequences at each location",
        "parent_header": [
          "ChIPulate",
          "Running the examples"
        ],
        "type": "Text_excerpt",
        "value": "In the example for indirect binding, all the interaction energies between both transcription factors are set to zero. To simulate cooperative or competitive binding, the interaction energies can be set to negative or positive values, respectively. The file ```coopExample.tsv``` below shows an example of this, along with sequences to be associated with each location. \n\n\tp_ext\tp_amp\tenergy_A\tsequence\tbinding_type\tenergy_B\tint_energy\n\t0.539179\t0.18\t0.15\tGTCACGTGAT\tdirect\t0.20\t-2\n\t0.505944\t0.58\t0.15\tGTCACGTGAT\tdirect\t0.20\t-2\n\t0.498672\t0.58\t0.41\tATCAGGTTAGCAGAT\tdirect\t0.31\t-2\n\t0.479857\t0.79\t0.15\tGTCACGTATAAGAT\tdirect\t0\t0\n\t0.494356\t0.58\t0.15\tGTCAtaaataCGTGAT\tdirect\t0\t-1\n\t0.554812\t0.58\t0.15\tGTCAgacaCGTGAT\tdirect\t0.20\t3\n\t0.545281\t0.38\t0.41\tATCAGGTGAT\tdirect\t0.20\t2\n\t0.492197\t0.58\t0.41\tATCAGGTGAT\tdirect\t0.59\t-1\n\t0.503651\t0.58\t0.41\tATCAGGTGAT\tdirect\t0\t0\n\t0.578344\t0.28\t0.15\tGTCACGTGAT\tdirect\t0.20\t0\n\nWhen the command ```python3 chipulate.py -i examples/coopExample.tsv --output-dir examples --output-prefix coopExample``` is run, the output is written to ```examples/coopExample.chipulate.out```\n\n\tp_ext\tp_amp\tenergy_A\tsequence\tbinding_type\tenergy_B\tint_energy\tchip_reads\tunique_chip_reads\tcontrol_reads\tunique_control_reads\n\t0.539179\t0.18\t0.15\tGTCACGTGAT\tdirect\t0.2\t-2\t1\t1\t1\t1\n\t0.505944\t0.58\t0.15\tGTCACGTGAT\tdirect\t0.2\t-2\t81\t67\t81\t67\n\t0.498672\t0.58\t0.41\tATCAGGTTAGCAGAT\tdirect\t0.31\t-2\t78\t62\t69\t60\n\t0.479857\t0.79\t0.15\tGTCACGTATAAGAT\tdirect\t0.0\t0\t524\t204\t504\t196\n\t0.494356\t0.58\t0.15\tGTCAtaaataCGTGAT\tdirect\t0.0\t-1\t60\t50\t77\t61\n\t0.554812\t0.58\t0.15\tGTCAgacaCGTGAT\tdirect\t0.2\t3\t100\t79\t98\t80\n\t0.545281\t0.38\t0.41\tATCAGGTGAT\tdirect\t0.2\t2\t11\t11\t9\t9\n\t0.49219700000000005\t0.58\t0.41\tATCAGGTGAT\tdirect\t0.59\t-1\t63\t56\t83\t70\n\t0.5036510000000001\t0.58\t0.41\tATCAGGTGAT\tdirect\t0.0\t0\t78\t63\t71\t54\n\t0.578344\t0.28\t0.15\tGTCACGTGAT\tdirect\t0.2\t0\t4\t4\t7\t7\n\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Paired-end mode",
        "parent_header": [
          "ChIPulate",
          "Running ChIPulate to generate FASTQ files from genomic regions"
        ],
        "type": "Text_excerpt",
        "value": "Specifying `--libraryType paired-end` allows ChIPulate to output paired-end reads ---\n\n\tpython3 chipulate.py --input-file examples/fastq-basicExample.tsv --genome-file examples/yeast-genome.fa --chrom-size-file examples/yeast-genome.fa.fai --output-dir examples/\n\nIn this case, two sets of BED and FASTQ files are generated for the ChIP and control samples. Reads mapping to the forward strands are stored in files suffixed with `_R1` and those mapping to the reverse strand are stored in files suffixed with `_R2`. The above command creates four BED files and four FASTQ files in the`examples/` folder with the filename prefixes as  `fastq-test.chip_reads_R1.bed`,`fastq-test.chip_reads_R2`, `fastq-test.control_reads_R1`, `fastq-test.control_reads_R2`. The read names in the `_R1` file end in `/1` and the read from the other end of the fragment ends in `/2`. An example is shown below from `fastq-test.chip_reads_R1.fastq` and `fastq-test.chip_reads_R2.fastq` ---\n\nThe first five reads in `fast-test.chip_reads_R1.fastq` are\n\n\t@region_2_read_1/1\n\tCAAATGCACTAATATTGTAACGTTCTTACAAAGGGCAGACAACTTGAGAACTTTCATGCGTGCAACAGTATTAATATTTTACTGTCTTGATATCGTTATCCTCATCGTAACGTGAATTTTTTTGTCTCATACGTTAAGGTAAATTTTGAT\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_2/1\n\tTATTATGTGGCCGAATCAACATTAATCAAATGCACTAATATTGTAACGTTCTTACAAAGGGCAGACAACTTGAGAACTTTCATGCGTGCAACAGTATTAATATTTTACTGTCTTGATATCGTTATCCTCATCGTAACGTGAATTTTTTTG\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_3/1\n\tTGTGGCCGAATCAACATTAATCAAATGCACTAATATTGTAACGTTCTTACAAAGGGCAGACAACTTGAGAACTTTCATGCGTGCAACAGTATTAATATTTTACTGTCTTGATATCGTTATCCTCATCGTAACGTGAATTTTTTTGTCTCA\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_4/1\n\tTTATTATGTGGCCGAATCAACATTAATCAAATGCACTAATATTGTAACGTTCTTACAAAGGGCAGACAACTTGAGAACTTTCATGCGTGCAACAGTATTAATATTTTACTGTCTTGATATCGTTATCCTCATCGTAACGTGAATTTTTTT\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_5/1\n\tAACTTTATTATGTGGCCGAATCAACATTAATCAAATGCACTAATATTGTAACGTTCTTACAAAGGGCAGACAACTTGAGAACTTTCATGCGTGCAACAGTATTAATATTTTACTGTCTTGATATCGTTATCCTCATCGTAACGTGAATTT\n\t+\n\nThe corresponding reads from the reverse strand, stored in `fastq-test.chip_reads_R2.fastq` are \n\n\t@region_2_read_1/2\n\tACAATAAAAGGGTGCTTTATACAGTAAGGCAAACAAGGACAACGGGGGTCATCAAAATTTACCTTAACGTATGAGACAAAAAAATTCACGTTACGATGAGGATAACGATATCAAGACAGTAAAATATTAATACTGTTGCACGCATGAAAG\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_2/2\n\tAGGCAAACAAGGACAACGGGGGTCATCAAAATTTACCTTAACGTATGAGACAAAAAAATTCACGTTACGATGAGGATAACGATATCAAGACAGTAAAATATTAATACTGTTGCACGCATGAAAGTTCTCAAGTTGTCTGCCCTTTGTAAG\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_3/2\n\tCAGTAAGGCAAACAAGGACAACGGGGGTCATCAAAATTTACCTTAACGTATGAGACAAAAAAATTCACGTTACGATGAGGATAACGATATCAAGACAGTAAAATATTAATACTGTTGCACGCATGAAAGTTCTCAAGTTGTCTGCCCTTT\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_4/2\n\tGGCAAACAAGGACAACGGGGGTCATCAAAATTTACCTTAACGTATGAGACAAAAAAATTCACGTTACGATGAGGATAACGATATCAAGACAGTAAAATATTAATACTGTTGCACGCATGAAAGTTCTCAAGTTGTCTGCCCTTTGTAAGA\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_5/2\n\tAACAAGGACAACGGGGGTCATCAAAATTTACCTTAACGTATGAGACAAAAAAATTCACGTTACGATGAGGATAACGATATCAAGACAGTAAAATATTAATACTGTTGCACGCATGAAAGTTCTCAAGTTGTCTGCCCTTTGTAAGAACGT\n\t+\n\nThe reads in the `_R1` and `_R2` files are designed to map in the `FR` orientation, with a fixed insert size that is equal to the fragment length specified by the `--fragment-length` parameter. The IGV snapshot below was obtained from running ChIPulate with a read length of 50 bp in paired end mode, where the fragment length is left at the default value of 200 bp ---\n\n\tpython3 chipulate.py --input-file examples/fastq-basicExample.tsv --genome-file examples/yeast-genome.fa --chrom-size-file examples/yeast-genome.fa.fai --output-dir examples/ --library-type paired-end --read-length 50\n\n![IGV snapshot of region_7 with paired end reads of 50 bp length](examples/igv_region_7_snapshot_paired_50bp.png)\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Specifying summit coordinates in input file",
        "parent_header": [
          "ChIPulate",
          "Running ChIPulate to generate FASTQ files from genomic regions"
        ],
        "type": "Text_excerpt",
        "value": "In the basic example above, the summit of each peak region passed into ChIPulate is assumed to be the midpoint between the `start` and `end` coordinate of each region. ChIPulate considers the summit to be the location at which a binding event has occurred, and thus assumes that the mid-points of fragments in the ChIP sample are centered at the summit. \n\nIf a `summit` column is specified in the input file, where the summit position is defined with respect to the `start` position of each genomic region, then ChIPulate will use this column as the location of the TF-DNA binding event in each region. The following is a way of specifying the summits for each region ---\n\n\tchr\tstart\tend\tsummit\tp_ext\tp_amp\tenergy_A\n\tchr1\t1523\t1773\t74\t0.539179\t0.18\t0.15\n\tchr1\t5612\t5862\t103\t0.505944\t0.58\t0.15\n\tchr1\t11241\t11491\t100\t0.498672\t0.58\t0.41\n\tchr1\t11620\t11870\t43\t0.479857\t0.79\t0.15\n\tchr1\t20066\t20316\t18\t0.494356\t0.58\t1.15\n\tchr1\t22716\t22966\t127\t0.554812\t0.58\t0.15\n\tchr1\t35534\t35784\t87\t0.545281\t0.38\t0.41\n\tchr1\t48914\t49164\t17\t0.492197\t0.58\t9.41\n\tchr1\t92766\t93016\t175\t0.503651\t0.58\t0.41\n\tchr1\t156041\t156241\t120\t0.578344\t0.28\t0.15\n\nThe summit in the first region is thus `74` bp inside the region `chr1:1524-1773` and is thus located at `chr1:1598`.\n\nA ChIP-seq peak with multiple binding events and thus, multiple summits, can be simulated by providing multiple entries in the input file that share the same `(chr,start,end)` coordinates but possess different summits --- \n\n\tchr\tstart\tend\tsummit\tp_ext\tp_amp\tenergy_A\n\tchr1\t1523\t1773\t74\t0.539179\t0.18\t0.15\n\tchr1\t5612\t5862\t103\t0.505944\t0.58\t0.15\n\tchr1\t11241\t11491\t100\t0.498672\t0.58\t0.41\n\tchr1\t11620\t11870\t43\t0.479857\t0.79\t0.15\n\tchr1\t20066\t20316\t18\t0.494356\t0.58\t1.15\n\tchr1\t20066\t20316\t58\t0.494356\t0.58\t2.90\n\tchr1\t20066\t20316\t123\t0.494356\t0.58\t1.55\n\tchr1\t22716\t22966\t127\t0.554812\t0.58\t0.15\n\tchr1\t35534\t35784\t87\t0.545281\t0.38\t0.41\n\tchr1\t48914\t49164\t17\t0.492197\t0.58\t9.41\n\tchr1\t92766\t93016\t175\t0.503651\t0.58\t0.41\n\tchr1\t156041\t156241\t120\t0.578344\t0.28\t0.15\n\nIn the example above, the peak `chr1:20066-20316` contains three summits at positions `18,58` and `123`. Note that the binding energies and other parameters can differ between these entries. \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Specifying region names",
        "parent_header": [
          "ChIPulate",
          "Running ChIPulate to generate FASTQ files from genomic regions"
        ],
        "type": "Text_excerpt",
        "value": "If no `name` column is specified in the input file, ChIPulate will refer to each location as `region_1`,`region_2`,... . A `name` column can be specified as below ---\n\n\tchr\tstart\tend\tname\tsummit\tp_ext\tp_amp\tenergy_A\n\tchr1\t1523\t1773\tpeak_1\t74\t0.539179\t0.18\t0.15\n\tchr1\t5612\t5862\tpeak_100\t103\t0.505944\t0.58\t0.15\n\tchr1\t11241\t11491\tpeak_50\t100\t0.498672\t0.58\t0.41\n\tchr1\t11620\t11870\tpeak_20\t43\t0.479857\t0.79\t0.15\n\tchr1\t20066\t20316\tpeak_21\t18\t0.494356\t0.58\t1.15\n\tchr1\t20066\t20316\tpeak_21_summit_2\t58\t0.494356\t0.58\t2.90\n\tchr1\t20066\t20316\tpeak_21_diffmotif\t123\t0.494356\t0.58\t1.55\n\tchr1\t22716\t22966\tfalse_pos_1 127\t0.554812\t0.58\t0.15\n\tchr1\t35534\t35784\tfalse_pos_2 87\t0.545281\t0.38\t0.41\n\tchr1\t48914\t49164\thotspot_3\t17\t0.492197\t0.58\t9.41\n\tchr1\t92766\t93016\thotspot_15\t175\t0.503651\t0.58\t0.41\n\tchr1\t156041\t156241\tpeak_121\t120\t0.578344\t0.28\t0.15\n\nThe name supplied to each region need not be unique and this will not cause any error in the ChIPulate output. However, this may make it more difficult to mark duplicate reads based on the name of the read. For this reason, it is recommended that the `name` column contain unique entries, or is left blank unless needed. \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:06:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "ChIPulate"
        ],
        "type": "Text_excerpt",
        "value": "ChIPulate requires the following Python3 libraries installed --- ```argparse```,```numpy```,```scipy```, ```pybedtools``` and ```pandas```. ChIPulate has been tested to work with these versions of these libraries ---\n    argparse : `1.1`\n    numpy : `1.15.2`\n    scipy : `1.1.0`\n    pandas : `0.23.4`\n    pybedtools : `0.8.0`\n    \nThese packages can be installed using the Python3 ```pip``` installer with the command ```pip3 install <package>```. In addition, `pybedtools` needs `bedtools` to be pre-installed on the system in order to run. \n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Minimum working example",
        "parent_header": [
          "ChIPulate",
          "Running the examples"
        ],
        "type": "Text_excerpt",
        "value": "The file ```basicExample.tsv``` in the ```examples``` folder is the minimum working input required to run ```chipulate.py```. The contents of the file are the following (10 locations are being simulated in this example) ---\n\n\tp_ext\tp_amp\tenergy_A\n\t0.539179\t0.18\t0.15\n\t0.505944\t0.58\t0.15\n\t0.498672\t0.58\t0.41\n\t0.479857\t0.79\t0.15\n\t0.494356\t0.58\t0.15\n\t0.554812\t0.58\t0.15\n\t0.545281\t0.38\t0.41\n\t0.492197\t0.58\t0.41\n\t0.503651\t0.58\t0.41\n\t0.578344\t0.28\t0.15\n\nTo execute ```chipulate.py``` on this file with the remaining parameters set to their default values, run the following command ---\n\n\tpython3 chipulate.py -i basicExample.tsv\n\t\nNo output file is specified in the above syntax. When this is the case, the input file name is used as a prefix to generate the  three output files described above. In this case, the files are named ```basicExample.chipulate.out``` (the main output file), ```basicExample.chipulate.out.diag_output``` (contains intermediate output from ChIPulate along with the output from the main output file) and ```basicExample.chipulate.run_info``` (contains run information about the parameters of the simulation). \n\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Main output",
        "parent_header": [
          "ChIPulate",
          "Running the examples",
          "Minimum working example"
        ],
        "type": "Text_excerpt",
        "value": "In a run of the command ```python3 chipulate.py -i basicExample.tsv```, the contents of ```basicExample.chipulate.out``` are ---\n\n\tp_ext\tp_amp\tenergy_A\tchip_reads\tunique_chip_reads\tcontrol_reads\tunique_control_reads\n\t0.539179\t0.18\t0.15\t0\t0\t0\t0\n\t0.505944\t0.58\t0.15\t84\t70\t82\t66\n\t0.498672\t0.58\t0.41\t84\t66\t98\t81\n\t0.479857\t0.79\t0.15\t481\t185\t487\t187\n\t0.494356\t0.58\t0.15\t73\t57\t76\t65\n\t0.554812\t0.58\t0.15\t71\t58\t77\t69\n\t0.545281\t0.38\t0.41\t11\t11\t6\t6\n\t0.49219700000000005\t0.58\t0.41\t81\t66\t75\t64\n\t0.5036510000000001\t0.58\t0.41\t109\t80\t93\t71\n\t0.578344\t0.28\t0.15\t6\t5\t6\t6\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": ".run_info output",
        "parent_header": [
          "ChIPulate",
          "Running the examples",
          "Minimum working example"
        ],
        "type": "Text_excerpt",
        "value": "The information on the parameters used to generate this output are in ```basicExample.chipulate.out.run_info``` ---\n\n\tNumber of cells in ChIP sample : 100000\n\tControl cell ratio : 0.1\n\tNumber of cells in control sample : 10000\n\tChemical Potential of A : 3.0\n\tNumber of PCR cycles : 15\n\tSequencing depth : 100\n\tTotal read count : 1000\n\t"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": ".diag_output diagnostic output",
        "parent_header": [
          "ChIPulate",
          "Running the examples",
          "Minimum working example"
        ],
        "type": "Text_excerpt",
        "value": "The diagnostic output generated is in ```basicExample.chipulate.out.diag_output``` ---\n\n\tname\tenergy_A\tbinding\tsequence\tp_occ_chip\tp_occ_bg\tchip_fragments\tcontrol_fragments\tunique_control_reads\tcontrol_reads\tunique_chip_reads\tchip_reads\tamp_control_fragments\tamp_chip_fragments\text_control_fragments\text_chip_fragments\tread_count_ratio\n\t1\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94473\t497\t0\t0\t0\t0\t3396\t2674\t284\t239\t\n\t2\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94503\t478\t66\t82\t70\t84\t234729\t204422\t245\t222\t1.0606060606060606\n\t3\t0.41\tdirect\t\t0.9302152171234199\t0.04742587317756678\t93037\t463\t81\t98\t66\t84\t238212\t227874\t243\t233\t0.8148148148148148\n\t4\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94359\t455\t187\t487\t185\t481\t1298190\t1352338\t211\t217\t0.9893048128342246\n\t5\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94461\t465\t65\t76\t57\t73\t215390\t214698\t235\t224\t0.8769230769230769\n\t6\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94465\t461\t69\t77\t58\t71\t239417\t251417\t257\t240\t0.8405797101449275\n\t7\t0.41\tdirect\t\t0.9302152171234199\t0.04742587317756678\t93046\t472\t6\t6\t11\t11\t31739\t35954\t248\t265\t1.8333333333333333\n\t8\t0.41\tdirect\t\t0.9302152171234199\t0.04742587317756678\t93064\t456\t64\t75\t66\t81\t206097\t221844\t220\t227\t1.03125\n\t9\t0.41\tdirect\t\t0.9302152171234199\t0.04742587317756678\t93089\t456\t71\t93\t80\t109\t209127\t273018\t221\t260\t1.1267605633802817\n\t10\t0.15\tdirect\t\t0.9453186827840592\t0.04742587317756678\t94540\t500\t6\t6\t5\t6\t11240\t11229\t279\t285\t0.8333333333333334\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulating cooperative and competitive binding with ChIPulate, along with sequences at each location",
        "parent_header": [
          "ChIPulate",
          "Running the examples"
        ],
        "type": "Text_excerpt",
        "value": "In the example for indirect binding, all the interaction energies between both transcription factors are set to zero. To simulate cooperative or competitive binding, the interaction energies can be set to negative or positive values, respectively. The file ```coopExample.tsv``` below shows an example of this, along with sequences to be associated with each location. \n\n\tp_ext\tp_amp\tenergy_A\tsequence\tbinding_type\tenergy_B\tint_energy\n\t0.539179\t0.18\t0.15\tGTCACGTGAT\tdirect\t0.20\t-2\n\t0.505944\t0.58\t0.15\tGTCACGTGAT\tdirect\t0.20\t-2\n\t0.498672\t0.58\t0.41\tATCAGGTTAGCAGAT\tdirect\t0.31\t-2\n\t0.479857\t0.79\t0.15\tGTCACGTATAAGAT\tdirect\t0\t0\n\t0.494356\t0.58\t0.15\tGTCAtaaataCGTGAT\tdirect\t0\t-1\n\t0.554812\t0.58\t0.15\tGTCAgacaCGTGAT\tdirect\t0.20\t3\n\t0.545281\t0.38\t0.41\tATCAGGTGAT\tdirect\t0.20\t2\n\t0.492197\t0.58\t0.41\tATCAGGTGAT\tdirect\t0.59\t-1\n\t0.503651\t0.58\t0.41\tATCAGGTGAT\tdirect\t0\t0\n\t0.578344\t0.28\t0.15\tGTCACGTGAT\tdirect\t0.20\t0\n\nWhen the command ```python3 chipulate.py -i examples/coopExample.tsv --output-dir examples --output-prefix coopExample``` is run, the output is written to ```examples/coopExample.chipulate.out```\n\n\tp_ext\tp_amp\tenergy_A\tsequence\tbinding_type\tenergy_B\tint_energy\tchip_reads\tunique_chip_reads\tcontrol_reads\tunique_control_reads\n\t0.539179\t0.18\t0.15\tGTCACGTGAT\tdirect\t0.2\t-2\t1\t1\t1\t1\n\t0.505944\t0.58\t0.15\tGTCACGTGAT\tdirect\t0.2\t-2\t81\t67\t81\t67\n\t0.498672\t0.58\t0.41\tATCAGGTTAGCAGAT\tdirect\t0.31\t-2\t78\t62\t69\t60\n\t0.479857\t0.79\t0.15\tGTCACGTATAAGAT\tdirect\t0.0\t0\t524\t204\t504\t196\n\t0.494356\t0.58\t0.15\tGTCAtaaataCGTGAT\tdirect\t0.0\t-1\t60\t50\t77\t61\n\t0.554812\t0.58\t0.15\tGTCAgacaCGTGAT\tdirect\t0.2\t3\t100\t79\t98\t80\n\t0.545281\t0.38\t0.41\tATCAGGTGAT\tdirect\t0.2\t2\t11\t11\t9\t9\n\t0.49219700000000005\t0.58\t0.41\tATCAGGTGAT\tdirect\t0.59\t-1\t63\t56\t83\t70\n\t0.5036510000000001\t0.58\t0.41\tATCAGGTGAT\tdirect\t0.0\t0\t78\t63\t71\t54\n\t0.578344\t0.28\t0.15\tGTCACGTGAT\tdirect\t0.2\t0\t4\t4\t7\t7\n\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic example (single-end reads)",
        "parent_header": [
          "ChIPulate",
          "Running ChIPulate to generate FASTQ files from genomic regions"
        ],
        "type": "Text_excerpt",
        "value": "In order to run ChIPulate in FASTQ generation mode, genomic intervals need to be specified for each entry in the input file. An example of this is the `examples/fastq-basicExample.tsv` file shown below---\n\n\tchr\tstart\tend\tp_ext\tp_amp\tenergy_A\n\tchr1\t1523\t1773\t0.539179\t0.18\t0.15\n\tchr1\t5612\t5862\t0.505944\t0.58\t0.15\n\tchr1\t11241\t11491\t0.498672\t0.58\t0.41\n\tchr1\t11620\t11870\t0.479857\t0.79\t0.15\n\tchr1\t20066\t20316\t0.494356\t0.58\t1.15\n\tchr1\t22716\t22966\t0.554812\t0.58\t0.15\n\tchr1\t35534\t35784\t0.545281\t0.38\t0.41\n\tchr1\t48914\t49164\t0.492197\t0.58\t9.41\n\tchr1\t92766\t93016\t0.503651\t0.58\t0.41\n\tchr1\t156041\t156241\t0.578344\t0.28\t0.15\n\t\nIn addition to the `chr`,`start` and `end` positions being supplied for each entry, the `--genome-file` and `--chrom-size-file` arguments must be supplied. The genome file must be a single FASTA file that contains the sequences of all chromosomes in the genome. The second argument should be a tab-separated file containing at least two columns, where the first two columns contain the chromosome name (with the same names as in the FASTA file) and the length of each chromosome. Such a file is commonly generated using the `faidx` command from the `samtools` suite. \n\nIf no `chr`,`start` and `end` columns are supplied in the input file, the `--genome-file`, `--chrom-size-file` and other arguments related to the FASTQ generation mode (namely, `--read-length`, `--fragment-length` and `--fragment-jitter`) will be disregarded, and no `.bed` or `.fastq` files will be output by ChIPulate.\n\nThe following command is a minimum working example of the FASTQ generation mode. The default fragment length used to generate fragments is 200 bp, the default read length is 150 bp and the fragment jitter is 20 bp (explained below). \n\n\tpython3 chipulate.py --input-file examples/fastq-basicExample.tsv --genome-file examples/yeast-genome.fa --chrom-size-file examples/yeast-genome.fa.fai --output-dir examples/\n\t\nTo run this example, ensure that the `yeast-genome.fa.gz` file in the `examples/` folder is extracted. The `yeast-genome.fa.fai` provided in the `examples/` folder was obtained by running the command `samtools faidx yeast-genome.fa`, which gives the following contents---\n\n\tchr1\t230218\t6\t60\t61\n\tchr2\t813184\t234067\t60\t61\n\tchr3\t316620\t1060811\t60\t61\n\tchr4\t1531933\t1382714\t60\t61\n\tchr5\t576874\t2940186\t60\t61\n\tchr6\t270161\t3526681\t60\t61\n\tchr7\t1090940\t3801351\t60\t61\n\tchr8\t562643\t4910480\t60\t61\n\tchr9\t439888\t5482507\t60\t61\n\tchr10\t745751\t5929734\t60\t61\n\tchr11\t666816\t6687922\t60\t61\n\tchr12\t1078177\t7365859\t60\t61\n\tchr13\t924431\t8462013\t60\t61\n\tchr14\t784333\t9401859\t60\t61\n\tchr15\t1091291\t10199272\t60\t61\n\tchr16\t948066\t11308759\t60\t61\n\tchrM\t85779\t12272633\t60\t61\n\nThe first two columns contain the chromosome names and sizes. Note that a file containing only the first two columns will suffice for ChIPulate. Any additional tab-separated columns provided will be ignored.\n\nTwo `.bed` files are output from running the above command --- `fastq-test.chip_reads.bed` and `fastq-test.control_reads.bed`. \nThe first five lines of `fastq-test.chip_reads.bed` generated in a sample run are ---\n\n\tchr1\t5659\t5809\tregion_2_read_1\t1\t+\n\tchr1\t5632\t5782\tregion_2_read_2\t1\t+\n\tchr1\t5713\t5863\tregion_2_read_3\t1\t-\n\tchr1\t5629\t5779\tregion_2_read_4\t1\t-\n\tchr1\t5701\t5851\tregion_2_read_5\t1\t-\n\nThese five lines represent unique single-end reads that are not PCR duplicates. Duplicates reads carry the same name, as shown below for reads from `region_4` ---\n\n\tchr1\t11745\t11895\tregion_4_read_40\t1\t-\n\tchr1\t11745\t11895\tregion_4_read_40\t1\t-\n\nIn addition to these two `.bed` files, two FASTQ files are generated --- `fastq-test.chip_reads.fastq` and `fastq-test.control_reads.fastq`. The first five entries of `fastq-test.chip_reads.fastq` generated in a sample run are ---\n\n\t@region_2_read_1(+)\n\tATCAAATGCACTAATATTGTAACGTTCTTACAAAGGGCAGACAACTTGAGAACTTTCATGCGTGCAACAGTATTAATATTTTACTGTCTTGATATCGTTATCCTCATCGTAACGTGAATTTTTTTGTCTCATACGTTAAGGTAAATTTTG\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_2(+)\n\tCTTTATTATGTGGCCGAATCAACATTAATCAAATGCACTAATATTGTAACGTTCTTACAAAGGGCAGACAACTTGAGAACTTTCATGCGTGCAACAGTATTAATATTTTACTGTCTTGATATCGTTATCCTCATCGTAACGTGAATTTTT\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_3(-)\n\tAAACAATAAAAGGGTGCTTTATACAGTAAGGCAAACAAGGACAACGGGGGTCATCAAAATTTACCTTAACGTATGAGACAAAAAAATTCACGTTACGATGAGGATAACGATATCAAGACAGTAAAATATTAATACTGTTGCACGCATGAA\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_4(-)\n\tAATTCACGTTACGATGAGGATAACGATATCAAGACAGTAAAATATTAATACTGTTGCACGCATGAAAGTTCTCAAGTTGTCTGCCCTTTGTAAGAACGTTACAATATTAGTGCATTTGATTAATGTTGATTCGGCCACATAATAAAGTTT\n\t+\n\tKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\n\t@region_2_read_5(-)\n\tGGTGCTTTATACAGTAAGGCAAACAAGGACAACGGGGGTCATCAAAATTTACCTTAACGTATGAGACAAAAAAATTCACGTTACGATGAGGATAACGATATCAAGACAGTAAAATATTAATACTGTTGCACGCATGAAAGTTCTCAAGTT\n\t+\n\nThe read names correspond to the read names generated in the respective BED files, and indicate the strand orientation (`+/-`) in parentheses. By default, the maximum base quality is set at `K` in the Phred-33 scale. \n\nThe figure below is a snap-shot of reads aligned to `region_7`. To generate this image, reads from both chip and control samples were aligned to the yeast genome (`examples/yeast-genome.fa`) using `bwa`, and the resulting SAM files were converted to BAM, sorted, and indexed, using `samtools`. The sorted BAM files obtained were input to Integrated Genome Viewer (IGV). The reads aligned to `region_7` (the genomic interval `chr1:35534-35784`) in both ChIP and input samples are shown below ---\n\n![IGV snapshot of region_7 when --fragment-jitter is set to 20](examples/igv_region_7_snapshot1.png)\n\nThe read length and fragment length can be altered by specifying the `--read-length` and `--fragment-length` parameter. In the snapshot above, these were both set to their default values (150 bp and 200 bp respectively). The `--fragment-jitter` parameter was set to 20 bp.  An increase in the `--fragment-jitter` parameter \"smears\" out the reads by increasing the variability of the start positions of fragments. To see this, run the following command, where the fragment jitter is set to 50 bp --- \n\n\tpython3 chipulate.py --input-file examples/fastq-basicExample.tsv --genome-file examples/yeast-genome.fa --chrom-size-file examples/yeast-genome.fa.fai --output-dir examples/ --fragment-jitter 50\n\nThe reads obtained from this run are shown in the snapshot below. The increase in the apparent extent of the peak in `region_7` can be clearly seen.\n\n![IGV snapshot of region_7 when --fragment-jitter is set to 50](examples/igv_region_7_snapshot2.png)\n"
      },
      "source": "https://raw.githubusercontent.com/vishakad/chipulate/master/README.md",
      "technique": "header_analysis"
    }
  ]
}