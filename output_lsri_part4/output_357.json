{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sahatava/MixMPLN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-13T15:50:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-30T14:27:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Learning a Mixture of Microbial Networks Using Minorization-Maximization"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.809395081057969,
      "result": {
        "original_header": "1-Prerequisites",
        "type": "Text_excerpt",
        "value": "Following packages must be installed and loaded in R environment before using \"MixMPLN\":\n```\nlibrary(mvtnorm)\nlibrary(Matrix)\nlibrary(matrixcalc)\nlibrary(corpcor)\nlibrary(cvTools)\nlibrary(huge)\nlibrary(edgeR)\nlibrary(factoextra)\nlibrary(igraph)\nlibrary(ROCR)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9986130615590172,
      "result": {
        "original_header": "3-Generating Synthetic data",
        "type": "Text_excerpt",
        "value": "\"MixMPLN\" is able to generate the synthetic matrix which follows the real data features. If you are interested to apply the \"MixMPLN\" on your own data you could skip this part and jump to the next part (4-Extracting K interaction networks). \nOur generated synthetic data consists of K componenets. For each componenet, a random positive definite matrix with specific level of sparsity as a real precision matrix is generated. N generated samples for each componenet follows the MPLN distribution based on the mentioned precision matrix and a random mean vector. Finally, samples from different componets are combined together to generate multi component original count data.\nThe generated original count data follows by multinomial distribution to mimic the sampling process.    \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9703579274410744,
      "result": {
        "original_header": "Arguments",
        "type": "Text_excerpt",
        "value": "```\nK-------> number of components\nN-------> number of samples in each component\nd-------> number of taxa for the synthetic sample-taxa count matrix\nsp------> a value between 0 and 1 (sparsity level)\ntype----> data type: \"orig\" (no sampling applied) , \"samp\" (after sampling) , \"TMM\" (after normalization)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8071417809210825,
      "result": {
        "original_header": "Values",
        "type": "Text_excerpt",
        "value": "```\nout_generate$M -----------------> synthetic sample-taxa count matrix(rows represent samples and columns represent taxa)\nout_generate$real_precision[[i]]-----> i_th real precision matrix \n``` \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9970752436946609,
      "result": {
        "original_header": "4-Extracting K interaction networks",
        "type": "Text_excerpt",
        "value": "MixMPLN is a fuction which accept a sample-taxa matrix as an input to extract K different underlied interarction networks. Please save your data as matrix which its rows represents samples and its columns represents the taxa names. If you are interested in visualising the final graphs, you need to save the taxa names as colnames of this input matrix. \nK( number of components ) is another input for MixMPLN which should be specified by the user.   \nFor initialize the optimization using the Kmeans clustering please specified init=\"Kmeans\" and rep=1. Otherwise, init=\"Random\" and rep can be any integer number. As higher value for rep results in higher running time, we suggest to set it as 3 to trade off between the time and accuracy.  \n##### Usage\n```\nout_MixMPLN = MixMPLN(M , K , penalty , init , rep )\n```\n##### Arguments\nBASH2* \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9920567733805605,
      "result": {
        "original_header": "Publication",
        "type": "Text_excerpt",
        "value": "The \"MixMPLN\" method is explained in following paper:\nSahar Tavakoli and Shibu Yooseph. Learning a mixture of microbial networks using\nminorization-maximization. To appear in Intelligent Systems for Molecular Biology, 2019\nPlease note that in our implementation we have used the \"huge\" package in all the variations. \n \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9956331451987263,
      "result": {
        "type": "Text_excerpt",
        "value": "# MixMPLN\n\"MixMPLN\" is a package written in R, which has two features. First feature is generating a proper synthetic sample-taxa count matrix. Second feature is receiving a sample-taxa count matrix and extracting k(number of components) different interaction networks between taxa. \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sahatava/MixMPLN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sahatava/MixMPLN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sahatava/MixMPLN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9998739740826447,
      "result": {
        "original_header": "1-Prerequisites",
        "type": "Text_excerpt",
        "value": "Following packages must be installed and loaded in R environment before using \"MixMPLN\":\n```\nlibrary(mvtnorm)\nlibrary(Matrix)\nlibrary(matrixcalc)\nlibrary(corpcor)\nlibrary(cvTools)\nlibrary(huge)\nlibrary(edgeR)\nlibrary(factoextra)\nlibrary(igraph)\nlibrary(ROCR)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999165049006123,
      "result": {
        "original_header": "2-Installation",
        "type": "Text_excerpt",
        "value": "After installing the previous prerequisities, please run the following lines to install the \"MixMPLN\"\n```\nlibrary(\"devtools\")\ninstall_github(\"sahatava/MixMPLN\")\nlibrary(\"MixMPLN\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sahatava/MixMPLN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MixMPLN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sahatava"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 35596,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:00:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "4-Extracting K interaction networks"
        ],
        "type": "Text_excerpt",
        "value": "```\nout_generate = generate(K , N , d , sp, type)\n```"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example on synthetic data",
        "parent_header": [
          "6-Example"
        ],
        "type": "Text_excerpt",
        "value": "```\nout_generate = generate(K=2 , N=30 , d=30 , sp=0.8, type=\"orig\")\nout_MixMPLN = MixMPLN( out_generate$M , K=2 , penalty=\"CV\" , init = \"Random\" , rep = 2)\nout = compare(out_generate$real_precision  , out_MixMPLN$precision)\n``` "
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example on real data",
        "parent_header": [
          "6-Example"
        ],
        "type": "Text_excerpt",
        "value": "```\nM=as.matrix(read.csv(\"real_data.csv\",sep=\",\",header=TRUE,row.names=1,check.names=FALSE))\nfviz_nbclust(M , MixMPLN ,\"CV\",k.max, method = c(\"silhouette\"))\nout_MixMPLN = MixMPLN( M , K=2 , penalty=\"CV\", init = \"Random\" , rep = 2)\nvisualize(out_MixMPLN$partial[[1]] , threshold=0.3 )\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sahatava/MixMPLN/master/README.md",
      "technique": "header_analysis"
    }
  ]
}