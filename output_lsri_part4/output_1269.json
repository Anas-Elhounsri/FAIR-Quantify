{
  "application_domain": [
    {
      "confidence": 0.8070459676714336,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference <a name=\"reference\"></a>",
        "parent_header": [
          "VADR - Viral Annotation DefineR <a name=\"top\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "* The recommended citation for using VADR for SARS-CoV-2 analysis:\n  *Eric P Nawrocki; Faster SARS-CoV-2 sequence validation and\n  annotation for GenBank using VADR. NAR Genom Bioinform. 2023 Jan\n  20;5(1)::lqad002. (2023).* https://doi.org/10.1093/nargab/lqad002\n\n* The recommended citation for non-SARS-CoV-2 use of VADR is:\n  *Alejandro A Sch\u00e4ffer, Eneida L Hatcher, Linda Yankie, Lara Shonkwiler,\n  J Rodney Brister, Ilene Karsch-Mizrachi, Eric P Nawrocki; VADR:\n  validation and annotation of virus sequence submissions to\n  GenBank. BMC Bioinformatics 21, 211\n  (2020).* https://doi.org/10.1186/s12859-020-3537-3\n\n---"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ncbi/vadr"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributors <a name=\"contributors\"></a>",
        "parent_header": [
          "VADR - Viral Annotation DefineR <a name=\"top\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "* VADR includes contributions and input from current and former\n  colleagues at NCBI, including:\n\n  Rodney Brister\n  \n  Vince Calhoun\n  \n  Sergiy Gotvyanskyy\n  \n  Eneida Hatcher\n  \n  Sophia Hu\n  \n  Ilene Karsch-Mizrachi\n  \n  Rich McVeigh\n  \n  Susan Schafer\n  \n  Alejandro Sch\u00e4ffer\n  \n  Lara Shonkwiler\n  \n  Beverly Underwood\n  \n  Yuri Wolf\n  \n  Linda Yankie\n\n---"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-08-10T14:36:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-14T16:41:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Viral Annotation DefineR: classification and annotation of viral sequences based on RefSeq annotation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9663102187320882,
      "result": {
        "original_header": "https://github.com/ncbi/vadr.git",
        "type": "Text_excerpt",
        "value": "VADR is a suite of tools for classifying and analyzing sequences\nhomologous to a set of reference models of viral genomes or gene\nfamilies. It has been mainly tested for analysis of Norovirus, Dengue,\nand SARS-CoV-2 virus sequences in preparation for submission to the\nGenBank database. \nThe VADR `v-annotate.pl` script is used to classify a sequence, by\ndetermining which in a set of reference models it is most similar to,\nand then annotate that sequence based on that most similar model.\nExample usage of `v-annotate.pl` can be found\n[here](documentation/annotate.md#top).  Another VADR script,\n`v-build.pl`, is used to create the models from NCBI RefSeq sequences\nor from input multiple sequence alignments, potentially with secondary\nstructure annotation. `v-build.pl` stores the RefSeq feature\nannotation in the model, and `v-annotate.pl` maps that annotation\n(e.g. CDS coordinates) onto the sequences it annotates.   \nVADR includes 205 prebuilt models of *Flaviviridae* and\n*Caliciviridae* viral RefSeq genomes, created with a process similar\nto the one described\n[here](documentation/build.md#1.0library). Example usage of\n`v-build.pl` can be found [here](documentation/build.md#top). An\nadvanced tutorial on building VADR models using RSV as an example can\nbe found [here](documentation/advbuild.md#top). To use `v-annotate.pl`\nwith viruses other than the default set of 205, see ['Available VADR\nmodels'](#models). For instructions on using VADR for SARS-CoV-2\nannotation see [this\npage](https://github.com/ncbi/vadr/wiki/Coronavirus-annotation). \n`v-annotate.pl` identifies unexpected or divergent attributes of the\nsequences it annotates (e.g. invalid or early stop codons in CDS\nfeatures) and reports them to the user in the form of *alerts*.  A\nsubset of alerts are *fatal* and cause a sequence to *fail*. A\nsequence *passes* if zero fatal alerts are reported for it.  VADR is\nused by GenBank staff to evaluate incoming sequence submissions of\nsome viruses (currently Norovirus, Dengue virus, and SARS-CoV-2).\nSubmitted Norovirus, Dengue virus and SARS-CoV-2 sequences that pass\n`v-annotate.pl` are accepted into GenBank. \nThe homology search and alignment components of VADR scripts, the most\ncomputationally expensive steps, are performed by the Infernal, HMMER,\nFASTA, MINIMAP2 and BLAST software packages, which are downloaded and installed\nwith [VADR installation](documentation/install.md#top). \n"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9326114823988507,
      "result": {
        "original_header": "SARS-CoV-2 annotation using VADR",
        "type": "Text_excerpt",
        "value": "The `v-annotate.pl` script includes some special options specifically\ndeveloped for SARS-CoV-2 annotation that increase speed (`-s` and\n`--glsearch` options) and provide better annotation for sequences with\nstretches of Ns (`-r` option). See [this\npage](https://github.com/ncbi/vadr/wiki/Coronavirus-annotation) for\nmore information on using VADR to annotate SARS-CoV-2 sequences. \n"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9301382035268921,
      "result": {
        "original_header": "Available VADR models <a name=\"models\"></a>",
        "type": "Text_excerpt",
        "value": "VADR installation includes a default set of *Caliciviridae* models\nincluding Norovirus virus. The installation also includes a set of\n*Flaviviridae* models including Dengue virus.  You can download\nadditional pre-built models to use to validate and annotate viruses,\nincluding SARS-CoV-2, RSV, or cox1 genes. Importantly, to\nuse a set of models other than the default *Caliciviridae* set, you\nwill need to use either the `--mdir` and `--mkey` options, or the the\n`-m`, `-i`, `-x` and possibly `-n` options as described\n[here](documentation/annotate.md#options). \nSee [this\npage](https://github.com/ncbi/vadr/wiki/Available-VADR-model-files)\nfor a list of all available models and additional information. \n"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "VADR documentation <a name=\"documentation\"></a>",
        "parent_header": [
          "VADR - Viral Annotation DefineR <a name=\"top\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "* [VADR installation instructions](documentation/install.md#top)\n  * [Installation using `vadr-install.sh`](documentation/install.md#install)\n  * [Setting environment variables](documentation/install.md#environment)\n  * [Verifying successful installation](documentation/install.md#tests)\n  * [Further information](documentation/install.md#further)\n* [`v-build.pl` example usage and command-line options](documentation/build.md#top)\n  * [`v-build.pl` example usage](documentation/build.md#exampleusage)\n  * [`v-build.pl` command-line options](documentation/build.md#options)\n  * [Building a VADR model library](documentation/build.md#library)\n  * [How the VADR 1.0 model library was constructed](documentation/build.md#1.0library)\n* [`v-annotate.pl` example usage, command-line options and alert information](documentation/annotate.md#top)\n  * [`v-annotate.pl` example usage](documentation/annotate.md#exampleusage)\n  * [`v-annotate.pl` command-line options](documentation/annotate.md#options)\n  * [Basic Information on `v-annotate.pl` alerts](documentation/annotate.md#alerts)\n  * [Additional information on `v-annotate.pl` alerts](documentation/annotate.md#alerts2)\n* [***Advanced tutorial: building an RSV model library***](documentation/advbuild.md#top)\n* [Explanations and examples of `v-annotate.pl` detailed alert and error messages](documentation/alerts.md#top)\n  * [Output fields with detailed alert and error messages](documentation/alerts.md#files)\n  * [Explanation of sequence and model coordinate fields in `.alt` files](documentation/alerts.md#coords)\n  * [`toy50` toy model used in examples of alert messages](documentation/alerts.md#toy)\n  * [Examples of different alert types and corresponding `.alt` output](documentation/alerts.md#examples)\n  * [Posterior probability annotation in VADR output Stockholm alignments](documentation/alerts.md#pp)\n* [VADR output file formats](documentation/formats.md#top)\n  * [VADR output files created by all VADR scripts](documentation/formats.md#generic)\n  * [`v-build.pl` output files](documentation/formats.md#build)\n  * [`v-annotate.pl` output files](documentation/formats.md#annotate)\n  * [VADR `coords` coordinate string format](documentation/formats.md#coords)\n  * [VADR sequence naming conventions](documentation/formats.md#seqnames)\n* [Available VADR model files (github wiki)](https://github.com/ncbi/vadr/wiki/Available-VADR-model-files)\n* [SARS-CoV-2 annotation (github wiki)](https://github.com/ncbi/vadr/wiki/Coronavirus-annotation)\n* [Rfam-based structural annotation of a viral genome sequence for use with VADR (github wiki)](https://github.com/ncbi/vadr/wiki/Rfam-based-structural-annotation-of-a-viral-genome-sequence)\n* [Development notes and instructions (github wiki)](https://github.com/ncbi/vadr/wiki/Development-notes-and-instructions)\n\n---"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ncbi/vadr/wiki/Available-VADR-model-files"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ncbi/vadr/wiki/Coronavirus-annotation"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ncbi/vadr/wiki/Rfam-based-structural-annotation-of-a-viral-genome-sequence"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ncbi/vadr/wiki/Development-notes-and-instructions"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nawrockie/vadr/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ncbi/vadr/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ncbi/vadr"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VADR - Viral Annotation DefineR "
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/vadr-install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-lowsimint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-insert.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-extrant3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-indfstrn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-dupregin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-start.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-discontn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-indefend.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-ambigcodon.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-lowsimend.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-extrant5.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-lowcovrg.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-stop.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-delete.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-ambigend.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-delftr.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-indefstart.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-matpep.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-ambigstart.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-lowsimstart.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/alert-files/example-frameshift.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/build-files/1p0-models/hcv.8.build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/build-files/1p0-models/dengue.4.build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/build-files/1p0-models/non-noro-dengue-hcv.173.build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/build-files/1p0-models/norovirus.9.build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/t/do-prove-all-tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/t/data/repro-blast-files.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/miniscripts/fetch-alt-subsets.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "#  <a name=\"top\"></a> VADR installation instructions\n\n* [Installation using `vadr-install.sh`](#install)\n  * [Mac installation requires Xcode](#xcode)\n  * [Alternative two step installation](#alt-install)\n  * [Installing Inline, LWP, and Mozilla modules if installation fails](#inline)\n* [Setting environment variables](#environment)\n* [Verifying successful installation](#tests)\n* [VADR-specific modifications to FASTA](#fastamods)\n* [Further information](#further)\n\n---\n## <a name=\"install\"></a> VADR installation using the `vadr-install.sh` script\n\nThe file `vadr-install.sh` is an executable file for downloading\nand/or installing VADR and its dependencies. That file is located\nonline at github. To install the latest version of VADR download this\nfile:\n\nhttps://raw.githubusercontent.com/ncbi/vadr/master/vadr-install.sh\n\nTo download any specific release/version, for example version 1.0 download\nthe corresponding `vadr-install.sh` file for that release/version\n(prior to version 1.0, the name of the installation script was\n`install.sh`, not `vadr-install.sh`):\n\nhttps://raw.githubusercontent.com/ncbi/vadr/vadr-1.0/vadr-install.sh\n\nCopy the `vadr-install.sh` file into the directory in which you want\nto install VADR. A good name for that directory is\n`vadr-install-dir`. Then move into that directory and run one of the\nfollowing three commands depending on whether you are installing on a\nLinux, Mac/OSX system with Apple silicon chips (M1/M2) or Mac/OSX\nsystem with intel chips:\n\n```\nsh ./vadr-install.sh linux\n```\n\nOR\n\n```\nsh ./vadr-install.sh macosx-silicon\n```\n\nOR\n\n```\nsh ./vadr-install.sh macosx-intel\n```\n\nThe `vadr-install.sh` command will create several directories in the\ncurrent directory.  It will download and install VADR and the required\nmodule libraries [sequip](https://github.com/nawrockie/sequip),\n[Bio-Easel](https://github.com/nawrockie/Bio-Easel), as well as\n[Infernal](http://eddylab.org/infernal/), the NCBI BLAST package,\nWilliam Pearson's FASTA package (for either Linux or Mac/OSX), and\nHeng Li's (minimap2)[https://github.com/lh3/minimap2]. (The VADR\ninstallation script modifies the FASTA package slightly prior to\ninstalling it to allow alignment of long sequences up to 250Kb using\nthe `glsearch` executable. This is described more [here](#fastamods).)\n\nThe installation requires that you have the perl Inline module\ninstalled on your system. If not, the installation script may\nfail. If this happens, read [this](#inline).\n\nWhen `vadr-install.sh` is finished running it will print important\ninstructions to the screen that explain how to modify your environment\nvariables so that you can run the VADR scripts, as discussed next.\n\n---\n\n### <a name=\"xcode\"></a> Mac installation requires Xcode\n\nInstallation on a mac will only work if Xcode has been\ninstalled. Xcode is available for download from the Mac app store.\n\n---\n\n### <a name=\"alt-install\"></a> Alternative two step method for installation: download first, then build\n\nAlternatively, you can install VADR in two steps, downloading the\ndependencies and source code files in step 1, and building packages in\nstep 2. This alternative approach, using the following two commands, may be more convenient for some\nusers. The build step must be run from the same directory\nthat the download step was run in:\n\n```\nsh ./vadr-install.sh linux download\nsh ./vadr-install.sh linux build\n```\n\nThese commands should have `macosx-silicon` or `macosx-intel` instead\nof `linux` if you are installing on Mac/OSX.\n\n---\n### <a name=\"inline\"></a> If installation or `do-install-tests-local.sh` fails because the `Inline`,  `LWP` or `Mozilla::CA` perl modules are not installed...\n\nThe perl `Inline::C`, `LWP::Simple`, `LWP::Protocol::https` and `Mozilla::CA` modules\nmust be installed prior to installation. ([This\npage](https://www.perl.com/article/1/2013/3/24/3-quick-ways-to-find-out-the-version-number-of-an-installed-Perl-module-from-the-terminal/)\nlists three ways to check if a perl module is installed.)\n\nYou can install these modules using `cpan` with these commands:\n\n`cpan install Inline::C`\n\n`cpan install LWP::Simple`\n\n`cpan install LWP::Protocol::https`\n\n`cpan install Mozilla::CA`\n\nHowever, for Mac/OSX these commands may not work if you have\nnot installed the \"Command line tools for Xcode\" or \"XCode\" packages.\nYou can download Xcode from the Mac App Store for free.\n\nIt is possible that you have `Inline` installed but not for `C`, if this is the case, you *might* see an error message like this:\n```\n Error. You have specified 'C' as an Inline programming language.\n\nI currently only know about the following languages:\n\n    Foo, foo\n```\n\nIf this is the case, try installing `Inline::C` with this command:\n\n`cpan install Inline::C`\n\n---\n\n## Setting VADR environment variables <a name=\"environment\"></a>\n\nAs mentioned above, when you run `vadr-install.sh`, instructions will be\noutput about how to change your environment variables so that you can\nrun the VADR scripts. Those instructions are also included below for\nreference, but without the actual path to where you ran `vadr-install.sh`\n(below it is replaced with `<full path to directory in which you ran\nvadr-install.sh>`)\n\n---\n\n### Instructions for setting environment variables output by `vadr-install.sh`\n\n```\n********************************************************\nThe final step is to update your environment variables.\n(See https://github.com/ncbi/vadr/blob/1.6.3/documentation/install.md for more information.)\n\nIf you are using the bash or zsh shell (zsh is default in MacOS/X as\nof v10.15 (Catalina)), add the following lines to the end of your\n'.bashrc' or '.zshrc' file in your home directory:\n\nexport VADRINSTALLDIR=<full path to directory in which you ran vadr-install.sh>\nexport VADRSCRIPTSDIR=\"$VADRINSTALLDIR/vadr\"\nexport VADRMODELDIR=\"$VADRINSTALLDIR/vadr-models-calici\"\nexport VADRINFERNALDIR=\"$VADRINSTALLDIR/infernal/binaries\"\nexport VADREASELDIR=\"$VADRINSTALLDIR/infernal/binaries\"\nexport VADRHMMERDIR=\"$VADRINSTALLDIR/infernal/binaries\"\nexport VADRBIOEASELDIR=\"$VADRINSTALLDIR/Bio-Easel\"\nexport VADRSEQUIPDIR=\"$VADRINSTALLDIR/sequip\"\nexport VADRBLASTDIR=\"$VADRINSTALLDIR/ncbi-blast/bin\"\nexport VADRFASTADIR=\"$VADRINSTALLDIR/fasta/bin\"\nexport VADRMINIMAP2DIR=\"$VADRINSTALLDIR/minimap2\"\nexport PERL5LIB=\"$VADRSCRIPTSDIR\":\"$VADRSEQUIPDIR\":\"$VADRBIOEASELDIR/blib/lib\":\"$VADRBIOEASELDIR/blib/arch\":\"$PERL5LIB\"\nexport PATH=\"$VADRSCRIPTSDIR\":\"$PATH\"\n\nAfter adding the export lines to your .bashrc or .zshrc file, source that file\nto update your current environment with the command:\n\nsource ~/.bashrc\n\nOR\n\nsource ~/.zshrc\n\n---\nIf you are using the C shell, add the following\nlines to the end of your '.cshrc' file in your home\ndirectory:\n\nsetenv VADRINSTALLDIR \"<full path to directory in which you ran vadr-install.sh>\"\nsetenv VADRSCRIPTSDIR \"$VADRINSTALLDIR/vadr\"\nsetenv VADRMODELDIR \"$VADRINSTALLDIR/vadr-models-calici\"\nsetenv VADRINFERNALDIR \"$VADRINSTALLDIR/infernal/binaries\"\nsetenv VADRHMMERDIR \"$VADRINSTALLDIR/infernal/binaries\"\nsetenv VADREASELDIR \"$VADRINSTALLDIR/infernal/binaries\"\nsetenv VADRBIOEASELDIR \"$VADRINSTALLDIR/Bio-Easel\"\nsetenv VADRSEQUIPDIR \"$VADRINSTALLDIR/sequip\"\nsetenv VADRBLASTDIR \"$VADRINSTALLDIR/ncbi-blast/bin\"\nsetenv VADRFASTADIR \"$VADRINSTALLDIR/fasta/bin\"\nsetenv VADRMINIMAP2DIR \"$VADRINSTALLDIR/minimap2\"\nsetenv PERL5LIB \"$VADRSCRIPTSDIR\":\"$VADRSEQUIPDIR\":\"$VADRBIOEASELDIR/blib/lib\":\"$VADRBIOEASELDIR/blib/arch\":\"$PERL5LIB\"\nsetenv PATH \"$VADRSCRIPTSDIR\":\"$PATH\"\n\nAfter adding the setenv lines to your .cshrc file, source that file\nto update your current environment with the command:\n\nsource ~/.cshrc\n\n(To determine which shell you use, type: 'echo $SHELL')\n\n\n********************************************************\n```\n---\n\n### If you get an error about `PERL5LIB` being undefined...\n\nIf you use bash or zsh, change the PERL5LIB line in your `~/.bashrc` or\n`~/.zshrc` file to:\n\n```\nexport PERL5LIB=\"$VADRSCRIPTSDIR\":\"$VADRSEQUIPDIR\":\"$VADRBIOEASELDIR/blib/lib\":\"$VADRBIOEASELDIR/blib/arch\"\n````\n\nor if you use C shell, change the PERL5LIB line in your `~/.cshrc`\nfile to:\n\n```\nsetenv PERL5LIB \"$VADRSCRIPTSDIR\":\"$VADRSEQUIPDIR\":\"$VADRBIOEASELDIR/blib/lib\":\"$VADRBIOEASELDIR/blib/arch\"\n```\n\nAnd then execute `source ~/.bashrc`, `source ~/.zshrc`, or `source ~/.cshrc` again.\n\n---\n## Verifying successful installation with test runs<a name=\"tests\"></a>\n\nThe VADR package includes some tests you can run to make sure that\nyour installation was successful and that your environment variables\nare set-up correctly. \n\nThese are several shell scripts for running tests; with respect to the\ninstallation directory they are in the directory `vadr/testfiles/` and\nstart with `do-` and end with `.sh`.\n\nAt a minimum, you should run the \n`vadr/testfiles/do-install-tests-local.sh` script to make sure VADR installed\ncorrectly. They should pass, as shown below.\n\nThe script `vadr/testfiles/do-all-tests.sh` will run all tests, but be\nwarned that script may take up to an hour or so to run. All the tests\nshould pass.\n\nTo run all tests, execute:\n\n```\n$VADRSCRIPTSDIR/testfiles/do-all-tests.sh\n```\n\nTo run only the `do-install-tests-local.sh` script, execute:\n\n```\n$VADRSCRIPTSDIR/testfiles/do-install-tests-local.sh\n```\n\nThis scripts can take up to several minutes to run. \nIf something goes wrong, the script will likely exit quickly.\n\nIf the script fails immediately with a warning like:\n\n`Can't locate LWP/Simple.pm in @INC (you may need to install the\nLWP::Simple module)`\n\nOr something similar but with `Inline` or `Mozilla::CA` instead of\n`LWP`, then you will need to install the perl `LWP`, `Mozilla::CA` and/or `Inline`\nmodules as described [here.](#inline)\n\nBelow is an example of the expected output for\n`do-install-tests-local.sh`:\n\n```\n# v-test.pl :: test VADR scripts [TEST SCRIPT]\n# VADR 1.6.2 (Dec 2023)\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# date:    Mon Dec  4 10:29:11 2023\n#\n# test file:                                                         /net/intdev/oblast01/infernal/notebook/23_0925_vadr_1p6_and_1p6p1_and_1p6p2_releases/test-install13/vadr/testfiles/noro.r10.local.testin\n# output directory:                                                  vt-n10-local\n# forcing directory overwrite:                                       yes [-f]\n# if output files listed in testin file already exist, remove them:  yes [--rmout]\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# Parsing test file                                  ... done. [    0.0 seconds]\n##teamcity[testStarted name='annotate-noro-10-local' captureStandardOutput='true']\n# Running command  1 [annotate-noro-10-local]        ... done. [   35.4 seconds]\n#\tchecking va-noro.r10/va-noro.r10.vadr.pass.tbl                                                                ... pass\n#\tchecking va-noro.r10/va-noro.r10.vadr.fail.tbl                                                                ... pass\n#\tchecking va-noro.r10/va-noro.r10.vadr.sqa                                                                     ... pass\n#\tchecking va-noro.r10/va-noro.r10.vadr.sqc                                                                     ... pass\n#\tchecking va-noro.r10/va-noro.r10.vadr.ftr                                                                     ... pass\n#\tchecking va-noro.r10/va-noro.r10.vadr.sgm                                                                     ... pass\n#\tchecking va-noro.r10/va-noro.r10.vadr.mdl                                                                     ... pass\n#\tchecking va-noro.r10/va-noro.r10.vadr.alt                                                                     ... pass\n#\tchecking va-noro.r10/va-noro.r10.vadr.alc                                                                     ... pass\n#\tremoving directory va-noro.r10                               ... done\n##teamcity[testFinished name='annotate-noro-10-local']\n#\n#\n# PASS: all 9 files were created correctly.\n#\n# Output printed to screen saved in:                   vt-n10-local.vadr.log\n# List of executed commands saved in:                  vt-n10-local.vadr.cmd\n# List and description of all output files saved in:   vt-n10-local.vadr.list\n#\n# All output files created in directory ./vt-n10-local/\n#\n# Elapsed time:  00:00:36.05\n#                hh:mm:ss\n# \n[ok]\n# v-test.pl :: test VADR scripts [TEST SCRIPT]\n# VADR 1.6.2 (Dec 2023)\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# date:    Mon Dec  4 10:29:48 2023\n#\n# test file:                                                         /net/intdev/oblast01/infernal/notebook/23_0925_vadr_1p6_and_1p6p1_and_1p6p2_releases/test-install13/vadr/testfiles/dengue.r5.local.testin\n# output directory:                                                  vt-d5-local\n# forcing directory overwrite:                                       yes [-f]\n# if output files listed in testin file already exist, remove them:  yes [--rmout]\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# Parsing test file                                  ... done. [    0.0 seconds]\n##teamcity[testStarted name='annotate-dengue-5-local' captureStandardOutput='true']\n# Running command  1 [annotate-dengue-5-local]       ... done. [   78.5 seconds]\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.pass.tbl                                                              ... pass\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.fail.tbl                                                              ... pass\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.sqa                                                                   ... pass\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.sqc                                                                   ... pass\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.ftr                                                                   ... pass\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.sgm                                                                   ... pass\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.mdl                                                                   ... pass\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.alt                                                                   ... pass\n#\tchecking va-dengue.r5/va-dengue.r5.vadr.alc                                                                   ... pass\n#\tremoving directory va-dengue.r5                              ... done\n##teamcity[testFinished name='annotate-dengue-5-local']\n#\n#\n# PASS: all 9 files were created correctly.\n#\n# Output printed to screen saved in:                   vt-d5-local.vadr.log\n# List of executed commands saved in:                  vt-d5-local.vadr.cmd\n# List and description of all output files saved in:   vt-d5-local.vadr.list\n#\n# All output files created in directory ./vt-d5-local/\n#\n# Elapsed time:  00:01:19.16\n#                hh:mm:ss\n# \n[ok]\nSuccess: all tests passed [do-install-tests-local.sh]\n```\nThe most important line is the final line:\n\n```\nSuccess: all tests passed [do-install-tests-local.sh]\n```\n\nThis means that the test has passed. You should see similar \nlines if you run the other tests. If you do not and need help\nfiguring out why, email me at eric.nawrocki@nih.gov.\n\n---\n## <a name=\"fastamods\"></a> VADR-specific modifications to the FASTA package\n\nTo enable alignment of long sequences (up to 250Kb) with the\n`glsearch` program of FASTA, some changes are made to the `src/defs.h`\nfile by the `vadr-install.sh` script prior to compilation of\nFASTA. These changes can be seen in the patch file\n[`vadr/fasta-mods/vadr-fasta-defs.patch`](../fasta-mods/vadr-fasta-defs.patch#top)\npatch file. Additionally, to\navoid possible numerical overflow issues with `glsearch` scores when\naligning long sequences, the FASTA Makefile is modified so that the\nnon-vectorized version of `glsearch` is used. These changes can be\nseen in the patch files\n[`vadr/fasta-mods/vadr-fasta-Makefile.linux.patch`](../fasta-mods/vadr-fasta-Makefile.linux.patch#top) and\n[`vadr/fasta-mods/vadr-fasta-Makefile.os_x86_64.patch`](../fasta-mods/vadr-fasta-Makefile.os_x86_64.patch#top).  See the\n`vadr/fasta-mods/README.txt` for more information on how these patch\nfiles were created.\n\nWhen aligning very long sequences (more than 30Kb), it is recommended to *not* \nbuild a CM with `v-build.pl` (i.e. use the `--skipbuild` option),\nand it is recommended to use the `-s` and `--glsearch` options with `v-annotate.pl`.\n\n---\n## <a name=\"further\"></a> Further information\n\n* [`v-build.pl` example usage and command-line options](build.md#top)\n* [`v-annotate.pl` example usage, command-line options and alert information](annotate.md#top)\n* [Explanations and examples of `v-annotate.pl` detailed alert and error messages](alerts.md#top)\n* [VADR output file formats](formats.md#top)\n* [Available VADR model files (github wiki)](https://github.com/ncbi/vadr/wiki/Available-VADR-model-files)\n* [SARS-CoV-2 annotation (github wiki)](https://github.com/ncbi/vadr/wiki/Coronavirus-annotation)\n* [Development notes and instructions (github wiki)](https://github.com/ncbi/vadr/wiki/Development-notes-and-instructions)\n\n---\n#### Questions, comments or feature requests? Send a mail to eric.nawrocki@nih.gov.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/documentation/install.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 0.991891446916104,
      "result": {
        "original_header": "https://github.com/ncbi/vadr.git",
        "type": "Text_excerpt",
        "value": "VADR includes 205 prebuilt models of *Flaviviridae* and\n*Caliciviridae* viral RefSeq genomes, created with a process similar\nto the one described\n[here](documentation/build.md#1.0library). Example usage of\n`v-build.pl` can be found [here](documentation/build.md#top). An\nadvanced tutorial on building VADR models using RSV as an example can\nbe found [here](documentation/advbuild.md#top). To use `v-annotate.pl`\nwith viruses other than the default set of 205, see ['Available VADR\nmodels'](#models). For instructions on using VADR for SARS-CoV-2\nannotation see [this\npage](https://github.com/ncbi/vadr/wiki/Coronavirus-annotation). \nThe homology search and alignment components of VADR scripts, the most\ncomputationally expensive steps, are performed by the Infernal, HMMER,\nFASTA, MINIMAP2 and BLAST software packages, which are downloaded and installed\nwith [VADR installation](documentation/install.md#top). \n"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9986837018668469,
      "result": {
        "original_header": "SARS-CoV-2 annotation using VADR",
        "type": "Text_excerpt",
        "value": "The `v-annotate.pl` script includes some special options specifically\ndeveloped for SARS-CoV-2 annotation that increase speed (`-s` and\n`--glsearch` options) and provide better annotation for sequences with\nstretches of Ns (`-r` option). See [this\npage](https://github.com/ncbi/vadr/wiki/Coronavirus-annotation) for\nmore information on using VADR to annotate SARS-CoV-2 sequences. \n"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8922310695843587,
      "result": {
        "original_header": "Available VADR models <a name=\"models\"></a>",
        "type": "Text_excerpt",
        "value": "VADR installation includes a default set of *Caliciviridae* models\nincluding Norovirus virus. The installation also includes a set of\n*Flaviviridae* models including Dengue virus.  You can download\nadditional pre-built models to use to validate and annotate viruses,\nincluding SARS-CoV-2, RSV, or cox1 genes. Importantly, to\nuse a set of models other than the default *Caliciviridae* set, you\nwill need to use either the `--mdir` and `--mkey` options, or the the\n`-m`, `-i`, `-x` and possibly `-n` options as described\n[here](documentation/annotate.md#options). \nSee [this\npage](https://github.com/ncbi/vadr/wiki/Available-VADR-model-files)\nfor a list of all available models and additional information. \n"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ncbi/vadr/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "==============================================================\n                     PUBLIC DOMAIN NOTICE\n         National Center for Biotechnology Information\n\nThis software is a \"United States Government Work\" under the terms of\nthe United States Copyright Act.  It was written as part of the\nauthors' official duties as United States Government employees and\nthus cannot be copyrighted.  This software is freely available to the\npublic for use. The National Library of Medicine and the\nU.S. Government have not placed any restriction on its use or\nreproduction.\n\nAlthough all reasonable efforts have been taken to ensure the accuracy\nand reliability of the software and data, the NLM and the U.S.\nGovernment do not and cannot warrant the performance or results that\nmay be obtained by using this software or data. The NLM and the U.S.\nGovernment disclaim all warranties, express or implied, including\nwarranties of performance, merchantability or fitness for any\nparticular purpose.\n\nPlease cite the authors in any work or product based on this material.\n\n==============================================================\n"
      },
      "source": "https://raw.githubusercontent.com/nawrockie/vadr/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vadr"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ncbi"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 1711407,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 37145,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 6138,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rebol",
        "size": 2657,
        "type": "Programming_language",
        "value": "Rebol"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Raku",
        "size": 2295,
        "type": "Programming_language",
        "value": "Raku"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nawrockie/vadr/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:35:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 99
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}