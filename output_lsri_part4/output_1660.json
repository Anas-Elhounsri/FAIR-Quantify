{
  "application_domain": [
    {
      "confidence": 38.01,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cisselab/qSR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-06-14T19:07:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-09T01:20:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A software package for quantitative analysis of single molecule localization microscopy data in live and fixed cells."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9383062189348848,
      "result": {
        "original_header": "qSR",
        "type": "Text_excerpt",
        "value": "A software package for quantitative analysis of single molecule localization microscopy data in live and fixed cells. \nFor the pair correlation analysis, our software makes use of code developed by Veatch et al. The function get_autocorr is made available in the publication cited below. The code should be downloaded, renamed as get_autocorr.m and added to the MATLAB search path. \nTo perform FastJet Hierarchical Clustering, the FastJet code must first be compiled. qSR uses the fjcore distibution of FastJet, version 3.2.0, a software package developed by the particle physics community for jet finding and analysis at colliders. \n                     FastJet release 3.2.0 [fjcore]\n                 M. Cacciari, G.P. Salam and G. Soyez                  \n     A software package for jet finding and analysis at colliders      \n                           http://fastjet.fr                           \n\t                                                                      \n Please cite EPJC72(2012)1896 [arXiv:1111.6097] if you use this package\n for scientific work and optionally PLB641(2006)57 [hep-ph/0512210].   \n                                                                       \n FastJet is provided without warranty under the terms of the GNU GPLv2.\n It uses T. Chan's closest pair algorithm, S. Fortune's Voronoi code\n and 3rd party plugin jet algorithms. See COPYING file for details. \nTo use the Hierarchical Clustering feature, \n  Compile the FastJetTree.cc code. \n  \n  For Unix systems, this can be done using g++. cd into qSR/SpatialClustering/BioJet/FJCore/fjcore-3.2.0/ and call\n  g++ -O BioJetsTree.cc fjcore.cc -o BioJetsTreeUnix \n  In Windows, the code should be compiled using MinGW. The gcc and std c++ libraries should be statically linked. cd in qSR/SpatialClustering/BioJet/FJCore/fjcore-3.2.0/ from the minGW command line and call\n  g++ -static -static-libgcc -static-libstdc++ -O BioJetsTree.cc fjcore.cc -o BioJetsTree \n"
      },
      "source": "https://raw.githubusercontent.com/cisselab/qSR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cisselab/qSR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cisselab/qSR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cisselab/qSR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "qSR"
      },
      "source": "https://raw.githubusercontent.com/cisselab/qSR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.994574852522404,
      "result": {
        "original_header": "qSR",
        "type": "Text_excerpt",
        "value": "To use the Hierarchical Clustering feature, \n  Compile the FastJetTree.cc code. \n  \n  For Unix systems, this can be done using g++. cd into qSR/SpatialClustering/BioJet/FJCore/fjcore-3.2.0/ and call\n  g++ -O BioJetsTree.cc fjcore.cc -o BioJetsTreeUnix \n  In Windows, the code should be compiled using MinGW. The gcc and std c++ libraries should be statically linked. cd in qSR/SpatialClustering/BioJet/FJCore/fjcore-3.2.0/ from the minGW command line and call\n  g++ -static -static-libgcc -static-libstdc++ -O BioJetsTree.cc fjcore.cc -o BioJetsTree \n"
      },
      "source": "https://raw.githubusercontent.com/cisselab/qSR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cisselab/qSR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "qSR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "cisselab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 322903,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 227947,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Fortran",
        "size": 2464,
        "type": "Programming_language",
        "value": "Fortran"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 769,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M",
        "size": 291,
        "type": "Programming_language",
        "value": "M"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cisselab/qSR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1111.6097] if you use this package\n for scientific work and optionally PLB641(2006)57 [hep-ph/0512210].   \n                                                                       \n FastJet is provided without warranty under the terms of the GNU GPLv2.\n It uses T. Chan's closest pair algorithm, S. Fortune's Voronoi code\n and 3rd party plugin jet algorithms. See COPYING file for details.\n\nTo use the Hierarchical Clustering feature, \n  Compile the FastJetTree.cc code. \n  \n  For Unix systems, this can be done using g++. cd into qSR/SpatialClustering/BioJet/FJCore/fjcore-3.2.0/ and call\n  g++ -O BioJetsTree.cc fjcore.cc -o BioJetsTreeUnix\n\n  In Windows, the code should be compiled using MinGW. The gcc and std c++ libraries should be statically linked. cd in qSR/SpatialClustering/BioJet/FJCore/fjcore-3.2.0/ from the minGW command line and call\n  g++ -static -static-libgcc -static-libstdc++ -O BioJetsTree.cc fjcore.cc -o BioJetsTree\n"
      },
      "source": "https://raw.githubusercontent.com/cisselab/qSR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "joandrews33",
          "type": "User"
        },
        "date_created": "2016-12-16T19:23:18Z",
        "date_published": "2016-12-16T19:27:29Z",
        "html_url": "https://github.com/cisselab/qSR/releases/tag/v1.1.0",
        "name": "Version v1.1.0",
        "release_id": 4944442,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/cisselab/qSR/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/cisselab/qSR/releases/4944442",
        "value": "https://api.github.com/repos/cisselab/qSR/releases/4944442",
        "zipball_url": "https://api.github.com/repos/cisselab/qSR/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "joandrews33",
          "type": "User"
        },
        "date_created": "2016-08-18T17:20:15Z",
        "date_published": "2016-08-18T17:29:29Z",
        "html_url": "https://github.com/cisselab/qSR/releases/tag/v1.0.0",
        "release_id": 3919094,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/cisselab/qSR/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/cisselab/qSR/releases/3919094",
        "value": "https://api.github.com/repos/cisselab/qSR/releases/3919094",
        "zipball_url": "https://api.github.com/repos/cisselab/qSR/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:51:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}