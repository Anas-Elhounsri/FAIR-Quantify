{
  "application_domain": [
    {
      "confidence": 0.8068541637483818,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MicronOxford/BeamDelta"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-02-13T16:59:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-20T11:24:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Alignment tool"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9465997514651258,
      "result": {
        "original_header": "BeamDelta: Alignment tool",
        "type": "Text_excerpt",
        "value": "A simple GUI interface for python-microscope which allows a compatible\ncamera (see python-microscope compatibility list) to be used for\noptical alignment purposes.  The GUI will display live images,\ncalculate and mark beam centroids and then store an alignment centroid\nposition. Once a position is stored the live centroid then displays a\npixel based delta position to allow precise alignment between the\nmarked position and the new beam. \n"
      },
      "source": "https://raw.githubusercontent.com/MicronOxford/BeamDelta/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9331232952028083,
      "result": {
        "original_header": "Suggested parts list",
        "type": "Text_excerpt",
        "value": "We include a suggested parts list in BeamDelta-parts-list.csv which\nenables the construction of a two camera alignment setup. This\nhardware configuration will allow both lens alignment and co-aligning\ntwo beams and has a small footprint so can relatively easily be\nmounted within an existing setup.  \nThis is list just an example of parts which we have used to build the\nsystem. other optics, or cameras supported by [Python\nmicroscope](https://www.python-microscope.org/) can\neasily be used. \n"
      },
      "source": "https://raw.githubusercontent.com/MicronOxford/BeamDelta/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MicronOxford/BeamDelta/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MicronOxford/BeamDelta/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MicronOxford/BeamDelta"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BeamDelta: Alignment tool"
      },
      "source": "https://raw.githubusercontent.com/MicronOxford/BeamDelta/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9454480534219749,
      "result": {
        "original_header": "BeamDelta: Alignment tool",
        "type": "Text_excerpt",
        "value": "BeamDelta is called from the command line using the following format: \nThe `CAMERA-URI` arguments are URIs for [Python\nmicroscope](https://www.python-microscope.org/) device servers, and\nhave the following format: \n"
      },
      "source": "https://raw.githubusercontent.com/MicronOxford/BeamDelta/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9575927492521089,
      "result": {
        "original_header": "Suggested parts list",
        "type": "Text_excerpt",
        "value": "This is list just an example of parts which we have used to build the\nsystem. other optics, or cameras supported by [Python\nmicroscope](https://www.python-microscope.org/) can\neasily be used. \n"
      },
      "source": "https://raw.githubusercontent.com/MicronOxford/BeamDelta/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MicronOxford/BeamDelta/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BeamDelta"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MicronOxford"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 11856,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MicronOxford/BeamDelta/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "NickHallPhysics",
          "type": "User"
        },
        "date_created": "2021-05-20T13:14:17Z",
        "date_published": "2021-05-20T13:26:36Z",
        "description": "Updated release for BeamDelta. Vanishing crosshairs when cameras are saturated has been fixed and cameras are now disabled on exit.",
        "html_url": "https://github.com/MicronOxford/BeamDelta/releases/tag/1.2.0",
        "name": "Updated release of BeamDelta",
        "release_id": 43286746,
        "tag": "1.2.0",
        "tarball_url": "https://api.github.com/repos/MicronOxford/BeamDelta/tarball/1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MicronOxford/BeamDelta/releases/43286746",
        "value": "https://api.github.com/repos/MicronOxford/BeamDelta/releases/43286746",
        "zipball_url": "https://api.github.com/repos/MicronOxford/BeamDelta/zipball/1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "NickHallPhysics",
          "type": "User"
        },
        "date_created": "2019-11-26T16:06:34Z",
        "date_published": "2019-11-26T16:23:01Z",
        "description": "Updated release for BeamDelta. The centroid cross-hair and text sizes have been increased for user readability. The ReadMe has been updated.",
        "html_url": "https://github.com/MicronOxford/BeamDelta/releases/tag/v1.1.0",
        "name": "Updated release of BeamDelta",
        "release_id": 21773303,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/MicronOxford/BeamDelta/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MicronOxford/BeamDelta/releases/21773303",
        "value": "https://api.github.com/repos/MicronOxford/BeamDelta/releases/21773303",
        "zipball_url": "https://api.github.com/repos/MicronOxford/BeamDelta/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:57:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Lens alignment",
        "parent_header": [
          "BeamDelta: Alignment tool",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "1. align the system with no lenses present using a laser or similar well collimated\nbeam.\n2. position camera in beam.\n3. mark centroid.\n4. add first lens and check centroid.\n5. shift lens in X and Y (perpendicular to optic axis) to align centroids.\n6. check for back reflection to ensure the lens is perpendicular to optic axis\n7. repeat 5-6 until no change.\n"
      },
      "source": "https://raw.githubusercontent.com/MicronOxford/BeamDelta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Co-aligning two beams",
        "parent_header": [
          "BeamDelta: Alignment tool",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "1. start with one correctly aligned beam.\n2. construct a dual camera setup (description needed!)\n3. mark centroids on both cameras.\n4. turn of first beam, turn on second beam\n5. use two mirrors to walk the beam (description needed) so it matches both centroids.\n"
      },
      "source": "https://raw.githubusercontent.com/MicronOxford/BeamDelta/master/README.md",
      "technique": "header_analysis"
    }
  ]
}