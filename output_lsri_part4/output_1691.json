{
  "application_domain": [
    {
      "confidence": 11.75,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Please cite the following paper when citing pgltools:  \n\n<b>Pgltools: a genomic arithmetic tool suite for\nmanipulation of Hi-C peak and other chromatin interaction data</b>\n\nhttps://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-017-1621-0\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/billgreenwald/pgltools"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-12-14T17:35:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-09T09:55:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Paired Genomic Loci Tool Suite"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8528488322030814,
      "result": {
        "original_header": "The PGL file format:",
        "type": "Text_excerpt",
        "value": "The PGL file format is a 1-based file consisting of 6 columns, plus any additional annotations.  The six required columns are locus A chromosome, locus A start, locus A end, locus B chromosome, locus B start, locus B end.  After these six columns, any additional columns may be included as annotations.  These columns will be perserved by pgltools, and can be manipulated with pgltools merge.  As annotations are arbitrary, header lines may be indcluded in pgl files by starting a line with \"#\" and will be carried over from the \"A\" file when using pgltools methods.  **In addition to the six required columns, pgl files are formatted such that each locus A comes before its partner locus B.**  The included **formatbedpe** operation will fix any loci violating this rule in addition to sorting the file.  Example pgl files are provided below: \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9553624488034914,
      "result": {
        "original_header": "The PyGLtools Module:",
        "type": "Text_excerpt",
        "value": "Most method names in PyGLtools are the same as the UNIX tool suite (2D methods that have a 1D analog are explicitly named in the python module).  Command line arguments are instead function arguments, and can be viewed as one would view the docstring of a particular function (usually through tab completion), and inputs and outputs can be viewed in the docstring.  All arguments, their format, and what they do, is discussed below in the Methods section of this readme.  All functions take at least one PyGL object as an input.\n \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8519313497878156,
      "result": {
        "original_header": "The PyGL and PyGL-bed objects:",
        "type": "Text_excerpt",
        "value": "The PyGLtools module utilizes two dimensional lists to house PGL information, and a dict of lists to house Bed information.  These types are the underlying structure to the pgltools .py files utilized by the command line interface.  These objects will work with any PyGLtools function that requires their input, and are loaded via the read_PGL and read_BED functions.  These functions return two arguments, first the header of the file, and second the PyGL or PyGL_BED object.  The explicit format of the objects are: \nPyGL\n```\n[[chrA,startA,stopA,chrB,startB,stopB,[list of annotations]],[...]]\n```\nPyGL-bed\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8749009402072709,
      "result": {
        "original_header": "1D Operations:",
        "type": "Text_excerpt",
        "value": "All 1D operations will internally convert bed entries to 1-based start and stop entries so that they can be compared properly to PGL files.  As bed files have redundancy in single base pair long entries (chr1  10  10   is equivalent to   chr1  9   10), these entries types of entries will both be converted to the same entry in pgltools (in this case, chr1  10  10).  \n![pgltools intersect1D](/Images/Intersect1D.PNG?raw=true)\nFinds the intersection of loci from a pgl file and a standard bed file.  Following the standard 6 columns, the seventh column holds the locus (A, B, or AB) the bed region overlapped. If a single PGL entry overlaps multiple BED entries, a resulting entry will be generated for each intersection event.  Requires a sorted pgl file. Note that when using -d, it is possible to have the resulting entry have the end position before the start position if the two entries do not overlap; it is recommended to use -d in conjunction with -wa and/or -wb. Syntax:\n```\npgltools intersect1D [options]\n```\noptions:\nBASH2*\nExample, storing output to output.pgl:\nBASH3* \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.858958067783044,
      "result": {
        "original_header": "Useful Parameter Combinations",
        "type": "Text_excerpt",
        "value": "Similarly, it is possible to intersect 2 PGL files, keep all the annotations when an intersection occurs, report the original entry from A when an intersection occurs, and report all PGL entries from both files via:\n```\npgltools intersect -a fileA.pgl -b fileB.pgl -wa -m -allA > output.pgl\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9921606631091692,
      "result": {
        "type": "Text_excerpt",
        "value": "Pgltools is a genomic arithmetic software suite designed for working with paired-loci genomic data, such as contacts from a Hi-C or ChIA-PET experiment, and utilizes the PGL file format. Pgltools is available both as a tool suite for the UNIX command line, and as a python module. \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/billgreenwald/pgltools/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/billgreenwald/pgltools/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "billgreenwald/pgltools"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Merge.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Intersect.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Window.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Subtract.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Closest.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Coverage.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Intersect1D.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Subtract1D.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/Closest1D.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation:",
        "type": "Text_excerpt",
        "value": "The pgltools tool suite is designed to be used through the bash interface.  A few commands (mainly sorting commands) are not written in python, but are rather written in bash.  <b>To ensure pgltools runs with the proper functionality, please utilize the pgltools/sh folder, rather than the direct python scripts in the pgltools/Module/PyGLtools folder</b>.  Following the Unix installation directions immediately below will ensure that the /sh folder is used.\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "UNIX:",
        "parent_header": [
          "Installation:"
        ],
        "type": "Text_excerpt",
        "value": "To install pgltools, clone the directory to the desired location, and add the /sh folder to your system PATH variable.  Methods can then be called with pgltools [command].  To view the avaiable commands, or the available arguments for a command, call pgltools with no command, or call pgltools [command] with no arguments.\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python Module:",
        "parent_header": [
          "Installation:"
        ],
        "type": "Text_excerpt",
        "value": "The python module version of pgltools, PyGLtools, is avaiable for installation both from this repository, and on PyPI.\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PyPI",
        "parent_header": [
          "Installation:",
          "Python Module:"
        ],
        "type": "Text_excerpt",
        "value": "To install PyGLtools from PyPI, simply run: \n```\npip install PyGLtools\n```\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From github",
        "parent_header": [
          "Installation:",
          "Python Module:"
        ],
        "type": "Text_excerpt",
        "value": "cd into the \"Module\" subdirectory and run:\n```\npython setup.py install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9960841576805677,
      "result": {
        "original_header": "2D Operations:",
        "type": "Text_excerpt",
        "value": "![pgltools windowpgl](/Images/Window.PNG?raw=true)\nFinds the loci with locus A fully contained in window1 and locus B fully contained window2.  Alternatively, only 1 window can be provided.  Syntax:\n```\npgltools intersect [options]\n```\noptions:\nBASH9*\nExample, storing output to output.pgl:\nBASH10* \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "type": "Text_excerpt",
        "value": "If you wish to contribute and need to install the required dependencies for tests, you can use poetry and run `poetry install` in the root of the repo to install all the needed deps.  Or, just `pip install pytest-parameterized` for the only needed package. \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8640238608760887,
      "result": {
        "original_header": "formatbedpe:",
        "type": "Text_excerpt",
        "value": "Converts a bedpe (as defined by bedtools) or similarly formated file to a sorted pgl file:\n```\npgltools formatbedpe [FILE]\n```\nExample, storing output to output.pgl:\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8770312218459239,
      "result": {
        "original_header": "formatTripSparse:",
        "type": "Text_excerpt",
        "value": "Converts a set of Triplet Sparse Matrix files to a pgl file:\n```\npgltools formatTripSparse [options]\n```\noptions:\nBASH2*\nExample, storing output to output.pgl:\nBASH3*\n \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8307512785498312,
      "result": {
        "original_header": "browser:",
        "type": "Text_excerpt",
        "value": "Formats a pgl file for viewing in the UCSC Genome Browser.  Columns are 1 indexed:\n```\npgltools browser [options]\n```\noptions:\nBASH2*\nExample, storing output to output.bed:\nBASH3*\n \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.806347699115223,
      "result": {
        "original_header": "conveRt:",
        "type": "Text_excerpt",
        "value": "Formats a pgl file for use with the GenomicInteractions R package.  Use the \"chiapet.tool\" format while importing. Columns are 1 indexed:\n```\npgltools conveRt [options]\n```\noptions:\nBASH2*\nExample, storing output to output.pgl:\nBASH3*\n \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8002870287387407,
      "result": {
        "original_header": "juicebox:",
        "type": "Text_excerpt",
        "value": "Formats a pgl file for use visualization with JuiceBox.  Columns are 1 indexed:\n```\npgltools juicebox [options]\n```\noptions:\nBASH2*\nExample, storing output to output.pgl:\nBASH3* \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8162850289397797,
      "result": {
        "original_header": "2D Operations:",
        "type": "Text_excerpt",
        "value": "Example, storing output to output.pgl:\n```\npgltools merge -a myFile.pgl -c 10,10,11,12 -o min,max,count,collapse -d 200 > output.pgl\n```\nExample, storing output to output.pgl, reading input from stdin:\nBASH5* \n![pgltools subtract](/Images/Subtract.PNG?raw=true)\nFinds the parts of loci from file A that do not overlap loci from file B.  Requires sorted input. Syntax:\n```\npgltools subtract [options]\n```\noptions:\nBASH12*\nExample, storing output to output.pgl:\nBASH13* \n![pgltools coverage](/Images/Coverage.PNG?raw=true)\nFinds the coverage of file B on file A.  Loci from file B must be fully contained to be counted in coverage calculation.  Syntax:\n```\npgltools coverage [options]\n```\noptions:\nBASH17*\nExample, storing output to output.pgl:\nBASH18*\n \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8279385121362215,
      "result": {
        "original_header": "1D Operations:",
        "type": "Text_excerpt",
        "value": "![pgltools subtract1D](/Images/Subtract1D.PNG?raw=true)\nFinds the parts of loci from file A that do not overlap regions from file B.  Requires a sorted pgl file.  Syntax:\n```\npgltools subtract [options]\n```\noptions:\nBASH5*\nExample, storing output to output.pgl:\nBASH6* \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/billgreenwald/pgltools/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chia-pet, chromosome, contacts, genetics, genomics, hi-c, loci, locus, paired-loci, pgl, pgl-files"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2016, Kelly Frazer Lab at UCSD and William Greenwald\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, \nare permitted provided that the following conditions are met:\n\n  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and \n     the following disclaimer in the documentation and/or other materials provided with the distribution.\n  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n     promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, \nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, \nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, \nOR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev//Images/logo.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pgltools"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "billgreenwald"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 327688,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 9823,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1171,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "billgreenwald",
          "type": "User"
        },
        "date_created": "2022-11-23T15:47:54Z",
        "date_published": "2022-11-23T15:50:41Z",
        "description": "-Fixed bug in formatbedpe and added more test coverage for command line interface\r\n\r\n",
        "html_url": "https://github.com/billgreenwald/pgltools/releases/tag/v3.0.1",
        "name": "v3.0.1",
        "release_id": 84008782,
        "tag": "v3.0.1",
        "tarball_url": "https://api.github.com/repos/billgreenwald/pgltools/tarball/v3.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/billgreenwald/pgltools/releases/84008782",
        "value": "https://api.github.com/repos/billgreenwald/pgltools/releases/84008782",
        "zipball_url": "https://api.github.com/repos/billgreenwald/pgltools/zipball/v3.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "billgreenwald",
          "type": "User"
        },
        "date_created": "2022-10-10T03:10:04Z",
        "date_published": "2022-10-10T03:10:55Z",
        "description": "Migrated to python 3\r\nAdded full test suite\r\nAdded github actions\r\nMoving to a PR based system\r\nAdded changelog\r\nRemoved duplicated code",
        "html_url": "https://github.com/billgreenwald/pgltools/releases/tag/v3.0.0",
        "name": "v3.0.0",
        "release_id": 79386610,
        "tag": "v3.0.0",
        "tarball_url": "https://api.github.com/repos/billgreenwald/pgltools/tarball/v3.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/billgreenwald/pgltools/releases/79386610",
        "value": "https://api.github.com/repos/billgreenwald/pgltools/releases/79386610",
        "zipball_url": "https://api.github.com/repos/billgreenwald/pgltools/zipball/v3.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "billgreenwald",
          "type": "User"
        },
        "date_created": "2022-10-08T17:18:37Z",
        "date_published": "2022-10-09T23:05:18Z",
        "html_url": "https://github.com/billgreenwald/pgltools/releases/tag/v2.7.1",
        "name": "v2.7.1",
        "release_id": 79380287,
        "tag": "v2.7.1",
        "tarball_url": "https://api.github.com/repos/billgreenwald/pgltools/tarball/v2.7.1",
        "type": "Release",
        "url": "https://api.github.com/repos/billgreenwald/pgltools/releases/79380287",
        "value": "https://api.github.com/repos/billgreenwald/pgltools/releases/79380287",
        "zipball_url": "https://api.github.com/repos/billgreenwald/pgltools/zipball/v2.7.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Dependencies",
        "type": "Text_excerpt",
        "value": "pgltools is written in Python 3.10, and does not require any external packages.  As such, all operations, except for coverage, have been tested in pypy.  Pypy is an alternative python compiler, and is recommended for use with this tool suite.  Pypy is available on most linux distributions, and can be installed via \"apt-get\" or \"yum\".  <b>By utilizing pypy, pgltools sees a 5-7x speed up on all operations, and about a 25% decrease in the amount of RAM utilized</b>.\n\nThe UNIX version of pgltools will automatically detect if pypy is installed, and will run through pypy if so.  Otherwise, it will default to python.\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:59:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Recommended Usage",
        "parent_header": [
          "The PyGLtools Module:"
        ],
        "type": "Text_excerpt",
        "value": "The PyGLtools package utilizes helper functions that are hidden to its namespace; it is therefore recommended to import the module and define its namespace.  As an example, to import the module, read two files, intersect them, and save their output into a new PyGL object, one would use the following:\n\n```\nimport PyGLtools as pygl\nheaderA,pglA=pygl.read_PGL(someFilePath)\nheaderB,pglB=pygl.read_PGL(someOtherFilePath)\nintersected=pygl.intersect2D(pglA,pglB)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Determining Enhancer Promoter Interactions.",
        "parent_header": [
          "Example Pipelines:"
        ],
        "type": "Text_excerpt",
        "value": "It is easy to find all PGLs from a PGL file in which a promoter anchor is interacting with an enhancer anchor.  Assuming we have an annotation BED file with annotations in column 7, we could do the following:\n```\npgltools intersect1D -a myPGL.pgl -b annotations.BED -bA -aL > annotatedPGLs.pgl\npgltools merge -a annotatedPGLs.pgl -o collapse,distinct -c 7,8 > annotatedPGLs.merged.pgl\n```\nor in a pipe\n```\npgltools intersect1D -a myPGL.pgl -b annotations.BED -bA -aL | pgltools merge -stdInA -o collapse,distinct -c 7,8 > annotatedPGLs.merged.pgl\n```\nwe could then filter this file to where column 7 contained \"A,B\" and where column 8 contained our annotations of interest.  \n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Determining if an eQTL and its eGene are in a Hi-C Interaction.",
        "parent_header": [
          "Example Pipelines:"
        ],
        "type": "Text_excerpt",
        "value": "We can also quickly find if any eQTLs are in a chromatin interaction with their partnered eGene.  Assuming we have three files, eQTL.bed, eGene.bed, and interactions.pgl, we first make a PGL file consisting of each eQTL with its corresponding eGenes (either through paste or join).  We can then perform an intersection on this PGL file with the interactions.pgl file to get the eQTLs that are interacting with their eGene.  The full pipe would look as follows:\n```\npaste eQTL.bed eGene.bed > combinedQTL.bedpe\npgltools formatbedpe combinedQTL.bedpe > combinedQTL.pgl\npgltools intersect -a combinedQTL.pgl -b interactions.pgl > QTLeGeneInInteractions.pgl\n```\nor in a pipe:\n```\npaste eQTL.bed eGene.bed | pgltools formatbedpe | pgltools intersect -stdInA -b interactions.pgl >   QTLeGeneInInteractions.pgl\n```\n"
      },
      "source": "https://raw.githubusercontent.com/billgreenwald/pgltools/dev/README.md",
      "technique": "header_analysis"
    }
  ]
}