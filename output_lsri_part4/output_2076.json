{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgement",
        "type": "Text_excerpt",
        "value": "GRIDSS uses the YourKit Java Profiler for Performance Tuning.\n\n![alt text](https://www.yourkit.com/images/yklogo.png)\n\nYourKit supports open source projects with innovative and intelligent tools for monitoring and profiling Java and .NET applications.\nYourKit is the creator of [YourKit Java Profiler](https://www.yourkit.com/java/profiler/), [YourKit .NET Profiler](https://www.yourkit.com/.net/profiler/), [YourKit YouMonitor](https://www.yourkit.com/youmonitor/).\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Recommended minimal citations are:\n\n**If you use breakpoint calling with GRIDSS version 2.x.y, please cite:**\n\nCameron DL, Baber J, Shale C, Valle-Inclan JE, Besselink N, van Hoeck A, Janssen R, Cuppen E, Priestley P, Papenfuss AT. GRIDSS2: comprehensive characterisation of somatic structural variation using single breakend variants and structural variant phasing. Genome Biol. 2021 Jul 12;22(1):202.\n\nCameron DL, Schr\u00f6der J, Penington JS, Do H, Molania R, Dobrovic A, Speed TP, Papenfuss AT. GRIDSS: sensitive and specific genomic rearrangement detection using positional de Bruijn graph assembly. Genome Research, 2017 Dec;27(12):2050-2060.\n\n\n**If you use VIRUSBreakend, please cite:**\n\nCameron DL, Jacobs N, Roepman P, Priestley P, Cuppen E, Papenfuss AT; VIRUSBreakend. Viral Integration Recognition Using Single Breakends, Bioinformatics, Volume 37, Issue 19, 1 October 2021, Pages 3115\u20133119\n\nCameron DL, Baber J, Shale C, Valle-Inclan JE, Besselink N, van Hoeck A, Janssen R, Cuppen E, Priestley P, Papenfuss AT. GRIDSS2: comprehensive characterisation of somatic structural variation using single breakend variants and structural variant phasing. Genome Biol. 2021 Jul 12;22(1):202.\n\n\n**If you use single breakend calling, please cite:**\n\nCameron DL, Baber J, Shale C, Valle-Inclan JE, Besselink N, van Hoeck A, Janssen R, Cuppen E, Priestley P, Papenfuss AT. GRIDSS2: comprehensive characterisation of somatic structural variation using single breakend variants and structural variant phasing. Genome Biol. 2021 Jul 12;22(1):202.\n\n\n**If you use breakpoint calling with GRIDSS version 1.x.y**\n\nCameron DL, Schr\u00f6der J, Penington JS, Do H, Molania R, Dobrovic A, Speed TP, Papenfuss AT. GRIDSS: sensitive and specific genomic rearrangement detection using positional de Bruijn graph assembly. Genome Research, 2017 Dec;27(12):2050-2060.\n\n\n**If you use LINX with GRIDSS (v2+), please cite:**\n\nCharles Shale, Daniel L. Cameron, Jonathan Baber, Marie Wong, Mark J. Cowley, Anthony T. Papenfuss, Edwin Cuppen, Peter Priestley. Unscrambling cancer genomes via integrated analysis of structural variation and copy number, Cell Genomics, Volume 2, Issue 4, 2022\n\nCameron DL, Baber J, Shale C, Valle-Inclan JE, Besselink N, van Hoeck A, Janssen R, Cuppen E, Priestley P, Papenfuss AT. GRIDSS2: comprehensive characterisation of somatic structural variation using single breakend variants and structural variant phasing. Genome Biol. 2021 Jul 12;22(1):202.\n\nand **not the bioRxiv preprints**.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Should I include alt contigs in the reference?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS relies on the aligner to determine the mapping location and quality of assembly contigs and to identify split read from soft clipped reads. GRIDSS considers alignments with low mapping quality (default mapq <= 10) to not be uniquely aligned and treats them as unaligned. If alt contigs are included in an aligner that is not alt-aware then hits to sequences that are in both the primary reference contigs and the alt contigs will be given a low mapq by the aligner and will be treated as unaligned by GRIDSS. By default, GRIDSS uses bwa mem for alignment so by including the bwa alt contig definition file, reads from regions with alt homology will be preferentially aligned to the reference with a correspondingly improved mapq. Whether or not to include alt contigs depends on what sort of downstream analysis you intend to perform and how your intend to handle structural variants involving alt contigs. That said, if your reference genome includes alt contigs and a bwa alt contig definition file is available for your genome, you should use it.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference genome used by *input.bam* does not match reference genome *reference.fa*. The reference supplied must match the reference used for every input.",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "The reference genome used to align input.bam does not match the reference genome supplied to GRIDSS.\nIf the differences are purely based on chromosome name and ordering, the Picard tools utility ReorderBam\ncan be used to fix chromosome orderings.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PapenfussLab/gridss"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How much memory should I give GRIDSS?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS has been optimised to run on a 8core/32gb cloud compute node.\n\nAt least 4GB + 2GB per thread. It is recommended to run GRIDSS with max heap memory (-Xmx) of 8GB for single-threaded operation\n(WORKER_THREADS=1), 16GB for multi-core desktop operation, and 31GB for server operation. Note that due to Java's use of [Compressed Oops](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html#compressedOop), specifying a max heap size of between 32-48GB effectively reduces the memory available to GRIDSS so is strongly discouraged.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing to GRIDSS",
        "type": "Text_excerpt",
        "value": "Bug fix pull requests are always welcome.\n\nIf you have a feature you would like to implement, please first raise an issue outlining the problem and proposed solution so as to avoid any wasted or duplicated effort.\nTo build GRIDSS, the development environment requires maven and all GRIDSS and VIRUSBreakend dependencies (see GRIDSS Dockerfile and VIRUSBreakend readme).\nTo run all test cases, a `../ref/` directory is also required containing the following genomes (with all associated GRIDSS `--setupreference` files created):\n\n - hg19.fa\n - Homo_sapiens_assembly38.fasta\n - hg38.fa\n - Escherichia_coli_bl21_de3_.ASM956v1.dna.toplevel.fa\n\n`scripts/dev/` contains helpful utilities for GRIDSS development work.\n\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-06-11T11:00:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-29T15:31:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GRIDSS: the Genomic Rearrangement IDentification Software Suite"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9491685728247748,
      "result": {
        "original_header": "GRIDSS - the Genomic Rearrangement IDentification Software Suite",
        "type": "Text_excerpt",
        "value": "GRIDSS is a module software suite containing tools useful for the detection of genomic rearrangements. GRIDSS includes a genome-wide break-end assembler, as well as a structural variation caller for Illumina sequencing data. GRIDSS calls variants based on alignment-guided positional de Bruijn graph genome-wide break-end assembly, split read, and read pair evidence. \nGRIDSS makes extensive use of the [standard tags defined by SAM specifications](http://samtools.github.io/hts-specs/SAMtags.pdf). Due to the modular design, any step (such as split read identification) can be replaced by another implementation that also outputs using the standard tags. It is hoped that GRIDSS can serve as an exemplar modular structural variant pipeline designed for interoperability with other tools. \nDetailed documentation is being developed [here](https://github.com/PapenfussLab/gridss/wiki/GRIDSS-Documentation)\n \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9782264198244278,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "GRIDSS is fundamentally a structural variation breakpoint caller. Variants are output as VCF breakends. Each call is a breakpoint consisting of two breakends, one from location A to location B, and a reciprocal record from location B back to A. Note that although each record fully defines the call, the VCF format requires both breakends to be written as separate records. \nTo assist in downstream analysis, the `StructuralVariantAnnotation` R BioConductor package is strongly recommended.\nOperations such as variant filter, annotation and exporting to other formats such as BEDPE can be easily accomplished using this package in conjuction with the BioConductor annotation packages.\n \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9867303579727089,
      "result": {
        "original_header": "Quality score",
        "type": "Text_excerpt",
        "value": "GRIDSS calculates quality scores according to the model outlined in the [paper](http://biorxiv.org/content/early/2017/02/21/110387).\nAs GRIDSS does not yet perform multiple test correction or score recalibration, QUAL scores are vastly overestimated for all variants.\nAs a rule of thumb, variants that have QUAL >= 1000 and have assemblies from both sides of the breakpoint (AS > 0 & RAS > 0) are considered of high quality,\nvariants with QUAL >= 500 but that can only be assembled from one breakend (AS > 0 | RAS > 0) are considered of intermediate quality,\nand variants with low QUAL score or lack any supporting assemblies are considered to be of low quality.\n \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8604871146810894,
      "result": {
        "original_header": "Non-standard INFO fields",
        "type": "Text_excerpt",
        "value": "GRIDSS writes a number of non-standard VCF fields. These fields are described in the VCF header.\n \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.891934474594493,
      "result": {
        "original_header": "BED/BEDPE export",
        "type": "Text_excerpt",
        "value": "The recommended way to convert GRIDSS output to BEDPE is via the BioConductor `StructuralVariantAnntotation` package.\n```\nlibrary(StructuralVariantAnnotation)\nlibrary(rtracklayer)\n\nvcf = readVcf(\"gridss.vcf\")\n\n# Export breakpoints to BEDPE\nbpgr = breakpointRanges(vcf)\n# TODO: add your event filtering here. The default GRIDSS output is very verbose/sensitive.\nwrite.table(breakpointgr2bedpe(bpgr), file=\"gridss_breakpoints.bedpe\", sep=\"\\t\", quote=FALSE, col.names=FALSE)\n\t\n# Export single breakends to BED\nbegr = breakendRanges(vcf)\n# TODO: add your event filtering here. The default GRIDSS output is very verbose/sensitive.\nbegr$score = begr$QUAL\nexport(begr, con=\"gridss_single_breakends.bed\")\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8738650382609121,
      "result": {
        "original_header": "Visualisation of results",
        "type": "Text_excerpt",
        "value": "When performing downstream analysis on variant calls, it can be immensely useful to be able to inspect\nthe reads that the variant caller used to make the variant calls. As part of the GRIDSS pipeline, the following\nintermediate files are generated: \nThe inputsv  file contains all reads GRIDSS considered as providing putative support for\nany potential breakpoint, including breakpoints of such low quality that GRIDSS did not\nmake any call. This file includes all soft clipped, indel-containing, and split reads, as\nwell as all discordant read pairs and pairs with only one read mapped. \nGRIDSS treats breakend assemblies as synthetic soft clipped read alignments thus assemblies\nare displayed in the same manner as soft clipped/split reads. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9625672484810432,
      "result": {
        "original_header": "Intermediate Files",
        "type": "Text_excerpt",
        "value": "GRIDSS writes a large number of intermediate files. If rerunning GRIDSS with different parameters on the same input, all intermediate files must be deleted, or a different WORKING_DIR specified. All intermediate files are written to the WORKING_DIR directory tree, with the exception of temporary sort buffers which are written to TMP_DIR and automatically deleted at the conclusion of the sort operation. \nFile | Description\n------- | ---------\ngridss.* | Temporary intermediate file\ngridss.lock.breakend.vcf | Lock directory to ensure that only one instance of GRIDSS is running for any given output file.\n*.bai | BAM index for coordinate sorted intermediate BAM file.\nWORKING_DIR/*file*.gridss.working | Working directory for intermediate files related to the given file.\nWORKING_DIR/*input*.gridss.working/*input*\\*_metrics | Various summary metrics for the given input file.\nWORKING_DIR/*input*.gridss.working/*input*.realign.*N*.fq | Split read identification fastq file requiring alignment by NGS aligner.\nWORKING_DIR/*input*.gridss.working/*input*.realign.*N*.bam | Result of NGS alignment.\nWORKING_DIR/*input*.gridss.working/*input*.sv.bam | Subset of input reads considered by GRIDSS. This file is useful for visualisation of the supporting reads contributing to structural variant calls. Note that this file includes split read alignments identified from soft clipped reads in the input file.\nWORKING_DIR/*assembly*.gridss.working/*assembly*.sv.bam | Assembly contigs represented as soft clipped or split reads. These are the assembly contigs GRIDSS uses for variant calling. Note that, as with split reads, GRIDSS uses the SA tag to encode split read alignments.\nWORKING_DIR/*output*.gridss.working/*output*.breakpoint.vcf | Raw unannotated variant calls before unique allocation of multi-mapping reads.\n \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9370522654584075,
      "result": {
        "original_header": "Building from source",
        "type": "Text_excerpt",
        "value": "Maven is used for build and dependency management which simplifies compile to the following steps: \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/PapenfussLab/gridss/wiki"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PapenfussLab/gridss/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I perform tumour/normal somatic variant calling?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Jointly call on all samples from the patient.\nIt is strongly recommended that the normal be the first argument as that is what downstream steps expect.\nFor example,  `gridss ... patientX_normal.bam patientX_primary.bam patientX_met.bam`.\nTo filter to somatic calls, use the `gridss_somatic_filter` script included in the GRIDSS release.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I tell GRIDSS multiple BAMs are from the same sample?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Use the `--labels` command line option. Eg: `--labels sample1,sample1,sample2 sample1_library1.bam sample1_library2.bam sample2.bam`\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why are there ALT alleles with `.` in the output?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "This is the [VCF](https://samtools.github.io/hts-specs/VCFv4.2.pdf) notation for single breakend variant calls. See section 5.4.9 of the specifications document. These calls indicate that a breakpoint was found at this location but the partner location could not be unambiguously determined.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I do RepeatMasker annotation of breakend sequences?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Run `gridss_annotate_vcf_repeatmasker` on the GRIDSS output.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I do viral annotation?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Use VIRUSBreakend for viral annotations. See the [VIRUSBreakend README](https://github.com/PapenfussLab/gridss/blob/master/VIRUSBreakend_Readme.md) for more details.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "What does `gridss_somatic_filter` actually do?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "See documentation at https://github.com/PapenfussLab/gridss/wiki/Somatic-Filtering\n\nThe Hartwig Medical Foundation has reimplemented `gridss_somatic_filter` in Java as [GRIPSS](https://github.com/hartwigmedical/hmftools/tree/master/gripss).\nGRIPSS is much faster, has additional features, and is the recommended tool for somatic filtering of GRIDSS output.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I create the panel of normals required by `gridss_somatic_filter`?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "If you are using hg19 or hg38, then a PON based on Dutch samples is available from https://resources.hartwigmedicalfoundation.nl/.\nMake sure the reference you are using and the PON both use the same chromosome notation or nothing will get filtered (e.g. `1` vs `chr1`).\nIf these are not appropriate, you'll need to create your own using `gridss.GeneratePonBedpe`\n\nHere is an example that generates a PON from every VCF in the current directory:\n\n```\nmkdir -p pondir\njava -Xmx8g \\\n\t-cp ~/dev/gridss/target/gridss-2.10.2-gridss-jar-with-dependencies.jar \\\n\tgridss.GeneratePonBedpe \\\n\t$(ls -1 *.vcf.gz | awk ' { print \"INPUT=\" $0 }' | head -$n) \\\n\tO=pondir/gridss_pon_breakpoint.bedpe \\\n\tSBO=pondir/gridss_pon_single_breakend.bed \\\n\tREFERENCE_SEQUENCE=$ref_genome\n```\n\nThe score fields of the bedpe/bed files is the count of the number of samples that variant was found in.\nI recommended filtering these output files to only variants found in 3+ samples.\n\nNote that `gridss_somatic_filter` requires the files to be named `gridss_pon_breakpoint.bedpe` and `gridss_pon_single_breakend.bed`.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I merge PONs?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Merging of PONs is not supported but incremental updates are.\nUse `INPUT_BEDPE` and `INPUT_BED` files to `gridss.GeneratePonBedpe`.\nFor example, you can add your samples to the Hartwig PONs by pointing `INPUT_BEDPE` and `INPUT_BED` to the Hartwig PONs and adding your VCFs as outlined above.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Should I process each input BAM separately or together?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Wherever possible, samples should be processed together. Joint calling enables the detection of low allelic fraction SVs, as well as making the downstream analysis much easier (a single VCF with a breakdown of support per sample is much easier to deal with than multiple VCFs - the matching logic required to determine if two SVs are equivalent is non-trivial).\n\nGRIDSS joint calling has been tested on up 12 samples with ~1000x aggregate coverage. If you have hundreds of samples, joint assembly will likely be computationally prohibitive and you will need to perform assembly in batches, then merge the results together.\n\nWARNING: multiple instances of GRIDSS generating reference files at the same time will result in file corruption. Make sure `setupreference` files have been generated before running parallel GRIDSS jobs.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I perform assembly on multiple nodes?",
        "parent_header": [
          "FAQ",
          "Should I process each input BAM separately or together?"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS preprocessing and assembly can be spread across multiple nodes.\nPreprocess parallelisation is one job per input file.\nAssembly parallelisation is one thread per genomic region.\nTo reduce wall times, regions can be distributed across multiple nodes using the `--jobindex` and `--jobnodes` parameters.\n\nHere is an example:\n```\ngridss -s setupreference # once-off-setup\n# in parallel:\ngridss -s preprocess input1.bam\ngridss -s preprocess input2.bam\ngridss -s preprocess input3.bam\ngridss -s preprocess input4.bam\n# wait for all preprocessing jobs to complete\n# Perform assembly parallel (across three nodes in this example)\ngridss -s assemble --jobindex 0 --jobnodes 3 -a assembly.bam  input1.bam input2.bam input3.bam input4.bam\ngridss -s assemble --jobindex 1 --jobnodes 3 -a assembly.bam input1.bam input2.bam input3.bam input4.bam\ngridss -s assemble --jobindex 2 --jobnodes 3 -a assembly.bam input1.bam input2.bam input3.bam input4.bam\n# wait for all assembly jobs to complete\n# Gather the assembly results togther. This job is essentially a file copy and completes very quicky\ngridss -s assemble -a assembly.bam input1.bam input2.bam input3.bam input4.bam\n# perform variant calling\ngridss -s call  -a assembly.bam input1.bam input1.bam input2.bam input3.bam input4.bam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I perform batched assembly?",
        "parent_header": [
          "FAQ",
          "Should I process each input BAM separately or together?"
        ],
        "type": "Text_excerpt",
        "value": "If you can perform joint assembly, do so.\nIf you run out of memory when performing joint assembly, or hit regularly encounter assembly timeouts, batched assembly is required.\nYou are likely to encounter these issues at, or above, 1000x coverage.\n\nTo perform batched assembly, run the GRIDSS `assemble` step multiple times each with only a subset of the input files\nIf you use input labels, all inputs with the same label must be in the same batch.\n\nHere is an example:\n```\ngridss -s setupreference # once-off-setup\ngridss -s preprocess input1.bam\ngridss -s preprocess input2.bam\ngridss -s preprocess input3.bam\ngridss -s preprocess input4.bam\ngridss -s assemble -a assembly12.bam input1.bam input2.bam\ngridss -s assemble -a assembly34.bam input3.bam input4.bam\ngridss -s call -a assembly12.bam -a assembly34.bam input1.bam input2.bam input3.bam input4.bam\n```\n\nRelated samples should always be assembled together in the same batch.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "I encountered an error. What should I do?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "* Check the bottom of this page for commonly encountered errors and their solutions\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I process only my region of interest?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Extract all fragments overlapping your region of interest, using `gridss_extract_overlapping_fragments` then run `gridss` on the subset bam.\n`gridss_extract_overlapping_fragments` is almost identical to filtering using `samtools view` except that it extracts alignment records for any fragment overlapping a region of interest (ie mate reads and supplementary alignments).\nThat is, all records with read names matching the read name of an alignment overlapping any region of interest.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "What does `gridss_annotate_kraken2` output?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "`gridss_annotate_kraken2` adds Kraken2 classifications to single breakend and breakpoint inserted sequences.\nThe [NCBI taxonomy ID](https://www.ncbi.nlm.nih.gov/taxonomy) for the inserted sequences is in the `INSTAXID` INFO field.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why are all calls BND?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "In VCF version 4.3 and earlier, the meaning of `DEL`, and `DUP` is ambiguous as it is unclear if the claim being made is a breakpoint claim, a copy number claim, or both.\nA `DUP` reported by a copy number caller has a very different meaning than a `DUP` reported by a breakpoint caller.\nA copy number `DUP` indicates there is at least one additional copy of the duplication region but makes no claim regarding where that extra copy is location.\nA breakpoint `DUP` indicates that the start and end of the 'duplicated' region are connected but makes no claim regarding the actual copy number of the duplicated region.\nA true `DUP` or `DEL` requires both a copy number change, a breakpoint of the correct orientation, and to not form part of a larger rearrangement.\n\nSince GRIDSS is fundamentally a breakpoint (and single breakend) caller, we have made the choice to report all variants in `BND` notation to make it explicit exactly what it is that GRIDSS is detecting.\nFor users only interested the analysis of simple events and for which the incorrect interpretation of complex rearrangements is acceptable, the `example/simple-event-annotation.R` will annotate GRIDSS calls with `SIMPLE_TYPE` and `SVLEN` fields.\n\nOur approach of explicitly seperating the detection of the rearrangement building blocks (copy number, breakpoint, and single breakends) from the rearrangement events will be codified in the upcoming version 4.4 of the VCF specifications through the incorporation of a `SVCLAIM` field (to remove the ambiguity of `DEL` and `DUP` calls), and `EVENT`/`EVENTTYPE` fields (for linking of related variant calls into higher-order events such as chromothripsis.\n\nFor an example of why an event-based model that seperates detection from intepretation, see the [LINX readme](https://github.com/hartwigmedical/hmftools/blob/master/sv-linx/README.md) and [preprint]( https://www.biorxiv.org/content/10.1101/2020.12.03.410860v1), and [complex event visualisation examples](https://github.com/hartwigmedical/hmftools/blob/master/sv-linx/README_VIS.md).\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GRIDSS JAR",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS takes a modular approach and the GRIDSS jar consists of a collection of separate tools. Each tool in the GRIDSS pipeline can be run independently. The following data flow diagram gives an overview of the GRIDSS pipeline used when running `gridss`.\n\n![GRIDSS data flow diagram](https://docs.google.com/drawings/d/1aXFBH0E9zmW4qztHIEliZfsLCHJa6_-l624Frq1X-Ms/pub?w=973&h=760)\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CallVariants",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "This tool runs every step in the variant calling pipeline. This entry point has been superceeded by `gridss` but is retained for backward compatibility with existing pipeline. `gridss` is preferred as it has lower peak memory usage and is slightly faster due to the use of samtools for sorting instead of htsjdk.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CollectGridssMetrics",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS requires a number of input library metrics to be calculated. The metrics calculations programs are invoked in the same manner as Picard tools metrics. This program functions similarly to Picard tools CollectMultipleMetrics but, by default, only extracts the metrics required by GRIDSS.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CollectCigarMetrics",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Collects metrics regarding the size and type of read alignment CIGAR elements.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CollectIdsvMetrics",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Collects generic library-level metrics such as the read and read pair mapping rates.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CollectMapqMetrics",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Collects metrics regarding distribution of read mapping quality scores.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CollectTagMetrics",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Collects metrics regarding presence of SAM tags.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ExtractSVReads",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Extracts the subset of reads that provide potential support for structural variation. These reads fall into one or more of the following classes:\n* Reads aligned with an insertion or deletion in the read alignment\n* Soft clipped reads\n* Split reads (identified by the SA SAM Tag)\n* Discordant read pairs\n* Read pairs with only 1 read mapped\n* Unmapped reads\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SoftClipsToSplitReads",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Identifies split reads by iterative realignment of soft clipped bases with a NGS aligner. By default, bwa mem is used for read alignment.\nThe GRIDSS pipeline runs this on all input files, as well as the breakend assembly contigs generated by AssembleBreakends.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ComputeSamTags",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "This step recomputes redundant information to ensure data consistency and writes additional standards-defined SAM tags by ppulates SAM tags required in downstream steps, softening hard clips, and correcting data inconsistencies in the input files. In particular, `AssembleBreakends` requires the `R2` tag to be populated. Since `R2` is populated from the mate sequence and softening hard clips requires all split read alignment records, this step requires all records with the same read name to be adjacent in the BAM file (ie read name grouped sort order). Data inconsistencies corrected include:\n\n- `NM` tag not matching edit distance to reference\n- Mate CIGAR and alignment field not matching actual alignment and CIGAR of mate (e.g. GATK indel realignment does not update mate information when realigning reads)\n- `SA` tag not matching supplementary alignment\n- Supplementary alignments not duplicated marked (markdup only marks primary alignments)\n- Supplementary alignments incorrectly flagged as secondary alignments\n\nThis step can recalculate the following SAM tags:\n\n- SA (default)\n- NM (default)\n- R2 (default)\n- Q2\n- MC (default)\n- MQ (default)\n- CC\n- CP\n- HI\n- IH\n- FI\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AssembleBreakends",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Generates breakend assemblies from the input reads. Breakend assemblies are written as synthetic soft clipped reads.\nEach of these reads corresponds to a breakend assembly contig composed of reads anchored (either directly, or via the mate read)\nto the location of the breakend assembly.\n\nBreakend contigs composed entirely of discordant read pairs or reads with unmapped mates cannot be uniquely placed as there exists\nan interval over which the contig is anchored. These alignments are written using a placeholder CIGAR alignment of the form XNX.\nFor example, a breakend contig read with an alignment of 1X50N1X150S represents a 150bp contig in which the breakend is expected to\noccur at one of the 52 genomic positions given by the placeholder XNX alignment interval.\n\nBreakpoints are identified by running SoftClipsToSplitReads on the breakend assembly contigs. High quality breakpoints are expected\nto have two independent breakend assemblies (one from each breakend of the breakpoint).\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "IdentifyVariants",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Identifies putative structural variants from the reads providing potential SV support, and the breakend assembly contigs.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AnnotateVariants",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Annotates breakpoint calls performing AllocateEvidence, AnnotateReferenceCoverage, AnnotateInexactHomology annotation.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AllocateEvidence",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR",
          "AnnotateVariants"
        ],
        "type": "Text_excerpt",
        "value": "Uniquely allocate reads/read pairs to identified breakpoints by ensuring that for each read/read pair, only the single\nbest alignment is retained (relevant for input files containing multiple mapping locations for each read).\nRead counts and other summary statistics are collated.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AnnotateReferenceCoverage",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR",
          "AnnotateVariants"
        ],
        "type": "Text_excerpt",
        "value": "Calculates the number of reads and read pairs providing support for the reference allele at each breakpoint.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AnnotateInexactHomology",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Calculates the size of the inexact homology between the reference sequence and the breakpoint sequence. Breakpoints\nwith long inexact homology are possibly due to alignment artifacts causing false positive breakpoint calls between\nregions of homologous sequence.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AnnotateInsertedSequence",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "Finds potential mapping locations for single breakends and breakpoint insert sequences in the given reference. Used for RepeatMasker annotation, and viral integration detection.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GeneratePonBedpe",
        "parent_header": [
          "FAQ",
          "GRIDSS JAR"
        ],
        "type": "Text_excerpt",
        "value": "This tool aggregates variants across multiple VCFs and counts the number of samples supporting each variant. Only the first sample per VCF is processed which is useful for generating a panel of normals (PON) from a cohort of cancer samples with matched normals. Output is a bedpe (breakpoint) and bed (single breakend) file suitable for use by `gridss_somatic_filter`.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Common Parameters",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS programs have a large number of parameters that can be be adjusted. The default parameter set has been tested with paired-end Illumina data ranging from 2x36bp to 2x250bp and should give a reasonably good result. Command line used parameters are listed below.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OUTPUT (Required)",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Variant calling output file. Can be VCF or BCF.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "REFERENCE_SEQUENCE (Required)",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Reference genome FASTA file. GRIDSS requires that the reference genome supplied exactly matches\nthe reference genome of all input files.\nThe reference genome must be in FASTA format and must have a tabix (.fai) index and an\nindex for the NGS aligner (by default bwa). The NGS aligner index prefix must match\nthe reference genome filename. For example, using the default setting against the reference\nfile reference.fa, the following files must be present and readable:\n\nFile | Description\n------- | ---------\nreference.fa | reference genome\nreference.fa.fai | Tabix index\nreference.fa.amb | bwa index\nreference.fa.ann | bwa index\nreference.fa.bwt | bwa index\nreference.fa.pac | bwa index\nreference.fa.sa | bwa index\n\nThese can be created using `samtools faidx reference.fa` and `bwa index reference.fa`\n\nA .dict sequence dictionary is also required but GRIDSS will automatically create one if not found.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "INPUT (Required)",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Input libraries. Specify multiple times (i.e. `INPUT=file1.bam INPUT=file2.bam INPUT=file3.bam`) to process multiple libraries together.\n\nInput files must be coordinate sorted SAM/BAM/CRAM files.\n\nGRIDSS considers all reads in each file to come from a single library.\n\nInput files containing read groups from multiple different libraries should be split into an input file per-library.\n\nThe reference genome used for all input files should match the reference genome supplied to GRIDSS.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "INPUT_LABEL",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Labels to allocate inputs. The default label for each input file corresponds to the file name but can be overridden by\nspecifying an INPUT_LABEL for each INPUT. The output for any INPUT files with the same INPUT_LABEL will be merged.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ASSEMBLY (Required)",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "File to write breakend assemblies to. It is strongly recommended that the assembly filename corresponds to the OUTPUT filename. Using ASSEMBLY=assembly.bam is problematic as (like the INPUT files) the assembly file is relative not to WORKING_DIR, but to the current directory of the calling process. This is likely to result in data corruption when the same assembly file name is used on different data sets (for example, writing assembly.bam to your home directory when running on a cluster).\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BLACKLIST",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "BED exclude-list of regions to exclude from analysis. The [ENCODE DAC blacklist](https://www.encodeproject.org/annotations/ENCSR636HFF/)\nis recommended when aligning against hg19.\n\nUnlike haplotype assemblers such as TIGRA and GATK, GRIDSS does not abort assembly when complex assembly graphs are encountered. Processing of these graphs slows down the assembly process considerably, so if regions such as telomeric and centromeric regions are to be excluded from downstream analysis anyway, assembly of these regions is not required. It is recommended that a exclude-list such as the [ENCODE DAC blacklist](https://www.encodeproject.org/annotations/ENCSR636HFF/) be used to filter such regions. Inclusion of additional mappability-based exclude-lists is not required as GRIDSS already considers the read mapping quality.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "READ_PAIR_CONCORDANT_PERCENT",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Portion (0.0-1.0) of read pairs to be considered concordant. Concordant read pairs are considered to provide no support for structural variation.\nClearing this value will cause GRIDSS to use the 0x02 proper pair SAM flag written by the aligner to determine concordant pairing.\nNote that some aligners set this flag in a manner inappropriate for SV calling and set the flag for all reads with the expected orientation and strand regardless of the inferred fragment size.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "INPUT_MIN_FRAGMENT_SIZE, INPUT_MAX_FRAGMENT_SIZE",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Per input overrides for explicitly specifying fragment size interval to be considered concordant. As with INPUT_LABEL, these must be specified\nfor all input files. Use null to indicate an override is not required for a particular input (e.g.\n`INPUT=autocalc.bam INPUT_MIN_FRAGMENT_SIZE=null INPUT_MAX_FRAGMENT_SIZE=null INPUT=manual.bam INPUT_MIN_FRAGMENT_SIZE=100 INPUT_MAX_FRAGMENT_SIZE=300` )\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "WORKER_THREADS",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Number of processing threads to use, including number of threads to use when invoking the aligner.\nNote that the number of threads spawned by GRIDSS is greater than the number of worker threads due to asynchronous I/O threads thus it is not uncommon to see over 100% CPU usage when WORKER_THREADS=1 as bam compression/decompression is a computationally expensive operation.\nThis parameter defaults to the number of cores available.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "WORKING_DIR",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Directory to write intermediate results directories. By default, intermediate files for each input or output file are written to a subdirectory in the same directory as the relevant input or output file.\nIf WORKING_DIR is set, all intermediate results are written to subdirectories of the given directory.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TMP_DIR",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "This field is a standard Picard tools argument and carries the usual meaning. Temporary files created during processes such as sort are written to this directory.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "samjdk defines",
        "parent_header": [
          "FAQ",
          "Common Parameters"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS uses [htsjdk](https://github.com/samtools/htsjdk) as a SAM/BAM/CRAM/VCF parsing library. The following htsjdk java command-line options are strongly recommended for improved performance:\n\n* -Dsamjdk.use_async_io_read_samtools=true\n* -Dsamjdk.use_async_io_write_samtools=true\n* -Dsamjdk.use_async_io_write_tribble=true\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "libsswjni.so",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Due to relatively poor performance of existing Java-based Smith-Waterman alignment packages, GRIDSS incorporates a JNI wrapper to the striped Smith-Waterman alignment library [SSW](https://github.com/mengyao/Complete-Striped-Smith-Waterman-Library). GRIDSS will attempt to load a precompiled version which is supplied as part of the GRIDSS package (a libsswjni.so file will be created in the TMP_DIR when GRIDSS is run). If the precompiled version is not compatible with your linux distribution, or you are running a different operating system, recompilation of the wrapper from source will be required. When recompiling, ensure the correct libsswjni.so is loaded using -Djava.library.path, or the LD_LIBRARY_PATH environment variable as per the JNI documentation.\n\nIf you have an older CPU that does not support SSE instructions, GRIDSS will terminate with a fatal error when loading the library. Library loading can be disabled by adding `-Dsswjni.disable=true` to the GRIDSS command line. If libsswjni.so cannot be loaded, GRIDSS will fall back to a (50x) slower java implementation which will result in the GRIDSS inexact homology variant annotation step running very slowly.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CONFIGURATION_FILE",
        "parent_header": [
          "FAQ",
          "libsswjni.so"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS uses a large number of configurable settings and thresholds which for ease of use are not included\nas command line arguments. Any of these individual settings can be overriden by specifying a configuration\nfile to use instead. Note that this configuration file uses a different format to the Picard tools-compatible\nconfiguration file that is used instead of the standard command-line arguments.\n\nWhen supplying a custom configuration, GRIDSS will use the overriding settings for all properties specified\nand fall back to the default for all properties that have not been overridden. Details on the meaning\nof each parameter can be found in the javadoc documentation of the `au.edu.wehi.idsv.configuration` classes.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Error Messages",
        "type": "Text_excerpt",
        "value": "For some error messages, it is difficult to determine the root cause and what to do to fix it.\nHere is a list of key phrases of errors encountered by users and their solution\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "htsjdk.samtools.SAMFormatException: SAM validation error",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "Your input file does not conform to the SAM/BAM specifications. Solutions are to fix the input file so it conforms to the specifications (recommended) or add `--picardoptions VALIDATION_STRINGENCY=LENIENT` to ignore the error. Note that not all errors can be ignored.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Exception in thread \"main\" java.lang.UnsupportedClassVersionError: au/edu/wehi/idsv/Idsv : Unsupported major.minor version 52.0",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "You are attempting to run GRIDSS with an old Java version. GRIDSS requires Java 8 or later.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ExternalProcessFastqAligner Subprocess terminated with with exit status 1. Alignment failed for *INPUT*.realign.0.fq",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "The external aligner (bwa) could not be run. The most common causes of this are:\n- bwa is not on `PATH`\n - Does running \"bwa\" print out the bwa usage message? If you are using a cluster, you may have to add bwa to your `PATH` (eg `module add bwa`).\n- bwa index does not exist\n- bwa index has incorrect suffix\n - e.g. if the reference is ref.fa the index must be ref.fa.bwt _not_ ref.bwt\n\nCan you run the bwa command exactly as it appears in the error message?\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(Too many open files)",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS has attempted to open too many files at once and the OS file handle limit has been reached.\nOn linux 'ulimit -n' displays your current limit. This error likely to be encountered if you have specified a large number of input files or threads. The following solution is recommended:\n* Increase your OS limit on open file handles (eg `ulimit -n _<larger number>_`)\n  * Note that many linux systems have a default hard limit on open file handles of 4096 which with many samples is frequently too still too few. Increasing the hard limit requires root access.\n* Increase the chunk size. The default chunk size is 10 million bases. This can be increased by adding a `chunkSize=50000000` line a `gridss.properties` file and adding `CONFIGURATION_FILE=gridss.properties` to the GRIDSS command line. Note that this will increase the number of bases processed by each job thus reduce the level of parallelisation possible.\n* Reduce number of worker threads. A large number of input files being processed in parallel results in a large number of files open at the same time.\n\nIf those options fail, your remaining options are:\n* Added `-Dgridss.defensiveGC=true` to the java command-line used for GRIDSS. Memory mapped file handles are not released to the OS until the buffer is garbage collected . This option add a request for garbage collection whenever a file handle is no longer used. This is a significant overhead and is not a good option for sparse data samples (such as exome or targetted sequencing) - increasing the chunk size is a much better option for these samples.\n* As a last-ditch effort, you can keep rerunning GRIDSS until it completes. If you are using the default entry point of `gridss.CallVariants` and have `-Dgridss.gridss.output_to_temp_file=true`, then you can rerun GRIDSS and it will continue from where it left off. Assuming it doesn't keep dying at the same spot, it will eventually complete.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "\"Segmentation Fault\", fatal JVM error, or no error message.",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "This is likely to be caused by a crash during alignment in libsswjni. See the sswjni sections for details on how to disable libsswjni or recompile it for your system.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Illegal Instruction",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "Your CPU does not support the SSE2 instruction set. See the sswjni sections for details on how to disable libsswjni.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00007fc36e200000, 48234496, 0) failed; error='Cannot allocate memory' (errno=12)",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS has run out of memory. Either not enough memory has been allocated to run GRIDSS or GRIDSS has attempted to memory map too many files (See \"(Too many open files)\"). In both cases, restart GRIDSS (increasing the memory available if required) and GRIDSS will continue from where it left off.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "java.lang.AssertionError: java.lang.ClassNotFoundException: com.sun.tools.javac.api.JavacTool",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "You are running GRIDSS in multi-mapping mode using only a JRE instead of a full JDK. Update your PATH and JAVA_HOME to a Java 1.8+ JDK installation.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "htsjdk.samtools.util.RuntimeIOException: java.io.IOException: No space left on device",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "Just like Picard tools and htsjdk libraries that GRIDSS uses, intermediate files are sorted according the the `TEMP` file location. On many system, /tmp does not have enough space to sort a BAM file so it is possible to run out of intermediate file storage even if you have plenty of space left on the file system the input and output files are stored on. Using the same command-line options as Picard tools, the intermediate files location can be set using the `TMP_DIR` command-line argument.\n\nIt's also possible that you've just run out of space.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 71
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PapenfussLab/gridss"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GRIDSS - the Genomic Rearrangement IDentification Software Suite"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/gridss2_manuscript/sim_aggregate_results.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/gridss2_manuscript/sim.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/dev/diff_debugspammingiterator.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/dev/create_release.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/dev/print_repeats.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/dev/debugassembly.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/dev/setup_sanity_failure_debug.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/dev/metrics_approximation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/dev/debug_validate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/dev/setup_debug.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/circos_export/circos.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/cohort_analysis/3_run_scripts.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/cohort_analysis/1_setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/cohort_analysis/somatic_template.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/virusbreakend_manuscript/scripts/hmf_mapping_rate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/virusbreakend_manuscript/scripts/cleanup_gce.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/virusbreakend_manuscript/scripts/gridss_annotate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/virusbreakend_manuscript/scripts/hartwig_aggregate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/virusbreakend_manuscript/scripts/gce_bucket_stream_virusbreakend.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/virusbreakend_manuscript/scripts/sim.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/scripts/virusbreakend_manuscript/scripts/summarise_sim.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/example/annotate_repeatmasker.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/example/virusbreakend-debian9-install-dependencies.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/example/torque_example.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/docker/run_cohort_from_csv.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://docs.google.com/drawings/d/1aXFBH0E9zmW4qztHIEliZfsLCHJa6_-l624Frq1X-Ms/pub?w=973&amp;h=760"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide",
        "type": "Text_excerpt",
        "value": "[**Use the quick start guide to get up and running quickly**](https://github.com/PapenfussLab/gridss/blob/master/QuickStart.md)\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8150708648109386,
      "result": {
        "original_header": "GRIDSS - the Genomic Rearrangement IDentification Software Suite",
        "type": "Text_excerpt",
        "value": "If you have any trouble running GRIDSS, please raise an issue using the Issues tab above. Based on feedback from users, a user guide will be produced outlining common workflows, pitfalls, and use cases. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999731034678462,
      "result": {
        "original_header": "Building from source",
        "type": "Text_excerpt",
        "value": "Maven is used for build and dependency management which simplifies compile to the following steps: \n* `git clone https://github.com/PapenfussLab/gridss`\n* `cd gridss`\n* `mvn clean package` \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2015,2016,2017,2018,2019,2020,2021 Daniel Cameron\n\nThis file is part of GRIDSS.\n\nGRIDSS is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nGRIDSS is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with GRIDSS.  If not, see <http://www.gnu.org/licenses/>.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://www.yourkit.com/images/yklogo.png"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gridss"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "PapenfussLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 3506136,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 367867,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 143590,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 25170,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 6377,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 5285,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 3030,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2845,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2022-02-04T03:06:03Z",
        "date_published": "2022-02-07T00:55:23Z",
        "description": "Bug fix release. Includes update to latest version of log4j\r\n\r\n- Updated log4j transitive dependency to 2.17.1. Log4j is only used in the command-line parsing library\r\n- Ignoring unmapped primary records when supplementary alignments exist\r\n  - supplementary record will treated as the primary alignment\r\n- #560 removing any left-over .sv.tmp.bam files\r\n- Improved determinism\r\n  - Removed unnecessary samtools merge munging of RG/PG headers\r\n  - Forcing deterministic ordering when merging SAM records from multiple input files\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.13.2",
        "name": "2.13.2",
        "release_id": 58656837,
        "tag": "v2.13.2",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.13.2",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/58656837",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/58656837",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.13.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2021-12-23T04:46:52Z",
        "date_published": "2021-12-23T09:21:37Z",
        "description": "Bug fix release\r\n\r\n- #550 not redirecting stderr when checking samtools version so samtools library errors aren't swallowed\r\n- #551 passing picard options (such as VALIDATION_STRINGENCY) to all gridss steps\r\n- #553 Only building in-process bwa index if it's actually going to be used\r\n- #554 `virusbreakend` auto-generating GRIDSS reference files for the host reference\r\n\r\nDocker changes:\r\n- Dropped gridss/gridss_minimal docker image support\r\n- #535 added makeblastdb to image\r\n- #549 using samtools 1.14\r\n- Docker image generation now part of CI\r\n- Added github action to publish docker image upon release creation\r\n\r\nSpecial thanks to @keiranmraine, @scwatts and @lkhilton for bugfix code contributions",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.13.1",
        "name": "2.13.1",
        "release_id": 55882675,
        "tag": "v2.13.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.13.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/55882675",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/55882675",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.13.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2021-12-05T07:54:14Z",
        "date_published": "2021-12-05T08:40:16Z",
        "description": "Breaking changes:\r\n- Removed B prefixed from `ANRP` `ANSR` `ANRPQ` `ANSRQ` fields.\r\n  - Fields are now consistent with the GRIDSS convention that `B` prefixed fields are breakend fields\r\n- #520 #542 require samtools 1.13 or later\r\n\r\nSignificant changes:\r\n- #537 reverting back to using external aligner as the default soft clip realigner\r\n  - Reverted due to:\r\n    - in-process bwa causing JVM crashes on some systems.\r\n    - In-process bwa alignments not deterministic when using more than 1 thread\r\n  - Added `--internalaligner` flag.\r\n    - Useful if the slight performance boost during the preprocessing step is more important that determinism\r\n\r\nMinor changes:\r\n- Added workaround for https://github.com/samtools/htsjdk/issues/1584\r\n- #520 @keiranmraine updated edirect install in Dockerfile\r\n- #537 AnnotateInsertedSequence now respects --externalaligner command line argument\r\n- Using fast compression for temporary files in the preprocess step\r\n- Improved word wrapping in usage message\r\n- #520 ensuring `java.io.tmpdir` exists before unpacking the JNI .so files\r\n- #530 moved ulimit change to before set errexit so all ulimit failures will be silent\r\n- Updated gridsstools to htslib 1.14\r\n- Updated gridsstools docker building to match 1.14 htslib requirement\r\n- Bump gridsstools version due to htslib version update\r\n- #538 using htslib/htslib_static.mk instead of hard-coding htslib system libraries\r\n- Added (non-default) ReadWeighted scoring model option\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.13.0",
        "name": "2.13.0",
        "release_id": 54650892,
        "tag": "v2.13.0",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.13.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/54650892",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/54650892",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.13.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2021-10-14T06:21:37Z",
        "date_published": "2021-10-14T08:27:30Z",
        "description": "Critical bug fix release\r\n\r\n***DO NOT USE THE PREVIOUS GRIDSS VERSION (version 2.12.1): the previous version contained a critical bug in the preprocessing step that removes all split reads.***\r\n\r\n***All results from GRIDS 2.12.1 should be rerun - the assembly.bam and gridss.working directories must be deleted before rerunning***\r\n\r\n- ***#513 Fixed critical regression error***\r\n  -  The #513 fix in v2.12.1 incorrectly removed the `SA` tag instead of the `aa` as intended\r\n  - This resulted in all split read being treated as soft clipped reads. v2.12.1 outputs, assembly.bam, and gridss.working directories should be deleted and GRIDSS rerun\r\n- #526 limiting parallel GC threads to match --threads\r\n- #522 `gridss`: required arguments now depends on which step is being run\r\n- #529 `gridss_somatic_filter`: added error message when neither of --output and --fulloutput are specified\r\n- #531 GeneratePonBedpe: Fixed unnecessary imprecise call inclusion error message.\r\n- #530 Not outputing time version if time is not being run\r\n- #530 Continuing even when setting the ulimit fails\r\n- #523 cleaning up any old samtools sort temp files\r\n- Fixed VIRUSBreakend max coverage threshold not being calculated\r\n -  fixes OutOfMemory Error\r\n- Increased heap size for gridss.VirusBreakendFilter\r\n -  fixes OutOfMemory Error\r\n- Added `gridss.DumpReadSupport` to exporting all supporting evidence to BED/BEDPE",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.12.2",
        "name": "2.12.2",
        "release_id": 51342327,
        "tag": "v2.12.2",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.12.2",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/51342327",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/51342327",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.12.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2021-08-11T12:22:41Z",
        "date_published": "2021-08-11T12:45:43Z",
        "description": "***DO NOT USE: this release has a critical bug in the preprocessing step that removes all split reads***\r\n\r\nMinor feature and bug fix release.\r\n\r\nA pre-built VIRUSBreakend database is now available from [here].(https://github.com/PapenfussLab/gridss/blob/master/VIRUSBreakend_Readme.md#reference-data).\r\n\r\nGRIDSS\r\n- `gridss` with no arguments now prints the usage message as intended\r\n- #511 `AF` VCF FORMAT field now populated\r\n- #513 Added --skipsoftcliprealignment option\r\n  - Reduces runtime when using an aligner that already reports split reads (e.g. bwa)\r\n- Ignoring imprecise deletion-like calls less than 500bp in size.\r\n  - Very high coverage samples have a high rate of small FP DEL calls caused by fragments slightly longer than the (99%) maximum expected fragment size\r\n- Fixed non-deterministic assembly SAM tag evidence ordering\r\n- #503 limiting error reproduction packages to 5.\r\n  - configurable with assembly.maximumReproductionExportPackages\r\n- #503 stripping SAM \"aa\" tag from input reads\r\n- Fixed crash bug in SAMRecordUtil.ByBestPrimarySplitCandidate\r\n- Added libdeflate to gridsstools\r\n- Added --no-PG to samtools sort so BAM outputs are deterministic\r\n- #509 improved gridss_somatic_filter script path determination so it works in the Docker image\r\n- Added LICENSE to release package to remove bioconda lint warning\r\n\r\nVIRUSBreakend\r\n- #508 using RefSeq viral genome whenever available\r\n- #504 Fixed rname header separator in VIRUSBreakend .summary.tsv output\r\n- \r\n- #499 running gridss preprocess so annotation doesn't fail\r\n- #499 Including edirect setup step in docker image\r\n- #499 added bcftools to the Docker image\r\n\r\n\r\n\r\n\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.12.1",
        "name": "2.12.1",
        "release_id": 47670105,
        "tag": "v2.12.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.12.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/47670105",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/47670105",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.12.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2021-05-21T07:00:27Z",
        "date_published": "2021-05-21T07:36:43Z",
        "description": "New release to coincide with formal publication of VIRUSBreakend (https://doi.org/10.1093/bioinformatics/btab343).\r\n\r\n** Temporary notice: Docker images are building/uploading. gridss conda package is in the process of being updated. This notice will be removed when the docker images and conda packages are available for usage.**\r\n\r\n## Critical packaging changes\r\n- `.sh` and `.R` suffix removed from all gridss tools.\r\n  - You'll need to update your pipeline scripts or add symlinks (e.g. `ln -s gridss gridss.sh`)\r\n\r\n| Previously | 2.12.0 |\r\n| ----------- | ----------- |\r\n| gridss.sh| gridss|\r\n| virusbreakend.sh| virusbreakend  |\r\n| virusbreakend-build.sh|virusbreakend-build |\r\n| gridss_annotate_vcf_kraken2.sh | gridss_annotate_vcf_kraken2 |\r\n|gridss_annotate_vcf_repeatmasker.sh  |gridss_annotate_vcf_repeatmasker  |\r\n|gridss_extract_overlapping_fragments.sh  |gridss_extract_overlapping_fragments  |\r\n| gridss_somatic_filter.R |gridss_somatic_filter  |\r\n|gridss.config.R |gridss.config.R |\r\n|libgridss.R |libgridss.R |\r\n\r\n- gridss/gridss:latest Docker image now includes tools and dependencies for running all GRIDSS tools including VIRUSBreakend (#473)\r\n- New gridss/gridss_minimal:latest docker image for running just `gridss`\r\n- New gridss/virusbreakend:latest docker image for running `virusbreakend` and `virusbreakend-build`\r\n\r\n## VIRUSBreakend\r\n- #484 Added VIRUSBreakend support for viral contigs in reference genome\r\n  - By default, `chrEBV` and all NCBI viral contigs are considered viral reference contigs\r\n  - Fixes missing EBV due to inclusion of `NC_007605` in `hs37d5` and `chrEBV` in `hs38DH`/`GRCh38_full_analysis_set_plus_decoy_hla`\r\n- Using default GRIDSS jvm heap size since Kraken2 needs more memory now that bacterial sequences are included\r\n- Added `nodes.dmp` to VIRUSBreakend database so downstream tools can look up the virus name from the `.summary.tsv` output\r\n- #446 Now immediately terminates instead of attempting to continue if one of the child processes does not complete successfully\r\n- Expanded documentation\r\n\r\n\r\n# Other changes\r\n\r\n- #494 Added support using the hmmer engine of RepeatMasker\r\n- #488 regenerating index files if they are zero size\r\n- Fixed `gridss` not exiting after usage message when no BAM supplied\r\n- Fixed broken `--working_dir` argument of `gridss_annotate_vcf_repeatmasker`\r\n- Fixed regression error causing assembly to be run even when the assembly output file already exists\r\n- Releases no longer depend on local environment and are built using a multi-stage Dockerfile\r\n- #489 removed unused `RF` VCF header\r\n- gridsscache files deleted if outdated\r\n- #491 Updated dependencies",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.12.0",
        "name": "2.12.0",
        "release_id": 43334101,
        "tag": "v2.12.0",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.12.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/43334101",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/43334101",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.12.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2021-03-30T23:24:47Z",
        "date_published": "2021-03-30T23:38:06Z",
        "description": "Bug fixes and a VIRUSBreakend database updates.\r\n\r\n- Added bacteria and archaea to VIRUSBreakend db\r\n  - Fixes false positives caused by bacteria reads with short homology to viral genomes in the expanded viral database\r\n  - **VIRUSBreakend database must be rebuilt**.\r\n  - If you haven't deleted the kraken2 intermediate files, the rebuild can be done by running just the following steps:\r\n    - `kraken2-build --download-library bacteria --db $dbname`\r\n    - `kraken2-build --download-library archaea--db $dbname`\r\n    - `kraken2-build --threads $(nproc) --build --db $dbname`\r\n    - `tar -czvf virusbreakend.db.$dbname.tar.gz $dbname/*.k2d $dbname/taxonomy/nodes.dmp $dbname/library/viral/*.fna* $dbname/library/added/*.fna* $dbname/taxid10239.nbr $dbname/seqid2taxid.map`\r\n- #474 #476 Fixed off-by-one crash error occurring when read length was an exact multiple of 32.\r\n- #475 Fixed `--externalaligner` handling\r\n- #480 Aborting VIRUSBreakend upon gridsstools failure\r\n- #480 clarified VIRUSBreakend gridsstools error message\r\n- #478 Added defensive check to NonReferenceContigAssembler.SupportLookup\r\n\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.11.1",
        "name": "2.11.1",
        "release_id": 40728078,
        "tag": "v2.11.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.11.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/40728078",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/40728078",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.11.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2021-03-17T04:28:39Z",
        "date_published": "2021-03-17T04:33:58Z",
        "description": "This release contains a new error correction step that improves assembly runtime,  overhauls the VIRUSBreakend viral database, and bug fixes.\r\n\r\n**VIRUSBreakend databases need to be rebuilt.**\r\n\r\n- Changed minimum clip length threshold from 50bp back to 5bp\r\n  - **Versions 2.10.x have lower sensitivity due to this regression. Rerunning with 2.11.0 is recommended** \r\n  - This regression primarily impacted single breakend sensitivity (since as split reads will generally have at least one side with 50bp clipped)\r\n- Improved assembly\r\n  - Now performing local error correction of reads prior to assembly.\r\n    - Improves assembly runtime and memory usage\r\n  - Complex assembly graph regions are now downsampled instead of being excluded from assembly\r\n  - Additional assembly performance optimisations\r\n- VIRUSBreakend\r\n  - Extended database to include all NCBI viral neighbour sequences.\r\n  - Deuplicating viral references with same taxid based on total kmer hits to each viral reference\r\n  - Added LOW_MAPQ filter to ambiguous viral integrations\r\n  - Additional `.summary.tsv` output columns\r\n  - Added QCstatus & direct taxid counts to summary output\r\n  - only extracting SC and OEA reads\r\n  - EXCESSIVE_VIRAL_COVERAGE & ASSEMBLY_ABORTED QC failure modes\r\n  - Hard filtering < 10% viral coverage\r\n  - Actually using precomputed metrics in GRIDSS calling\r\n- New ubuntu 20 Dockerfile mostly based on @alexiswl #461\r\n- Added error message pointing to the log file with the underlying cause of the error\r\n- Added examples/annotate_most_likely_centromere.R\r\n- #439 extended documentation of GRIDSS SAM tags\r\n- #448 added gridsstools source code to release package so the bioconda recipe can rebuild from source\r\n- #450 stabilising sort order in VCF output\r\n- #450 setting bwa mem batch size (-K) to force deterministic behaviour\r\n- #449 preventing underflow of contig bounds\r\n- #444 fixed handling of `--useproperpair`\r\n- #463 fixed race in assembly bam header creation\r\n- Internally treating flanking indels are clipping (e.g. 4I5M becomes 4S5M)\r\n  - Reads containing only clipping and I/D alignments are treated as unmapped (bwa occasionally reports alignments such as 36S30I85S)\r\n- Added reference matching checks to start of GRIDSS\r\n- Updated ComputeSamTags behaviour\r\n  - Dropping excessively overlapping split read alignments (contained alignment & >25bp overlaps)\r\n  - #282 Add summary stats to ComputeSamTags/PreprocessForBreakendAssembly output\r\n  - #363 preferring non-ALT alignments when determining best split reads\r\n  - Added summary output file containing tag changes\r\n- #438 added --otherjvmheap\r\n- Fixed bug causing assembly recovery to fail if near (<50kbp) end of chromosome",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.11.0",
        "name": "2.11.0",
        "release_id": 39321042,
        "tag": "v2.11.0",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.11.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/39321042",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/39321042",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.11.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-12-10T04:43:25Z",
        "date_published": "2020-12-10T05:01:56Z",
        "description": "- Added support for batched assembly #354 #397 #403 #406 #430\r\n  - See https://github.com/PapenfussLab/gridss/#how-do-i-perform-batched-assembly\r\n- Overhaul of VIRUSBreakend behaviour\r\n  - Added a OUTPUT.summary.csv file that is always written\r\n    - This file is only written if VIRUSBreakend was successful\r\n    - Provides useful stats such as viral presence, coverage, and number of integrations found\r\n  - increased assembly threshold cut-offs\r\n    - Better integration detection on samples with high (1000x+) viral coverage\r\n  - Removed Virus-Host DB dependency due to Non-Commerical licence restriction\r\n    - Now determining human virus status from NCBI virus host file\r\n    - **This change requires a rebuild of the VIRUSBreakend database**\r\n  - Maximum of 1 virus reported per genus\r\n    - Stops multiple viral strains/subtypes being reporting due to a small portion of reads being misclassified by kraken2 \r\n- Added scripts for reproduction of results in VIRUSBreakend manuscript\r\n- Fixed crash bug in VirusBreakendFilter\r\n- Added kraken version to VIRUSBreakend output\r\n- Added check for existence of RepeatMasker\r\n- `BEALN` now always replaces pipes in contig name with underscores\r\n- Removed unnecessary GKL library warning message\r\n- Hard limit maximum assembly base quality to the max of 93 representable by Sanger format fastq #404 \r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.10.2",
        "name": "2.10.2",
        "release_id": 35079358,
        "tag": "v2.10.2",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.10.2",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/35079358",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/35079358",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.10.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-10-20T01:40:16Z",
        "date_published": "2020-10-20T01:47:10Z",
        "description": "Incremental release fixing some minor issues with with 2.10.0 release\r\n\r\n- #410 added locking on the setupreference step\r\n  - prevents bwa index corruption due to concurrent writing from two GRIDSS instances using the same reference\r\n- virusbreakend-build.sh: creating sequence dictionaries so virusbreakend.sh never has to write to the virusbreakenddb directory\r\n- virusbreakend.sh: reusing GRIDSS metrics from the full BAM if they already exist\r\n- gridss_extract_overlapping_fragments.sh/virusbreakend.sh: sampling 10M reads when calculating metrics.\r\n  - sampling only 1M reads was resulting in telomeric bias and underreporting of QUAL scores on 100x data\r\n- virusbreakend.sh: reduced heap size when running gridss.sh to 13g so it fits in a 4core/16gb VM\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.10.1",
        "name": "2.10.1",
        "release_id": 32786840,
        "tag": "v2.10.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.10.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/32786840",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/32786840",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.10.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-10-14T06:58:06Z",
        "date_published": "2020-10-14T06:51:11Z",
        "description": "This version includes **VIRUSBreakend: Viral Integration Recognition Using Single Breakends**\r\n\r\nVIRUSBreakend is a high-speed viral integration detection tool designed to be incorporated in the whole genome sequence piplines with minimal additional cost.\r\n\r\nThis version includes gridsstools: an optimised C implemention of the performance-critical steps used in VIRUSBreakend. A precompiled binary is included in the release package. If the precompiled binary does not run on your system, source code for building is available in src/main/c/gridsstools.\r\n\r\nThis version includes offical support for performing targeted GRIDSS calling. Use `gridss_extract_overlapping_fragments.sh` on a BED or VCF file to make GRIDSS calls based on read/read pairs with an alignment overlapping the region of interest.\r\n\r\nThe following tools and entry points have been added in this version:\r\n\r\n- **virusbreakend.sh**: driver script for VIRUSBreakend\r\n- **virusbreakend-build.sh**: script for downloading and building VIRUSBreakend database\r\n- **gridss_extract_overlapping_fragments.sh**: subsets a BAM based on regions of interest defined in a BED or VCF file\r\n  - Use this to extract reads of interest and metrics then run GRIDSS on the extracted bam.\r\n- **gridss_annotate_vcf_repeatmasker.sh**: annotes single breakends and breakpoint inserted sequences with RepeatMasker annotations. Requires RepeatMasker to be installed.\r\n- **gridss_annotate_vcf_kraken2.sh**: annotes single breakends and breakpoint inserted sequences with Kraken2 taxonomic identifiers. Requires kraken2 to be installed.\r\n- **gridsstools unmappedSequencesToFastq**: Exports unmapped sequences to fastq. This tool is soft clip and split read-aware.\r\n- **gridsstools extractFragmentsToFastq**: Extracts reads/read pairs from a list of read names to paired fastq files\r\n- **gridsstools extractFragmentsToBam**: Subsets a BAM based on a list of read names\r\n  - This tool will be deprecated when `samtools view` has this capability. See samtools/samtools#1324 for progress\r\n\r\nThe follow entry points have been added to the GRIDSS jar:\r\n\r\n- **gridss.InsertedSequencesToFasta**: exports single breakend and breakpoint inserted sequences to fasta\r\n- gridss.ExtractFragmentsToFastq\r\n- gridss.UnmappedSequencesToFastq\r\n- gridss.repeatmasker.AnnotateVariantsRepeatMasker\r\n- gridss.kraken.AnnotateVariantsKraken\r\n- gridss.kraken.ExtractBestSequencesBasedOnReport\r\n- gridss.kraken.SubsetToTaxonomy\r\n- gridss.VirusBreakendFilter\r\n\r\nThis release also includes the following:\r\n- Added scripts used to generate all figures in the GRIDSS2 preprint\r\n- #349 Fixed poor assembly performance edge case\r\n- #372 Default IO thread pool size now matches specified thread count\r\n- #372 changed default memory usage to 30g since it's only DNA Nexus azure:mem2_ssd1 which won't like it\r\n- #376 gridss_somatic_filter.R: added --configdir so path to gridss_config.R can be specified.\r\n- #380 #393 gridss.sh: removed --repeatmaskerbed and replaced with gridss_annotate_vcf_repeatmasker.sh utility\r\n- #385 don't write Q2 tag when using external aligner\r\n- #386 Fixed assembly telemetry crash\r\n- #389 Passing reference genome to metrics calculations\r\n- #390 filtering any linkages to variants that have been hard filtered\r\n- #392 recognising .tbi .csi .crai as index files when moving files around\r\n- #396 catching OOM and immediately terminating to prevent hangs\r\n- Passing through WORKER_THREADS to ComputeSamTags\r\n- Precomputed are used if available\r\n- Removed gridss.[Indexed]ExtractFullReads: removing entry points since they don't handle RP with supplementary alignments correctly.\r\n  - Replaced by `gridss_extract_overlapping_fragments.sh`\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.10.0",
        "name": "2.10.0",
        "release_id": 31472218,
        "tag": "v2.10.0",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.10.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/31472218",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/31472218",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.10.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-07-15T11:51:10Z",
        "date_published": "2020-07-15T11:40:45Z",
        "description": "- #368 reduced GKL loading failure to warning message\r\n- #348 Fixed NPE in GeneratePonBedpe\r\n- #356 realignment records not longer being unclipped twice\r\n- #349 Fixed performance issue where an empty blacklist was not cached\r\n- #349 Fixed poor assembly performance edge case\r\n- #366 Updated dependencies to latest versions\r\n  - CRAM input files should now be fully support\r\n- Removed SoftClipsToSplitReads.REALIGN_ANCHORING_BASES parameter\r\n  - No longer used since this approach had more edge cases than realigning the entire assembly contig\r\n- Cleaning up namedsorted bam\r\n  - Extra unnecessary bam file no longer left in .gridss.working directory\r\n- Extended minimum realignment length to 20bp\r\n  - improves libbwa stability\r\n- Added AnnotateInsertedSequence.MIN_SEQUENCE_LENGTH\r\n  - improves libbwa stability\r\n- Fixed potential intermediate file corruption if the `gridss.SoftClipToSplitReads` process was killed during the preprocessing step\r\n- Upgraded defensive GC log message to INFO\r\n- Added single breakend assembly support bias filter\r\n- Not reporting variants entirely contained in assembly anchor\r\n- Fixed \"Record should have been dropped\" in SoftClipToSplitReads\r\n- Repository now includes all R scripts used to generate the GRIDSS2 paper\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.9.4",
        "name": "2.9.4",
        "release_id": 28487095,
        "tag": "v2.9.4",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.9.4",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/28487095",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/28487095",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.9.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-06-08T14:54:08Z",
        "date_published": "2020-06-08T16:57:37Z",
        "description": "- #348 Fixed NPE in GeneratePonBedpe\r\n- Cleaning up named sorted temporary bam file when no longer required\r\n- Added `ASSEMBLY_BIAS` single breakend assembly support bias filter\r\n  - This is a more generalised version of the `ASSEMBLY_ONLY`/`NO_ASSEMBLY` filters\r\n- Added `NO_SR` and `NO_RP` filters to reduce single breakend FDR\r\n- Fixed \"Record should have been dropped\" in SoftClipToSplitReads when using external alignment\r\n- Only writing a single realignment record for anchoring bases\r\n  - Fixes edge case where unphased variants are sometimes phased cis\r\n- Removed `SoftClipsToSplitReads.REALIGN_ANCHORING_BASES` parameter\r\n  - This split breakend/anchoring sequence alignment approach ends up worse than realigning the entire read. If the initial assembly was over-aligned, it will remain so. Worse, it will result in a soft clip in the anchoring bases thus inserted sequence which should be aligned to the other side.\r\n  - The is a reversion to pre-2.9.0 GRIDSS behavour\r\n- Reduced lock contention when performing multi-threaded BAM reading\r\n- Not attempting realignment for sequences shorter than 20bp\r\n  - Fixes issues with in-process bwa instablility when aligning very short sequences\r\n  - Added `AnnotateInsertedSequence.MIN_SEQUENCE_LENGTH` parameter with default of 20\r\n  - `SoftClipsToSplitReads.MIN_CLIP_LENTH` now defaults to 20\r\n-  Added ability to dump the sequences sent for in-process realignment to a fastq file",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.9.3",
        "name": "2.9.3",
        "release_id": 27335253,
        "tag": "v2.9.3",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.9.3",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/27335253",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/27335253",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.9.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-05-20T01:19:24Z",
        "date_published": "2020-05-20T01:43:11Z",
        "description": "- #333 Fixed tumourordinal crash in gridss_somatic_filter.R\r\n- Reduced RepeatMaskerBEDFeature memory usage\r\n  - Fixes Out of Memory exception in `gridss.AnnotateInsertedSequence` when a RepeatMasker BED file is specified\r\n- `AnnotateInsertedSequence` defaulting to in-process alignment\r\n- External process streaming aligner output buffer size is now bounded\r\n  - Fixes Out of Memory exception in `gridss.AnnotateInsertedSequence`\r\n- #344 Fixed IHOMLEN bug where -ve breakends had revcomp insert sequences when comparing\r\n  - Fixes inconsistent IHOMLEN when inserted sequence is present\r\n- #343 Fixed race condition in SinglePassSamProgram\r\n- #342 fixed crash when ref genome masking for assembly debug export\r\n- Reduced logging level of \"found path with no support\" assembly message\r\n- #340 Added packaging script to automate github release file set\r\n- Added version sanity check on Dockerfile",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.9.2",
        "name": "2.9.2",
        "release_id": 26694822,
        "tag": "v2.9.2",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.9.2",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/26694822",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/26694822",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.9.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-05-11T12:56:49Z",
        "date_published": "2020-05-11T13:18:50Z",
        "description": "- Reimplemented `gridss_annotate_insertions_repeatmaster.R` into `gridss.InsertedSequenceAnnotator`\r\n  - Added `--repeatmaskerbed` command line option to `gridss.sh` to do RepeatMasker annotating of inserted sequences\r\n  - `gridss_annotate_insertions_repeatmaster.R` is no longer included in GRIDSS releases\r\n- Fixed potential memory leak when using in-process bwa alignment\r\n- Improved performance of steps using in-process bwa alignment\r\n- Improved performance of variant calling steps\r\n- Limited some spammy log messages\r\n- Improved assembly stability\r\n  - Fixes issues some users have encountered when processing hg38 alt contigs when using bwa-aligned input files",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.9.1",
        "name": "2.9.1",
        "release_id": 26379199,
        "tag": "v2.9.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.9.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/26379199",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/26379199",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.9.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-04-23T04:58:51Z",
        "date_published": "2020-05-06T14:34:15Z",
        "description": "This release includes significant changes to how GRIDSS performs preprocessing and alignment. GRIDSS now uses in-process bwa alignment instead of requiring a command-line bwa. This requires an additional `.img` file which is generated from the bwa index. A new `setupreference` step has been added to GRIDSS driver script so all files related to the reference genome can be generated as a once-off operation.\r\n\r\n\r\n- Added setupreference step to GRIDSS driver script\r\n  - One-off initialisation and files written to the reference genome directory are now explicitly a separate step\r\n- Added BWA JNI interface\r\n  - External alignment no longer required\r\n- Added `PreprocessForBreakendAssembly` command line program\r\n  - Combines `ComputeSamTags` and `SoftClipsToSplitReads` in a single pass over each _input.sv.bam_ file.\r\n  - Approximately 50% speedup in preprocessing time due to better parallelisation\r\n- Added SoftClipsToSplitReads REALIGN_UNANCHORED_BASES option\r\n- Using REALIGN_UNANCHORED_BASES instead of REALIGN_ENTIRE_READ for assembly realignment\r\n  - Fixes an issue with GRIDSS2 having slightly sensitivity than GRIDSS1 for deletions in which the ref has a tandem duplication (e.g SINE-SINE becomes SINE)\r\n- Fixed bug causing the nominal position of the two sides of a breakpoint with homology to not match for both BND records\r\n- Better error message if aligner process is killed\r\n- Added max/max/mean mapq INFO fields\r\n- #319 Writing out all reproduction data for all assembly errors to prevent early abort truncating the file write\r\n- #329 Fixed crash in gridss_annotate_insertions_repeatmaster.R when processing chromomsomes containing \":\" (HLA types)\r\n- #312 now supporting arbitrary split read alignment overlaps (fixes java.lang.OutOfMemoryError error)\r\n- Standardised error codes to match sysexits.h\r\n  - More meaningful exit codes from gridss.sh\r\n- #334 cleaned up driver script logging\r\n  - Full log file now include all log messages\r\n- #323 added --nojni command line option to disable native acceleration\r\n- Updated htsjdk/picard versions\r\n- Fixed error where split read records to be dropped were not actually dropped.\r\n\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.9.0",
        "name": "2.9.0 pre-release",
        "release_id": 26229520,
        "tag": "v2.9.0",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.9.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/26229520",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/26229520",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.9.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-04-05T02:01:27Z",
        "date_published": "2020-04-05T02:25:06Z",
        "description": "- #317 Fixed NullPointerException assembly crash\r\n- Fixed inconsistent scoring of 3-way split reads when the primary is mapped to a blacklisted region\r\n- Reduced SanityCheckEvidence memory usage\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.8.3",
        "name": "2.8.3",
        "release_id": 25205756,
        "tag": "v2.8.3",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.8.3",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/25205756",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/25205756",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.8.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-03-16T06:19:08Z",
        "date_published": "2020-04-02T02:13:49Z",
        "description": "Fixed assembly errors and inconsistencies in evidence handling.\r\n\r\n- #311 Fixed ComputeSamTags split read processing error when the split reads overlap.\r\n- #307 fixed --useproperpair parameter\r\n- #298 Fixed issue with RP reads not always being jointly tracked during assembly\r\n- #278 supplementary alignments no longer provide read pair evidence\r\n- #278 SAMRecord dovetail filter moved to soft clip evidence to prevent orphaning of split read evidence\r\n- Not counting RP anchor KmerEvidence interval as it's encoded in the non-anchoring KmerEvidence\r\n- Improved assembly logging\r\n- Improved debugging and error reporting\r\n  - Added --keepTempFiles debugging option\r\n  - Added --sanityCheck parameter for identifying inconsistent evidence\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.8.2",
        "name": "2.8.2",
        "release_id": 25115955,
        "tag": "v2.8.2",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.8.2",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/25115955",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/25115955",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.8.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-03-12T01:45:08Z",
        "date_published": "2020-03-12T03:19:36Z",
        "description": "- Better assembly handling of libraries with fragment size shorter than read length\r\n  - #299, #300 Fixed assembly streaming loading window size to handle PE libraries with fragment size shorter than read length\r\n  - Not considering read pair mate positions in which the mate fully overlaps the anchoring read\r\n- #286 Explicitly logging assembly error stack trace to assist in debugging potential assembly errors.\r\n- #306 replacing :| in BEALN reference names with _ to prevent downstream parsing errors.\r\n- #301 Using QualityScoreDistribution instead of CollectAlignmentSummaryMetrics as placeholder picard metric gathering assembly metrics\r\n- Driver script improvements\r\n  - #310 fixed driver script crash on single-ended sequencing data\r\n  - Improved error message with input argument is missing.\r\n  - Fixed error on multisample VCF with --plotdir specified\r\n  - #307 Added --useproperpair and --concordantreadpairdistribution driver script command line arguments\r\n  - Driver script no longer defaults to extracting RP based on SAM flag\r\n    - Fixes issue in which either too many or too few RP were extracted\r\n\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.8.1",
        "name": "2.8.1",
        "release_id": 24449625,
        "tag": "v2.8.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.8.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/24449625",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/24449625",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.8.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2020-02-17T01:35:45Z",
        "date_published": "2020-02-17T01:42:44Z",
        "description": "- Reverted to `MATEID` instead of `PARID` for the VCF breakpoint record pairing.\r\n  - `MATEID` is the correct field to use according to the VCF specifications.\r\n- Added `FIX_SA` and `FIX_MISSING_HARD_CLIP` to `gridss.ComputeSamTags`\r\n  - `FIX_SA`: rewrites split read `SA` tags\r\n    - corrects GATK indel realignment `SA` tag data inconsistency\r\n  - `FIX_MISSING_HARD_CLIP`: infers missing hard clipping if split read records have different read lengths\r\n    - corrects for GATK indel realignment stripping hard clipping when realigning\r\n  - GRIDSS log files  should no longer be full of `SA tag of read ********** refers to missing alignments` warning messages!\r\n  - There should be significantly fewer data inconsistencies when running on GATK indel realigned bams.\r\n- #291 Updated libraries to htsjdk 2.21.1 and picard 2.21.8\r\n  - Improved CRAM support\r\n- #278 the nominal position breakpoint position at both breakend records is guaranteed to be the same\r\n- #293 `gridss.GeneratePonBedpe` now defaults to treating the first sample as the normal\r\n- #283 Validating steps command line argument. Fixed bug with \"all\"/\"call\" step parsing\r\n- `gridss_somatic_filter.R` now writes VCF header for all filters\r\n- #295 Added error message if using a very old samtools version\r\n- #296 `gridss_annotate_insertions_repeatmasker.R` now explicitly sets repeatmasker column types\r\n  - Fixes crash reading a repeatmasker .fa.out file when using integer chromosome numbers without a chr prefix.\r\n- #292 `gridss.SoftClipToSplitReads` now soft clips alignments that align over the start or end of a chromosome\r\n  - Fixes occasional crash during assembly realignment with older bwa versions\r\n- #287 assembly contig per-base support treats RP anchoring with no valid kmers treated as the anchoring read was ignored\r\n  - Fixes crash when one of two reads in a read pair is shorter than 25bp\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.8.0",
        "name": "2.8.0",
        "release_id": 23469874,
        "tag": "v2.8.0",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.8.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/23469874",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/23469874",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.8.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-11-26T10:34:22Z",
        "date_published": "2019-11-26T10:49:30Z",
        "description": "- #276 driver script: directory creation failure now causes immediate termination\r\n- Fixed crash error in somatic filtering script arg parsing\r\n- Removed unnecessary error message",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.7.3",
        "name": "2.7.3",
        "release_id": 21761852,
        "tag": "v2.7.3",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.7.3",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/21761852",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/21761852",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.7.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-11-04T05:15:18Z",
        "date_published": "2019-11-04T05:19:34Z",
        "description": "- Centre-aligning nominal call positions #266 \r\n- Improved repeat-kmer assembly performance from O(n^2) to O(n log(n))\r\n- Fixed hang during assembly error recovery\r\n- Fixed issue with high samtools memory usage during sorting steps\r\n- Updated somatic filtering script\r\n  - Added `gridss.min_direct_read_support` somatic filtering parameter (default: 1 read)\r\n  - Changed minimum reported event size to 8bp to match GRIDSS default minimum\r\n  - Renamed somatic tumour variant allele fraction field from `BPI_AF` to `TAF`\r\n  - Renamed the names of some somatic filters to improve consistency\r\n  - Fixed bug with simple somatic inversion detection breakpoint pairing logic (was not using correct QUAL score)\r\n  - Added optional output plots to somatic filtering script",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.7.2",
        "name": "2.7.2",
        "release_id": 21180855,
        "tag": "v2.7.2",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.7.2",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/21180855",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/21180855",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.7.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-11-01T05:38:38Z",
        "date_published": "2019-11-01T05:39:23Z",
        "description": "Reverted #266 changes to due crash\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.7.1",
        "name": "2.7.1",
        "release_id": 21139960,
        "tag": "v2.7.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.7.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/21139960",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/21139960",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.7.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-10-31T11:00:17Z",
        "date_published": "2019-10-31T11:03:04Z",
        "description": "- Now reporting centre of any imprecision interval or microhomology as the nominal call position #266\r\n- Switched from sambamba to samtools due to potential multithreaded sambamba instability #274\r\n- `gridss_annotate_insertions_repeatmasker.R` no longer crashes when there are no records to process #256\r\n- `gridss_annotate_insertions_repeatmasker.R` no longer requires NCBI style contigs #268\r\n- IdentifyVariants no longer hangs if the input BAM is malformed #267\r\n- `/usr/bin/time` output more verbose\r\n- `/usr/bin/time` no longer required\r\n- Fixed out of memory error during assembly `gridss.SoftClipToSplitReads` occuring on some data set\r\n\r\nNote: binary removed due to crash bug. Use 2.7.1",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.7.0",
        "name": "2.7.0",
        "release_id": 21113095,
        "tag": "v2.7.0",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.7.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/21113095",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/21113095",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.7.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-10-21T06:04:31Z",
        "date_published": "2019-10-21T06:09:57Z",
        "description": "This release add job scheduling support, improves assembly error debugging, and bug fixes.\r\n\r\n- Added support for distributing assembly work across multiple nodes\r\n  - Use the `--jobindex` and `--jobnodes` nodes parameters to distribute the work\r\n  - Added examples/torque_example.sh\r\n- Fatal assembly errors now generate a zip file containing the minimal data required to reproduce the issue. This file includes the following:\r\n  - input file metrics\r\n  - reads in the assembly graph at time of failure\r\n  - reference genome. All regions not relevant to the failure are masked (replaced with `N`)\r\n  - configuration file (if used)\r\n\r\nBug fixes/minor enhancements:\r\n\r\n- Fixed assembly error (#260)\r\n- Added checks to ensure assembly and variant calling have same inputs (#261)\r\n- cohort scripts updated to match driver script (#240)\r\n- SoftClipToSplitReads now writes temporary files to the correct directory (#250)\r\n- Forcing C locale to prevent locale-based parsing errors due to number formatting (#253)\r\n- Downgraded getopt failure to warning (#251)\r\n- Added --picardoptions to expose standard command line options (#254)\r\n  - Useful options include VALIDATION_STRINGENCY=LENIENT and COMPRESSION_LEVEL=0. See https://broadinstitute.github.io/picard/command-line-overview.html\r\n- Removed PON generation script as it's been replaced by gridss.GeneratePonBedpe\r\n- Fixed SoftClipToSplitReads duplicating SAM headers when using external merge\r\n- Made terminal sambamba steps idempotent (#255)\r\n- Exposing assembly read name prefix in `assembly.contigNamePrefix` configuration file parameter (#182, #261)\r\n- Forcing assembly reinitialisation when unsupported assembly encountered\r\n\r\n\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.6.3",
        "name": "2.6.3",
        "release_id": 20841039,
        "tag": "v2.6.3",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.6.3",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/20841039",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/20841039",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.6.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-09-23T13:54:58Z",
        "date_published": "2019-09-23T06:09:44Z",
        "description": "- Added command line option for SoftClipToSplitRead to perform sorting and merging externally\r\n- Converted SoftClipToSplitRead sort and merge steps to sambamba call.\r\n  - Fixes #247 out of memory error\r\n  - Improves wall clock time",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.6.2",
        "name": "2.6.2",
        "release_id": 20169999,
        "tag": "v2.6.2",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.6.2",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/20169999",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/20169999",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.6.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-09-18T07:14:14Z",
        "date_published": "2019-09-18T07:32:18Z",
        "description": "Bug fix release\r\n\r\n- Only unrecoverable assembly errors will raise an error #237 #242 #244 \r\n- GRIDSS should no longer filter out small DUPs with long homology #243 \r\n- Driver script `-labels` argument no longer broken #245 \r\n- explicitly checking for non-null read pairing statistics when a record is flagged as paired #239\r\n\r\nThe simple somatic filtering script `example/somatic.R` has been removed. `gridss_somatic_filter.R` is a much more comprehensive script and should be used instead.",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.6.1",
        "name": "2.6.1",
        "release_id": 20068818,
        "tag": "v2.6.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/20068818",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/20068818",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-09-09T06:45:18Z",
        "date_published": "2019-09-09T13:33:36Z",
        "description": "# Somatic Calling \r\n\r\nGRIDSS now has an offical tumour/normal somatic SV post-processing script.\r\nThis script has been developed for the Hartwig Medical Foundation cohort and is optimised for high quality sequencing data (40x normal, 100x tumour, ~500bp library fragment size, HiSeqX10/NovaSeq). It has been successfully used for clinical patient reporting in over 4,000 WGS patient samples.\r\n\r\nThe Hartwig hg19 GRIDSS panel of normals (PON) used in the somatic filter script can be downloaded from https://resources.hartwigmedicalfoundation.nl/.\r\n\r\n| Script | Description |\r\n| ------------- | ------------- |\r\n| scripts/gridss.sh  | gridss driver script. Use this to run GRIDSS  |\r\n| scripts/gridss_somatic_filter.R  | GRIDSS tumour/normal somatic filtering script. Run this script on the GRIDSS output. |\r\n| scripts/libgridss.R  | library used by gridss_somatic_filter.R |\r\n| scripts/gridss.config.R  | somatic filtering configuration used for the Hartwig cohort |\r\n|gridss_annotate_insertions_repeatmaster.R| adds RepeatMasker annotations for VCFs annotated with `gridss.AnnotateUntemplatedSequence`|\r\n\r\n\r\n# New docker images\r\n\r\n- A new GRIDSS docker image has been created. It will be available on Docker Hub as `gridss/gridss:2.6.0` shortly.\r\n- A new combined GRIDSS/PURPLE/LINX docker image has been created. This docker image contains a stand-alone version of the Hartwig SV/CNV pipeline. It will be available on Docker Hub as `gridss/gridss-purple-linx:latest` shortly. Reference data required by this pipeline (including the GRIDSS PON) will be downloadable from https://resources.hartwigmedicalfoundation.nl/.\r\n\r\nA GRIDSS/PURPLE/LINX bioarvix preprint will be posted soon.\r\n\r\n\r\n# Bug fixes\r\n\r\n- #213 also excluding indel assemblies from contributing to support interval",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.6.0",
        "name": "2.6.0",
        "release_id": 19840841,
        "tag": "v2.6.0",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/19840841",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/19840841",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-08-28T13:39:20Z",
        "date_published": "2019-08-28T14:32:54Z",
        "description": "This release fixes a crash when performing viral sequence annotation\r\n\r\n- Fixed crash in `gridss.AnnotateUntemplatedSequence` when annotation sequence does not match reference sequence\r\n\r\n",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.5.2",
        "name": "2.5.2",
        "release_id": 19593240,
        "tag": "v2.5.2",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/19593240",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/19593240",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "d-cameron",
          "type": "User"
        },
        "date_created": "2019-08-15T04:21:28Z",
        "date_published": "2019-08-15T04:27:22Z",
        "description": "Mostly bug fixes and driver script changes:\r\n\r\n- Fixed log message error causing premature assembly safety mode abort\r\n- Relaxing input BAM sort order checks to only require correctly sorted according to SAM file sort ordering\r\n- Reducing memory usage by skipping directed evidence re-sorting when performing assembly\r\n- Driver script tweaks:\r\n  - #232 using \"sambamba -n\" for sorting for compatibility with older versions of sambamba\r\n  - #233 Using 4g for entry points that do not use the --jvmheap option\r\n  -  Added bash version to driver script output\r\n  - Using -Xms to test max memory usage up-front",
        "html_url": "https://github.com/PapenfussLab/gridss/releases/tag/v2.5.1",
        "name": "2.5.1",
        "release_id": 19303855,
        "tag": "v2.5.1",
        "tarball_url": "https://api.github.com/repos/PapenfussLab/gridss/tarball/v2.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PapenfussLab/gridss/releases/19303855",
        "value": "https://api.github.com/repos/PapenfussLab/gridss/releases/19303855",
        "zipball_url": "https://api.github.com/repos/PapenfussLab/gridss/zipball/v2.5.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-requisites",
        "type": "Text_excerpt",
        "value": "To run GRIDSS the following must be installed:\n\n* java 1.8 or later\n* R 4.0 or later\n  * `gridss_somatic_filter` and `gridss_extract_overlapping_fragments` require the following R libraries:\n    * argparser\n    * tidyverse\n    * stringdist\n    * testthat\n    * stringr\n    * StructuralVariantAnnotation\n    * rtracklayer\n    * BSgenome package for your reference genome (optional)\n* samtools 1.13 or later\n* bwa\n* bash\n* getopt(1) (part of [util-linux](https://en.wikipedia.org/wiki/Util-linux))\n\nTo run VIRUSBreakend, kraken2, or repeatmasker annotations, the following additional software must be installed:\n* kraken2\n  * Note that `virusbreakend-build` requires all `kraken2-build` dependencies\n* RepeatMasker\n* bcftools\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building GRIDSS",
        "parent_header": [
          "Pre-requisites"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS is mostly written in Java thus local building is not required.\nJust [download the latest release](https://github.com/PapenfussLab/gridss/releases) and ensure you have the Pre-requistes installed.\n\nIf you wish to contribute to GRIDSS development, it can be built from source using maven with `mvn package`.\n\nA prebuilt docker image is available as `gridss/gridss:latest` so building a docker image yourself is not necessary.\nIf you do wish to build the docker image yourself, ensure that you perform a recursive git checkout. If you don't, you'll be missing htslib and `gridsstools` won't compile.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building gridsstools",
        "parent_header": [
          "Pre-requisites",
          "Building GRIDSS"
        ],
        "type": "Text_excerpt",
        "value": "Some performance-critical steps are implemented in C using htslib.\nA precompiled version of `gridsstools` for linux is included as part of GRIDSS releases.\nIf this precompiled version does not run on your system you will need to build it from source.\n\nTo build `gridsstools` from source run the following:\n```\ngit clone --recurse-submodules http://github.com/PapenfussLab/gridss/\ncd gridss/src/main/c/gridsstools/htslib/\nautoreconf -i && ./configure && make\ncd ..\nautoreconf -i && ./configure && make all\n```\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda issues",
        "parent_header": [
          "Pre-requisites"
        ],
        "type": "Text_excerpt",
        "value": "Compiling with a conda environment active is likely to cause problems such as `undefined reference to 'libdeflate_crc32'`. This happens when the conda environment includes copies of the libraries used by htslib (z m bz2 lzma curl crypto pthread) without also including the headers for the libraries. This causes gridsstools to compile against the system headers, but link against the conda libraries, hence the error.\n\nRun either `conda install htslib` or `conda deactivate` if you have problems compiling gridsstools in a conda environment.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running",
        "type": "Text_excerpt",
        "value": "Pre-compiled binaries are available at https://github.com/PapenfussLab/GRIDSS/releases. GRIDSS invokes external tools at multiple points during processing. By default this is bwa mem, but can be configured to use bowtie2 or another aligner.\n\nThe following programs are included in GRIDSS releases:\n\n|program|description\n|---|---|\ngridss|GRIDSS assembler and structural variant caller. Use this to generate a GRIDSS SV VCF.\ngridss_extract_overlapping_fragments|Extracts all alignments for read pairs with at least one aligment overlapping set of regions of interest. Correctly handles supplementary alignments. Use this script to extract reads of interest for targeted GRIDSS variant calling.\ngridss_annotate_vcf_repeatmasker|Annotates breakpoint and single breakend inserted sequences with the RepeatMasker classification of the sequence.\ngridss_annotate_vcf_kraken2|Annotates breakpoint and single breakend inserted sequences with the Kraken2 classification of the sequence.\nvirusbreakend|[See VIRUSBreakend README](https://github.com/PapenfussLab/gridss/blob/master/VIRUSBreakend_Readme.md)\nvirusbreakend-build|[See VIRUSBreakend README](https://github.com/PapenfussLab/gridss/blob/master/VIRUSBreakend_Readme.md)\ngridss_somatic_filter|Somatic filtering script. Note that this has an equivalent java implementation in [GRIPSS](https://github.com/hartwigmedical/hmftools/tree/master/gripss).\ngridsstools|C/htslib implementation of performance-critical steps. Currently used by `virusbreakend` and `gridss_extract_overlapping_fragments`\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "gridss command-line arguments",
        "parent_header": [
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "```\nUsage: gridss --reference <reference.fa> --output <output.vcf.gz> --assembly <assembly.bam> [--threads n] [--jar gridss.jar] [--workingdir <directory>] [--jvmheap 30g] [--blacklist <exclude_list.bed>] [--steps All|PreProcess|Assemble|Call] [--configuration gridss.properties] [--maxcoverage 50000] [--labels input1,input2,...] input1.bam [input2.bam [...]]\n```\n\nrequired argument|description\n---|---\n-o, --output|output VCF\n-r, --reference|reference genome to use. Must have a .fai index file and a bwa index\n\noptional argument|description\n---|---\n-a, --assembly|location of the GRIDSS assembly BAM. This file will be created by GRIDSS. The default filename adds a `.assembly.bam` suffix to the output file.\n-t, --threads|number of threads to use. Defaults to 8 cores.\n-j, --jar|location of GRIDSS jar. Can also be specified using the `GRIDSS_JAR` environment variable.\n-b/--blacklist|BED file containing regions to ignore. The ENCODE DAC blacklist is recommended for hg19. (Optional)\n--jvmheap|size of JVM heap for the high-memory part of the assembly and variant calling. Defaults to 30g to ensure GRIDSS runs on cloud instances with 32gb memory.\n--otherjvmheap| size of JVM heap for everything else. Useful to prevent java out of memory errors when using large (>4Gb) reference genomes.  Note that some parts of assembly and variant calling use this heap size so if you get an OutOfMemory error during during these steps even after increasing jvmheap, you may need to increase otherjvmheap as well. (Default: 4gb)\n--maxcoverage|maximum coverage. Regions with coverage in excess of this are ignored. (Default: 50000)\n--labels|comma separated labels to use in the output VCF for the input files. Must have same number of entries as there are input files. Input files with the same label are aggregated (useful for multiple sequencing runs of the same sample). Labels default to input filenames, unless a single read group with a non-empty sample name exists in which case the read group sample name is used (which can be disabled by \\\"useReadGroupSampleNameCategoryLabel=false\\\" in the configuration file). If labels are specified, they must be specified for all input files.\n--steps|processing steps to run. Defaults to all steps. Multiple steps are specified using comma separators. Available steps are preprocess,assemble,call. Useful to improve parallelisation on a cluster as preprocess of each input file is independent, and can be performed in parallel, and has lower memory requirements than the assembly step.\n--jobindex|zero-based index of this assembly job node. Used to spread GRIDSS assembly across multiple compute nodes. Use only with `-s assemble`. Once all jobs have completed, a `-s assemble` or `-s all` job should be run to gather the results together.\n--jobnodes|total number of assembly jobs scheduled.\n\nThe following additional optional arguments may be useful if GRIDSS fails to run in your environment, or you want to run with non-standard parameters.\n\nargument|description\n---|---\n-c, --configuration|configuration file use to override default GRIDSS settings\n--externalaligner|use the system version of bwa instead of the in-process version packaged with GRIDSS\n--picardoptions|additional standard Picard command line options. Useful options include `VALIDATION_STRINGENCY=LENIENT` and `COMPRESSION_LEVEL=0`. See https://broadinstitute.github.io/picard/command-line-overview.html\n--useproperpair|use SAM 'proper pair' flag to determine whether a read pair is discordant. Default: use library fragment size distribution to determine read pair concordance\n--concordantreadpairdistribution|portion of read pairs distribution considered concordantly mapped. Default: 0.995\n--keepTempFiles|keep intermediate files. Not recommended except for debugging due to the high disk usage.\n--nojni|do not use JNI native code acceleration libraries (snappy, GKL, ssw, bwa).\n\t\n_Warning_: the somatic filtering script treats the first bam file as the matched normal, and all subsequent as tumour samples. If you are doing somatic calling, it is strongly recommended to follow this convention.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "gridss steps",
        "parent_header": [
          "Running",
          "gridss command-line arguments"
        ],
        "type": "Text_excerpt",
        "value": "The following GRIDSS steps can be specified:\nstep|description\n---|---\nsetupreference|Once-off setup generating additional files in the same directory as the reference. WARNING: multiple instances of GRIDSS attempting to perform `setupreference` at the same time will result in file corruption. Make sure these files are generated before running parallel GRIDSS jobs.\npreprocess|Pre-process input BAM files. Can be run per input file.\nassemble|Perform GRIDSS breakend assembly. Can split up across multiple nodes using `--jobindex` and `--jobnodes`.\ncall|Perform variant calling.\nall| Run all steps (Default)\n\nAt present, command line valiation is performed independently of which steps are run. When splitting GRIDSS into multiple cluster jobs, the same command line parameters should be specified for every job except for:\n- `--input` on preprocess jobs (one input per file)\n- `--jobindex` and `--jobnodes` on assembly jobs\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I run GRIDSS on multiple samples?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Just specify multiple BAMs on the command line. GRIDSS will perform joint calling and provide a per-BAM breakdown of support.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Should I do joint calling or run each sample individually?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "**Joint calling should always be used for related samples** (e.g. tumour/normal or trio calling).\nJoint calling will ensure that a common variant near the single-sample threshold of detection will be reliably reported as a shared variant.\nThis is not the case if the calling were done individually.\nNote that this particular behaviour is not specific to GRIDSS and is common to all variant callers (hence the joint calling support in many callers).\n\nJoint calling allows for sensivity detection of variants that are present subclonally (or at low coverage) that would not be detected if called individually.\n\nGRIDSS performs joint assembly then reports a per-sample breakdown. Joint calling has higher coverage of shared variants thus resulting in more reliable assembly of that variant.\n\nDetermining whether two SV calls in two different VCFs are actually the same call is non-trivial.\nImprecise calls are especially problematic since the coordinates may differ between the VCF, or a call may be precise in one VCF and not in the other.\nA good example of why reconciling SV calls is so problematic is the case where call A (chrX:1-99->chrY:1-99) overlaps call B (chrX:50-149->chrY:1-99), call B overlaps call C (chrX:100-199->chrY:1-99), but A does not overlap C at all. Joint calling obviates this step.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Aborting since lock gridss.lock.*OUTPUT* already exists. GRIDSS does not support multiple simulatenous instances running on the same data.",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "Multiple instances of GRIDSS were run on the same data. GRIDSS does not yet support MPI parallelisation across multiple machines. Use the WORKER_THREADS parameter to specify the desired level of multi-threading. If using a cluster/job queuing system, a single non-MPI job should be submitted and either WORKER_THREADS explicitly set to the number of cores associated with the job requests, or the job should request the entire node.\n\nIf the lock directory exists and you know a GRIDSS process is not running (eg: the GRIDSS process was killed), then you can safely delete the lock directory.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "download",
    "contact",
    "contributors",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:16:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 255
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Aborting since lock gridss.lock.*OUTPUT* already exists. GRIDSS does not support multiple simulatenous instances running on the same data.",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "Multiple instances of GRIDSS were run on the same data. GRIDSS does not yet support MPI parallelisation across multiple machines. Use the WORKER_THREADS parameter to specify the desired level of multi-threading. If using a cluster/job queuing system, a single non-MPI job should be submitted and either WORKER_THREADS explicitly set to the number of cores associated with the job requests, or the job should request the entire node.\n\nIf the lock directory exists and you know a GRIDSS process is not running (eg: the GRIDSS process was killed), then you can safely delete the lock directory.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide",
        "type": "Text_excerpt",
        "value": "[**Use the quick start guide to get up and running quickly**](https://github.com/PapenfussLab/gridss/blob/master/QuickStart.md)\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "What aligner should I use?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "The default of `bwa mem` is sufficient for most use cases.\n\nAlthough GRIDSS aims to be aligner agnostic, not all aligners output BAM files suitable for processing by GRIDSS. GRIDSS requires:\n* One alignment per read. Supplementary (split read) alignments are ok, but secondary alignments are not.\n  * This means that aligner settings such as the `-a` option of bwa mem and the `-k` and `-a` options of bowtie2 are unsuitable.\n* MAPQ to meaningfully follow the SAM specifications. Aligners that do not follow the specifications (e.g. subread) will have worse results.\n\nOptions such as the `-Y` option of bwa mem, or the fact that bowtie2 does not do split read alignment are not problematic as these differences are corrected in the GRIDSS preprocessing step.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I get output like the GRIDSS PURPLE LINX figures?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Run the [integrated GRIDSS PURPLE LINX pipeline script](https://github.com/hartwigmedical/gridss-purple-linx) or the docker image gridss/gridss-purple-linx:latest.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How many threads should I use?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS has been optimised to run on a 8core/32gb cloud compute node.\n\nIf scaling above 8 cores, it is recommended to run multiple GRIDSS assembly processes and use the `--jobindex` and `--jobnodes` parameters. with each job allocated 8 cores/32gb.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why does GRIDSS use more CPU than the limit specified with `--threads`?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "GRIDSS has been optimised to run on a 8core/32gb cloud compute node.\n\n`--threads` specifies the size of the worker thread pool. IO, BAM decompression, and parsing are in their own thread pool which is not part of the worker thread pool. The pre-processing, variant calling, and annotation steps also perform some work that is executed in dedicated threads independent of the worker thread pool. Combined, this approach means that max CPU utilisation can exceed the thread count specified.\n\nAsynchronous IO defaults can be changed by editing the `jvm_args` argument in `gridss`.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I use GRIDSS to validate the calls from another caller?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "- Convert your calls to a BED file containing the start and end positions of all SVs called by your other caller.\n\n- Expand intervals by at least 10kbp. Too small a window will have a negative impact on GRIDSS QUAL scores (since they're emperically weighted, taking only regions with soft clipped reads will cause GRIDSS to massively downweight soft clips when scoring). Alternatively, for unbiased scoring, run `gridss.CollectGridssMetrics` on your input file and rename the `.gridss.working` directory to the name of your targeted bam file to enable the targeted bam to use the full bam metrics.\n\n- Process as per the region of interest processing outlined above.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why does GRIDSS use centre-aligment?",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "'Normalised' SNV/indel calls are left-aligned. Why does GRIDSS not use this convention? There are two reasons:\n\nFor ++ or -- breakpoints, left-aligning the lower breakend will force right-alignment of the upper breakend. Similarly for right-alignment of the lower. This means that it is impossible to univerally left-align, or right-align breakpoints without resulting in an incorrect nominal call position. Centre-alignment is the option that does not cause this problem ( technically speaking, you still have an off-by-one problem for odd-length homology but that's less problematic).\n\nSecondly, using left or right alignment for imprecise call will result in the nominal call being at the edge of the confidence interval bounds. Centre-aligning imprecise calls makes sense as it is (usually) the centre position that is the most likely to be correct.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Aborting since lock gridss.lock.*OUTPUT* already exists. GRIDSS does not support multiple simulatenous instances running on the same data.",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "Multiple instances of GRIDSS were run on the same data. GRIDSS does not yet support MPI parallelisation across multiple machines. Use the WORKER_THREADS parameter to specify the desired level of multi-threading. If using a cluster/job queuing system, a single non-MPI job should be submitted and either WORKER_THREADS explicitly set to the number of cores associated with the job requests, or the job should request the entire node.\n\nIf the lock directory exists and you know a GRIDSS process is not running (eg: the GRIDSS process was killed), then you can safely delete the lock directory.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Unable to use sswjni library - assembly will be very slow. Please ensure libsswjni for your OS and architecture can be found on java.library.path",
        "parent_header": [
          "Error Messages"
        ],
        "type": "Text_excerpt",
        "value": "The sswjni library could not be loaded as the precompiled version is not compatable with your environment. See the sswjni sections for details on how to disable libsswjni or recompile it for your system.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/gridss/master/Readme.md",
      "technique": "header_analysis"
    }
  ]
}