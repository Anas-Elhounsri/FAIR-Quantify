{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "If you use pydca for your work please cite the following references",
        "parent_header": [
          "References"
        ],
        "type": "Text_excerpt",
        "value": "1. Zerihun, MB., Pucci, F, Peter, EK, and Schug, A. <br>\npydca: v1.0: a comprehensive software for direct coupling analysis of RNA and protein sequences <br>\n Bioinformatics, btz892, doi.org/10.1093/bioinformatics/btz892\n\n2. Morcos, F., Pagnani, A., Lunt, B., Bertolino, A., Marks, DS., Sander, C., Zecchina, R., Onuchic, JN., Hwa, T., and Weigt, M. <br>\nDirect-coupling analysis of residue coevolution captures native contacts across many protein families <br>\nPNAS December 6, 2011 108 (49) E1293-E1301, doi:10.1073/pnas.1111471108\n\n2. Ekeberg, M., L\u00f6vkvist, C., Lan, Y., Weigt, M., & Aurell, E. (2013). <br>\nImproved contact prediction in proteins: Using pseudolikelihoods to infer Potts models. <br>\nPhysical Review E, 87(1), 012707, doi:10.1103/PhysRevE.87.012707"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KIT-MBS/pydca"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact Map Visualization",
        "parent_header": [
          "Running `pydca` From Command Line",
          "Trimming MSA data"
        ],
        "type": "Text_excerpt",
        "value": "When protein/RNA sequence family has a resolved PDB structure, we can evaluate the \nperformance of `pydca` by contact map visualization. Example:\n```bash\n$ pydca plot_contact_map <biomolecule> <PDB_chain_name> <PDB_id/PDB_file.PDB> <refseq.fa> <DCA_file.txt> --verbose  \n```"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-24T09:40:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-13T08:52:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Direct coupling analysis software for protein and RNA sequences "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9976006495416991,
      "result": {
        "original_header": "About `pydca`",
        "type": "Text_excerpt",
        "value": "`pydca` is Python implementation of direct coupling analysis (DCA) of residue coevolution for protein and RNA sequence families using the **__mean-field__** and **__pseudolikelihood maximization__** algorithms. Given multiple sequence alignment (MSA) files in FASTA format, `pydca` computes the coevolutionary scores of pairs of sites in the alignment. In addition, when an optional file containing a reference sequence is supplied, scores corresponding to pairs of sites of this reference sequence are computed by mapping the reference sequence to the MSA. The software provides command line utilities or it can be used as a library. \n \n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KIT-MBS/pydca/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/examples/pydca_demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/examples/pydca_demo.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KIT-MBS/pydca/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KIT-MBS/pydca"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "About pydca"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing",
        "type": "Text_excerpt",
        "value": "To install the current version of `pydca` from PyPI, run on the command line\n```bash\n$ pip install pydca\n```\nor you can use the `install.sh` bash script as \n```bash \n$ source install.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9997075564363941,
      "result": {
        "original_header": "Using `pydca` as a Python Library",
        "type": "Text_excerpt",
        "value": "After installation, pydca can be imported into other Python source codes and used. \n[Here is IPython Notebook example](https://github.com/KIT-MBS/pydca/blob/master/examples/pydca_demo.ipynb). \nIf you encounter a problem opening the Ipython Notebook example, copy and past the URL [here](https://nbviewer.jupyter.org/).\n \n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KIT-MBS/pydca/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Multiscale Biomolecular Simulation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pydca"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "KIT-MBS"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 316338,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 81315,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 53784,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 4039,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 928,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "`pydca` is implemented mainly in Python with the pseudolikelihood maximization parameter inference part implemented using C++ backend for optimization. To install pydca and successfully carry out DCA computations, the following are required. \n* Python 3, version 3.5 or later.\n* C++ compiler that supports C++11 (e.g. the GNU compiler collection).\n* Optionally, OpenMP for multithreading support.\n\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running `pydca` From Command Line",
        "type": "Text_excerpt",
        "value": "When `pydca` is installed, it provides three main command. Namely `pydca`, `plmdca`, and `mfdca`. \nThe command `pydca` is used for tasks such as trimming alignment data before DCA computation, and \nvisualization of contact maps or true positive rates. The other two command are associated with \nDCA computation with the pseudolikelihood maximization algorithm (plmDCA) or the mean-field algorithm (mfDCA).\nBelow we show some usage examples of all the three commands."
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Trimming MSA data",
        "parent_header": [
          "Running `pydca` From Command Line"
        ],
        "type": "Text_excerpt",
        "value": "Trim gaps by reference sequence:\n```bash\n$ pydca trim_by_refseq <biomolecule>  <alignment.fa>  <refseq_file.fa> --remove_all_gaps --verbose\n```\nTrim by percentage of gaps in MSA columns:\n```bash \n$ pydca trim_by_gap_size <alignmnet.fa> --max_gap 0.9 --verbose\n```"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using `pydca`'s Pseudolikelihood Maximization Algorithm",
        "parent_header": [
          "Running `pydca` From Command Line",
          "Trimming MSA data",
          "DCA Computation"
        ],
        "type": "Text_excerpt",
        "value": "```bash \n$ plmdca compute_fn <biomolecule> <alignment.fa> --max_iterations 500 --num_threads 6 --apc --verbose \n```\nWe can also the values of regularization parameters \n```bash\n$ plmdca compute_fn <biomolecule> <alignment.fa> --apc --lambda_h 1.0 --lambda_J 50.0 --verbose \n```\nThe command `compute_fn` computes DCA scores obtained from the Frobenius norm of the couplings. `--apc` performs\naverage product correction (APC). To obtain DCA scores from direct-information (DI) we replace the subcommand \n`compute_fn` by `compute_di`. "
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using `pydca`'s Mean-Field Algorithm",
        "parent_header": [
          "Running `pydca` From Command Line",
          "Trimming MSA data",
          "DCA Computation"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n$ mfdca compute_fn <biomolecule> <alignment.fa> --apc --pseudocount 0.5 --verbose\n```"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Plotting True Positive Rate",
        "parent_header": [
          "Running `pydca` From Command Line",
          "Trimming MSA data"
        ],
        "type": "Text_excerpt",
        "value": "In addition to contact map we can evaluate the performance of `pydca` by plotting \nthe true positive rate. \n```bash\n$ pydca plot_contact_map <biomolecule> <PDB_chain_name> <PDB_id/PDB_file.PDB> <refseq.fa> <DCA_file.txt> --verbose\n```\nTo get help message about a (sub)command  we use, for example, \n```bash\n$ pydca --help\n```\n```bash\n$ plmdca compute_fn  --help\n```\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:21:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 45
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "If you use pydca for your work please cite the following references",
        "parent_header": [
          "References"
        ],
        "type": "Text_excerpt",
        "value": "1. Zerihun, MB., Pucci, F, Peter, EK, and Schug, A. <br>\npydca: v1.0: a comprehensive software for direct coupling analysis of RNA and protein sequences <br>\n Bioinformatics, btz892, doi.org/10.1093/bioinformatics/btz892\n\n2. Morcos, F., Pagnani, A., Lunt, B., Bertolino, A., Marks, DS., Sander, C., Zecchina, R., Onuchic, JN., Hwa, T., and Weigt, M. <br>\nDirect-coupling analysis of residue coevolution captures native contacts across many protein families <br>\nPNAS December 6, 2011 108 (49) E1293-E1301, doi:10.1073/pnas.1111471108\n\n2. Ekeberg, M., L\u00f6vkvist, C., Lan, Y., Weigt, M., & Aurell, E. (2013). <br>\nImproved contact prediction in proteins: Using pseudolikelihoods to infer Potts models. <br>\nPhysical Review E, 87(1), 012707, doi:10.1103/PhysRevE.87.012707"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/pydca/master/README.md",
      "technique": "header_analysis"
    }
  ]
}