{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tanghaibao/mcscan"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "Any questions, problems, bugs are welcome and should be dumped to \n\nHaibao Tang : bao at uga dot edu\n\n`Plant Genome Mapping Laboratory <http://www.plantgenome.uga.edu>`_, University of Georgia\n\n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2009-09-01T02:35:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-23T03:24:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Command-line program to wrap dagchainer and combine pairwise results into multi-alignments in column format"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9109019167619623,
      "result": {
        "original_header": "Inputs and outputs",
        "type": "Text_excerpt",
        "value": "MCscan reads in at least two sources of data: ``.blast`` file and ``.bed`` file. This may seem daunting at first, but these are very easy to retrieve. Have a look at the ``at_at.blast``, ``at_at.bed`` in the folder. In the actual execution, MCL is used to generate mcl file (``at_at.mcl``), which is used in multiple synteny construction. \nHere is what can be used to genenerate the files. \nThe first thing please ensure that for each gene pair, only one e-value is reported, the blast output normally would contain multiple HSPs, a convenience script is attached to filter all the redundant pairs:: \n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8948350735382116,
      "result": {
        "original_header": "Parameters (for advanced user)",
        "type": "Text_excerpt",
        "value": "      -a                         only builds the pairwise blocks (.aligns file)\n      -A                         use base pair dist instead of gene ranks\n      -b                         limit within genome synteny (e.g. Vv-Vv) mapping\n      -e, --e_value=E_VALUE      alignment significance\n      -g, --gap_score=GAP_SCORE  gap penalty\n      -k, --match_score=MATCH_SCORE   final score=MATCH_SCORE+NUM_GAPS*GAP_SCORE\n      -p, --pivot=PIVOT          PIVOT is the reference genome, make it two letter\n                                 prefix inyour .bed file, everything else will be\n                                 aligned to the reference\n      -s, --match_size=MATCH_SIZE   number of genes required to call synteny\n      -u, --unit_dist=UNIT_DIST  average intergenic distance\n      -?, --help                 Give this help list\n          --usage                Give a short usage message\n      -V, --version              Print program version \nThe pairwise synteny formula is roughly (Haas et al. 2004), note that ``DIST_X``, ``DIST_Y`` is in base pair:: \nThe multiple synteny formula is roughly, now ``DIST_X``, ``DIST_Y`` is the distance in the partial order graph (not in base unit, but in gene index unit):: \nNote that to run this, ``.mcl`` file is not required, the result is now slightly different, since MCscan uses the mcl file to filter the BLAST hits. \n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9099817406328442,
      "result": {
        "original_header": "Changelog",
        "type": "Text_excerpt",
        "value": "* May 12, 2007 (version <0.5) initial release.\n* Aug 05, 2007 (version 0.5) add the option of of a *reference* genome\n* Oct 13, 2007 (version 0.6) add convenience python script to streamline the process\n* Mar 07, 2008 (version 0.7) implement statistical test for pairwise syntenic blocks\n* Nov 13, 2008 (version 0.8) partial-order graph for alignment\n \n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Welcome to MCscan's documentation!",
        "type": "Text_excerpt",
        "value": "The MCscan download page can be accessed `here <http://chibba.agtec.uga.edu/duplication/mcscan>`__. \n\n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/tanghaibao/mcscan/wiki"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tanghaibao/mcscan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tanghaibao/mcscan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tanghaibao/mcscan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Welcome to MCscan's documentation!"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": ".. note::\n    MCscan currently will only run on linux or cygwin platform, as it is dependent on GNU function.\n\nSimply put ``mcscan.tar.gz`` in any directory:: \n\n    $ tar zxf mcscan_version.tar.gz\n    $ cd mcscan_version.tar.gz/ && make\n\nthe compiled codes are within the same directory as the source.\n\nThen put copy of MCL executable within the same folder as MCscan (MCL program downloadable `here <http://micans.org/mcl/>`__). \n\n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9654659732593043,
      "result": {
        "original_header": "Inputs and outputs",
        "type": "Text_excerpt",
        "value": "    $ python filter_blast.py xyz.blast.unfiltered xyz.blast \nThe ``.bed`` file contains the following tab-delimited format (see `bed format <http://genome.ucsc.edu/FAQ/FAQformat.html#format1>`__):: \nnotice when you compare multiple genomes, formulate your molecule name carefully to avoid duplicated names. The ``.bed`` file can usually be generated by parsing the gene annotation file provided by the sequencing group (usually the sequencing project ftp will provide a ``.gff3`` file). \nOnce you have everything ready, put them in the same folder. We need to generate ``.mcl`` file if this is the first run (also take a look at the example in ``run.sh``):: \n    $ more xyz.blast | mcl - --abc --abc-neg-log -abc-tf 'mul(0.4343), ceil(200)' -o xyz.mcl  \nSome might encounter a problem exec the ``mcl`` command, in which case the ``mcl`` binary needs to be rebuilt from `here <http://micans.org/mcl/>`__. After the first time you run it (the ``mcl`` file has been generated). You can simply use:: \n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9803077365030632,
      "result": {
        "original_header": "Parameters (for advanced user)",
        "type": "Text_excerpt",
        "value": "    Mandatory or optional arguments to long options are also mandatory or optional\n    for any corresponding short options. \n    Report bugs to <bao@uga.edu>. \nSometimes you may want to run just the pairwise synteny on ``.blast`` and ``.bed`` files, then you can try:: \n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999991713345958,
      "result": {
        "original_header": "Changelog",
        "type": "Text_excerpt",
        "value": "* May 12, 2007 (version <0.5) initial release.\n* Aug 05, 2007 (version 0.5) add the option of of a *reference* genome\n* Oct 13, 2007 (version 0.6) add convenience python script to streamline the process\n* Mar 07, 2008 (version 0.7) implement statistical test for pairwise syntenic blocks\n* Nov 13, 2008 (version 0.8) partial-order graph for alignment\n \n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8223836262886342,
      "result": {
        "original_header": "Inputs and outputs",
        "type": "Text_excerpt",
        "value": "    $ python filter_blast.py xyz.blast.unfiltered xyz.blast \n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tanghaibao/mcscan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "comparative-genomics, evolution, genomics, polyploid, synteny"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mcscan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "tanghaibao"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 39438,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 7026,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2517,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 420,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:39:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "This software provides a clustering module for viewing the relationship of colinear segments in multiple genomes (or heavily redundant genomes). It takes the predicted pairwise segments from dynamic programming (DAGchainer in particular) and then try to build consensus segments from a set of related, overlapping segments.\n\nCertain part of this package (``dagchainer.cc``) is based on the TIGR software `DAGchainer <http://dagchainer.sf.net>`_. The program used this as an initial step to generate pairwise segments. \n\nAlong with the DAGchainer guidelines, all code is copiable, distributable, modifiable, and usable without any restrictions. \n\n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Walkthrough example",
        "type": "Text_excerpt",
        "value": "There are, by default ``at_vv`` sets of files and ``os_sb`` sets of files, which is basically two different projects.\n\nFirst example, let us compare Os to Sb (rice to sorghum), just default settings, run::\n\n    $ ./mcscan os_sb\n\nIt takes about one minute to run, the result is best viewed in EXCEL. The first part of the file lists all the parameters of the program. The result is separated with a line like this::\n\n    ## View 11: pivot Sb02\n\nThis is called a view, each view uses a different chromosome as the reference. Then the blocks following this line is the multiply aligned blocks. The first column is numerical identifier, the second column is the actual pivot. Then following columns are the regions that are aligned to the pivot. The alignments between rice and sorghum are in fact complicated by one or more shared WGDs, creating several columns but mostly are four regions matching each other.\n\nFor the second example, we wish to align *Arabidopsis* to grape, and use grape as the reference genome, but we need to do it a little differently. Unlike the first example, we are not interested in WGD in grape in this case, and we only wish to see the grape used as pivot. Therefore, we modify the pivot:: \n\n    $ ./mcscan at_vv -p Vv -b\n\nThis trick ``-b`` will limit any Vv-Vv matches (in fact this is an older duplication called gamma) in the output.\n\nThere are two outputs. ``.aligns`` file and ``.blocks`` file, corresponding to pairwise and multiple synteny respectively. You will find the ``.aligns`` file very useful too, sometimes. But this is essentially similar to the output of DAGchainer (adding a few statistics and change the default paramters). \n\n"
      },
      "source": "https://raw.githubusercontent.com/tanghaibao/mcscan/master/README.rst",
      "technique": "header_analysis"
    }
  ]
}