{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "RECOUNT is developed in C++ by Edward Wijaya in the \nComputational Biology Research Center (CBRC) - AIST.\nThe EM algorithm is based on (*Beissbarth. et.al \nBioinformatics (20),  i31-39, 2007*). \n\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ewijaya/recount"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-04-24T09:08:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-06T17:41:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ewijaya/recount/wiki"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ewijaya/recount/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data",
        "type": "Text_excerpt",
        "value": "RECOUNT is a software for estimating the true count of Illumina reads\nbased on a probabilistic model. It uses the quality score provided by Illumina and the reads as its input. \nTypical application of this software is for transcriptome or \nmetagenomic expression analysis.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input format",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "RECOUNT takes a pre-processed data as input. It looks like this:\n\n```\n700218\tAAA     40\t40\t40\t\n25078\tAAC     40\t40\t3\t\n25010\tAAG     40\t40\t3\t\n25315\tAAT     40\t40\t3\t\n25045\tACA     40\t3\t40\n```\n\nFirst column is the observed/actual count of a read, second colum is the read, \nand third column to the end is the *average* quality score of each bases \nin the corresponding read. \n\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional data pre-processing softwares",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "Illumina's pipeline generated two types of data: sequence (seq) and quality score\n(prb). In this package we provide several types of  additional softwares. \n\n  a. `AverageTagsQuals_seq_prb` takes the input of the\nfollowing format:\n\n```\nAAA  40 -40 -40 -40     40 -40 -40 -40     40 -40 -40 -40\nAAA  30 -40 -40 -40     10 -40 -40 -40     20 -40 -40 -40\nAAA  20 -40 -40 -40     20 -40 -40 -40     40 -40 -40 -40\nAAC  40 -40 -40 -40     40 -40 -40 -40     -40 -40 -40 40\n```\n\nthen compute the average of the quality score.\nNote that the above input must be sorted by the reads ascendingly.\nAnd the output is:\n\n```\n3 AAA  30 -40 -40 -40     23.33 -40 -40 -40     33.33 -40 -40 -40\n1 AAC  40 -40 -40 -40     40 -40 -40 -40     -40 -40 -40 40\n```\n\nThe command is simply:\n```\n./AverageTagsQuals [sorted_seq_prb_file] \n```\n\n  b. `PickBaseQual` takes the output of `AverageTagsQuals` above and  produce the following result:\n\n```\n3 AAA 30 23.33 33.33\n1 AAC 40 40 -40\n```\nThe command is simply:\n\n```\n./PickBaseQual [average_prb_file]\n```\n\nSometimes the data does not come in PRB format, but in FASTQ\nwhere the each base in the tag has only one corresponding quality score.\nFor that reason we also provide another version of `AverageTagsQuals_seq-prb`\nwhich only average out based on single quality value of each base in the tag.\n\n  c. `AverageTagsQuals` takes the input of the following format:\n\n```\nAAA  40 40 40 \nAAA  30 10 20 \nAAA  20 20 40 \nAAC  40 40 40\n```\n\nWe call this SEQ-QUAL format. And the output is:\n```\n3 AAA  30  23.33 33.33 \n1 AAC  40  40 40\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Scripts",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "We also provided two scripts for converting FASTQ to FASTA format and\nFASTQ to SEQ-QUAL format.\n\n```\n  ./fastq2fasta.sh [fastq_file]\n```\n\nand\n\n```\n  perl fastq2seqprb.pl [fastq_file] \n```\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clustering Reads By Length",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "After the FASTAQ format has been converted to SEQ-PRB format\nwe need to separate the reads into several files according to its length.\nThis can be done with the given script.\n\n```\nperl cluster_seqprb_by_taglen.pl [seq-prb-file]\n```\n\nIt will then create several files with name: [seq-prb-file-LEN] \n\nAnd next we need to create the average version of the reads\n\n```\n./AverageTagQuals_LEN [seq-prb-file-LEN]  > [seq-prb-file-LEN-avg]\n```\n\nFinally we can run Recount at the final output \n\n```\nperl recount.pl [seq-prb-file-LEN-avg]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Publication",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "Edward Wijaya, Martin C. Frith, Yutaka Suzuki, Paul Horton, *Recount: expectation maximization based error correction tool for next\ngeneration sequencing data*, (2009) Genome Inform. 23(1):189-201.\n[PMID:20180274](http://www.ncbi.nlm.nih.gov/pubmed/20180274).\n\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Questions, Comments, Problems",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "Email: ewijaya@gmail.com; ewijaya@ifrec.osaka-u.ac.jp or p-horton@aist.go.jp.\nIf reporting the problem, please describe exactly how to trigger\nthe problem.\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ewijaya/recount/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ewijaya/recount"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ewijaya/recount/master/scripts/fastq2fasta.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "Type `make` in the `/src` directory. It should make two groups of programs:\n\n1. Components of RECOUNT: `FindNeighboursWithQual`, `GenerateProportion` and `EstimateTrueCount`.\n2. Additional preprocessing programs: `AverageTagsQuals_27`, `AverageTagsQuals_36` and `PickBaseQual`\n\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ewijaya/recount/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "RECOUNT is distributed under the GNU General Public License, either version 3 of the License, or (at your option) any later version. For details, see COPYING.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "recount"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ewijaya"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 256708,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 4634,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 3783,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 122,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirement",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "To handle around 20 million reads of length 34, using 1 Hamming distance \nneighbors you will need at least 10 gigabytes of disk space. To install\nthe software you need a C++ compiler.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "description",
    "contributors",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:39:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "RECOUNT: Probabilistic Error Correction for Next Generation Sequencing Data"
        ],
        "type": "Text_excerpt",
        "value": "You can run recount by executing the wrapper written in Perl.\nThe command is simply:\n\n\n```\nperl recount.pl [input] [no_of_neighbor_mismatch]\n```\n\nFor example:\n\n```\nperl recount.pl test-data.txt 1\n```\n\nMaximum allowable number of mismatch is 2. Note that the running time\nand space requirement of RECOUNT using mismatch 2 is quadratic compare\nto using mismatch 1. For 2 mismatches option, you may reduce the \nspace and running time requirement by setting the error error probability\nbar under a variable in `recount.pl`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ewijaya/recount/master/README.md",
      "technique": "header_analysis"
    }
  ]
}