{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "functional annotations (based on reference)",
        "parent_header": [
          "Output files",
          "important files"
        ],
        "type": "Text_excerpt",
        "value": "\r\nTable containing GO Terms associated with each annotated transcript. Also,\r\noverview of covered GO Terms and genes in total (genes_per_ontology) and in\r\nmore detail (genes_per_path).\r\n\r\n    tables/gene_ontology.csv\r\n    tables/gene_ontology_genes_per_ontology.csv\r\n    tables/gene_ontology_genes_per_path.csv\r\n\r\nSame as above, but for KEGG Pathways.\r\n\r\n    tables/kegg.csv\r\n    tables/kegg_covered.csv\r\n    tables/kegg_genes_per_path.csv\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gengit/FRAMA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-06-05T14:17:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-15T14:28:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FRAMA: From RNA-seq data to annotated mRNA assemblies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "\r\nFRAMA is a __transcriptome assembly and mRNA annotation pipeline__, which\r\nutilizies external and newly developed software components. Starting with\r\nRNA-seq data and a reference transcriptome, FRAMA performs 4 steps:\r\n\r\n    1) de novo transcript assembly (Trinity),\r\n    2) gene symbol assignment (best bidirectional blastn hit) and\r\n    3) fusion detection and scaffolding\r\n    4) contig annotation (CDS, mRNA boundaries).\r\n\r\nFurther details ([link](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4712544/)):\r\n\r\n    Bens M et al. FRAMA: from RNA-seq data to annotated mRNA assemblies.\r\n    BMC Genomics. 2016;17:54. doi:10.1186/s12864-015-2349-8.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9960106097936336,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "\r\nAll you need is a [reference transcriptome](http://ftp.ncbi.nlm.nih.gov/genomes/)\r\nin GenBank format and RNA-seq data in FastQ format. You can also provide\r\northologs to your reference transcripts from other species. The additional\r\nhomologs are used for CDS inference.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9656339346983643,
      "result": {
        "original_header": "Cleanup",
        "type": "Text_excerpt",
        "value": "\r\nFRAMA creates a lot of intermediate files. See \"output files\" for further\r\ninformation about each file. We provide to two cleaning methods:\r\n\r\n1. full-cleanup: keeps important files\r\n\r\n    FRAMA configuration_file full-cleanup\r\n\r\nkeeps the following files\r\n\r\n    sequences-mRNA.fasta\r\n    sequences-CDS.fasta\r\n    transcript_catalogue.gbk\r\n    summary\r\n    tables/\r\n\r\n2. cleanup: keeps intermediate files for each transcript processing and trinity\r\n   directory\r\n\r\n    FRAMA configuration_file cleanup\r\n\r\nadditionally keeps:\r\n\r\n    transcripts/\r\n    trinity/\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8507459748955365,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "\r\nTake a look at and try to run the provided example file in\r\n`PATH_TO_FRAMA/example/testing.conf` before running FRAMA on your own data\r\nset.\r\n\r\nThis also serves as a template for your custom configuration.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9973226026208198,
      "result": {
        "original_header": "mandatory variables",
        "type": "Text_excerpt",
        "value": "\r\nThe following depends mostly on your `$PATH` variable. Specify path to\r\n**directories**(!) of executables for each program that is not in your `$PATH`.\r\nPaths must be separated by `space`.\r\n\r\n    PATH_ALL := /home/user/src/cd-hit/ /home/user/src/EMBOSS/bin/\r\n    PATH_GENSCAN_MAT  := (point to Genscan Matrix to use)\r\n    PATH_BLASTDB := (point to Univector Database)\r\n\r\nIndicate whether WU- or NCBI-BLAST should be used [0 WU, 1 NCBI].\r\n\r\n    NCBI_BLAST := 1\r\n\r\nStore intermediate and final files in specified location. Make sure that enough\r\nspace is available to store intermediate output of trinity, blast results, read\r\nalignments, ...).\r\n\r\n    OUTPUT_DIR := /data/output\r\n\r\nInput reads in fastq format. In case of paired end data, indicate elements of\r\npair by \"R1\" and \"R2\" in filename (Example: `sampleA_R1.fq`, `sampleA_R2.fq`).\r\nAll files must be in the same format (one of fastq, fasta, gzipped).\r\n\r\n    READ_DIR := /data/reads/\r\n\r\nReference transcriptome in GenBank format as provided by NCBI:\r\n\r\n    http://ftp.ncbi.nlm.nih.gov/genomes/ -> [YOUR_REF_SPECIES] -> RNA/rna.gbk.gz\r\n\r\n    REF_TRANSCRIPTOME := /data/human.gb\r\n\r\nSpecify [taxonomy id](http://www.ncbi.nlm.nih.gov/taxonomy) of species to\r\nassemble. FRAMA connects to NCBI (once) to fetch necessary species information.\r\n\r\n    SPEC_TAXID := 458603\r\n\r\nWe use genome wide annotation packages from\r\n[Bioconductor](http://www.bioconductor.org/packages/2.14/data/annotation/) to\r\nassign functional annotation to the resulting transcript catalogue. Provide\r\n(and install) the annotation package corresponding to your reference species.\r\n\r\n    OPT_ANNOTATION := org.Hs.eg.db\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9966237234641067,
      "result": {
        "original_header": "optional",
        "type": "Text_excerpt",
        "value": "\r\nIf you already have extracted mRNA and CDS sequences in FASTA format, provide\r\nthem to FRAMA. Additionally, you can add a repeat (soft) masked FASTA of your\r\nreference sequence in order to skip RepeatMasking step.\r\n\r\n    REF_TRANSCRIPTOME_FASTA            := /data/human_mRNA.fa\r\n    REF_TRANSCRIPTOME_FASTA_MASKED     := /data/human_mRNA.fa.masked\r\n    REF_TRANSCRIPTOME_FASTA_CDS        := /data/human_cds.fa\r\n    REF_TRANSCRIPTOME_FASTA_CDS_MASKED := /data/human_cds.fa.masked\r\n\r\nCDS inference is based on the coding sequence of the orthologous reference\r\ntranscript. You can extend the number of orthologs used to infere the\r\nappropriate CDS by providing a table with mappings between orthologous\r\ntranscript from different species. The first column must contain accession of\r\nthe reference transcript. Add one column for each species you want to use and\r\nuse 'NA' to indicate unknown orthologs. Additionally, specify taxonomy ID of\r\neach species in the first line (starting with #, tab separated).  Keep in mind,\r\nthat we perform a multiple sequence alignments with all coding sequences.\r\nTherefore, the number of species used will have an influence on runtime.\r\nAdditionally, you must provide a fasta file containing all coding sequences\r\nmentioned in table (`ORTHOLOG_FASTA`).\r\n\r\n    ORTHOLOG_TABLE := /data/ortholog_table.csv\r\n    ORTHOLOG_FASTA := /data/ortholog_cds.fa\r\n\r\nExample content `ORTHOLOG_TABLE` (also, take a look at\r\n`exampe/ortholog_table.csv`)\r\n\r\n    #9606   10090   10116   9615\r\n    NM_130786       NM_001081067    NM_022258       NA\r\n    NM_001198819    NM_001081074    NM_133400       XM_534776\r\n    NM_001198818    NM_001081074    NM_133400       XM_534776\r\n\r\nWe keep a note in GenBank output about the sequence name and species used to\r\nannotated the CDS. If multiple equally valid coding sequencing are found, the\r\nfirst species in `SPECIES_ORDER` will be used. Please specify the order of\r\ncolumns (0-based) in `ORTHOLOG_TABLE` to indicate your preferred order of\r\nspecies. Example:\r\n\r\n    SPECIES_ORDER := 0,2,1\r\n\r\nSpecify the primary processing steps you want to apply to the raw trinity\r\nassembly (space separated list) in preferred order. Possible steps are: `cd-hit`\r\nand `tgicl`. Leave empty to skip primary processing.\r\n\r\n    ASSEMBLY_PREPROCESS := cd-hit tgicl\r\n\r\nSoft masks repeats in assembly and reference. Set to 0 if you want to skip\r\nrepeat masking.\r\n\r\n    REPEAT := 1\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9718536073028147,
      "result": {
        "original_header": "Software parameter",
        "type": "Text_excerpt",
        "value": "\r\n!Consult manual for external software!\r\n\r\nNumber of cpus. This will be used for any software which runs in parallel.\r\n\r\n    OPT_CPUS := 2\r\n\r\nIf SGE is available (qsub), it will be used for blast jobs. Specify number of\r\njobs.\r\n\r\n    OPT_MAX_SGE := 20\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9127417434605749,
      "result": {
        "original_header": "misassembled contigs",
        "type": "Text_excerpt",
        "value": "\r\nUsed to detect fusion transcript. Specify maximum overlap (`-max-overlap`)\r\nbetween CDS regions (specifically: blast hits by coding sequences of reference\r\ntranscriptome), minimum length of alignment (`-min-frac-size`), identity\r\n(`min-identity`) and coverage (`min-coverage`) thresholds.\r\n\r\n    OPT_FUSION := -max-overlap 5.0 -min-frac-size 200 -min-identity 70.0\r\n     -min-coverage 90.0\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8660590923602167,
      "result": {
        "original_header": "BLAST",
        "type": "Text_excerpt",
        "value": "\r\nBLAST and GENBLASTA Paramater, respectively.\r\n\r\nAdded automatically: `-wordmask=seg lcmask -topcomboN 3 -cpus 1`\r\n\r\n    OPT_BLAST :=\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9443792245884793,
      "result": {
        "original_header": "Scaffolding",
        "type": "Text_excerpt",
        "value": "\r\nSpecify minimum required identity and contig coverage of blast\r\nhit to consider contig as possible scaffolding fragment.\r\n\r\n    OPT_FRAGMENTS   := -identity 70.0 -query-coverage 90.0\r\n\r\nSpecify minimum overlap between fragments in alignment to apply filtering rules\r\n(example: keeps sequence with higher similarity to reference if fragments\r\ndiffer over 98% in overlap, if overlap exceed 66% of contig length)\r\n\r\n    OPT_SCAFFOLDING := -fragment-overlap 66.0 -fragment-identity 98.0\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8836311187267932,
      "result": {
        "original_header": "CDS prediction",
        "type": "Text_excerpt",
        "value": "\r\nAdd '-predictions' if you don't want to use predicted coding sequences (XM\r\nAccessions) for CDS inference.  Don't use if your reference contains \"XM\"\r\nAccessions [TODO].\r\n\r\n    OPT_PREDICTCDS := -predictions\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9861460382112728,
      "result": {
        "original_header": "important files",
        "type": "Text_excerpt",
        "value": "\r\n| File                                 | Description                                                           |\r\n| ------------------------------------ | --------------------------------------------------------------------- |\r\n| transcriptome.gbk *                  | GenBank file describing **all annotated sequences**.                  |\r\n| transcriptome_CDS.fa                 | Fasta with **coding sequences**.                                      |\r\n| transcriptome_mRNA.fa                | Fasta with **transcript sequences** (w/o introns; clipped ends).      |\r\n| transcriptome_CDS.csv                | Coordinates of CDS for mRNA sequences.                                |\r\n| assembly_pripro.fa                   | Trinity assembly after primary processing.                            |\r\n| annotation.pdf                       | General overview of transcript catalogue                              |\r\n| annotation.csv                       | Table containing summary for each annotated transcript.               |\r\n\r\n*mRNA feature instead of 'gene' feature to limit mRNA boundaries in case of\r\nmisassembled contigs\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9945790958487315,
      "result": {
        "original_header": "transcripts/",
        "type": "Text_excerpt",
        "value": "\r\nRunning FRAMA creates a lot intermediate output which might come in handy in\r\ndownstream analysis. Each transcript assignment is stored in a separate\r\ndirectory in\r\n\r\n    transcripts/\r\n\r\nwith the naming pattern according to assigned ortholog.\r\n\r\n    transcripts/SYMBOL_ACCESSION/\r\n\r\nThis directory includes the following files:\r\n\r\nResult in GenBank format.\r\n\r\n    _final.gbk\r\n\r\nRaw GENSCAN output.\r\n\r\n    CDS_genscan.txt\r\n\r\nAssignment of transcript accession to GENSCAN prediction based on blast hits.\r\n\r\n    CDS_genscan_annotated.txt\r\n\r\nMultiple sequence alignment with orth. species requested in `ORTHOLOG_TABLE`\r\n\r\n    CDS_alignment.aln\r\n\r\nBLAST databases for reference and assembly.\r\n\r\n    db/\r\n\r\nBLAST results including average for each HSP-group (`avg_*`) and best hit per query (`best_*`).\r\n\r\n    blast/raw_*\r\n    blast/avg_*\r\n    blast/best_*\r\n\r\n \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/gengit/FRAMA/wiki"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gengit/FRAMA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gengit/FRAMA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gengit/FRAMA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Licence"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gengit/FRAMA/master/src/combine_fast.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gengit/FRAMA/master/src/tgicl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gengit/FRAMA/master/src/polyamisc/polyastrain_call_predict.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gengit/FRAMA/master/src/polyamisc/polyas_call_polyar.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gengit/FRAMA/master/src/polyamisc/polyaclip_eval_pipeline.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gengit/FRAMA/master/src/polyamisc/polyaspwm_scorenimg.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "\r\n    cd setup && Rscript --vanilla SETUP.R\r\n\r\n# Installation\r\n\r\nIn addition to FRAMA, you have to install all third-party tools described as\r\n'mandatory' in the table above. Depending on your Linux platform, your package\r\nmanager might bring you half the way through (see Manual Installation /\r\nAutomatic Installation).\r\n\r\nInstalling FRAMA is quick and easy. Download and unpack this repository and make\r\nsure to set the permission to execute FRAMA. You can add FRAMA to your $PATH or\r\ncreate a symlink to FRAMA in one of the directories in $PATH.\r\n\r\nHere is a suggest workflow, which adds *FRAMA* to your `$PATH`:\r\n\r\n    unzip FRAMA.zip\r\n    cd FRAMA/\r\n    chmod u+x FRAMA\r\n    PATH=$(pwd):$PATH\r\n    export PATH\r\n    # run example\r\n    FRAMA example/testing.cfg\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual Installation of external software",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "\r\nFor instance, on Ubuntu (17.04) :\r\n\r\n    sudo apt-get install perl default-jre r-base-core \\\r\n        ncbi-blast+ mafft emboss bowtie bowtie2 cd-hit \\\r\n        bamtools samtools parallel libc6-i386 build-essential \\\r\n        bioperl libparallel-forkmanager-perl libset-intspan-perl \\\r\n        libfilehandle-unget-perl r-cran-ggplot2 r-cran-plyr \\\r\n        r-cran-reshape lib32z1\r\n\r\nLeft to install manually:\r\n\r\n* `Trinity, GENSCAN, Genblasta, RepeatMasker, TGICL`\r\n* R-packages: `gridExtra, annotate, GO, KEGG.db`\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Automatic Installation of external software",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "\r\nOn 64bit platforms, `FRAMA` attempts to download and install (as non-root)\r\nmissing software packages in very naive way. This might fail due to\r\ndifferent/missing library/compiler versions on your system.\r\n\r\nRequired prerequesites for automatic installation include at least:\r\n\r\n***zesty***\r\n    cmake\r\n    zlib >= 1 (zlib1g-dev)\r\n    ncurses >= 5 (libncurses5-dev)\r\n    jre >= 1.7.0\r\n    g++-4.9\r\n    gcc-4.9\r\n    libc6 (libc6-i386) # genscan, tgicl\r\n    lib32z1 # tgicl\r\n\r\nStart automatic installation:\r\n\r\n    cd FRAMA/setup\r\n    perl SETUP.pl\r\n\r\nGENSCAN must be downloaded manually, due to licence restrictions.\r\n\r\n    FRAMA_DIR=path/to/FRAMA/setup\r\n    wget http://genes.mit.edu/XXXX\r\n    mkdir genscan && tar xvf genscanlinux.tar -C genscan\r\n    mv genscan $FRAMA_DIR/sources/.\r\n    ln -f -s $(readlink -f $FRAMA_DIR/sources/genscan/genscan) $FRAMA_DIR/bin/genscan\r\n    ln -f -s $(readlink -f $FRAMA_DIR/sources/genscan/) $FRAMA_DIR/bin/genscan.dir\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9647845395022938,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "\r\nTake a look at and try to run the provided example file in\r\n`PATH_TO_FRAMA/example/testing.conf` before running FRAMA on your own data\r\nset.\r\n\r\nThis also serves as a template for your custom configuration.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9945435847124255,
      "result": {
        "original_header": "CDS prediction",
        "type": "Text_excerpt",
        "value": "\r\nAdd '-predictions' if you don't want to use predicted coding sequences (XM\r\nAccessions) for CDS inference.  Don't use if your reference contains \"XM\"\r\nAccessions [TODO].\r\n\r\n    OPT_PREDICTCDS := -predictions\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gengit/FRAMA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Licence",
        "type": "Text_excerpt",
        "value": "\r\n    This software was developed at the Leibniz Institute on Aging - Fritz Lipmann\r\n    Institute (FLI; http://www.leibniz-fli.de/) under a mixed licensing model. This\r\n    means that researchers at academic and non-profit organizations can use it for\r\n    free, while for-profit organizations are required to purchase a license. By\r\n    downloading the package you agree with conditions of the FLI Software License\r\n    Agreement for Academic Non-commercial Research (FLI-LICENSE).\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FRAMA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "gengit"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 284518,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 32522,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 26449,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6835,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gengit",
          "type": "User"
        },
        "date_created": "2015-10-20T08:18:25Z",
        "date_published": "2015-10-20T08:22:00Z",
        "html_url": "https://github.com/gengit/FRAMA/releases/tag/v20151019",
        "name": "FRAMA Release (v20151019)",
        "release_id": 1987126,
        "tag": "v20151019",
        "tarball_url": "https://api.github.com/repos/gengit/FRAMA/tarball/v20151019",
        "type": "Release",
        "url": "https://api.github.com/repos/gengit/FRAMA/releases/1987126",
        "value": "https://api.github.com/repos/gengit/FRAMA/releases/1987126",
        "zipball_url": "https://api.github.com/repos/gengit/FRAMA/zipball/v20151019"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "\r\nFRAMA runs on Linux and is written in Perl (5.10.0), R (3.0.3) and GNU Make\r\n(3.81). FRAMA does not require any compilation, but relies on common\r\nbioinformatic applications to be installed. The installation of all external\r\nsoftware packages might seem like a daunting task, but your package manager\r\nmight bring you halfway through (see Installation).\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bioinformatic Software",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "\r\n| Software      | Link                                          | Description |\r\n| ------------- | ----------------------------------------------| ----------- |\r\n| Trinity       | http://trinityrnaseq.sourceforge.net/         | mandatory   |\r\n| samtools      | http://samtools.sourceforge.net               | mandatory   |\r\n| bamtools      | https://github.com/pezmaster31/bamtools       | mandatory   |\r\n| bowtie1       | http://bowtie-bio.sourceforge.net/bowtie1     | mandatory   |\r\n| bowtie2       | http://bowtie-bio.sourceforge.net/bowtie2     | mandatory   |\r\n| EMBOSS        | http://emboss.sourceforge.net                 | mandatory   |\r\n| MAFFT         | http://mafft.cbrc.jp/alignment/software       | mandatory   |\r\n| GENSCAN       | http://genes.mit.edu/license.html             | mandatory   |\r\n| RepeatMasker  | http://www.repeatmasker.org/                  | optional    |\r\n| CD-HIT-EST    | http://weizhong-lab.ucsd.edu/cd-hit/          | optional    |\r\n| TGICL         | http://compbio.dfci.harvard.edu/tgi/software/ | optional    |\r\n| WU-BLAST      | http://blast.advbiocomp.com                   | mandatory   |\r\n\r\nIn case you do not use WU-BLAST:\r\n\r\n| Software       | Link                                          | Description |\r\n| -------------- | --------------------------------------------- | ----------- |\r\n| NCBI-BLAST     | http://www.ncbi.nlm.nih.gov/books/NBK279671/  | mandatory   |\r\n| GenblastA      | http://genome.sfu.ca/genblast/download.html   | mandatory   |\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Perl Modules",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "\r\nAvailable via CPAN.\r\n\r\n| Module                | Version  |\r\n| --------------------- | -------- |\r\n| BioPerl               | 1.006924 |\r\n| Parallel::ForkManager | 0.7.5    |\r\n| Set::IntSpan          | 1.19     |\r\n| FileHandle::Unget     | 0.1628   |\r\n| Text::Soundex         | 3.05     |\r\n\r\nInstallation using cpanm:\r\n\r\n    cd setup && cpanm --installdeps .\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "R Packages",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "\r\n| Package               | Version  |\r\n| --------------------- | -------- |\r\n| plyr                  | 1.8.3    |\r\n| ggplot2               | 1.0.1    |\r\n| reshape               | 0.8.5    |\r\n| gridExtra             | 2.0.0    |\r\n| annotate              | 1.44     |\r\n| GO.db                 | 3.0      |\r\n| KEGG.db               | 3.0      |\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run",
        "type": "Text_excerpt",
        "value": "\r\nMake sure all mandatory parameters are specified in the configuration file (see\r\nConfiguration section). Then, call FRAMA with the appropriate configuration\r\nfile.\r\n\r\n    FRAMA configuration_file\r\n\r\nThat's all. In case of aborts, consult logfiles and remove incomplete results.\r\nRerunning the above command will complete remaining tasks.\r\n\r\nSame as above, but shows all called processes.\r\n\r\n    FRAMA configuration_file verbose\r\n\r\nStart from scratch (removes all created files beforehand).\r\n\r\n    FRAMA configuration_file scratch\r\n\r\nFRAMA uses GNU make as a backbone. Parameters other than `verbose`, `scratch`,\r\n`full-cleanup`, `cleanup` are forwarded to make. For example, the following\r\nlists all tasks without executing them.\r\n\r\n    FRAMA configuration_file -n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gengit/FRAMA/master/README.html",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:42:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ]
}