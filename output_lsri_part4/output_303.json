{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "type": "Text_excerpt",
        "value": "If you use or discuss CodAn, please cite:\n\nNachtigall et al. (2020) CodAn: predictive models for precise identification of coding regions in Eukaryotic transcripts. Briefings in bioinformatics. DOI:[https://doi.org/10.1093/bib/bbaa045](https://doi.org/10.1093/bib/bbaa045)\n\n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at pedronachtigall@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pedronachtigall/CodAn"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": ":bug::sos::speech_balloon:\n\nTo report bugs, to ask for help and to give any feedback, please contact **Pedro G. Nachtigall**: pedronachtigall@gmail.com\n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-05T13:56:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-25T16:02:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CDS prediction in transcripts"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9500604390677374,
      "result": {
        "original_header": "CodAn",
        "type": "Text_excerpt",
        "value": "**CodAn** (**Cod**ing sequence **An**notator) is a computational tool designed to characterize the CDS and UTR regions on transcripts from any Eukaryote species.\n \n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9416735842366044,
      "result": {
        "original_header": "Predictive models",
        "type": "Text_excerpt",
        "value": "The predictive models are available in the subfolder [\"models\"](https://github.com/pedronachtigall/CodAn/tree/master/models). The folder contains all models designed for Eukaryote species (i.e., Fungi, Plants and Animals [Invertebrates and Vertebrates]). The models were designed to be used in Full-Length or Partial transcripts. \n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pedronachtigall/CodAn/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Frequently Asked Questions (FAQ)",
        "type": "Text_excerpt",
        "value": "**[Q1]** What OS do I need to use CodAn?\n- We tested CodAn in Ubuntu 16 and 18. Moreover, we tested CodAn in MacOS Mojave and Catalina, but the user need to download the \"tops-viterbi_decoding\" compiled to macOS to replace the default \"tops-viterbi_decoding\" as described in the \"Installation\" section. In this sense, we believe that CodAn should work on any UNIX OS able to have all dependencies necessary to run CodAn.\n\n**[Q2]** How long does codan need to run an analysis with a set of 200,000 sequences?\n- By using 1 thread, the estimated time to analyze 200,000 sequences with CodAn is around 53 minutes. If the user has more threads available for use, which can be set with the option ```-c N``` (where N in the number of threads), the processing time will decrease proportionally as the number of threads being used (e.g., if the user has 6 threads available for the analysis [option ```-c 6```], the processing time of 200,000 sequences will be around 16 minutes). The running time measurement was performed using a personal computer (6-Core i7 with 16Gb memory).\n\n**[Q3]** I am trying to run CodAn on a server and I am not the admin. How can I install all dependencies without using ```apt```?\n- You can follow the instructions to use [Conda environments](https://docs.conda.io/projects/conda/en/latest/user-guide/concepts/environments.html).\n- OR, try to install the required perl and python modules following the commands below:\n    - Install MCE and Bioperl modules through CPAN (it will install the modules locally):\n        - ```perl -MCPAN -e shell```\n        ```\n        cpan> install MCE\n        cpan> install MCE::Mutex\n        cpan> install Bio::SeqIO\n        cpan> install Bio::DB::Fasta\n        cpan> exit\n        ```\n    - Install Biopython module through pip:\n        - ```pip install biopython```\n\n**[Q4]** CodAn is making 0 predictions in the test set. What to do?\n\n- Ensure that all modules are working properly\n    - go to the CodAn folder and run each module separetly as follow:\n    - tops-viterbi-decoding\n    ```\n    $tops-viterbi_decoding\n    tops-viterbi_decoding: ToPS version \"master 00f9ed6\"\n    Allowed options:\n          -h [ --help ]         produce help message\n          -m [ --model ] arg    a decodable model\n          -F [ --fasta ]        use fasta format\n    ```\n    - predict\n    ```\n    $predict\n    ERROR: missing fasta file name !\n    USAGE: predict [-g <genome> | -t <transcriptome> | -z <local transcriptome predictor> | -s <local genome predictor] -f <fasta file> [-c <number of cpu>]\n    ```\n    - CodAn\n    ```\n    $codan.py\n       _____           _  ___\n      /  __ \\         | |/ _ \\\n      | /  \\/ ___   __| / /_\\ \\_ __\n      | |    / _ \\ / _` |  _  | '_ \\\n      | \\__/\\ (_) | (_| | | | | | | |\n       \\____/\\___/ \\__,_\\_| |_/_| |_|\n\n\n    >>>> CodAn v1.0 September 2019 <<<<\n    ****Use -h for help!****\n    \n    BASIC USAGE (find CDS and UTR sequences):\n    codan.py -t transcripts.fa -o output_folder -m model_folder\n    \n    ALTERNATIVE USAGE (predict CDS and UTR sequences and perform BLAST search  in specific DB to annotated predicted genes based on similarity):\n    codan.py -t transcripts.fa -o output_folder -m model_folder -b blast_DB\n    ```\n    - if any different messages print at your terminal, you have problems with the dependencies, try to re-install them.\n\n- Ensure that the headers don't have symbols such as \":\" or \"|\" or \" \"(space).\n\n- The Bio::DB::Fasta library is responsible for creating the .index. It can't process a fasta file with lines containing more than 65,536 characters. So, if you have any large sequence in one unique line, do the following:\n    - download the script [BreakLines.py](https://github.com/pedronachtigall/CodAn/blob/master/scripts/BreakLines.py)\n    - run BreakLines script: ```python3 BreakLines.py input.fasta output_breaklines.fasta```\n    - use the \"output_breaklines.fasta\" to run CodAn.\n\n**[Q5]** How can I translate the partial CDSs predicted by the CodAn PARTIAL models?\n\n- You can download the script ```TranslatePartial.py``` [here](https://github.com/pedronachtigall/CodAn/blob/master/scripts/).\n    ```\n    TranslatePartial.py partialCDS.fa partialCDS_peptide.fa\n    ````\n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pedronachtigall/CodAn/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pedronachtigall/CodAn"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CodAn"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.3403273"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Download and decompress the [CodAn.tar.gz](https://github.com/pedronachtigall/CodAn/blob/master/CodAn.tar.gz) file and add the bin directory to your PATH:\n\n```\ntar -xf CodAn.tar.gz\nexport PATH=$PATH:path/to/CodAn/bin/\n```\n\nor git clone the CodAn repository and add the bin directory to your PATH:\n```\ngit clone https://github.com/pedronachtigall/CodAn.git\nexport PATH=$PATH:path/to/CodAn/bin/\n```\n\n:warning: If the user is using a macOS, please download the \"tops-viterbi_decoding\" compiled to macOS [here](https://github.com/pedronachtigall/CodAn/blob/master/for_MacOS_users.zip), decompress the file ```unzip for_MacOS_users.zip```, and copy the \"tops-viterbi_decoding\" to the bin folder ```cp for_MacOS_users/tops-viterbi_decoding path/to/CodAn/bin/```\n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pedronachtigall/CodAn/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "[GNU GPLv3](https://www.gnu.org/licenses/gpl-3.0.html)\n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master//codan_logo.png"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CodAn"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "pedronachtigall"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 28031,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 9610,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 637,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pedronachtigall",
          "type": "User"
        },
        "date_created": "2021-06-08T14:47:47Z",
        "date_published": "2021-06-08T14:53:44Z",
        "html_url": "https://github.com/pedronachtigall/CodAn/releases/tag/v1.2",
        "name": "CodAn release v1.2",
        "release_id": 44283754,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/pedronachtigall/CodAn/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/pedronachtigall/CodAn/releases/44283754",
        "value": "https://api.github.com/repos/pedronachtigall/CodAn/releases/44283754",
        "zipball_url": "https://api.github.com/repos/pedronachtigall/CodAn/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pedronachtigall",
          "type": "User"
        },
        "date_created": "2021-06-02T14:16:24Z",
        "date_published": "2021-06-02T14:17:07Z",
        "html_url": "https://github.com/pedronachtigall/CodAn/releases/tag/v1.1",
        "name": "CodAn v1.1",
        "release_id": 43978604,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/pedronachtigall/CodAn/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/pedronachtigall/CodAn/releases/43978604",
        "value": "https://api.github.com/repos/pedronachtigall/CodAn/releases/43978604",
        "zipball_url": "https://api.github.com/repos/pedronachtigall/CodAn/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pedronachtigall",
          "type": "User"
        },
        "date_created": "2019-09-09T18:37:55Z",
        "date_published": "2019-09-09T18:48:43Z",
        "description": "The first release of CodAn (Coding sequence Annotator).",
        "html_url": "https://github.com/pedronachtigall/CodAn/releases/tag/v1.0",
        "name": "Release of CodAn v1.0",
        "release_id": 19860457,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/pedronachtigall/CodAn/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/pedronachtigall/CodAn/releases/19860457",
        "value": "https://api.github.com/repos/pedronachtigall/CodAn/releases/19860457",
        "zipball_url": "https://api.github.com/repos/pedronachtigall/CodAn/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "- [Python3](https://www.python.org/) and [Biopython](https://biopython.org/wiki/Download)\n    - ```apt-get install python3-biopython```\n- [Perl](https://www.perl.org/), [Bioperl](https://bioperl.org/) and [MCE](https://metacpan.org/release/MCE) (libmce-perl)\n    - ```apt-get install bioperl libmce-perl```\n- [NCBI-BLAST](https://www.ncbi.nlm.nih.gov/books/NBK279671/) (v2.9.0 or above)\n\nEnsure that all requirements are working properly.\n\n:warning: **Conda environment installation**\n\nIf the user wants to install CodAn and all dependencies using [Conda environment](https://docs.conda.io/projects/conda/en/latest/user-guide/concepts/environments.html), follow the steps below:\n- Create the environment:\n    - ```conda create -n codan_env python=3.7 biopython perl perl-bioperl perl-mce blast```\n- Git clone the CodAn repository and add to your PATH:\n    - ```git clone https://github.com/pedronachtigall/CodAn.git```\n    - ```export PATH=$PATH:path/to/CodAn/bin/```\n- It may be needed to apply \"execution permission\" to all bin executables:\n    - ```chmod 777 path/to/CodAn/bin/*```\n- Then, run CodAn as described in the \"Usage\" section.\n- To activate the environment to run CodAn just use the command: ```conda activate codan_env```\n- To deactivate the environment just use the command: ```conda deactivate```\n\n:warning: **Conda installation**\n\n[![Install with conda](https://img.shields.io/badge/Install%20with-conda-success)](https://anaconda.org/bioconda/codan)\n\nCodAn can be installed with Conda by using the command: `conda install -c bioconda codan`\n\nThe user can also create an environment with the command: `conda create -n codan_env -c bioconda codan`. Then, activate the environment `conda activate codan_env` to run CodAn in Linux and MacOS systems.\n\n- Please, notice that the Conda installation of CodAn does not download the models used in predictions. Download the model specific to your usage [here](https://github.com/pedronachtigall/CodAn/tree/master/models) or using `wget` and decompress the model (by using `unzip` or other tool) to be set in the `-m` parameter.\n\n:warning: **Docker installation**\n\n[![Docker build](https://img.shields.io/badge/Docker-build-blue)](https://hub.docker.com/repository/docker/pedronachtigall/codan)\n\nIf the user takes advantage of [Docker](https://docs.docker.com/) in its system, we have a pre-built Dockerfile that allows an easy build and containerization of CodAn. Just follow the steps below:\n- Git clone CodAn repository (`git clone https://github.com/pedronachtigall/CodAn.git`) and change to CodAn directory (`cd CodAn`)\n- Build the container: `docker build -t codan:v1.0 .` (It may take a few minutes)\n- In your working directory (the transcript file should be in there), enter in the container shell: `docker run -v $PWD:/project --rm -it codan:v1.0`\n- Just run CodAn by indicating one of the models to the `-m` option: `-m /app/CodAn/models/{VERT|INV|PLANTS|FUNGI}_{full|partial}`\n- The command line must be similar to `codan.py -t transcripts.fa -m /app/CodAn/models/MODEL_full/ -o output_folder`\n\nThe user may also pull CodAn container direct from the Docker repository following the steps below:\n- Pull CodAn container: `docker pull pedronachtigall/codan:latest`\n- Run CodAn container: `docker run -v $PWD:/project --rm -it pedronachtigall/codan:latest`\n    - Please, notice that you should be in the folder containing your transcripts file\n- Use a command line similar to `codan.py -t transcripts.fa -m /app/CodAn/models/MODEL_full/ -o output_folder` to run CodAn and perform its predictions\n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:49:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "```\nUsage: codan.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -t file, --transcripts=file\n                        Mandatory - input transcripts file (FASTA format),\n                        /path/to/transcripts.fa\n  -m model, --model=model\n                        Mandatory - path to model, /path/to/model\n  -s string, --strand=string\n                        Optional - strand of sequence to predict genes (plus,\n                        minus or both) [default=both]\n  -c int, --cpu=int     Optional - number of threads to be used [default=1]\n  -o folder, --output=folder\n                        Optional - path to output folder,\n                        /path/to/output/folder/ if not declared, it will be\n                        created at the transcripts input folder\n                        [default=\"CodAn_output\"]\n  -b proteinDB, --blastdb=proteinDB\n                        Optional - path to blastDB of known protein sequences,\n                        /path/to/blast/DB/DB_name\n  -H int, --HSP=int     Optional - used in the \"-qcov_hsp_perc\" option of\n                        blastx [default=80]\n\n```\n\nBasic usage (predict CDS):\n```\ncodan.py -t transcripts.fa -o output_folder -m model\n```\n\nAlternative usage (predict CDS and perform BLAST search in specific DB to annotated predicted genes based on similarity):\n```\ncodan.py -t transcripts.fa -o output_folder -m model -b blast_DB\n```\nTo run this optional step, just indicate a specific protein DB mounted using the ```makeblastdb``` function from the NCBI-BLAST approach.\nThe user can download the pre-mounted protein DBs, such as swissprot (ftp://ftp.ncbi.nlm.nih.gov/blast/db/).\n\n:warning: :warning: If CodAn not produces any prediction, please check the **Q4** in the FAQ section. :warning: :warning:\n"
      },
      "source": "https://raw.githubusercontent.com/pedronachtigall/CodAn/master/README.md",
      "technique": "header_analysis"
    }
  ]
}