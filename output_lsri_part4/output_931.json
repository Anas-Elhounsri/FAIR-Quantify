{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KamelaNg/MTBGT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-14T12:53:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-08T05:48:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The MycTBGenometoTest (MTBGT) tool transforms WGS-derived SNPs into laboratory-validated results of Xpert MTB/RIF Classic, Xpert MTB/RIF Ultra, and the LPAs GenotypeMDRTBplusv2.0 (Hain) and Genoscholar NTM + MDRTB II (Nipro)."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9279565173849311,
      "result": {
        "original_header": "MTBGT.py README",
        "type": "Text_excerpt",
        "value": "The MTBGT tool can be run on any python-enabled operating system with no additional prerequisites. The tool is comprised of 3 scripts \u2013 MTBGT, MTBGT_IO, and MTBGT_Tests, where MTBGT.py is the main scipt to be run in the command line, and scripts \u2018IO\u2019 and \u2018Tests\u2019 are imported into this main script as mtbgtio and mtbgtt respectively. \nMTBGT.py parses the inputs, reads in the map file, then creates a dictionary of codons to genome positions. It then sets-up the type of input file (VCF or tab) to be read, keeping the SNP that is present at each of the positions in the genome, and creates a dictionary where the core filename is the key and a dictionary of all genome positions (keys) and their SNPs (if any) (values) is returned. It then sets-up the tests to be run and tables to be outputed as specified by the user. \nIt is executed as: python3 MTBGT.py --folder <folderName> --type tab/vcf --map <codonMapFile> (optional) --out <outputFilename> (optional) --tables y/n. (optional). \nThe script accepts two types of input file \u2013 VCF or MTBseq tab. The folder containing the input files to be read and processed as well as the file type are required inputs from the user, whereas the map, prefix of output files, and summary table are optional. The user has to specify the path or location of the input files by typing in the argument --folder followed by the path or location of the directory, and the specifc format of the input file by typing in the argument --type followed by either VCF or tab, in which upper or lower case are both acceptable. By default, the module will run all the RDTs and Sanger sequencing on the VCF and tab files. The user has the option to select which individual tests to run.  \nThe optional inputs include a map file that enumerates codons where mutations are known to be detected by the RDTs, validated in a previous study (Ng et al. 2018) and indicates their relationship with genome positions of the reference standard. If the map file is not supplied, the reference genome is assumed to be H37Rv NC000962.3, and the file \u2018default_mapfile.txt\u2019 integrated with the script is used. An example of this tab-separated file is in https://github.com/KamelaNg/MTBGT/blob/master/default_mapfile.txt. All codons in this mapfile are used by the Sanger module, whereas Xpert Classic and Ultra and LPAs Hain and Nipro exclude codons 170 and 491 situated outside the rifampicin resistance determining region (RRDR) and are undetected by the commercial RDTs. The Sanger module displays any change in amino acid at the default codon positions. If more codon positions are to be included, the end-user must supply the additional codons to the codon_nuc dictionary in lines 6 to 21 of the MTBGT_Tests.py module, including the wildtype nucloetides for the 3 codon positions. \nThe filename prefix for the output is also an optional input. The default prefix used is GenomeToTests, for example, GenomeToTests_XpertUltra.txt. If to be supplied, the test(s) to run are indicated as one-letter inputs. If the user wants all tests to be run on their vcf or tab file(s), the option --tests is not necessary. To specifiy individual tests, the following code in upper or lower case should be indicated: X for Xpert Classic, U for Xpert Ultra, H for LPA-Hain, N for LPA-Nipro, and S for rpoB Sanger sequencing. Thus, using --tests xu will run classic Xpert Classic and Xpert Ultra only. The letters can be supplied in any order, i.e., --tests xhn and --tests HnX are the same. The final optional input deals with a table summarizing the results generated by the script. If an overview table of the results from each requested test is to be made the --summary y options should be used. This is on by default. \nMTBGT_IO (mtbgtio) is a series of functions to read in and analyze VCF or tab input files, and create tabulated results of RDTs and/or rpoB Sanger sequencing to be run on the inputs, supplemented with RDT probe and/or RR mutation counts and proportions. \nMTBGT_Tests (mtbgtt) is comprised of a dictionary of wildtype codon positions following the Mtb numbering system as the key and the list of codon nucelotides as the value; dictionary of all codon nucelotides to 3 letter amino acid codes; and dictionary of codon positions with the mutated codons and the associated probe change in the RDTs; as well as several functions to create the RDT outputs. \nThe mtbgtt script examines each VCF or tab file in the folder to check for genome positions that are associated with any change in a codon base. For each VCF or tab file, the module will generate a copy of the wild-type (WT) codon patterns, then it will check if the genome position from the VCF or tab file is in a codon of interest. Next, it will determine if the codon is in the mutation list. If so, it will modify the WT codon to be the new mutated codon and will compare the WT and the sample codon lists. In the positions where the WT and sample codon lists differ, the module will tag the corresponding RDT probe with a 0 or 1, in which 0 denotes a capturing or absent WT probe whereas 1 indicates a developing LPA-Hain or LPA-Nipro mutant probe that captures one of the high confidence RR-conferring mutations namely D435V, H445D, H445Y, and S450L. The module will return RIF resistance DETECTED and reflect this in the output file if the sample being tested differs from the WT profile. If the output filename is not supplied, it will be indicated as genomeToProbe_<nameofRDT>.txt. \nThe rpoB Sanger module extracts all RR-associated SNPs from the whole genome sequences and outputs it as 3-letter WT amino acid followed by the codon number (position) and the 3-letter mutant amino acid. \nThe generated output is a tab-delimited file that can be easily imported into Excel through the following steps: \n1) Open Microsoft Excel 2016.\n2) Click on the Data tab.\n3) In the Get & Transform Data group, click from Text/CSV.\n4) A window will pop-up. Select the tab-delimited output file you wish to import.\n5) Click Import. The Text Import process will then commence.\n6) On the top of the pop-up dialogue box, check if 'Tab' is selected under Delimiter drop-down menu.\n7) Click Load.\n8) You can then modify the Table style and perform your analysis. \nThe output informs the end-user of the following details for each input file processed: the Sample name, RIF resistance or susceptibility indicated as RIF Resistance DETECTED or NOT DETECTED respectively; mutant codon position, and mutant codon nucleotides, and sample output list which is a series of 0\u2019s or 1\u2019s indicating absence or presence of the capturing probe for the RDTs, and the RR-conferring mutation for rpoB Sanger sequencing. Capturing probe and sample results profile will be shown for classic Xpert and Ultra; absent WT and developing mutant probes, and sample results profile for LPA-Hain and LPA-Nipro; and RR-conferring mutation for rpoB Sanger sequencing. Additionally, a summary table with frequencies and proportions of RS-TB cases detected and RDT probes and RR-conferring mutations will be generated. \nIf the summary option is selected, a tab delimited file with the frequency and total count of each probe (Xpert, Ultra, Haina nd Nipro) or mutation (Sanger) along with the rifampicin sensitive counts is created. Tests are in the order Xpert, Ultra, Hain, Nipro, Sanger (or a subset as requested).\n \n"
      },
      "source": "https://raw.githubusercontent.com/KamelaNg/MTBGT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KamelaNg/MTBGT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KamelaNg/MTBGT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KamelaNg/MTBGT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MTBGT.py README"
      },
      "source": "https://raw.githubusercontent.com/KamelaNg/MTBGT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9669179926951268,
      "result": {
        "original_header": "MTBGT.py README",
        "type": "Text_excerpt",
        "value": "The MTBGT tool can be run on any python-enabled operating system with no additional prerequisites. The tool is comprised of 3 scripts \u2013 MTBGT, MTBGT_IO, and MTBGT_Tests, where MTBGT.py is the main scipt to be run in the command line, and scripts \u2018IO\u2019 and \u2018Tests\u2019 are imported into this main script as mtbgtio and mtbgtt respectively. \nIt is executed as: python3 MTBGT.py --folder <folderName> --type tab/vcf --map <codonMapFile> (optional) --out <outputFilename> (optional) --tables y/n. (optional). \n"
      },
      "source": "https://raw.githubusercontent.com/KamelaNg/MTBGT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KamelaNg/MTBGT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Kamela Ng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KamelaNg/MTBGT/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MTBGT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "KamelaNg"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 32860,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KamelaNg/MTBGT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:21:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}