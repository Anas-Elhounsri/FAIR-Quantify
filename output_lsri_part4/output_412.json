{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cole-group/QUBEKit"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-31T17:46:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-22T09:01:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "  Quantum Mechanical Bespoke Force Field Derivation Toolkit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9741327491896983,
      "result": {
        "original_header": "What is QUBEKit?",
        "type": "Text_excerpt",
        "value": "[QUBEKit](https://blogs.ncl.ac.uk/danielcole/qube-force-field/) is a Python 3.6+ based force field derivation toolkit for Linux operating systems.\nOur aims are to allow users to quickly derive molecular mechanics parameters directly from quantum mechanical calculations.\nQUBEKit pulls together multiple pre-existing engines, as well as bespoke methods to produce accurate results with minimal user input.\nQUBEKit aims to avoid fitting to experimental data where possible while also being highly customisable. \n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9746847874598548,
      "result": {
        "original_header": "In Development",
        "type": "Text_excerpt",
        "value": "QUBEKit should currently be considered a work in progress.\nWhile it is stable we are constantly working to improve the code and broaden its compatibilities.  \nWe use lots of software written by many different people;\nif reporting a bug please (to the best of your ability) make sure it is a bug with QUBEKit and not with a dependency.\nWe welcome any suggestions for additions or changes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.883831539580092,
      "result": {
        "original_header": "Cook Book",
        "type": "Text_excerpt",
        "value": "All commands can be viewed by calling `QUBEKit -h`. Below is an explanation of what all these commands are: \n(Optional) Copy the folder and change the name to indicate it's for DDEC6:\n    \n    cp -r QUBEKit_benzene_2019_01_01_BENZ_DDEC3 QUBEKit_benzene_2019_01_01_BENZ_DDEC6 \nRerun the analysis with the DDEC version changed.\nThis time we can restart just before the charges are calculated to save time.\nHere we're restarting from density and finishing on charges: \n**Analyse methanol from its smiles string both with and without a solvent:** \n**Calculate the density for methane, ethane and propane using their pdbs:** \n    QUBEKit -bulk density.csv\n    \nNote, you can add more commands to the execution but it is recommended that changes are made to the config files instead. \n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cole-group/QuBeKit/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Running Jobs",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "Running a job entirely on defaults, is as simple as typing `-i` for input, followed by the pdb file name, for example:\n\n    QUBEKit -i methane.pdb\n    \nThis will perform a start-to-finish analysis on the `methane.pdb` file using the default config ini file.\nFor anything more complex, you will need to add more commands.\n\n---\n\nGiven a list of commands, such as: `-setup`, `-progress` some are taken as single word commands.\nOthers however, such as changing defaults: (`-c 0`), (`-m 1`), are taken as tuple commands.\nThe first command of tuple commands is always preceded by a `-`, while the latter commands are not: (`-skip` `density` `charges`).\n(An error is raised for 'hanging' commands e.g. `-c`, `1` or `-sm`.)\n\nAll commands can be provided in any order, as long as tuple commands are paired together.\n**All configuration commands are optional**. If nothing at all is given, the program will run entirely with defaults.\nQUBEKit only *needs* to know the molecule you're analysing, given with `-i` `<molecule>.pdb` or `-sm` `<smiles string>`.\n\nFiles to be analysed must be written with their file extension (.pdb) attached or they will not be recognised commands.\nAll commands should be given in lower case with two main exceptions;\nyou may use whatever case you like for the name of files (e.g. `-i DMSO.pdb`) or the name of the directory (e.g. `-log Run013`).\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cole-group/QUBEKit/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cole-group/QUBEKit"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "QUBEKit - Quantum Mechanical Bespoke force field toolkit"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/devtools/travis-ci/before_install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*"
        ],
        "type": "Text_excerpt",
        "value": "QUBEKit is now available through conda-forge; this is the recommended installation method.\nGithub has our latest version which will likely have newer features but may not be stable.\nPip is not updated as regularly as Anaconda or Github but should also be stable.\n\n    # Recommended\n    conda install -c conda-forge qubekit\n\n---\n    \n    # Alternative \n    pip install qubekit\n\n---\n    \n    # Recommended for Developers (see below)\n    git clone https://github.com/qubekit/QUBEKit.git\n    cd <install location>\n    python setup.py install    \n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing as dev",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Installation",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "If downloading QUBEKit to edit the latest version of the source code, \nthe easiest method is install via conda, then remove the conda version of qubekit and git clone.\nThis is accomplished with a few simple commands:\n    \n    # Install QUBEKit as normal\n    conda install -c conda-forge qubekit\n    \n    # Remove ONLY the QUBEKit package itself, leaving all dependencies installed\n    # and on the correct version\n    conda remove --force qubekit\n    \n    # Re-download the latest QUBEKit through github\n    git clone https://github.com/qubekit/QUBEKit.git\n    \n    # Re-install QUBEKit outside of conda\n    cd QUBEKit/\n    python setup.py install\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9054851969672805,
      "result": {
        "original_header": "**Newcastle University UK - Cole Group**",
        "type": "Text_excerpt",
        "value": "\n| **Status** | [![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/qubekit/QUBEKit.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/qubekit/QUBEKit/context:python) [![Build Status](https://travis-ci.com/qubekit/QUBEKit.svg?branch=master)](https://travis-ci.com/qubekit/QUBEKit) [![Conda (channel only)](https://img.shields.io/conda/vn/conda-forge/qubekit?color=blue&logo=anaconda&logoColor=white)](https://anaconda.org/conda-forge/qubekit) |\n| :------ | :------ |\n| **Foundation** | [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Python Version](https://img.shields.io/badge/Python-3.6+-1f425f.svg)](https://www.python.org/) [![platforms](https://anaconda.org/conda-forge/qubekit/badges/platforms.svg)]() |\n| **Installation** | [![Anaconda-Server Badge](https://anaconda.org/conda-forge/qubekit/badges/installer/conda.svg)](https://anaconda.org/conda-forge/qubekit) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/qubekit/badges/downloads.svg)](https://anaconda.org/conda-forge/qubekit) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/qubekit/badges/latest_release_date.svg)](https://anaconda.org/conda-forge/qubekit) |\n \n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9528107078864816,
      "result": {
        "original_header": "Cook Book",
        "type": "Text_excerpt",
        "value": "(Optional) Copy the folder and change the name to indicate it's for DDEC6:\n    \n    cp -r QUBEKit_benzene_2019_01_01_BENZ_DDEC3 QUBEKit_benzene_2019_01_01_BENZ_DDEC6 \n(Optional) Move into the new folder: \n    cd QUBEKit_benzene_2019_01_01_BENZ_DDEC6 \n(Optional) Create and move into new folder \n    cp -r QUBEKit_methanol_2019_01_01_Methanol_Solvent QUBEKit_methanol_2019_01_01_Methanol_No_Solvent\n    cd QUBEKit_methanol_2019_01_01_Methanol_No_Solvent \n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8506712042941635,
      "result": {
        "original_header": "Cook Book",
        "type": "Text_excerpt",
        "value": "Generate a blank csv file with a relevant name: \nGenerate a blank csv with the name `simple_alkanes`: \n    QUBEKit -csv simple_alkanes.csv \n    QUBEKit -bulk simple_alkanes.csv \n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cole-group/QUBEKit/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "QUBEKit"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "cole-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 827772,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 2817,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1520,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 461,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 109,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* [Anaconda3](https://www.anaconda.com/download/)\n\nDownload Anaconda from the above link and install with the linux command:\n\n    ./Anaconda3<version>.sh\n\n*You may need to use `chmod +x Anaconda3<version>.sh` to make it executable.*\n\nWe recommend you add conda to your .bashrc when prompted.\n\n* [Gaussian09](http://gaussian.com/)\n\nInstallation of Gaussian is likely handled by your institution; QUBEKit uses it for density calculations only.\nIf you don't plan on performing these sorts of calculations then it is not necessary.\nIf you do, please make sure Gaussian09 is executable with the command `g09`.\n\n* [Chargemol](https://sourceforge.net/projects/ddec/files/)\n\nChargemol can be downloaded and installed from a zip file in the above link. \nBe sure to add the path to the QUBEKit configs once you've generated them *([explanation](https://github.com/qubekit/QUBEKit#before-you-start-config-files))*.\n\nMost conda packages are included in the conda-forge install.\nPackages not available through conda-forge may need to be installed separately.\n\n    conda install -c conda-forge qubekit\n\nThe following table details some of the core requirements included in the conda install of QUBEKit.\nIf any packages are missing from the install or causing issues, this table shows how to get them.\n\n| **Package** | Conda Install |\n| :------ | :------ |\n| [GeomeTRIC](https://github.com/leeping/geomeTRIC) | `conda install -c conda-forge geometric` |\n| [OpenForceField](https://openforcefield.org/) | `conda install -c omnia openforcefield` |\n| [OpenMM](http://openmm.org/) | `conda install -c omnia openmm` |\n| [PSI4](http://www.psicode.org/) | `conda install -c psi4 psi4` |\n| [QCEngine](https://pypi.org/project/qcengine/) | `conda install -c conda-forge qcengine` |\n| [RDKit](http://rdkit.org/) | `conda install -c rdkit rdkit` |\n| [TorsionDrive](https://github.com/lpwgroup/torsiondrive) | `conda install -c conda-forge torsiondrive` |\n\n\nAdding lots of packages can be a headache. If possible, install using Anaconda through the terminal.\nThis is generally safest, as Anaconda should deal with versions and conflicts in your environment.\nGenerally, conda packages will have the conda install command on their website or github.\nFor the software not available through Anaconda, or if Anaconda is having trouble resolving conflicts, either git clone them and install:\n\n    git clone https://<git_address_here>\n    cd <location of cloned package>\n    python setup.py install\n\nor follow the described steps in the respective documentation.\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Running Jobs",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "Running a job entirely on defaults, is as simple as typing `-i` for input, followed by the pdb file name, for example:\n\n    QUBEKit -i methane.pdb\n    \nThis will perform a start-to-finish analysis on the `methane.pdb` file using the default config ini file.\nFor anything more complex, you will need to add more commands.\n\n---\n\nGiven a list of commands, such as: `-setup`, `-progress` some are taken as single word commands.\nOthers however, such as changing defaults: (`-c 0`), (`-m 1`), are taken as tuple commands.\nThe first command of tuple commands is always preceded by a `-`, while the latter commands are not: (`-skip` `density` `charges`).\n(An error is raised for 'hanging' commands e.g. `-c`, `1` or `-sm`.)\n\nAll commands can be provided in any order, as long as tuple commands are paired together.\n**All configuration commands are optional**. If nothing at all is given, the program will run entirely with defaults.\nQUBEKit only *needs* to know the molecule you're analysing, given with `-i` `<molecule>.pdb` or `-sm` `<smiles string>`.\n\nFiles to be analysed must be written with their file extension (.pdb) attached or they will not be recognised commands.\nAll commands should be given in lower case with two main exceptions;\nyou may use whatever case you like for the name of files (e.g. `-i DMSO.pdb`) or the name of the directory (e.g. `-log Run013`).\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:11:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Help",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*"
        ],
        "type": "Text_excerpt",
        "value": "Below is general help for most of the commands available in QUBEKit.\nThere is some short help available through the terminal (invoked with `-h`) \nbut all necessary long-form help is within this document.\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Config files",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "QUBEKit has a lot of settings which are used in production and changing these can result in very different force field parameters.\nThe settings are controlled using ini style config files which are easy to edit.\nAfter installation you should notice a `QUBEKit_configs` \nfolder in your main home directory; now you need to create a master template.\nTo do this, use the command `QUBEKit -setup` where you will be presented with the following:\n\n    You can now edit config files using QUBEKit, chose an option to continue:\n    1) Edit a config file\n    2) Create a new master template\n    3) Make a normal config file\n\nChoose option two to set up a new template which will be used every time you run QUBEKit \n(unless you supply the name of another ini file in the configs folder).\nThe only parameter that ***must*** be changed for QUBEKit to run is the Chargemol path in the descriptions section.\nThis option is what controls where the Chargemol code is accessed from on your PC.\nIt should be the location of the Chargemol home directory, plus the name of the Chargemol folder itself to account for version differences:\n\n    '/home/<user>/Programs/chargemol_09_26_2017'\n    \nFollowing this, feel free to change any of the other options such as the basis set.\n\nQUBEKit ***does*** have a full suite of defaults built in. \nYou do not necessarily need to create and manage an ini config file; everything can be done through the terminal commands.\nTo make it easier to keep track of changes however, we recommend you do use a config file, \nor several depending on the analysis you're doing.\n\nYou can change which config file is being used at runtime using the command:\n\n    -config <config file name>.ini\n    \nOtherwise, the default `master_config.ini` will be used.\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Logging",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "Each time QUBEKit runs, a new working directory containing a log file will be created.\nThe name of the directory will contain the run number or name provided via the terminal command `-log` \n(or the run number or name from the configs if a `-log` command is not provided).\nThis log file will store which methods were called, how long they took, and any docstring for them (if it exists).\nThe log file will also contain information regarding the config options used, as well as the commands given and much more.\nThe log file updates in real time and contains far more information than is printed to the terminal during a run.\nIf there is an error with QUBEKit, the full stack trace of an exception will be stored in the log file.\n\n**The error printed to the terminal may be different and incorrect so it's always better to check the log file.**\n\nMany errors have custom exceptions to help elucidate if, for example, a module has not been installed correctly.\n\nThe format for the name of the active directory is:\n\n    QUBEKit_moleculename_YYYY_MM_DD_runnumber\n\nIf using QUBEKit multiple times per day with the same molecule, it is therefore necessary to update the 'run number'.\nNot updating the run number when analysing the same molecule on the same day will prevent the program from running.\nThis is to prevent the directory being overwritten.\n\nUpdating the run number can be done with the command:\n\n    -log Prop1201\n    \nwhere `Prop1201` is an example string which can be almost anything you like (no spaces or special characters).\n\n**Inputs are not sanitised so code injection is possible but given QUBEKit's use occurs locally, you're only hurting yourself!\nIf you don't understand this, don't worry, just use alphanumeric log names like above.**\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: High Throughput",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "Bulk commands are for high throughput analysis; they are invoked with the `-bulk` keyword.\nA csv must be used when running a bulk analysis.\nIf you would like to generate a blank csv config file, simply run the command:\n\n    QUBEKit -csv example.csv\n    \nwhere example.csv is the name of the config file you want to create.\nThis will automatically generate the file with the appropriate column headers.\nThe csv config file will be put into wherever you ran the command from.\nWhen writing to the csv file, append rows after the header row, rather than overwriting it.\n\nIf you want to limit the number of molecules per csv file, simply add an argument to the command.\nFor example, if you have 23 pdb files and want to analyse them 12 at a time, use the command:\n\n    QUBEKit -csv example.csv 12\n    \nThis will generate two csv files, one with 12 molecules inside, the other with the remaining 11.\nYou can then fill in the rest of the csv as desired, or run immediately with the defaults.\n\nBefore running a bulk analysis, fill in each column for each molecule*; \nimportantly, different config files can be supplied for each molecule.\n\n*Only the name column needs to be filled (which is filled automatically with the generated csv),\nany empty columns will simply use the default values:\n\n* If the charge column is empty, charge will be set to 0;\n* If the multiplicity column is empty, multiplicity will be set to 1; \n* If the config column is empty, the default config is used;\n* The smiles string column only needs to be filled if a pdb is *not* supplied;\n* Leaving the restart column empty will start the program from the beginning;\n* Leaving the end column empty will end the program after a full analysis.\n\nA bulk analysis is called with the `-bulk` command, followed by the name of the csv file:\n\n    QUBEKit -bulk example.csv\n    \nAny pdb files should all be in the same place: where you're running QUBEKit from.\nUpon executing this bulk command, QUBEKit will work through the rows in the csv file.\nEach molecule will be given its own directory and log file (the same as single molecule analyses).\n\nPlease note, there are deliberately two config files.\nThe changeable parameters are spread across a .csv and a .ini config files.\nThe configs in the .ini are more likely to be kept constant across a bulk analysis.\nFor this reason, the .csv config contains highly specific parameters such as torsions which will change molecule to molecule.\nThe .ini contains more typically static parameters such as the basis sets and engines being used (e.g. PSI4, Chargemol, etc).\nIf you would like the ini config to change from molecule to molecule, you may specify that in the csv config.\n\nYou can change defaults inside the terminal when running bulk analyses, and these changed defaults will be printed to the log file.\nHowever, the config files themselves will not be overwritten.\nIt is therefore recommended to manually edit the config files rather than doing, for example:\n\n    QUBEKit -bulk example.csv -log run42 -ddec 3 -solvent true\n    \nBe aware that the names of the pdb files are used as keys to find the configs.\nSo, each pdb being analysed should have a corresponding row in the csv file with the correct name\n(if using smiles strings, the name column will just be the name given to the created pdb file).\n\nFor example (csv row order does not matter, and you do not need to include smiles strings when a pdb is provided; column order *does* matter):\n\n    <location>/:\n        benzene.pdb\n        ethane.pdb\n        bulk_example.csv\n\n    bulk_example.csv:\n        name,charge,multiplicity,config,smiles,torsion_order,restart,end\n        methane,,,default_config,C,,,\n        benzene,,,default_config,,,,\n        ethane,,,default_config,,,,\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Skipping Stages",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "There is another command for controlling the flow of execution: `-skip`.\nThe skip command allows you to skip any number of *proceeding* steps.\nThis is useful if using a method not covered by QUBEKit for a particular stage, \nor if you're just not interested in certain time-consuming results.\n\n`-skip` takes at least one argument and on use will completely skip over the provided stage(s).\nSay you are not interested in calculating bonds and angles, and simply want the charges; the command:\n\n    QUBEKit -i acetone.pdb -skip hessian mod_sem\n\nwill skip over the Hessian matrix calculation which is necessary for the modified Seminario method (skipping that too).\nQUBEKit will then go on to calculate density, charges and so on.\n\n**Beware skipping steps which are required for other stages of the analysis.**\n\nJust like the other commands, `-skip` can be used in conjunction with other commands like config changing, \nand `-end` or `-restart`. Using the same example above, you can stop having calculated charges:\n\n    QUBEKit -i acetone.pdb -skip hessian mod_sem -end charges\n\n**`-skip` is not available for `-bulk` commands and probably never will be. \nThis is to keep bulk commands reasonably simple. \nWe recommend creating a simple script to run single analysis commands if you would like to skip stages frequently.**\n\nIn case you want to add external files to be used by QUBEKit, empty folders are created in the correct place even when skipped.\nThis makes it easy to drop in, say, a .cube file from another charges engine, \nthen calculate the Lennard-Jones parameters with QUBEKit.\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Checking Progress",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "Throughout an analysis, key information will be added to the log file.\nThis information can be quickly parsed by QUBEKit's `-progress` command\n\nTo display the progress of all analyses in your current directory and below, use the command:\n\n    QUBEKit -progress\n    \nQUBEKit will find the log files in all QUBEKit directories and display a colour-coded table of the progress.  \n\n| Indicator | Meaning |\n| :---: | :---: |\n| \u2713 |  Completed successfully |\n| ~ | Neither finished nor errored |\n| S | Skipped |\n| E | Started and failed for some reason |\n\nViewing the QUBEKit log file will give more information as to *why* it failed.\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Other Commands and Information",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "You cannot run multiple kinds of analysis at once. For example:\n\n    QUBEKit -bulk example.csv -i methane.pdb -bonds g09\n    \nis not a valid command. These should be performed separately:\n\n    QUBEKit -bulk example.csv\n    QUBEKit -i methane.pdb -bonds g09\n    \nBe wary of running QUBEKit concurrently through different terminal windows.\nThe programs QUBEKit calls often just try to use however much memory is assigned in the config files;\nthis means they may try to take more than is available, leading to a crash.\n\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Some Examples",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "*A full list of the possible command line arguments is given below in the \n[Cook Book](https://github.com/qubekit/QUBEKit#cook-book) section. \nThis section covers some simple examples*\n\nRunning a full analysis on `molecule.pdb` with a non-default charge of `1`, the default charge engine `Chargemol` and with GeomeTRIC `off`:\nNote, ordering does not matter as long as tuples commands (`-c` `1`) are together.\n\n`-i` is for the input, `-c` denotes the charge and `-geo` is for (en/dis)abling geomeTRIC.\n    \n    QUBEKit -i molecule.pdb -c 1 -geo false\n    QUBEKit -c 1 -geo false -i molecule.pdb\n\nRunning a full analysis with a non-default bonds engine: Gaussian09 (g09):\n\n    QUBEKit -i molecule.pdb -bonds g09\n\nThe program will tell the user which defaults are being used, and which commands were given.\nErrors will be raised for any invalid commands and the program will not run.\nA full log of what's happening will be created in a `QUBEKit_log.txt` file.\n\nTry running QUBEKit with the command:\n\n    QUBEKit -sm C methane -end hessian\n\nThis will generate a methane pdb file (and mol file) using its smiles string: `C`,\nthen QUBEKit will analyse it until the hessian is calculated.\nSee [QUBEKit Commands: Custom Start and End Points (single molecule)](https://github.com/qubekit/QUBEKit#qubekit-commands-custom-start-and-end-points-single-molecule) below for more details on `-end`.\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Custom Start and End Points (single molecule)",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "QUBEKit also has the ability to run partial analyses, or redo certain parts of an analysis.\nFor a single molecule analysis, this is achieved with the `-end` and `-restart` commands. \n\nThe stages are:\n\n| Stage | Description |\n| :---: | --- |\n| *parametrise* | The molecule is parametrised using OpenFF, AnteChamber or an xml file. This step also loads in the molecule and extracts key information like the atoms and their coordinates. |\n| *mm_optimise* | This is a quick, preliminary optimisation which speeds up later optimisations. (This stage is skippable.) |\n| *qm_optimise* | This is the main quantum mechanical optimisation stage; default method is to use PSI4 with GeomeTRIC. |\n| *hessian* | This again uses PSI4 or Gaussian to calculate the Hessian matrix which is needed for calculating bonding parameters. |\n| *mod_sem* | Using the Hessian matrix, the bond lengths, angles and force constants are calculated with the Modified Seminario Method. |\n| *density* | The density is calculated using Gaussian09. This is where the solvent is applied as well (if configured). | \n| *charges* | The charges are partitioned and calculated using Chargemol with DDEC3 or 6. |\n| *lennard_jones* | The charges are extracted and Lennard-Jones parameters (sigma and epsilon) are calculated. |\n| *torsion_scan* | Using the molecule's geometry, a torsion scan is performed. The molecule can then be optimised with respect to these parameters. |\n| *torsion_optimise* | The fitting and optimisation step for the torsional analysis. |\n| *finalise* | This step (which is always performed, regardless of end-point) produces an xml file for the molecule. This stage also prints the final information to the log file and a truncated version to the terminal. |\n\nIn a normal run, all of these stages are executed sequentially,\nbut with `-end` and `-restart` you are free to run *from* any step *to* any step inclusively.\n\nWhen using `-end`, simply specify the end-point in the proceeding command (default `finalise`),\nwhen using `-restart`, specify the start-point in the proceeding command (default `parametrise`).\nThe end-point (if not `finalise`) can then be specified with the `-end` command.\n\nWhen using these commands, all other config-changing commands can be used in the same ways as before. For example:\n\n    QUBEKit -i methanol.pdb -end charges\n    QUBEKit -restart qm_optimise -end density\n    QUBEKit -i benzene.pdb -log BEN001 -end charges -geo false \n    QUBEKit -restart hessian -ddec 3\n    \nIf using `-end` but not `-restart`, a new directory and log file will be created within wherever the command is run from.\nJust like a normal analysis.\n\nHowever, using `-restart` requires files and other information from previous executions.\nTherefore, `-restart` can only be run from *inside* a directory with those files present.\n\n*Note: you do not need to use the `-i` (input file) command when restarting, QUBEKit will detect the pdb file for you.*\n\nTo illustrate this point, a possible use case would be to perform a full calculation on the molecule ethane,\nthen recalculate using a different (set of) default value(s):\n\n    QUBEKit -i ethane.pdb -log ETH001\n    ...\n    cd QUBEKit_ethane_2019_01_01_ETH001\n    QUBEKit -restart density -end charges -ddec 3\n    \nHere, the calculation was performed with the default DDEC version 6, then rerun with version 3 instead, skipping over the early stages which would be unchanged.\nIt is recommended to copy (**not cut**) the directory containing the files because some of them will be overwritten when restarting.\n\nNote that because `-restart` was used, it was not necessary to specify the pdb file name with `-i`.\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "QUBEKit Commands: Custom Start and End Points (multiple molecules)",
        "parent_header": [
          "QUBEKit - *Qu*antum Mechanical *Be*spoke force field tool*kit*",
          "Help"
        ],
        "type": "Text_excerpt",
        "value": "When using custom start and/or end points with bulk commands, the stages are written to the csv file, rather than the terminal.\nIf no start point is specified, a new working directory and log file will be created.\nOtherwise, QUBEKit will find the correct directory and log file based on the log string and molecule name.\nThis means the **log string cannot be changed when restarting a bulk run**. \nThere will however be a clear marker in the log file, indicating when an analysis was restarted.\n\nUsing a similar example as above, two molecules are analysed with DDEC6, then restarted for analysis with DDEC3:\n\n    first_run.csv:\n        name,charge,multiplicity,config,smiles,torsion_order,restart,end\n        ethane,,,ddec6_config,,,,charges\n        benzene,,,ddec6_config,,,,charges\n    \n    QUBEKit -bulk first_run.csv\n    \n    (optional: copy the folders produced to a different location to store results)\n    \n    \n    second_run.csv:\n        name,charge,multiplicity,config,smiles,torsion_order,restart,end\n        ethane,,,ddec3_config,,,density,charges\n        benzene,,,ddec3_config,,,density,charges\n    \n    QUBEKit -bulk second_run.csv\n\nThe first execution uses a config file for DDEC6 and runs from the beginning up to the charges stage.\nThe second execution uses a config file for DDEC3 and runs from the density stage to the charges stage.\n"
      },
      "source": "https://raw.githubusercontent.com/cole-group/QuBeKit/master/README.md",
      "technique": "header_analysis"
    }
  ]
}