{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference files",
        "parent_header": [
          "ABOUT PHYLOTYPER",
          "Adding new subtype schemes"
        ],
        "type": "Text_excerpt",
        "value": "Phylotyper reference files and their locations for available subtype\nschemes are defined in a YAML-format file. The default subtype file is\n`<package_name>/phylotyper/subtype_index.yaml`. This file can be\nspecified using the `--index` option. The `subtype_index.yaml` file is\nautomatically updated when new subtypes are created. In\n`subtype_index.yaml`, the `root` field specifies the parent data\ndirectory. If a relative path is provided, the data directory is a\nsubdirectory of `<package_name>/phylotyper/`. The default is\n`<package_name>/phylotyper/data`. Each subtype scheme will have a\nsubdirectory under this `root` data directory. The `subtypes` field in\n`subtype_index.yaml` is a list of all subtypes indexed by name. Under a\nsubtype the following files/options will be defined:\n\n1.  alignment: the reference sequence alignment\n2.  desc: Verbal description of subtype scheme defined in `new`\n    arguments\n3.  lookup: JSON object containing all reference sequences\n4.  nloci: Number of loci in scheme\n5.  rate\\_matrix: emperical transition matric for the Mk model\n6.  search\\_database: BLAST database for searching genomes\n7.  seq: sequence type (nt|aa)\n8.  subtype: tab-delimited file listing genomes (column 1) and subtypes\n    (column 2)\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/superphy/insilico-subtyping"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CONTACT",
        "type": "Text_excerpt",
        "value": "Matt Whiteside <matthew.whiteside@phac-aspc.gc.ca>\nVic Gannon <vic.gannon@canada.ca>\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CONTRIBUTING TO PHYLOTYPER",
        "type": "Text_excerpt",
        "value": "We would welcome any updates, new user subtype schemes or suggestions for new subtype schemes. We will add submitted subtype schemes to the Phylotyper repository. Please contact me at <matthew.whiteside@phac-aspc.gc.ca>.\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-01-19T17:46:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-22T14:50:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Phylotyper: Predicting subtypes from WGS using phylogenetic trees and ancestral reconstruction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9804593354124406,
      "result": {
        "original_header": "PHYLOTYPER",
        "type": "Text_excerpt",
        "value": "Phylotyper predicts biological subtypes from gene sequence data. It\nbuild a reference phylogenetic tree from genes with known subtype and\nthen uses ancestral reconstruction to assign likelihoods of each subtype\nto the branch points in the tree. A new unknown sequence can be assigned\na subtype based on the extrapolated value from its ancestors in the\ntree. \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8585951103947459,
      "result": {
        "original_header": "R settings",
        "type": "Text_excerpt",
        "value": "lib=/path/to/local/R/libs/ ; Location where downloaed R packages can be saved\nrepo=http://cran.stat.sfu.ca/ ; HTTP address of R repository to use for downloading R packages\nrscript=/usr/bin/Rscript ; Part of the R suite\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8947402063178631,
      "result": {
        "original_header": "Phylotyper settings",
        "type": "Text_excerpt",
        "value": "prediction_threshold=0.9 ; Cutoff for calling subtype assignments\n~~~~ \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9648204120789562,
      "result": {
        "original_header": "Arguments:",
        "type": "Text_excerpt",
        "value": "1.  `genome` - Sub-command for running phylotyper on genome input. Other\n    sub-commands are `new` for building new subtype schemes.\n2.  `subtype_scheme` - The name for the subtype scheme. See [Built-in\n    subtype schemes](#built-in-subtype-schemes) for a list of the\n    subtypes currently packaged with phylotyper. E.g. value `stx2`.\n3.  `output_directory` - Results and graphics will be output to this\n    directory. Files will be overwritten.\n4.  `genome_input1.fasta` - Genome multi-fasta DNA sequence input.\n    Multiple genomes should be provided as separate files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9403728383591816,
      "result": {
        "original_header": "Built-in subtype schemes",
        "type": "Text_excerpt",
        "value": "Listed below are the subtypes, their sequence type, number of loci used\nin the prediction and a description of subtype. Inputs for genomes is\nalways nucleotide multi-fasta sequences. Detected loci in genomes are\ntranslated if the subtype sequence type is amino acid. If the input are\ngene sequences, the correct sequence type and number of loci are\nrequired. \n~~~~ {include=\"available_subtypes.md\"}\n- stx1\n..+ sequence type: nt\n..+ number of loci: 2\n..+ description: Escherichia coli Shiga-toxin 1 (Stx2) subtype\n- stx2\n..+ sequence type: aa\n..+ number of loci: 2\n..+ description: Escherichia coli Shiga-toxin 2 (Stx2) subtype\n- eae\n..+ sequence type: nt\n..+ number of loci: 1\n..+ description: Escherichia coli Initimin (eae) subtype\n- wz\n..+ sequence type: nt\n..+ number of loci: 2\n..+ description: Escherichia coli O-serotype based on wzy and wzx genes\n- flic\n..+ sequence type: nt\n..+ number of loci: 1\n..+ description: Escherichia coli H-serotype based on fliC gene\n~~~~\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9269720763676847,
      "result": {
        "original_header": "Adding new subtype scheme to Phylotyper",
        "type": "Text_excerpt",
        "value": "To create a new subtype for use in phylotyper: \n1.  `new` - Sub-command for adding new subtype in phylotyper. Other\n    sub-commands are `genome` for running phylotyper on genome input.\n2.  `subtype_scheme` - The name for the subtype scheme.\n3.  `subtype_assignment_file` - Subtypes for input loci sequences. This\n    is a tab-delimited file with genomes in column 1 and subtypes in\n    column 2.\n4.  `output_directory` - Results and graphics will be output to this\n    directory. Files will be overwritten.\n5.  `reference_loci1.fasta` - Fasta DNA or amino-acid sequence input.\n    Multiple loci should be provided as separate files. Each genome in\n    the fasta files should have a subtype assignment in the\n    `subtype_assignment_file`. \nIf you would like to contribute a subtype scheme to the main repository,\nplease contact me, Matt Whiteside <matthew.whiteside@phac-aspc.gc.ca>.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8606862433780833,
      "result": {
        "original_header": "Input Formats for New Pipeline:",
        "type": "Text_excerpt",
        "value": "Input sequence files are required to be in fasta format. If the subtype\nscheme involves multiple gene/loci, there should be one file per gene\nwith all copies of the gene in the same file. The order of the gene\nfiles determines their order in the superalignment. A genome can have\nmultiple copies of a gene/loci. To indicate a genome with multiple\ncopies/alleles of the same gene, format the fasta header as follows: \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9825500588357977,
      "result": {
        "original_header": "Ancestral State Reconstruction",
        "type": "Text_excerpt",
        "value": "Phylotyper employs a Hidden State Prediction (HSP) algorithm to predict subtypes for unannotated strains. HSP itself is an extension of Ancestral State Reconstruction (ASR). These algorithms use phylogenetic models to predict features or properties. ASR estimates properties of ancestral organisms from the properties of the extant descendents in the tree. In contrast, HSP estimates the properties of a limited number of unannotated strains at the tips of the tree. Both methods use an inferred phylogenetic tree built from a reference set of sequences with known subtype. The algorithms calculate subtype states, for ancestors in ASR, or for unannotated tips and ancestors in HSP, that maximizes the likelihood given the observed subtype states in the tips and the estimated model of subtype evolution and phylogeny. In Phylotyper we use the `rerootingMethod` function from the Phytools R package. This function can estimate discrete properties such as subtypes for unknown tip nodes. Internally, `rerootingMethod` uses the ASR method of Yang et al., 2006 which estimates the marginal likelihood of all subtype states at the root of the tree. To estimate tip states for HSP, the Phytools function roots the tree at the unannotated tip and runs the Yang algorithm to calculate, in this case, the empirical baysian estimate of the tip's state. \nFor more information, see [Zaneveld, J & Thurber R, 2014](http://journal.frontiersin.org/article/10.3389/fmicb.2014.00431) for a general review of HSP and its applications, and the [Phytools manual](https://cran.r-project.org/web/packages/phytools/phytools.pdf) for details on the `rerootingMethod` used in Phylotyper.\n     \n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9484969959368025,
      "result": {
        "original_header": "Steps in the Phylotyper pipeline",
        "type": "Text_excerpt",
        "value": "1.  Identify subtype gene loci in input genomes using blastn or blastx\n    depending on subtype sequence type. For each gene loci found in the\n    input genomes:\n2.  Compare input gene against reference genes. If an identical\n    reference gene found, report subtype and terminate at this point. If\n    no identical sequences found, proceed with Phylotyper analysis.\n3.  Align input genes against a pre-aligned set of reference genes using\n    the tool MAFFT's `--add` option.\n4.  Automatically trim alignment using tool trimAI.\n5.  If multiple loci are involved, concatenate individual alignments\n    into superalignment.\n6.  Generate maximum likelihood phylogenetic tree of aligned genes with\n    FastTree.\n7.  Run phytools `rerootingMethod` using the phylogenetic tree and\n    assigned subtypes.\n8.  Identify the subtype with maximum marginal likelihood for the\n    unknown gene.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8912887513402702,
      "result": {
        "original_header": "Adding new subtype schemes",
        "type": "Text_excerpt",
        "value": "Phylotyper includes functionality to allow you to add your own subtype\nschemes. Schemes can be one or more loci (currently no limit defined,\nhowever, we have only tested with two loci). The sequences can be\nnucleotide or amino acid. The new subtype pipeline automatically\ngenerates and stores all required input files, so that future subtype\nprediction runs only have to reference a subtype name.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9199029884360396,
      "result": {
        "original_header": "Multiple loci",
        "type": "Text_excerpt",
        "value": "Multiple loci can be used in a Phylotyper subtype scheme. For example,\nschemes `stx1`, `stx2`, `wz` all use two genes. The individual loci will\nbe BLAST'd and aligned independently. The individual loci alignments are\nconcatenated to form a superalignment. The superalignment is used as\ninput into the phylogenetic tree building step.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9906184799726755,
      "result": {
        "original_header": "Parameterization of the transition matrix",
        "type": "Text_excerpt",
        "value": "Phylotyper offers flexibility in the parameterization of evolution model\nused in the ASR step. A component of the underlying ASR framework, is an\nMk or markov model of subtype evolution, for which an emperical\ntransition rate matrix is estimated from the data. The transition matrix\nis used to calculate the expected number of subtype state changes given\na distance in the phylogenetic tree. Different model parameterizations\ncan be defined for the transition rate matrix. The simplest\nparameterization available in Phylotyper is the equal rates model; all\nsubtypes have the same forward and reverse rate. The most complex\nparameterization available in Phylotyper is the symmetric model, wherein\neach forward and reverse rate for a given pair of subtypes are assigned\na separate parameter. Frequently, the number of subtypes makes the\nsymmetric model too computationally prohibitive (it is unavailable for\nschemes with \\>10 subtypes). To offer more flexible models in these\nsituations with reduced numbers of free parameters, two custom\nparameterization approaches were developed. The custom approaches both\nuse a binning strategy that attempts to identify sets of subtypes that\nwould have similar rates and assign them a single parameter as a set. \n1.  Small-distance binning: The rationale is to select the closest\n    subtypes in the phylogenetic tree as free parameters. Subtypes with\n    large distances are assigned a common parameter. Maximum\n    inter-patristic distances are collected for all subtypes and\n    modelled as a normal mixture distribution. The smallest normal\n    distribution is selected (based on mean) and all pairs of subtypes\n    belonging to this distribution are set as a free parameters. Other\n    subtypes are assigned a common parameter. \n2.  Iterateive binning: The rationale is to approximate the transition\n    rates individually for each subtype pair, cluster subtypes by the\n    approximate rates and then assign each cluster a separate parameter.\n    Each subtype pair (forward and reverse directions) are set as a free\n    parameter while fixing all other parameters. The Mk model estimation\n    is run and transition rate is recorded. The collected transition\n    rates are clustered using `Mclust`. Each cluster is assigned a\n    separate parameter. \nEach of these model parameterizations; equal, symmetric and the two\ncustom models are tested and evaluated in new subtype pipeline. The\nparameterization that has highest accuracy (based on a leave-one-out\ncross-validation analysis) is selected. In the case of ties, the model\nwith the fewest parameters is given precidence (the symmetric model is\nnot tested when the number of subtypes is over 10)\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9906559824300231,
      "result": {
        "original_header": "Check 1. Clades with relatively small inter-patristic distance have the same subtype",
        "type": "Text_excerpt",
        "value": "The purpose of the first check is to identify isolated cases of distinct subtypes that are clustered together in the phylogenetic tree. In large-scale cases, descendent clades in the phylogenetic tree with multiple distinct subtypes may indicate a subtype that is not correlated with the phylogeny. In limited cases, it might indicate annotation errors. Phylotyper computes an inter-patritristic distances for all leaves in the subtype phylogenetic tree for the given subtype scheme. It then computes a threshold is equivalent to 0.4 probability that inter-patristic distances equal to or greater then threshold belong to the same-subtype distribution. To estimate the distributions, all inter-patristic distances for nodes with the same subtype and all distances for nodes with different subtypes are fit with R's Mclust package. Subtrees with a max inter-patristic distance less than this threshold that have distinct subtypes are flagged. You will be\nnotified if this situation is detected. An updated subtype input file\ncalled `phylotyper_proposed_subtypes.csv` will be generated with\nproposed corrections and written to the output directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9828570207139409,
      "result": {
        "original_header": "Check 2. The predictive performance is above a minimum threshold",
        "type": "Text_excerpt",
        "value": "All new subtype schemes are subject to a leave-one-out cross-validation analysis that assesses the performance of the given phylogeny to predict the subtype. In the leave-out-out cross-validation simulation, the subtype label of each gene in the training set is removed, one at a time, and the remaining genes in training set are used to predict the subtype of the test gene. Positive and negative results are required and the F1-score, which is a weighted average of the precision and recall, is calculated. Precision is defined as:  \nand recall as: \nThe F-score; a binary classifer metric, was recorded individually for each subtype and then averaged to create a single performance metric for this multi-class predictor. You will be notified if the F1-score (a equally weighted\naverage of precision and recall) is below 0.9.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/superphy/insilico-subtyping/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/superphy/insilico-subtyping/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "superphy/insilico-subtyping"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PHYLOTYPER"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/compile_readme.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/phylotyper/data/wz_Dec-07-17-11.30.36/accessions/loci_batcher.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/phylotyper/data/wz/accessions/loci_batcher.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/phylotyper/data/wz_Dec-07-17-11.38.41/accessions/loci_batcher.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/conda/conda_bundle.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/conda/conda_build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/conda/phylotyper/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/utils/batch_run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "INSTALLATION",
        "type": "Text_excerpt",
        "value": "Phylotyper is a python package that uses several external programs.\nPhylotyper requires the following external programs:\n\n1.  FastTree (tested with version 2.1) -\n    http://www.microbesonline.org/fasttree/\n2.  MAFFT (tested with version 7.1) -\n    http://mafft.cbrc.jp/alignment/software/\n3.  trimAI (tested with version 1.2) - http://trimal.cgenomics.org/\n4.  BLAST+ (tested with version 2.2.28) -\n    ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/\n5.  R (tested with version 3.3.2) - https://cran.r-project.org/\n\nPhylotyper was built and tested with python 2.7. \n\nThere are two ways to install Phylotyper 1) with pip, external programs are installed by user or 2) with conda and all external programs are automatically installed via conda\n\n1. To install Phylotyper using pip in a python virtual environment:\n\n-   `virtualenv -p python2.7 phylotypervm`. Install virtual environment.\n-   `source phylotypervm/bin/activate`. Activate the virtual enviroment.\n-   `pip install -e git+https://github.com/superphy/insilico-subtyping.git#egg=Phylotyper`. Install Phylotyper.\n-   If external programs are not available in the Linux search path, they need to be defined using a config file.  See section\n    [Setting up Phylotyper config file](#setting-up-phylotyper-config-file)\n\n2. To install Phylotyper and external programs in a conda environment:\n\n-    `conda create --name phylotyper`. Create environment.\n-    `source activate phylotyper`. Activate environment.\n-    `conda install -c mdwhitesi phylotyper`. Install Phylotyper and dependencies in environment.\n\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up Phylotyper config file",
        "parent_header": [
          "RUNNING PHYLOTYPER"
        ],
        "type": "Text_excerpt",
        "value": "Phylotyper has user-defined settings and also requires several external\nprograms. If external programs are not available in the Linux search path, the location of the\nexecutable can be provided to Phylotyper through a INI-config file.\nAlso if you wish to override the default for probability cutoff of 0.9 for assigning subtypes, you can do this in the config file.\nThe config file can contain the following settings:\n\n~~~~ {include=\"phylotyper_example.ini\"}\n; Sample Phylotyper config file\n;\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.998083881578065,
      "result": {
        "original_header": "PHYLOTYPER",
        "type": "Text_excerpt",
        "value": "https://github.com/superphy/insilico-subtyping\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8286902777516311,
      "result": {
        "original_header": "External programs",
        "type": "Text_excerpt",
        "value": "fasttree=/path/to/FastTree\nmafft=/path/to/mafft\ntrimal=/path/to/trimal\nmakeblastdb=/path/to/makeblastdb ; part of the BLAST+ suite\nblastn=/path/to/blastn ; part of the BLAST+ suite\nblastx=/path/to/blastx ; part of the BLAST+ suite\nblastdbcmd=/path/to/blastdbcmd ; part of the BLAST+ suite\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999996170572154,
      "result": {
        "original_header": "R settings",
        "type": "Text_excerpt",
        "value": "lib=/path/to/local/R/libs/ ; Location where downloaed R packages can be saved\nrepo=http://cran.stat.sfu.ca/ ; HTTP address of R repository to use for downloading R packages\nrscript=/usr/bin/Rscript ; Part of the R suite\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999600327544322,
      "result": {
        "original_header": "Phylotyper settings",
        "type": "Text_excerpt",
        "value": "Set up environment variable\n`export PHYLOTYPER_CONFIG=/path/to/your/phylotyper/config/file` to\nindicate location of config file to Phylotyper. To make this variable\npersistent, the line\n`export PHYLOTYPER_CONFIG=/path/to/your/phylotyper/config/file` can be\nadded to your \\~/.bashrc. \nAlternatively, the location of the config file can be set using the\nargument `--config` when running `phylotyper`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999975896678338,
      "result": {
        "original_header": "Options:",
        "type": "Text_excerpt",
        "value": "1.  `--noplots` - Turn off figures.\n2.  `--config /path/to/file` - Phylotyper config file. Can also be set\n    in environment variable `PHYLOTYPER_CONFIG`. See [Setting up\n    Phylotyper config file](#setting-up-phylotyper-config-file).\n3.  `--index /path/to/file` - YAML-format file that lists the locations\n    of subtype reference files. You can specify a file that is not the\n    default file packaged with phylotyper.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9675303915447198,
      "result": {
        "original_header": "Running Phylotyper using built-in subtype scheme",
        "type": "Text_excerpt",
        "value": "See section [Setting up Phylotyper config\nfile](#setting-up-phylotyper-config-file). \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9784723400792641,
      "result": {
        "original_header": "Adding new subtype scheme to Phylotyper",
        "type": "Text_excerpt",
        "value": "`phylotyper new subtype_scheme subtype_assignment_file output_directory reference_loci1.fasta [reference_loci2.fasta reference_loci3.fasta...][--aa][--config /path/to/config/file][--index /path/to/index/file][--description \"Help description\"]` \n1.  `--aa` - Set flag when input is amino-acid sequences. Default is\n    nucleotide.\n2.  `--config /path/to/file` - Phylotyper config file. Can also be set\n    in environment variable `PHYLOTYPER_CONFIG`. See [Setting up\n    Phylotyper config file](#setting-up-phylotyper-config-file).\n3.  `--index /path/to/file` - YAML-format file that lists the locations\n    of subtype reference files. You can specify a file that is not the\n    default file packaged with phylotyper.\n4.  `--description` - A help description for the subtype scheme. \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8365821581915989,
      "result": {
        "original_header": "Adding new subtype schemes",
        "type": "Text_excerpt",
        "value": "Phylotyper includes functionality to allow you to add your own subtype\nschemes. Schemes can be one or more loci (currently no limit defined,\nhowever, we have only tested with two loci). The sequences can be\nnucleotide or amino acid. The new subtype pipeline automatically\ngenerates and stores all required input files, so that future subtype\nprediction runs only have to reference a subtype name.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/superphy/insilico-subtyping/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "insilico-subtyping"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "superphy"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 249968,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 172009,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 4978,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 237,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Phylotyper using built-in subtype scheme",
        "parent_header": [
          "Phylotyper settings"
        ],
        "type": "Text_excerpt",
        "value": "See section [Setting up Phylotyper config\nfile](#setting-up-phylotyper-config-file).\n\nPhylotyper can first identify putative subtype loci in input genomes and\nthen use the detected loci to predict subtypes. To run phylotyper with\ngenome DNA sequences as input:\n\n`phylotyper genome subtype_scheme output_directory genome_input1.fasta [genome_input2.fasta genome_input3.fasta...][--noplots][--config /path/to/config/file][--index /path/to/index/file]`\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Outputs:",
        "parent_header": [
          "Phylotyper settings",
          "Running Phylotyper using built-in subtype scheme"
        ],
        "type": "Text_excerpt",
        "value": "The output directory is defined in the command-line arguments. The\nresults of the phylotyper run is given in the file:\n\n`<output_directory>/subtype_predictions.tsv`\n\nThis tab-delimited result file contains the following columns:\n\n1.  `genome`: Genome name\n2.  `tree_label`: Unique label for a given gene copy in a genome\n3.  `subtype probability`: The marginal likelihood from the Phylotyper\n    analysis (or `identical` if an identical match was found in the\n    reference set)\n4.  `phylotyper_assignment`: The subtype assignment provided that the\n    probability is above the pre-defined cutoff\n5.  `loci`: A list of subtype genes found in the genome. Each list item\n    contains a two-part tuple: 1. lcl|genome|unique\\_name followed by 2.\n    lcl|genome|contig:start-stop.\n\nAdditional analysis files that are output include:\n\n1.  `<genome>_loci<nloci>_step2_alignment_input.fasta` Fasta-file\n    containing subtype gene found in input genome by BLAST step. There\n    can be multiple copies/alleles for a single gene loci (If there is\n    only one genome and one loci, the file will be called\n    '<input_filename>.locus1\\`)\n2.  `<genome>_step3_alignment_trimming_summary.html` HTML output from\n    trimAI indicating trimmed columns in the alignment\n3.  `<genome>_step4_profile_alignment_output.fasta` Fasta-file\n    containing aligned input genes and reference genes. MAFFT is used\n    for the alignment.\n4.  `<genome>_step5_subtype_tree.newick` Newick-file containg\n    phylogenetic tree. FastTree is used to build the tree.\n5.  `<genome>_step5_posterior_probability_tree.png` Image file showing\n    the phylogenetic tree and marginal likelihoods for the unknown gene.\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:21:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "EXAMPLES",
        "type": "Text_excerpt",
        "value": "The following instructions provide a quick demonstration of Phylotypers functions. After [installing](#installation) phylotyper and its dependencies, switch into the Phylotyper source directory (if following the Installation Instructions for pip in this document, this location would be `phylotypervm/src/phylotyper/`).\n\n1. Inform phylotyper of the locations for non-default dependencies by setting up a [INI config file](https://raw.githubusercontent.com/superphy/insilico-subtyping/master/phylotyper_example.ini)\n\nDetails [here](#setting-up-phylotyper-config-file).\n\n2. Predict a subtype for one of the amino acid schemes packaged in phylotyper:\n\n    `phylotyper genome stx2 example_data/output/ example_data/genome.fasta --config yourconfigfile.ini`\n\nSee `example_data/output/` for the results. Find the full list of available schemes and their sequence types [here](#built-in-subtype-schemes). Details on the results can be found [here](#running-phylotyper-using-built-in-subtype-scheme). Note: the config file can also be specified using the enviromentment variable `PHYLOTYPER_CONFIG` instead of the `--config` option.\n\n3. Add your own DNA subtype scheme called `myexample`:\n\n    `phylotyper new myexample example_data/example_subtypes.tsv example_data/output3/ \\`\n    `example_data/dna_example_genes.fasta --config yourconfigfile.ini`\n\nNote: that this scheme has a low prediction F1-score. Compare this score to the 2-loci amino acid value in step 5. Using amino acid vs. DNA sequences or multiple vs single loci can alter the performance when the associated phylogenetic tree does better or worse at separating subtypes.\n\n4. Use this new DNA subtype scheme to predict subtypes:\n\n    `PHYLOTYPER_CONFIG=yourconfigfile.ini phylotyper genome myexample example_data/output4/ example_data/genome.fasta`\n\nSee `example_data/output4/` for the results. Details on the results can be found [here](#running-phylotyper-using-built-in-subtype-scheme).\n\n5. Add your own multi-loci amino acid subtype scheme called `myexample2`:\n\n    `phylotyper new myexample2 example_data/example_subtypes.tsv example_data/output5/ \\`\n    `example_data/aa_example_genes_loci1.fasta example_data/aa_example_genes_loci2.fasta --aa \\`\n    `--config yourconfigfile.ini`\n\n6. Use this new amino-acid subtype scheme to predict subtypes:\n\n    `phylotyper genome myexample2 example_data/output6/ example_data/genome.fasta --config yourconfigfile.ini`\n\nSee `example_data/output6/` for the results.\n"
      },
      "source": "https://raw.githubusercontent.com/superphy/insilico-subtyping/master/README.md",
      "technique": "header_analysis"
    }
  ]
}