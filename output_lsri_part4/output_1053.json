{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AltschulerWu-Lab/scScope"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-05-06T01:25:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-11T07:01:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9955530011520101,
      "result": {
        "original_header": "scScope",
        "type": "Text_excerpt",
        "value": "scScope is a deep-learning based approach that can accurately and rapidly identify cell-type composition and transcriptional state from noisy single-cell gene-expression profiles containing dropout events and scale to millions of cells. This work was published on *Nature Methods*, [full-text access](https://protect2.fireeye.com/url?k=d37bc159-8f3bf467-d37be644-0cc47ad9c120-011385b0eacba99e&u=https://rdcu.be/brEON) \n\nThis readme file is an introduction to the scScope software package, implemented with Python and Tensorflow. \n \n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9754588744537931,
      "result": {
        "original_header": "Demonstration",
        "type": "Text_excerpt",
        "value": "We provide a file (see `demo.py`) for the demonstration of applying scScope to a simulated data set with ground truth classes for feature learning and clustering. The demonstration was tested on a computer with Ubuntu 14.4, 4 Nvidia GeForce GTX Titan GPUs and CUDA Version 8.0.61. You can directly run the demonstration by  \nTo run your own data with default parameters, you can simply replace the `gene_expression` with your expression data (matrix in n*m shape where n is the number of cells and m is the number of genes) and delete the evaluation part (`adjusted_rand_score`)\n \n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8917167807685661,
      "result": {
        "original_header": "Other single-cell RNA-seq packages",
        "type": "Text_excerpt",
        "value": "There many software packages available for performing single cell sequence analysis. We encourage readers to investigate these other resources: \n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AltschulerWu-Lab/scScope/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AltschulerWu-Lab/scScope/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AltschulerWu-Lab/scScope"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scScope"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1. Install TensorFlow-GPU or TensorFlow",
        "parent_header": [
          "scScope",
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "  General instructions can be found at https://www.tensorflow.org/install/\n  If you want to run scScope with GPUs: \n  1) Install GPU driver;\n  2) Install CUDA toolkit;\n  3) Install cuDNN sdk;\n  4) Install the tensorflow-gpu package:\n  ```terminal\n  pip install tensorflow-gpu\n  ```\n   If you want to run scScope on a traditional CPU: \n    1) Install the tensorflow package:\n  ```terminal\n  pip install tensorflow\n  ```"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2. Install scScope",
        "parent_header": [
          "scScope",
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "```terminal\npip install scScope\n```\nor download the package and \n```terminal\npython setup.py install\n```\nUsually, it takes only several seconds to finish installation. If you want to run scScope on CPU, use \"pip install scScope-cpu\" to install scScope CPU version.\n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9739725199377578,
      "result": {
        "original_header": "Demonstration",
        "type": "Text_excerpt",
        "value": "We provide a file (see `demo.py`) for the demonstration of applying scScope to a simulated data set with ground truth classes for feature learning and clustering. The demonstration was tested on a computer with Ubuntu 14.4, 4 Nvidia GeForce GTX Titan GPUs and CUDA Version 8.0.61. You can directly run the demonstration by  \n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Other single-cell RNA-seq packages",
        "type": "Text_excerpt",
        "value": "- MAGIC: https://github.com/KrishnaswamyLab/MAGIC\n- ZINB-WaVE: https://github.com/drisso/zinbwave\n- SIMLR: https://github.com/bowang87/SIMLR_PY\n- DCA: https://github.com/theislab/dca\n- scVI: https://github.com/YosefLab/scVI\n- PhenoGraph: https://github.com/jacoblevine/PhenoGraph\n- Seurat: https://satijalab.org/seurat/\n- Splatter: https://github.com/Oshlack/splatter-paper\n \n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.921097835928777,
      "result": {
        "original_header": "Demonstration",
        "type": "Text_excerpt",
        "value": "> `python demo.py` \n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AltschulerWu-Lab/scScope/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2018 Altschuler & Wu Lab\n\n\t\t\t\t\t\t\t\t\tApache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/scscope/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scScope"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "AltschulerWu-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 125251,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Packages Requirements",
        "parent_header": [
          "scScope"
        ],
        "type": "Text_excerpt",
        "value": "- Python >= 3.6\n- TensorFlow-GPU >= 1.4.1\n- Numpy >= 1.13.0\n- Scikit-learn >= 0.18.1\n- PhenoGraph >= 1.5.1\n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: running `scscope_large`",
        "parent_header": [
          "scScope",
          "Usage",
          "Large-scale dataset beyond memory size:"
        ],
        "type": "Text_excerpt",
        "value": "Batch file directory, file number, cell number and gene number should be provided in this mode for pre-allocation of GPU memory.\n\n```python\nfrom scscope.large_dataset import large_scale_processing as DeepImpute\n\ntrain_data_path = './small_batches'\ngene_num = 500\ncell_num = 1000\nfile_num = 4\nlatent_dim = 50\n\nDI_model = DeepImpute.train_large(train_data_path, \n                                  file_num, \n                                  cell_num, \n                                  gene_num,\n                                  latent_dim)\n\nDeepImpute.prerdict_large(train_data_path,\n                          file_num,\n                          DI_model)\n```\nAfter training and predicting, latent features and imputed sequences are stored under the same directory. For the data file `batch_i.npy`, the corresponding latent features and imputed gene expressions are stored in files `feature_i.npy` and `imputation_i.npy`, respectively, in the same directory.\n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:48:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 48
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Import the scScope package:",
        "parent_header": [
          "scScope",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "In scScope directory, import scScope by \n\n```python\nimport scscope as DeepImpute\n```\n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Train the scScope deep learning model:",
        "parent_header": [
          "scScope",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```python\nDI_model = DeepImpute.train(\n          train_data_set,\n          latent_code_dim,\n          use_mask=True,\n          batch_size=64,\n          max_epoch=100,\n          epoch_per_check=100,\n          T=2,\n          exp_batch_idx_input=[],\n          encoder_layers=[],\n          decoder_layers=[],\n          learning_rate=0.0001,\n          beta1=0.05,\n          num_gpus=1)\n```\nwhere\n```\n    Parameters:\n\n      train_data_set:       gene expression matrix in shape of n * m where n is the number of cells and m is the number of genes.\n      latent_code_dim:      the feature dimension outputted by scScope.\n      batch_size:           number of cells used in each training iteration.\n      max_epoch:            maximal epoch used in training.\n      epoch_per_check:      step to display current loss.\n      T:                    depth of recurrence used in deep learning framework.\n      use_mask:             flag indicating whether to use only non-zero entries in calculating losses.\n      learning_rate:        step length in gradient descending algorithm.\n      beta1:                the beta1 parameter in AdamOptimizer.\n      num_gpus:             number of gpus used for training in parallel.\n      exp_batch_idx_input:  (optional) n * batch_num matrix in one-hot format, if provided, experimental batch ids are used for batch correction.\n      encoder_layers:       the network structure for encoder layers of the autoencoder. for instance [64,128] means adding two layers with 64 and 128 nodes between the input and hidden features\n      decoder_layers:       the network structure for decoder layers of the autoencoder. for instance [64,128] means adding two layers with 64 and 128 nodes between the hidden feature and the output layer\n\n\n\n    Output:\n\n      model: a dataframe of scScope outputs with keys:\n            'latent_code_session':      tensorflow session used in training.\n            'test_input':               tensorflow dataholder for test data.\n            'test_exp_batch_idx':       tensorflow dataholder for experimental batch label.\n            'imputated_output':         imputed gene expressions.\n            'latent_code':              latent features by scScope.\n            'removed_batch_effect':     correcting layer learning by scScope.\n\n```\nIf run on CPU, remove the \"num_gpus\" parameter."
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Make predictions:",
        "parent_header": [
          "scScope",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```python\nlatent_code, imputed_val = DeepImpute.prerdict(test_data, model, batch_effect=[])\n```\nwhere\n```\n    Parameter:\n        test_data:      input gene expression matrix\n        model:          pre-trained scScope model.\n\n    Output:\n        latent_fea:             scScope features output\n        output_val:             gene expressions with imputations.\n        predicted_batch_effect: batch effects inferenced by scScope, if experimental batches exist.\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clustering analysis:",
        "parent_header": [
          "scScope",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "1. On datasets with moderate scale.\nFor dataset with less than 100,000 cells, we recommend to use PhenoGraph (https://github.com/jacoblevine/PhenoGraph) for clustering with automatically determined cluster number.\n```python\nimport phenograph\nlabel, _,  _ = phenograph.cluster(latent_code)\n```\nwhere `latent_code` is the input feature.\n\n2. On datasets with large scale.\nWhen datasets invlove more than 100,000 cells, we designed a scalable clustering method to fast and accurate capture the subpopulation structure. \n```python\nlabel = scalable_clustering.scalable_cluster(latent_code,\n                     \t\t\t\t\t\tkmeans_num=500,\n                     \t\t\t\t\t\tcluster_num=400,\n                     \t\t\t\t\t\tdisplay_step=50,\n                     \t\t\t\t\t\tphenograh_neighbor=30\n                     \t\t\t\t\t\t)\n```\nwhere\n```\nParameters:\n\n    latent_code:    n*m matrix of gene expression levels or representations of gene expression. n is cell size and m is gene or representation size.\n    kmeans_num:     the number of independent K-means clusterings used. This is also the subset number.\n    cluster_num:    cluster number for each K-means clustering. This is also the \"n_clusters\" in KMeans function in sklearn package.\n    display_step:   displaying the process of K-means clustering.\n    phenograh_neighbor: \"k\" parameter in PhenoGraph package.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Large-scale dataset beyond memory size:",
        "parent_header": [
          "scScope",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "In some cases dataset can be extremely large or the memory size in the computer/server is limited, it is impossible to load all cells at one time. scScope offers an option that allows flexible memory allocation. In this mode, large dataset is split into several small batches. In each training epoch, small batch files are sequentially loaded into memory for parameter updating.\n\nTo enable this mode, three steps are needed:\n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: split large data file into several small `*.npy` files",
        "parent_header": [
          "scScope",
          "Usage",
          "Large-scale dataset beyond memory size:"
        ],
        "type": "Text_excerpt",
        "value": "In this step, users need to build a new directory for small files at first. e.g.\n```terminal\nmkdir ./small_batches\n```\n\nIn `./small_batches`, users can store the large expression file into several small files. Usually, it is not easy to split a large file due to memory limitations. However, the python package `pandas` offers a `chunk read` mode that enables sequential file reads. Here we provid sample code for how to split large files: \n```python\nimport pandas as pd\nimport numpy as np\n\ncell_per_batch = 1000 # batch size\n\nreader = pd.read_csv('gene_expression.csv', sep=',', header=0, index_col=0, chunksize=cell_per_batch)\nfile_count = 0\n    for chunk in reader:\n      np.save('./small_batches/batch_' + str(file_count) + '.npy', chunk.values)\n      file_count += 1\n```\nHere, we assume there is a large file `gene_expression.csv`. We set the batch size (`cell_per_batch`) as 1000 and only load 1000 cells at a time from the large file. Batch data are saved in `batch_*.npy` file in directory `./small_batches`.\n\nWe note that users need to select proper parameters in `pd.read_csv`, see http://pandas.pydata.org/pandas-docs/stable/io.html.\n\nAfter splitting files, the gene expression matrix should be in `cell X gene` format. Small files should be named as `batch_0.npy`, `batch_1.npy`, `batch_2.npy`, ... exactly. In each file, cell numbers and gene numbers should be consistent.\n\n"
      },
      "source": "https://raw.githubusercontent.com/AltschulerWu-Lab/scScope/master/README.md",
      "technique": "header_analysis"
    }
  ]
}