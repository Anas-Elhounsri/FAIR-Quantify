{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference file",
        "parent_header": [
          "Genome U-Plot sample implementation",
          "Data Visualization"
        ],
        "type": "Text_excerpt",
        "value": "-   A Human Genome Assembly GRCh38 cytobands reference file is provided by the visualization (`public/reference/cytobands/hg38/cytoBand.json`), however if you want to use your own you may download and uncompress a definition file from <ftp://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz>. \nThen you must convert the file to a json format of the following form:\n```\n[\n    {\n        chrom: \"chr1\",\n        chromStart: 0,\n        chromEnd: 2300000,\n        gieStain: \"gneg\",\n        name: \"p36.33\"\n    }, {\n        chrom: \"chr1\",\n        chromStart: 2300000,\n        chromEnd: 5300000,\n        gieStain: \"gpos25\",\n        name: \"p36.32\"\n    },\n    ...\n]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite <a name=\"cite\"></a>",
        "parent_header": [
          "Genome U-Plot sample implementation"
        ],
        "type": "Text_excerpt",
        "value": "Gaitatzes AG, Johnson SH, Smadbeck JB and Vasmatzis G.; **Genome U-Plot: a whole genome visualization.** Bioinformatics 2017 Dec 21. https://doi.org/10.1093/bioinformatics/btx829\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gaitat/GenomeUPlot"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-07-28T20:37:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-24T15:05:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The Genome U-Plot is a JavaScript tool to visualize chromosomal abnormalities in the Human Genome using a U-shape layout."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8347453114493735,
      "result": {
        "original_header": "Genome U-Plot sample implementation",
        "type": "Text_excerpt",
        "value": "The Genome U-Plot is a JavaScript tool to visualize Chromosomal abnormalities in the Human Genome using a U-shape layout.  \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9652035452008073,
      "result": {
        "original_header": "Node",
        "type": "Text_excerpt",
        "value": "> **[Node.js](https://nodejs.org/)** is an open-source, cross-platform JavaScript runtime environment for developing a diverse variety of server tools and applications. \nWe use Node for basically everything in this project, so we are going to need it. Please visit the [download page](https://nodejs.org/en/download/current/) for **macOS** or **Windows** binaries, or the [package manager installations page](https://nodejs.org/en/download/package-manager/) for Linux distributions. \nIn this project we used Node.js v6.10.0 LTS.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9151774539598131,
      "result": {
        "original_header": "Node Version Management Tools",
        "type": "Text_excerpt",
        "value": "If you need the flexibility to use multiple versions of Node, check out [NVM](https://github.com/creationix/nvm) or [Windows NVM](https://github.com/coreybutler/nvm-windows).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9820240186558356,
      "result": {
        "original_header": "NPM",
        "type": "Text_excerpt",
        "value": "NPM is the default package manager for Node. It is automatically installed alongside with Node. Package managers are used to install and manage packages (modules of code that you or someone else wrote). We are going to use a lot of packages but we'll use **Yarn**, another package manager.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9575544608735765,
      "result": {
        "original_header": "Yarn",
        "type": "Text_excerpt",
        "value": "> **[Yarn](https://yarnpkg.com/)** is a Node.js package manager which is much faster than NPM, has offline support, and fetches dependencies [more predictably](https://yarnpkg.com/en/docs/yarn-lock).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.891629343429196,
      "result": {
        "original_header": "Data Visualization",
        "type": "Text_excerpt",
        "value": "A sample (LNCAP) with all required files is provided in the `public/data` directory\n```\nLNCAP/LNCAP_alts_comprehensive.csv  (Sample Rearrangements)\nLNCAP/LNCAP_cnvIntervals.csv        (Sample Copy Number Variation - Intervals)\nLNCAP/LNCAP_genomePlot_cnv30.json   (Sample Copy Number Variation - Raw Frequency)\nLNCAP/LNCAP_visualization.json      (Sample Definition)\n``` \nIn order to run the application against a different sample (eg. MY_SAMPLE) you need to create an appropriate directory and file structure replacing for example LNCAP with MY_SAMPLE. Finally don't forget to replace your sample name in the URL parameter of the app.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9932922697151899,
      "result": {
        "original_header": "Sample Rearrangements",
        "type": "Text_excerpt",
        "value": "In order to visualize chromosomal rearrangements, a csv file is required (as in `LNCAP/LNCAP_alts_comprehensive.csv`) and the following columns of integers must be supplied:\n```\nNassoc,chrA,chrB,posA,posB\n```\nwhere *Nassoc* is the number (integer) of supporting fragments of the events.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9727346205076266,
      "result": {
        "original_header": "Sample Copy Number Variation",
        "type": "Text_excerpt",
        "value": "In order to visualize copy number, two files of a specific format must be supplied. First, a file (as in `LNCAP/LNCAP_genomePlot_cnv30.json`) with the raw frequency data from a 30000 bin moving window. \nThe second file contains the copy number state information; a csv file (as in `LNCAP/LNCAP_cnvIntervals.csv`) with the following columns must be supplied:\n```\nchr,start,end,cnvState,nrd\n```\nwhere *cnvState* is one of 1 (loss), 2 (normal) or 3 (gain) and *nrd* is a floating point value corresponding to the Normalized Read Depth score that provides a quantitative measure of how far the CNV deviates from the calculated normal level (*nrd* = 2.0).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gaitat/GenomeUPlot/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gaitat/GenomeUPlot/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gaitat/GenomeUPlot"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Genome U-Plot sample implementation"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/public/data/LNCAP.png"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To install yarn",
        "parent_header": [
          "Genome U-Plot sample implementation",
          "Yarn"
        ],
        "type": "Text_excerpt",
        "value": "Use **NPM** and run:\n```\n> $ npm install --global yarn\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To install the project dependencies",
        "parent_header": [
          "Genome U-Plot sample implementation",
          "Yarn"
        ],
        "type": "Text_excerpt",
        "value": "Start a command shell, change directory to the directory of the project and install the project dependencies using:\n```\n> $ yarn install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9864057350208426,
      "result": {
        "original_header": "Node",
        "type": "Text_excerpt",
        "value": "We use Node for basically everything in this project, so we are going to need it. Please visit the [download page](https://nodejs.org/en/download/current/) for **macOS** or **Windows** binaries, or the [package manager installations page](https://nodejs.org/en/download/package-manager/) for Linux distributions. \nIn this project we used Node.js v6.10.0 LTS.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9188484832261584,
      "result": {
        "original_header": "Node Version Management Tools",
        "type": "Text_excerpt",
        "value": "If you need the flexibility to use multiple versions of Node, check out [NVM](https://github.com/creationix/nvm) or [Windows NVM](https://github.com/coreybutler/nvm-windows).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999770921,
      "result": {
        "original_header": "NPM",
        "type": "Text_excerpt",
        "value": "NPM is the default package manager for Node. It is automatically installed alongside with Node. Package managers are used to install and manage packages (modules of code that you or someone else wrote). We are going to use a lot of packages but we'll use **Yarn**, another package manager.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9994467034800503,
      "result": {
        "original_header": "Yarn",
        "type": "Text_excerpt",
        "value": "> **[Yarn](https://yarnpkg.com/)** is a Node.js package manager which is much faster than NPM, has offline support, and fetches dependencies [more predictably](https://yarnpkg.com/en/docs/yarn-lock).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8183309713501775,
      "result": {
        "original_header": "Data Visualization",
        "type": "Text_excerpt",
        "value": "A sample (LNCAP) with all required files is provided in the `public/data` directory\n```\nLNCAP/LNCAP_alts_comprehensive.csv  (Sample Rearrangements)\nLNCAP/LNCAP_cnvIntervals.csv        (Sample Copy Number Variation - Intervals)\nLNCAP/LNCAP_genomePlot_cnv30.json   (Sample Copy Number Variation - Raw Frequency)\nLNCAP/LNCAP_visualization.json      (Sample Definition)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9620138994625564,
      "result": {
        "original_header": "Sample Definition",
        "type": "Text_excerpt",
        "value": "A sample specific json file must be provided (as in `LNCAP\\LNCAP_visualization.json`):\n```\n{\n    fileFormatVersion: 1,    \n    altsComprehensive: \"sampleId_alts_comprehensive.csv\",\n    cnvBinned30KJson: \"sampleId_genomePlot_cnv30.json\",\n    cnvIntervals: \"sampleId_cnvIntervals.csv\"\n}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8777718926376005,
      "result": {
        "original_header": "Data Visualization",
        "type": "Text_excerpt",
        "value": "A sample (LNCAP) with all required files is provided in the `public/data` directory\n```\nLNCAP/LNCAP_alts_comprehensive.csv  (Sample Rearrangements)\nLNCAP/LNCAP_cnvIntervals.csv        (Sample Copy Number Variation - Intervals)\nLNCAP/LNCAP_genomePlot_cnv30.json   (Sample Copy Number Variation - Raw Frequency)\nLNCAP/LNCAP_visualization.json      (Sample Definition)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9205533318884929,
      "result": {
        "original_header": "Sample Definition",
        "type": "Text_excerpt",
        "value": "A sample specific json file must be provided (as in `LNCAP\\LNCAP_visualization.json`):\n```\n{\n    fileFormatVersion: 1,    \n    altsComprehensive: \"sampleId_alts_comprehensive.csv\",\n    cnvBinned30KJson: \"sampleId_genomePlot_cnv30.json\",\n    cnvIntervals: \"sampleId_cnvIntervals.csv\"\n}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gaitat/GenomeUPlot/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GenomeUPlot"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "gaitat"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 148874,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 13687,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 3717,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To install the project dependencies",
        "parent_header": [
          "Genome U-Plot sample implementation",
          "Yarn"
        ],
        "type": "Text_excerpt",
        "value": "Start a command shell, change directory to the directory of the project and install the project dependencies using:\n```\n> $ yarn install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To run the project",
        "parent_header": [
          "Genome U-Plot sample implementation",
          "Yarn"
        ],
        "type": "Text_excerpt",
        "value": "Use: \n```\n> $ yarn start\n```\nUsing a modern browser visit:\n```\nhttp://localhost:8000/GenomePlot.html?sampleId=LNCAP\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To run `vcftoUplot.R`",
        "parent_header": [
          "Genome U-Plot sample implementation",
          "Variant Call Format (VCF) file Support"
        ],
        "type": "Text_excerpt",
        "value": "Given a **VCF** sample file NA12878.vcf (provided in the `public/data` directory), run\n```\nRscript vcftoUplot.R NA12878.vcf\n```\n\nThis will produce the following directory hierarchy \n```\nNA12878/\n\u251c\u2500\u2500 NA12878_alts_comprehensive.csv\n\u2514\u2500\u2500 NA12878_visualization.json\n```\n\nThen, using a modern browser visit:\n```\nhttp://localhost:8000/GenomePlot.html?sampleId=NA12878\n```\n\n**Note:** For this particular example you should use the *\"Filter on # of Frags\"* GUI option in order to reduce the number of visualized Chromosomal abnormalities. You can also uncheck the *\"Line width to # Frags\"* to disassociate the line thickness from the number of fragments supporting the event. \n\n**Note II:** The Human Genome Assembly GRCh38 is assumed\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:29:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 31
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Variant Call Format (VCF) file Support",
        "parent_header": [
          "Genome U-Plot sample implementation"
        ],
        "type": "Text_excerpt",
        "value": "In order to run the application against a sample that is stored in a **VCF** file, we provide an **R** script `vcftoUplot.R` (which resides in the `public/data` directory). The script was tested with R-3.3.3 and requires the R package `VariantAnnotation`, which will be automatically installed if not present. The script takes as input a **VCF** file (tested VCF v4.1 and v4.2) and produces the file structure hierarchy required by the Genome U-Plot in order to visualize the sample. Finally don't forget to replace your sample name in the URL parameter of the app.\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Commercial use",
        "parent_header": [
          "Genome U-Plot sample implementation"
        ],
        "type": "Text_excerpt",
        "value": "If you want to use Genome U-Plot in commercial settings, please contact us.\n"
      },
      "source": "https://raw.githubusercontent.com/gaitat/GenomeUPlot/master/README.md",
      "technique": "header_analysis"
    }
  ]
}