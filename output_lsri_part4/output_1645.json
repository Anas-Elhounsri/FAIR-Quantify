{
  "application_domain": [
    {
      "confidence": 16.82,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "structure(list(\n  muschelli2017pitchperfect = structure(list(\n    title = \"{PItcHPERFeCT}: Primary Intracranial Hemorrhage Probability Estimation using Random Forests on {CT}\",\n    author = structure(list(\n      list(given = \"John\", family = \"Muschelli\", role = NULL,\n           email = NULL, comment = NULL),\n      list(given = c(\"Elizabeth\", \"M\"), family = \"Sweeney\", role = NULL,\n           email = NULL, comment = NULL),\n      list(given = c(\"Natalie\", \"L\"), family = \"Ullman\", role = NULL,\n           email = NULL, comment = NULL),\n      list(given = \"Paul\", family = \"Vespa\",\n           role = NULL, email = NULL, comment = NULL),\n      list(given = c(\"Daniel\", \"F\"), family = \"Hanley\", role = NULL,\n           email = NULL, comment = NULL),\n      list(given = c(\"Ciprian\", \"M\"), family = \"Crainiceanu\", role = NULL,\n           email = NULL, comment = NULL)), class = \"person\"),\n    journal = \"NeuroImage: Clinical\",\n    volume = \"14\", pages = \"379--390\", year = \"2017\",\n    publisher = \"Elsevier\"), bibtype = \"Article\",\n    key = \"muschelli2017pitchperfect\")), class = \"bibentry\",\n  strings = structure(character(0), .Names = character(0)))"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/inst/CITATION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing",
        "parent_header": [
          "ichseg <img src=\"man/figures/logo.png\" align=\"right\" height=\"139\" />"
        ],
        "type": "Text_excerpt",
        "value": "To cite `ichseg`, you can run:\n\n    citation(\"ichseg\")\n\n    Muschelli J, Sweeney EM, Ullman NL, Vespa P, Hanley DF, Crainiceanu CM\n    (2017). \"PItcHPERFeCT: Primary Intracranial Hemorrhage Probability\n    Estimation using Random Forests on CT.\" _NeuroImage: Clinical_, *14*,\n    379-390.\n\n    A BibTeX entry for LaTeX users is\n\n      @Article{muschelli2017pitchperfect,\n        title = {{PItcHPERFeCT}: Primary Intracranial Hemorrhage Probability Estimation using Random Forests on {CT}},\n        author = {John Muschelli and Elizabeth M Sweeney and Natalie L Ullman and Paul Vespa and Daniel F Hanley and Ciprian M Crainiceanu},\n        journal = {NeuroImage: Clinical},\n        volume = {14},\n        pages = {379--390},\n        year = {2017},\n        publisher = {Elsevier},\n      }\n"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "John Muschelli and Elizabeth M Sweeney and Natalie L Ullman and Paul Vespa and Daniel F Hanley and Ciprian M Crainiceanu",
        "format": "bibtex",
        "title": "{PItcHPERFeCT}: Primary Intracranial Hemorrhage Probability Estimation using Random Forests on {CT}",
        "type": "Text_excerpt",
        "value": "@article{muschelli2017pitchperfect,\n    publisher = {Elsevier},\n    year = {2017},\n    pages = {379--390},\n    volume = {14},\n    journal = {NeuroImage: Clinical},\n    author = {John Muschelli and Elizabeth M Sweeney and Natalie L Ullman and Paul Vespa and Daniel F Hanley and Ciprian M Crainiceanu},\n    title = {{PItcHPERFeCT}: Primary Intracranial Hemorrhage Probability Estimation using Random Forests on {CT}},\n}"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/muschellij2/ichseg"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-01-19T15:43:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-09T16:07:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ICH Segmentation of CT scans"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9928542154334018,
      "result": {
        "original_header": "ichseg <img src=\"man/figures/logo.png\" align=\"right\" height=\"139\" />",
        "type": "Text_excerpt",
        "value": "\nThe goal of `ichseg` is to perform preprocessing on computed tomography\n(CT) scans, including skull stripping. Computes predictors of\nintracerebral hemorrhage (ICH) and uses these to predict a binary\nhemorrhage mask from the data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8001777676043159,
      "result": {
        "original_header": "Prediction",
        "type": "Text_excerpt",
        "value": "In order to segment ICH from an image, use the `ich_segment` function: \n"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/muschellij2/ichseg/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/muschellij2/ichseg/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/muschellij2/ichseg/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "muschellij2/ichseg"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ichseg "
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://ci.appveyor.com/api/projects/status/github/muschellij2/ichseg?branch=master&amp;svg=true"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "---\ntitle: \"Installing ichseg and Getting Started\"\nauthor: \"Vignette Author\"\ndate: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Installing ichseg and Getting Started}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n```{r}\nknitr::opts_chunk$set(eval = FALSE)\n```\n\n# Installation and Setup \n\nR is used for most of the computations but there are external dependencies required for the packages needed to get this working.\nMost of my this software requires a Linux/*nix machine.\n\nIf you're using a Docker/Singularity container, I suggest using Debian and Neurodebian (http://neuro.debian.net/).  \n\n## External Dependencies\n### R Package Setup\n\n```{r, engine = \"bash\"}\nsudo apt-get install r-base r-base-dev\n```\n\nIn `R`:\n```{r}\ninstall.packages(\"devtools\")\n```\n\n### FSL\nFSL (https://fsl.fmrib.ox.ac.uk/fsl/fslwiki) must be installed for the fslr package (see https://github.com/muschellij2/fslr for additional Neurodebian setup).\n\nAfter setting up the `apt-key`s sufficiently, the below may install FSL to work with `fslr` (not guaranteed).\n\n```{r, engine = \"bash\"}\nsudo apt-get install fsl-complete\n\nFSLDIR=/usr/local/fsl\nFSLSHARE=/usr/share/data\n\nmkdir -p ${FSLDIR}/bin && cp /usr/lib/fsl/5.0/* ${FSLDIR}/bin/\nmkdir -p ${FSLDIR}/data/standard && mkdir -p ${FSLDIR}/data/atlases \n\n\n#######################################\n# Setting things up like other installers\n#######################################\ncp -R ${FSLSHARE}/fsl-mni152-templates/* ${FSLDIR}/data/standard/\n\n# setting up atlases\ncp -R ${FSLSHARE}/harvard-oxford-atlases/* ${FSLDIR}/data/atlases/ \ncp -R ${FSLSHARE}/juelich-histological-atlas/* ${FSLDIR}/data/atlases/ \ncp -R ${FSLSHARE}/bangor-cerebellar-atlas/* ${FSLDIR}/data/atlases/ \ncp -R ${FSLSHARE}/jhu-dti-whitematter-atlas/* ${FSLDIR}/data/atlases/ \ncp -R ${FSLSHARE}/forstmann-subthalamic-nucleus-atlas/* ${FSLDIR}/data/atlases/ \ncp -R ${FSLSHARE}/fsl-resting-connectivity-parcellation-atlases/* ${FSLDIR}/data/atlases/ \ncp -R ${FSLSHARE}/mni-structural-atlas/* ${FSLDIR}/data/atlases/ \ncp -R ${FSLSHARE}/oxford-thalamic-connectivity-atlas/* ${FSLDIR}/data/atlases/ \ncp -R ${FSLSHARE}/talairach-daemon-atlas/* ${FSLDIR}/data/atlases/ \n\necho \"export LD_LIBRARY_PATH=/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" >> ~/.profile\necho \"export LD_LIBRARY_PATH=/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" >> ~/.bash_profile\n```\n\n### ANTsR and ITK-based software\n\nThe `ichseg` package relies upon `extrantsr`, which relies on `ANTsR`, `ANTsRCore`, and `ITKR`, which are largely powerful packages that rely upon the [ITK](https://itk.org) software.  \n\nThese rely on `git` and `cmake`, so they must be installed:\n\n```{r, engine = \"bash\"}\nsudo apt-get git-core\nsudo apt-get cmake\n```\n\n\nIn `R`:\n\n```{r}\ndevtools::install_github(\"muschellij2/ITKR\")\ndevtools::install_github(\"muschellij2/ANTsRCore\")\ndevtools::install_github(\"muschellij2/ANTsR\")\n```\n\n\nAn easier way to install these packages is likely to use the binaries\n#### OS X Binaries\n\nThe links for the OSX binaries are at:\n```\nhttps://github.com/muschellij2/ITKR/releases/download/v0.4.12.4/ITKR_0.4.12.4.tgz\nhttps://github.com/muschellij2/ANTsRCore/releases/download/v0.4.2.1/ANTsRCore_0.4.2.1.tgz\nhttps://github.com/muschellij2/ANTsR/releases/download/v0.6.2/ANTsR_0.6.2.tgz\n```\n\n#### Linux Binaries\n\nThe links for the Linux binaries are at:\n```\nhttps://github.com/muschellij2/ITKR/releases/download/v0.4.12.4/ITKR_0.4.12.4_R_x86_64-pc-linux-gnu.tar.gz\nhttps://github.com/muschellij2/ANTsRCore/releases/download/v0.4.2.1/ANTsRCore_0.4.2.1_R_x86_64-pc-linux-gnu.tar.gz\nhttps://github.com/muschellij2/ANTsR/releases/download/v0.6.2/ANTsR_0.6.2_R_x86_64-pc-linux-gnu.tar.gz\n```\n\n\n### Installing ichseg\n\nThe main R package that does the ICH segmentation in CT is `ichseg`:\nhttps://github.com/muschellij2/ichseg.  After the 3 packages above are installed, you are ready to install the main pacakge `ichseg`\n```{r}\ndevtools::install_github(\"muschellij2/extrantsr\", upgrade_dependencies = FALSE)\ndevtools::install_github(\"muschellij2/ichseg\", upgrade_dependencies = FALSE)\n```\n\n\n# Workflow \n\nHere we will have some data (DICOM format), that is unsorted and there are multiple pieces of data in there (such MRI scans, localizer scans, CTA, etc.).\n\n## Sorting DICOM data (not solved)\n\nHave a folder of DICOM data.  There can be multiple images in there, they will be sorted in the following steps.\n\nWe use the `tractor.base::sortDicomDirectories` function.  We need at least a specific version for sorting.  \n\n```{r}\nif (!(\"tractor.base\" %in% installed.packages())) {\n  install.packages(\"tractor.base\")\n}\ntractor_version = packageVersion(\"tractor.base\")\nif (compareVersion(as.character(tractor_version), \"3.1.3\") < 0) {\n  devtools::install_github(\n    \"tractor/tractor\", \n    subdir = \"tractor.base\")\n}\n```\n\nNow that you have the package installed, you should run the following steps for DICOM sorting (where you replace `\"/path/to/dicom/files\"` with the relevant directory):\n\n```{r}\ndicom_directory = \"/path/to/dicom/files\"\nbefore_run = list.dirs(dir, recursive = FALSE)\n\n# find all zip files - uncompress them, then delete zip files\nall_zip = list.files(\n  path = dir,\n  pattern = \"[.]zip$\",\n  recursive = TRUE, full.names = TRUE)\nif (length(all_zip) > 0) {\n  file.remove(all_zip)\n}\n\nall_zip = list.files(\n  path = dir,\n  pattern = \"[.]rar$\",\n  recursive = TRUE, full.names = TRUE)\nif (length(all_zip) > 0) {\n  file.remove(all_zip)\n}\n\n# sort the data\nres = tractor.base::sortDicomDirectories(\n  directories = dicom_directory, \n  deleteOriginals = TRUE,\n  ignoreTransferSyntax = TRUE\n  )\n\n# remove old directories\nafter_run = list.dirs(dicom_directory, recursive = FALSE)\nnew_dirs = setdiff(after_run, before_run)\nold_dirs = intersect(after_run, before_run)\n\nunlink(old_dirs, recursive = TRUE)\n```\n\nAll files with the ending `.zip` will be deleted (sometimes they are duplicated).  If you want to keep these, I recommend using the `utils::unzip` command in R previous to running this.  The data will be copies, sorted, and the old data will be deleted.  \n\nThe structure of the directory specified in `dicom_directory` will be sorted based on Series (by default), based on Series unique ID (UID) based on DICOM tag 0x0020,0x000e by default.\n\n### Subsetting: Not completed \n\nNow that the dat has been sorted, the relevant data can be subset.   The data for the PItCHPERFECT model requires the data be non-contrast CT data.  This means removing anything of the imaging modality MR (MRIs), CTAs (CT angiograms), and a slew of derived images (such as screen saves, dose reports, localizers, and 3D reconstructions).  \n\nThese can be subset using the DICOM header information:\n\n* `Modality`: (0008,0060) tag\n* `ImageType`: (0008,0008) tag  \n* `Frame Type`: (0008,9007) tag\n* `ConvolutionKernel`: (0018,1210) tag (Required if Frame Type (0008,9007) Value 1 of this frame is ORIGINAL. May be present otherwise.)\n* `Convolution Kernel Group`: (0018,9316) tag\n* `X-ray Tube Current`:  (0018,1151) tag X-ray Tube Current in mA.\t\n* `Exposure Time`: (0018,1150) tag Time of x-ray exposure in msec\t\n\nWith this information, we will start removing unnecessary series.  We will use the `dcmtk` package for this:\n\n```{r}\nif (!(\"dcmtk\" %in% installed.packages())) {\n  devtools::install_github(\"muschellij2/dcmtk\")\n} else {\n  dcmtk_ver = packageVersion(\"dcmtk\")\n  if (dcmtk_ver < \"0.5.5\") {\n    devtools::install_github(\"muschellij2/dcmtk\")\n  }  \n}\nlibrary(dcmtk)\n```\n\nWe are reading in all the header information from each DICOM using the `dcmtk::read_dicom_header` function:\n```{r}\nn_dirs = length(new_dirs)\nall_data = vector(mode = \"list\", length = n_dirs)\nfor (i in seq(n_dirs)) {\n  basedir = new_dirs[i]\n  hdr = dcmtk::read_dicom_header(file = paste0(basedir, \"/*\"))\n  hdr$dir = basedir\n  all_data[[i]] = hdr\n}\n```\n\nNB: this data contains all the header information, not just those fields specified above, including protected health information (PHI).\n\n```{r}\nlibrary(dplyr)\nall_hdr = dplyr::bind_rows(all_data)\nkeep_tags = c(\"(0008,0008)\", \"(0008,0060)\", \"(0018,1210)\",\n              \"(0018,1160)\", \"(0018,1151)\", \"(0018,0081)\",\n              \"(0018,1150)\", \"(0018,0080)\", \"(0008,9007)\",\n              \"(0018,9316)\")\nsub_hdr = all_hdr %>% \n  filter(tag %in% keep_tags) %>% \n  select(file, name, value)\n```\n\n## Converting DICOM to NIfTI data\n\nOnce we have a directory of DICOM files, we can convert them using to NIfTI using the DICOM to NIfTI converter [dcm2nii](https://www.nitrc.org/projects/dcm2nii/).  We use this through the `dcm2niir` package\n\nThe current workflow is to convert a directory (`directory_of_DICOMS`):\n\n```{r, eval = FALSE}\nlibrary(dcm2niir)\n\nout = dcm2nii(basedir = directory_of_DICOMS)\nres_file = check_dcm2nii(out)\n```\n\n## Ensuring HU scale\n\nWe then read in the file, make sure it's within the standard range of HU and then write it out.\n\n\n```{r, eval = FALSE}\nlibrary(neurobase)\n####################################  \n# window the image\n####################################\nwindow = c(-1024, 3071)\nimg = readnii(res_file)\nimg = window_img(img, window = window)\nimg = cal_img(img)\nscl_slope(img) = 1\nscl_inter(img) = 0\naux_file(img) = \"\"\ndescrip(img) = \"\"\nwritenii(img, filename = res_file)\n```\n\n## ICH Segmentation\n\nThis file can be passed into `ichseg::ich_segment`.  \n\n```{r, eval = FALSE}\nresults = ichseg::ich_segment(res_file)\n```\n\n\n### Resampling to 1x1x1\n\nIn order to keep the dimensions of voxels the same, we can rigidly register to a template (which is done in `ich_segment`).\n\nYou can also resample the image to a 1x1x1$mm$ image:\n\n```{r}\nlibrary(ANTsRCore)\nimg = antsImageRead(res_file)\nres_img = resampleImage(img, resampleParams = c(1,1,1),\n  useVoxels = FALSE)\n```\n\nThe images should be on the same grid but not registered and not necessarily oriented the same way\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/vignettes/installing-ichseg-getting-started.Rmd",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ichseg <img src=\"man/figures/logo.png\" align=\"right\" height=\"139\" />"
        ],
        "type": "Text_excerpt",
        "value": "You can install `ichseg` from github with:\n\n    # install.packages(\"devtools\")\n    devtools::install_github(\"muschellij2/ichseg\")\n"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "ichseg <img src=\"man/figures/logo.png\" align=\"right\" height=\"139\" />",
        "type": "Text_excerpt",
        "value": "[![Travis build\nstatus](https://travis-ci.com/muschellij2/ichseg.svg?branch=master)](https://travis-ci.com/muschellij2/ichseg)\n[![AppVeyor build\nstatus](https://ci.appveyor.com/api/projects/status/github/muschellij2/ichseg?branch=master&svg=true)](https://ci.appveyor.com/project/muschellij2/ichseg) \n"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8318545382055067,
      "result": {
        "original_header": "Prediction",
        "type": "Text_excerpt",
        "value": "    ichseg::ich_segment(img = \"/path/to/ct/scan\")\n \n"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/muschellij2/ichseg/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/muschellij2/ichseg/master/man/figures/logo.png"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ichseg"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "muschellij2"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 109853,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 10635,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "muschellij2",
          "type": "User"
        },
        "date_created": "2017-06-22T22:33:37Z",
        "date_published": "2017-06-22T23:05:53Z",
        "html_url": "https://github.com/muschellij2/ichseg/releases/tag/v0.9.7",
        "release_id": 6808845,
        "tag": "v0.9.7",
        "tarball_url": "https://api.github.com/repos/muschellij2/ichseg/tarball/v0.9.7",
        "type": "Release",
        "url": "https://api.github.com/repos/muschellij2/ichseg/releases/6808845",
        "value": "https://api.github.com/repos/muschellij2/ichseg/releases/6808845",
        "zipball_url": "https://api.github.com/repos/muschellij2/ichseg/zipball/v0.9.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "muschellij2",
          "type": "User"
        },
        "date_created": "2017-06-21T03:54:09Z",
        "date_published": "2017-06-21T04:04:24Z",
        "html_url": "https://github.com/muschellij2/ichseg/releases/tag/v0.9.6.9999",
        "release_id": 6781384,
        "tag": "v0.9.6.9999",
        "tarball_url": "https://api.github.com/repos/muschellij2/ichseg/tarball/v0.9.6.9999",
        "type": "Release",
        "url": "https://api.github.com/repos/muschellij2/ichseg/releases/6781384",
        "value": "https://api.github.com/repos/muschellij2/ichseg/releases/6781384",
        "zipball_url": "https://api.github.com/repos/muschellij2/ichseg/zipball/v0.9.6.9999"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "muschellij2",
          "type": "User"
        },
        "date_created": "2017-06-21T04:27:34Z",
        "date_published": "2017-06-21T04:44:57Z",
        "html_url": "https://github.com/muschellij2/ichseg/releases/tag/v0.9.6.9997",
        "release_id": 6781569,
        "tag": "v0.9.6.9997",
        "tarball_url": "https://api.github.com/repos/muschellij2/ichseg/tarball/v0.9.6.9997",
        "type": "Release",
        "url": "https://api.github.com/repos/muschellij2/ichseg/releases/6781569",
        "value": "https://api.github.com/repos/muschellij2/ichseg/releases/6781569",
        "zipball_url": "https://api.github.com/repos/muschellij2/ichseg/zipball/v0.9.6.9997"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "muschellij2",
          "type": "User"
        },
        "date_created": "2017-06-21T04:54:07Z",
        "date_published": "2017-06-21T05:29:27Z",
        "html_url": "https://github.com/muschellij2/ichseg/releases/tag/v0.9.6.9996",
        "release_id": 6781786,
        "tag": "v0.9.6.9996",
        "tarball_url": "https://api.github.com/repos/muschellij2/ichseg/tarball/v0.9.6.9996",
        "type": "Release",
        "url": "https://api.github.com/repos/muschellij2/ichseg/releases/6781786",
        "value": "https://api.github.com/repos/muschellij2/ichseg/releases/6781786",
        "zipball_url": "https://api.github.com/repos/muschellij2/ichseg/zipball/v0.9.6.9996"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "muschellij2",
          "type": "User"
        },
        "date_created": "2017-06-21T04:02:15Z",
        "date_published": "2017-06-21T04:23:22Z",
        "html_url": "https://github.com/muschellij2/ichseg/releases/tag/vv0.9.6.9997",
        "release_id": 6781496,
        "tag": "vv0.9.6.9997",
        "tarball_url": "https://api.github.com/repos/muschellij2/ichseg/tarball/vv0.9.6.9997",
        "type": "Release",
        "url": "https://api.github.com/repos/muschellij2/ichseg/releases/6781496",
        "value": "https://api.github.com/repos/muschellij2/ichseg/releases/6781496",
        "zipball_url": "https://api.github.com/repos/muschellij2/ichseg/zipball/vv0.9.6.9997"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "ichseg <img src=\"man/figures/logo.png\" align=\"right\" height=\"139\" />"
        ],
        "type": "Text_excerpt",
        "value": "These functions require a working installation of FSL\n(<a href=\"https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FslInstallation\" class=\"uri\">https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FslInstallation</a>),\nwhich can be installed via Neurodebian as well:\n<a href=\"http://neuro.debian.net/pkgs/fsl-complete.html\" class=\"uri\">http://neuro.debian.net/pkgs/fsl-complete.html</a>.\n"
      },
      "source": "https://raw.githubusercontent.com/muschellij2/ichseg/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:49:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ]
}