{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cartof/digitalDLSorter"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-19T12:29:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-12T14:55:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A pipeline to generate a Deep Nerual Network cell type deconvolution model for bulk RNASeq samples from single cell experiment data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeline summary",
        "type": "Text_excerpt",
        "value": "![Pipeline Graph](PipelineScript.png)\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9867541792123286,
      "result": {
        "original_header": "digitalDLSorter",
        "type": "Text_excerpt",
        "value": "A pipeline to generate a Deep Neural Network cell type deconvolution model for bulk RNASeq samples from single cell rna-seq data. As described in [Torroja and Sanchez-Cabo, 2019](https://www.frontiersin.org/articles/10.3389/fgene.2019.00978/full). \n \n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cartof/digitalDLSorter/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cartof/digitalDLSorter/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cartof/digitalDLSorter"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "digitalDLSorter"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/PipelineScript.png"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "The pipeline runs in R 3.5.1 and python 3.6.\n\nInstall R with the following packages: \n- splatter\n- zimbwave\n- SingleCellExperiment\n- Matrix\n- dplyr\n- gtools\n- ggplot2\n- resahpe2\n- edgeR\n- pbapply\n- optparse\n\nInstall Python 3 with the following packages:\n- numpy\n- pandas\n- argparse\n- matplotlib\n- keras\n\nUsing conda enviroment:\n```\nconda create -n digitalDLSorter\nconda activate digitalDLSorter\nconda install tensorflow=1.5.0 python=3.6 numpy pandas argparse matplotlib keras\nconda install r=3.5.1 bioconductor-splatter bioconductor-zinbwave bioconductor-SingleCellExperiment r-gtools r-dplyr r-ggplot2 r-reshape2  bioconductor-edgeR r-pbapply r-optparse\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate vectors of cell type proportions for training and test set",
        "parent_header": [
          "Running the pipeline",
          "Simulate Bulk profiles"
        ],
        "type": "Text_excerpt",
        "value": "First we will separate the cells into training and test set and create a list of vectors with the cell type fractions for each bulk sample.\n\nWe will split the Single Cell profiles in 65% for training and 35% for testing with `-f 0.65`. The script will need the simulated metadata file in tsv or r object format `-c digitalDLSorterDemo/Demo.All.simCellsMetadata.1000.rds`, the column that contains the target classification we want to train on `-q Cell_Type` and its corresponding counts matrix `-s digitalDLSorterDemo/Demo.All.simCellsCountsMtx.1000/matrix.mtx` from the previous step.\n\n```bash\nconda activate digitalDLSorter\nRscript generateTrainAndTestBulkProbMatrix.R \\\n-f 0.65 -g  data/genesMetadata.tsv.gz -d data/probPriors.txt \\\n-c digitalDLSorterDemo/Demo.All.simCellsMetadata.1000.rds -q Cell_Type \\\n-s digitalDLSorterDemo/Demo.All.simCellsCountsMtx.1000/matrix.mtx \\\n-o digitalDLSorterDemo -p Demo\n```\n\nThis script will generate several files separated in Train and Test sets.\n\n`Demo.trainProbsMatrix` and `Demo.testProbMatrix` with the list of vectors with cell type fractions to simulate. Cell types in columns and simulated sample in rows.\n\n`Demo.trainProbMatrixNames` and `Demo.testProbMatrixNames` with the names of the cells that have been sampled from the training and test pools repectively to build the bulk samples. Each sample in rows made of a 100 cells.\n\n`Demo.trainSetList` and `Demo.testSetList` files containing the list of cell types with the pool of cells belonging to each cell type\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare Single Cell And Bulk profiles for training",
        "parent_header": [
          "Running the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Now we will prepare the data to feed the digitalDLSorter model by combining the simulated bulk and single cell profiles, normalize, shuffle and scale them.\n\nWe will need the `Demo.trainProbsMatrix` or `Demo.testProbsMatrix` file with the vectors cell type fractions, the `Demo.trainSetList` or `Demo.testSetList` file with the list of cells selected for each set and the counts matrix for the single cell profiles `Demo.All.simCellsCountsMtx.1000/matrix.mtx` and the bulk profiles `Demo.Train.simBulkCounts` or `Demo.Test.simBulkCounts`.\n\nAgain, we will run this step twice, one for the training set and one for the test set.\n\nTraining Set\n```bash\nconda activate digitalDLSorter\nRscript generateCombinedScaledShuffledSet.R \\\n-m digitalDLSorterDemo/Demo.trainProbsMatrix.rds -c digitalDLSorterDemo/Demo.trainSetList.rds \\\n-s digitalDLSorterDemo/Demo.All.simCellsCountsMtx.1000/matrix.mtx -b digitalDLSorterDemo/Demo.Train.simBulkCounts.rds \\\n-o digitalDLSorterDemo -p Demo.Train\n```\n\nTest Set\n```bash\nconda activate digitalDLSorter\nRscript generateCombinedScaledShuffledSet.R \\\n-m digitalDLSorterDemo/Demo.testProbsMatrix.rds -c digitalDLSorterDemo/Demo.testSetList.rds \\\n-s digitalDLSorterDemo/Demo.All.simCellsCountsMtx.1000/matrix.mtx -b digitalDLSorterDemo/Demo.Test.simBulkCounts.rds \\\n-o digitalDLSorterDemo -p Demo.Test\n```\n\nThis step will generate two versions of the data, one with all combined single cell and bulk samples and counts without further transformation (`combinedCounts` and  `combinedProbsMatrix`) and one with the samples normalized, scaled and shuffled (`combinedCounts.log2CPMScaledShuffledTransposed` and `combinedProbsMatrix.log2CPMScaledShuffledTransposed`). It also provides the list of genes used `combinedCounts.geneList`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cartof/digitalDLSorter/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "digitalDLSorter"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "cartof"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 65447,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 12214,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the pipeline",
        "type": "Text_excerpt",
        "value": "Each script has its own help instructions.\n```\nRscript estimateZinbwaveParams.R --help\npython ~/Documents/GitLabProjects/uploadedDLSorter/digitalDLSorter.py --help\n```"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input data",
        "parent_header": [
          "Running the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Under the data folder there are counts, cellsMetada, genesMetada and probPriors files to test the pipeline. These data has been obtained from [GSE81861](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE81861) ([Li et al., 2017](https://doi.org/10.1038/ng.3818)), a collection of single cell RNA-Seq profiles from 11 CRC patients.\n\nThere is also a a set of bulk RNA-Seq profiles from TCGA colorectal samples obtained from [TCGA project data portal](https://portal.gdc.cancer.gov/).\n\ncountsMatrix.tsv.gz: File with single cell counts. Genes in rows and Cells in columns.\n\n```bash\nzcat data/countsMatrix.tsv.gz | cut -f1-5 | head -n6\n```\nRHC3934 | RHC3944 | RHC3962 | RHC4005 | RHC4220\n------- | ------- | ------- | ------- | -------\n7SK | 0 | 0 | 0 | 0\nA1BG | 0 | 0 | 0 | 0\nA1BG-AS1 | 0 | 0 | 0 | 0\nA1CF | 0 | 0 | 0.075 | 0\nA2M | 0 | 0 | 0 | 0\n\ncellsMetadata.tsv.gz: file with annotations for each cell (rows) in countsMatrix\n```bash\nzcat cellsMetadata.tsv.gz | cut -f1-4,12 | head -n6\n```\nCell_ID | Patient | issue_type | gender | Cell_Type\n------- | ------- | ---------- | ------ | ---------\nRHC3934 | CRC03 | NM | Female | pB\nRHC3944 | CRC03 | NM | Female | gB\nRHC3962 | CRC03 | NM | Female | CD8Gn\nRHC4005 | CRC03 | NM | Female | gB\nRHC4220 | CRC04 | NM | Female | pB\n\ngenesMetadata.tsv.gz: file with annotations for each gene (rows) in countsMatrix\n```\nzcat data/genesMetadata.tsv.gz | head -n 6\n```\nensembl_gene_id | external_gene_name | gene_length\n--------------- | ------------------ | -----------\nENSG00000000003 | TSPAN6 | 2959\nENSG00000000005 | TNMD | 1603\nENSG00000000419 | DPM1 | 1197\nENSG00000000457 | SCYL3 | 5561\nENSG00000000460 | C1ORF112 | 4936\n\nprobPriors.txt: file with the frequency ranges expected for each cell type annotated in cellsMatadata. This information can be estimated from literature or from the single cell experiment itself. It is a priory guess to build the simulated bulk profiles.\n```\nhead -n6 data/probPriors.txt\n```\ncellType | from | to\n-------- | ---- | --\nCRC | 30 | 70\nCD4 | 0 | 15\nCD8Gn | 0 | 15\nCD8Gp | 0 | 15\nEp | 1 | 50\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulating new Single Cell profiles",
        "parent_header": [
          "Running the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "In cases where there is low numbers of cells in the experiment or there is a particular cell type which is under represented we can increase the sample size by simulating new data based on the real one. This pipeline uses the ZinbWave framework implemented in R to estimate the parameters to simulate single cell profiles ([Risso et al., 2018](https://www.frontiersin.org/articles/10.3389/fgene.2019.00978/full#B36)).\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Estimate simulation parameters",
        "parent_header": [
          "Running the pipeline",
          "Simulating new Single Cell profiles"
        ],
        "type": "Text_excerpt",
        "value": "We can adjust the cell type model `--cellTypeColumn=Cell_Type` based on our experimental design adding covariates such as patient and gender for example `--cellCovColumns=Patient,gender`. Also we can add covariates at gene level, for example the gene length `--geneCovColumns=gene_length`.\n\nWe do also filter genes based on minimum expression at a minimum number of cells `--minCounts=1 --minCells=1`.\n\n```bash\nconda activate digitalDLSorter\nRscript estimateZinbwaveParams.R \\\n-t All \\\n-m data/cellsMetadata.tsv.gz --cellTypeColumn=Cell_Type --cellIDColumn=Cell_ID --cellCovColumns=Patient,gender \\\n-g data/genesMetadata.tsv.gz --geneIDColumn=external_gene_name --geneCovColumns=gene_length \\\n-c data/countsMatrix.tsv.gz --minCounts=1 --minCells=1 \\\n-o digitalDLSorterDemo -p Demo -d 4\n```\nBe patient this may take a few hours to run. It is not very optimized. `-d 4` will use 4 threads for some steps of the estimation. Adjust it depending on your resources.\nResults will be stored at `digitalDLSorterDemo/` folder.\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulating Single Cells",
        "parent_header": [
          "Running the pipeline",
          "Simulating new Single Cell profiles"
        ],
        "type": "Text_excerpt",
        "value": "Using the `Demo.All.zinbParams.rds` r object file with the estimated parameters we will generate new single cell profiles.\n\nWe will simulate 100 cell profiles per cell type `-t All -n 100`. In our dataset we have 10 cells types so we will end up with 1000 simulated single cell profiles.\n\n```bash\nconda activate digitalDLSorter\nRscript simSingleCellProfiles.R \\\n-t All -n 100 \\\n-z digitalDLSorterDemo/Demo.All.zinbParams.rds \\\n-c data/cellsMetadata.tsv.gz -q Cell_Type \\\n-m data/countsMatrix.tsv.gz \\\n-o digitalDLSorterDemo -p Demo\n```\n The script generates a counts matrix stored as a sparse matrix in this folder `digitalDLSorterDemo/Demo.All.simCellsCountsMtx.1000` and a metadata file for the simulated cells in two formats, a gzip tsv file `Demo.All.simCellsMetadata.1000.tsv.gz` and an R object `Demo.All.simCellsMetadata.1000.rds`. This files contains both , the original single cell profiles and the simulated ones. \n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulate Bulk profiles",
        "parent_header": [
          "Running the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "To train the digitalDLSorter deconvolution model we will first generate bulk samples with known proportions of cells.\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate Train and Test Bulk Samples",
        "parent_header": [
          "Running the pipeline",
          "Simulate Bulk profiles"
        ],
        "type": "Text_excerpt",
        "value": "Using the vectors of cell type fractions created for Train and Test and the Single Cell matrix counts, we will generate the counts profiles for the simulated Bulk samples.\n\nWe will run this step twice, one for the training set and one for the test set.\n\nTraining Set\n```bash\nconda activate digitalDLSorter\nRscript generateBulkSamples.R \\\n-m digitalDLSorterDemo/Demo.trainProbMatrixNames.rds \\\n-s digitalDLSorterDemo/Demo.All.simCellsCountsMtx.1000/matrix.mtx \\\n-o digitalDLSorterDemo -p Demo.Train -n 6\n```\n\nTest set\n```bash\nconda activate digitalDLSorter\nRscript generateBulkSamples.R \\\n-m digitalDLSorterDemo/Demo.testProbMatrixNames.rds \\\n-s digitalDLSorterDemo/Demo.All.simCellsCountsMtx.1000/matrix.mtx \\\n-o digitalDLSorterDemo -p Demo.Test -n 6\n```\n\nThis step will generate the `Demo.Train.simBulkCounts and `Demo.Test.simBulkCounts` matrix counts in tsv.gz and r .rds object. With genes in rows and samples in columns.\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Train digitalDLSorter model",
        "parent_header": [
          "Running the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "With the `log2CPMScaledShuffledTransposed` files of data (samples in rows and genes in columns) we will train the model.\n\nWe need to provide the number of training `--num_train_samples 16056` and test samples `--num_test_samples 10800` and the final number of genes used after filtering steps `--num_genes 36477`.\n\nYou could use this bash lines to find out the numbers\n```bash\nzcat digitalDLSorterDemo/Demo.Train.combinedCounts.log2CPMScaledShuffledTransposed.tsv.gz | wc -l | awk '{print $0-1}'\n\nzcat digitalDLSorterDemo/Demo.Test.combinedCounts.log2CPMScaledShuffledTransposed.tsv.gz | wc -l | awk '{print $0-1}'\n\nzcat digitalDLSorterDemo/Demo.Train.combinedCounts.geneList.tsv.gz | wc -l\n```\n\nThe number of cell types `--num_classes 10`,  batch size to process the data in chunks `--batch_size 100 ` and number of rounds for training `--num_epochs 20`.\n\nFinaly we provide the loss function to reduce `--loss kullback_leibler_divergence` for this demo.\n\n```bash\nconda activate digitalDLSorter\npython digitalDLSorter.py \\\n--trainCountsFile digitalDLSorterDemo/Demo.Train.combinedCounts.log2CPMScaledShuffledTransposed.tsv.gz \\\n--trainProbsFile digitalDLSorterDemo/Demo.Train.combinedProbsMatrix.log2CPMScaledShuffledTransposed.tsv.gz \\\n--testCountsFile digitalDLSorterDemo/Demo.Test.combinedCounts.log2CPMScaledShuffledTransposed.tsv.gz \\\n--testProbsFile digitalDLSorterDemo/Demo.Test.combinedProbsMatrix.log2CPMScaledShuffledTransposed.tsv.gz \\\n--num_classes 10 --num_genes 36477 --num_train_samples 16056 --num_test_samples 10800 \\\n--batch_size 100 --num_epochs 10 --loss kullback_leibler_divergence \\\n--outputPath digitalDLSorterDemo --prefix Demo\n```\n\nThe training step will generate an h5 file with the model `Demo.digitalDLSorterTrainedModel.kullback_leibler_divergence.h5` and its weights `Demo.digitalDLSorterTrainedWeightsModel.kullback_leibler_divergence`, the list of genes for the input `Demo.digitalDLSorterTrainedModel.inputGeneList`, the target class names or cell types `Demo.digitalDLSorterTrainedModel.targetClassNames`, the model performance evaluation `Demo.digitalDLSorterTrainedModel.evalStats` and the predictions on the test set `Demo.digitalDLSorterTrainedModel.DeconvTestPredictions`.\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Predict samples with the model",
        "parent_header": [
          "Running the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Now with the model trained we can provide new samples to be deconvoluted. In example, these colorectal samples obtained from TCGA site. The counts matrix of bulk samples should have samples in rows and genes in columns. If the data is not normalized and scaled we can do so by `--normData True`. If we have trained the model starting from TPMs we should feed it with TPMs.\n\n```bash\nconda activate digitalDLSorter\npython digitalDLSorterModelDeconv.py \\\n--modelFile digitalDLSorterDemo/Demo.digitalDLSorterTrainedModel.kullback_leibler_divergence.h5 \\\n--modelGenesList digitalDLSorterDemo/Demo.digitalDLSorterTrainedModel.inputGeneList.kullback_leibler_divergence.txt.gz \\\n--modelClassNames digitalDLSorterDemo/Demo.digitalDLSorterTrainedModel.targetClassNames.kullback_leibler_divergence.txt.gz \\\n--countsFile data/TCGA.Colon.Counts.transpose.tsv.gz \\\n--batch_size 100 --num_samples 521 --normData True\\\n--outputPath digitalDLSorterDemo --prefix Demo.PredictTCGA\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cartof/digitalDLSorter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:16:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ]
}