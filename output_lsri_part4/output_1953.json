{
  "application_domain": [
    {
      "confidence": 0.9126223550548325,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brunonevado/Pipeliner"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-09-05T10:11:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-10T05:10:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Evaluating the performance of bioinformatics\u2019 pipelines for Next Generation re-Sequencing"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9039054040042676,
      "result": {
        "type": "Text_excerpt",
        "value": "README FOR PIPELINER VERSION 0.2.0 \nPipeliner is available for Linux and MacOS. \nPipeliner's command line tools:\n  1. Open Terminal and navigate to ./source/command_tools.\n  2. In Linux: Type \"g++ -Wall -g -std=c++0x -pthread -O3  *.cpp -o Pipeliner\".\n     In Mac:  Type \"clang++ -std=c++11 -stdlib=libc++ -O3 -Wall *.cpp -o Pipeliner\".\n  3. A file named Pipeliner will be created in ./source/command_tools. Type \"./Pipeliner help\"\n     to see the available commands.\n  Note: For Mac, clang++ needs to be version 4+, which is part of Xcode tools 4.2+.\n    These tools are available for free for MacOS 10.7+ from  https://developer.apple.com/technologies/tools/.\n  \nPipeliner's GUI:\n  1. Download and install QT v5.1 for your OS from http://qt-project.org/downloads.\n     QT will install an executable called qmake into the computer's PATH or installation folder.\n  2. Open Terminal, navigate to ./source/GUI, and type \"qmake PipelinerGUI.pro\". In case qmake is not \n     in the computer's PATH, use the full path to qmake instead.\n  3. Still in Terminal (same folder) type \"make\".\n  4. A file named PipelinerGUI (or PipelinerGUI.app in MacOS) will be created in folder ./source/GUI.\n     Double-clicking it or typing ./PipelinerGUI in Terminal should start the GUI.\n  Note: in Linux, openGL libraries might need to be installed with \"sudo apt-get install libglu1-mesa-dev\". \nTHIS DISTRIBUTION INCLUDES: \n"
      },
      "source": "https://raw.githubusercontent.com/brunonevado/Pipeliner/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/brunonevado/Pipeliner/wiki"
      },
      "source": "https://raw.githubusercontent.com/brunonevado/Pipeliner/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brunonevado/Pipeliner/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brunonevado/Pipeliner/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "brunonevado/Pipeliner"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/brunonevado/Pipeliner/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9481655420664388,
      "result": {
        "type": "Text_excerpt",
        "value": "README FOR PIPELINER VERSION 0.2.0 \nPREREQUISITES: \nPipeliner's consists of two executables:\n  Pipeliner's command line tools requires a C++11 compiler.\n  Pipeliner's GUI requires QT v5.1 (http://qt-project.org/). \nAVAILABLE OS: \nPipeliner is available for Linux and MacOS. \n\nINSTALLATION INSTRUCTIONS: \nPipeliner's command line tools:\n  1. Open Terminal and navigate to ./source/command_tools.\n  2. In Linux: Type \"g++ -Wall -g -std=c++0x -pthread -O3  *.cpp -o Pipeliner\".\n     In Mac:  Type \"clang++ -std=c++11 -stdlib=libc++ -O3 -Wall *.cpp -o Pipeliner\".\n  3. A file named Pipeliner will be created in ./source/command_tools. Type \"./Pipeliner help\"\n     to see the available commands.\n  Note: For Mac, clang++ needs to be version 4+, which is part of Xcode tools 4.2+.\n    These tools are available for free for MacOS 10.7+ from  https://developer.apple.com/technologies/tools/.\n  \nPipeliner's GUI:\n  1. Download and install QT v5.1 for your OS from http://qt-project.org/downloads.\n     QT will install an executable called qmake into the computer's PATH or installation folder.\n  2. Open Terminal, navigate to ./source/GUI, and type \"qmake PipelinerGUI.pro\". In case qmake is not \n     in the computer's PATH, use the full path to qmake instead.\n  3. Still in Terminal (same folder) type \"make\".\n  4. A file named PipelinerGUI (or PipelinerGUI.app in MacOS) will be created in folder ./source/GUI.\n     Double-clicking it or typing ./PipelinerGUI in Terminal should start the GUI.\n  Note: in Linux, openGL libraries might need to be installed with \"sudo apt-get install libglu1-mesa-dev\". \nTHIS DISTRIBUTION INCLUDES: \n./doc/PipeManual.pdf         => PDF manual\n./examples                   => example pdf output + user-defined steps\n./source/command_tools       => source code for Pipeliner's command line tools\n./source/GUI                 => source code for Pipeliner's GUI \n"
      },
      "source": "https://raw.githubusercontent.com/brunonevado/Pipeliner/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brunonevado/Pipeliner/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pipeliner"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "brunonevado"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 376933,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "QMake",
        "size": 965,
        "type": "Programming_language",
        "value": "QMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brunonevado/Pipeliner/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:51:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}