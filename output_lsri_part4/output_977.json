{
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at haky@uchicago.edu. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hakyimlab/MetaXcan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-02-10T18:04:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-11-02T17:43:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaXcan software and manuscript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GWAS summary statistic format",
        "parent_header": [
          "MetaXcan",
          "S-PrediXcan Input data"
        ],
        "type": "Text_excerpt",
        "value": "S-PrediXcan  supports a large number of input GWAS formats through command line arguments. By specifying the appropriate \ninput file column name, S-PrediXcan will analize the file without extra need for input conversion. Input GWAS files can be plain text files or gzip-compressed.\n\nFor example, you can specify an effect allele column and a standard error column, or a pvalue column and an odds ratio column, or only a GWAS zscore column. \nS-PrediXcan will try  to use the following (in that order) if available from the command line arguments and input GWAS file:\n \n1) use a z-score column if available from the arguments and input file;\n2) use a p-value column and either effect, odd ratio or direction column;\n3) use effect size (or odd ratio) and standard error columns if available.\n\nCheck the Github's ' wiki for those that work best for your data,\nand interpreting the results. For example, if your GWAS has p-values that are too small (i.e 1e-350),\nthen you should avoid specifying a p-value column because numerical problems might arise; you should use effect size and standard error instead.\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9941764776153946,
      "result": {
        "original_header": "MetaXcan",
        "type": "Text_excerpt",
        "value": "MetaXcan is a set of tools to integrate genomic information of biological mechanisms with complex traits.\nAlmost all of the software here is command-line based. \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9847203530801648,
      "result": {
        "original_header": "Tools",
        "type": "Text_excerpt",
        "value": "Here you can find the latest implementation of [PrediXcan]([PrediXcan](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4552594/)): **PrediXcan.py**.\nThis uses individual-level genotype and phenotype, along a mechanism's prediction model (e.g. models predicting expression or splicing quantification),\nto compute associations between omic features and a complex trait. \nS-PrediXcan is an extension that infers PrediXcan's results using only summary statistics, implemented in **SPrediXcan.py**.\nA manuscript describing S-PrediXcan and the MetaXcan framework with an application can be found  [S-PrediXcan](https://www.ncbi.nlm.nih.gov/pubmed/29739930). \n[MultiXcan](https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1007889) (**MulTiXcan.py**) and S-MultiXcan\n(**SMulTiXcan.py**) compute omic associations, integrating measurements across tissues while factoring correlation.\nFor example, if you have prediction models, each trained on different regions of the brain,\nMulTiXcan will combine the information across all experiments.\nThis is effectively a meta-analysis across tissues, where each tissue is an experiment and we explictly account for correlation. \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9764499419415296,
      "result": {
        "original_header": "Useful Data &amp; Prediction models",
        "type": "Text_excerpt",
        "value": "We make available several transcriptome predictione models and LD references [here](http://predictdb.org).\nThese files should be enough for running **SPrediXcan.py**, **MulTiXcan.py** and **SMulTiXcan.py** on practically any GWAS study.\nWe highly recommend **MASHR** models therein, as they are parsimonious and biologically-informed, using fine-mapped variants and cross-tissue QTL patterns.\nIn the following we use `gene` recurrently to refer to the prediction model of a genetic feature,\nbut it can stand for other units such as prediction of an intron's quantification. \nwe provide a end-to-end [tutorial](https://github.com/hakyimlab/MetaXcan/wiki/Tutorial:-GTEx-v8-MASH-models-integration-with-a-Coronary-Artery-Disease-GWAS), \nfor integrating GWAS summary statistics on the latest release of GTEx models.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8990117894049979,
      "result": {
        "original_header": "Project Layout",
        "type": "Text_excerpt",
        "value": "**software** folder contains an implementation of S-PrediXcan's method and associated tools. \nThe following scripts from that folder constitute different components in the MetaXcan pipeline:\n```bash\nSPrediXcan.py\nPrediXcan.py\nMulTiXcan.py\nSMulTiXcan.py\n```\n, although `SPrediXcan.py` is the most widely applicable. `SPrediXcan.py` script contains the current implementation of S-PrediXcan. \n`MulTiXcan.py` and `SMulTiXcan.py` are the multiple-tissue methods.\n`MultiXcan.py` uses as input the predicted levels generated by `PrediXcan.py`.\n \nThe rest of the scripts in **software** folder are python packaging support scripts,\nand convenience wrappers such as the GUI. \nSubfolder **software/metax** contains the bulk of Metaxcan's logic, implemented as a python module.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9548380186022399,
      "result": {
        "original_header": "S-PrediXcan Input data",
        "type": "Text_excerpt",
        "value": "S-PrediXcan will calculate the gene-level association results from GWAS summary statistics. \nIt supports most GWAS formats by accepting command line argument specifying data columns.\nSome precalculated data is needed, that must be set up prior to S-PrediXcan execution. \nThe gist of S-PrediXcan's input is:\n- A Transcriptome Prediction Model database (an example is [here](https://s3.amazonaws.com/imlab-open/Data/MetaXcan/sample_data/DGN-WB_0.5.db))\n- A file with the covariance matrices of the SNPs within each gene model (such as [this one](https://s3.amazonaws.com/imlab-open/Data/MetaXcan/sample_data/covariance.DGN-WB_0.5.txt.gz))\n- GWAS results (such as [these](https://s3.amazonaws.com/imlab-open/Data/MetaXcan/sample_data/GWAS.tar.gz), which were computed on a randomly generated phenotype). \nGWAS results can belong to a single file or be split into multiple ones (i.e. split by chromosome).\nYou can specify the necessary columns via command line arguments (i.e. which column holds snps, which holds p-values, etc) \nYou can use precalculated databases, or generate new ones with tools available in [PredictDB repository](https://github.com/hakyimlab/PredictDBPipeline).\nGTEx-based tissues and 1000 Genomes covariances precalculated data can be found [here](http://predictdb.org). \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9695854556044254,
      "result": {
        "original_header": "A remark on individual-level genotype format",
        "type": "Text_excerpt",
        "value": "Predicted levels can be output as both text files or HDF5 files.\nHDF5 files allow a more efficient computation of MultiXcan,\nas only data for a single gene/inton/whaever across all tissues can be loaded at a time. \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9927340476026335,
      "result": {
        "original_header": "S-MultiXcan",
        "type": "Text_excerpt",
        "value": "Run `SMultiXcan.py --help` to see arguments and options.\nOutput is a tab-separated text file with the following columns:\n* `gene`: a gene's id: as listed in the Tissue Transcriptome model.\nEnsemble Id for most gene model releases. Can also be a intron's id for splicing model releases.\n* `gene_name`: gene name as listed by the Transcriptome Model, typically HUGO for a gene. It can also be an intron's id.\n* `pvalue`: significance p-value of S-MultiXcan association\n* `n`: number of \"tissues\" available for this gene\n* `n_indep`: number of independent components of variation kept among the tissues' predictions. (Synthetic independent tissues)\n* `p_i_best`: best p-value of single-tissue S-PrediXcan association.\n* `t_i_best`: name of best single-tissue S-PrediXcan association.\n* `p_i_worst`: worst p-value of single-tissue S-PrediXcan association.\n* `t_i_worst`: name of worst single-tissue S-PrediXcan association.\n* `eigen_max`: In the SVD decomposition of predicted expression correlation: eigenvalue (variance explained) of the top independent component\n* `eigen_min`: In the SVD decomposition of predicted expression correlation: eigenvalue (variance explained) of the last independent component\n* `eigen_min_kept`: In the SVD decomposition of predicted expression correlation: eigenvalue (variance explained) of the smalles independent component that was kept.\n* `z_min`: minimum z-score among single-tissue S-Predican associations.\n* `z_max`: maximum z-score among single-tissue S-Predican associations.\n* `z_mean`: mean z-score among single-tissue S-Predican associations.\n* `z_sd`: standard deviation of the mean z-score among single-tissue S-Predican associations.\n* `tmi`: trace of `T * T'`, \nwhere `T`is correlation of predicted expression levels for different tissues \nmultiplied by its SVD pseudo-inverse. \nIt is an estimate for number of indepent components of variation in predicted expresison across tissues (typically close to `n_indep`)\n* `status`: If there was any error in the computation, it is stated here \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/hakyimlab/MetaXcan/wiki/MetaXcan's-Command-Line-Reference"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/hakyimlab/MetaXcan/wiki"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hakyimlab/MetaXcan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 92
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hakyimlab/MetaXcan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hakyimlab/MetaXcan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaXcan"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/software/build_minimal_example_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/software/build_minimal_data_requirements.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example conda environment setup",
        "parent_header": [
          "MetaXcan"
        ],
        "type": "Text_excerpt",
        "value": "A quick-and-dirty solution to install the basic requirements is using [Miniconda](https://www.anaconda.com/open-source) and the file [`software/conda_env.yaml`](https://github.com/hakyimlab/MetaXcan/blob/master/software/conda_env.yaml)\nin this repository to create a working environment.\n\n```bash\nconda env create -f /path/to/this/repo/software/conda_env.yaml\nconda activate imlabtools\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup and Usage Example on a UNIX-like operating system",
        "parent_header": [
          "MetaXcan"
        ],
        "type": "Text_excerpt",
        "value": "The following example assumes that you have **python 3.5** (or higher), **numpy**, and **scipy** installed.\n\n1) Clone this repository.\n```bash\n$ git clone https://github.com/hakyimlab/MetaXcan\n```\n\n2) Go to the software folder.\n```bash\n$ cd MetaXcan/software\n```\n\n3) Download example [data](https://uchicago.box.com/s/us7qhue3juubq66tktpogeansahxszg9).\n\nThis may take a few minutes depending on your connection: it has to download approximately 200Mb worth of data.\nDownloaded data will include an appropiate **Transcriptome Model Database**, a **GWAS/Meta Analysis summary statistics**, and **SNP covariance matrices**.\n\nExtract it with:\n```bash\ntar -xzvpf sample_data.tar.gz\n```\n\n4) Run the High-Level S-PrediXcan Script\n```bash\n./SPrediXcan.py \\\n--model_db_path data/DGN-WB_0.5.db \\\n--covariance data/covariance.DGN-WB_0.5.txt.gz \\\n--gwas_folder data/GWAS \\\n--gwas_file_pattern \".*gz\" \\\n--snp_column SNP \\\n--effect_allele_column A1 \\\n--non_effect_allele_column A2 \\\n--beta_column BETA \\\n--pvalue_column P \\\n--output_file results/test.csv\n```\nThis should take less than a minute on a 3GHZ computer. For the full specification of command line parameters, you can check the [wiki](https://github.com/hakyimlab/MetaXcan/wiki/MetaXcan's-Command-Line-Reference).\n\n\nThe example command parameters mean:\n\n* `--model_db_path` Path to tissue transriptome model\n* `--covariance` Path to file containing covariance information. This covariance should have information related to the tissue transcriptome model.\n* `--gwas_folder` Folder containing GWAS summary statistics data.\n* `--gwas_file_pattern` This option allows the program to select which files from the input to use based on their name.\n...This allows to ignore several support files that might be generated at your GWAS analysis, such as plink logs.\n* `--snp_column` Argument with the name of the column containing the RSIDs.\n* `--effect_allele_column` Argument with the name of the column containing the effect allele (i.e. the one being regressed on).\n* `--non_effect_allele_column` Argument with the name of the column containing the non effect allele.\n* `--beta_column` Tells the program the name of a column containing -phenotype beta data for each SNP- in the input GWAS files.\n* `--pvalue_column` Tells the program the name of a column containing -PValue for each SNP- in the input GWAS files.\n* `--output_file` Path where results will be saved to.\n\nIts output is a CSV file that looks like:\n\n```\ngene,gene_name,zscore,effect_size,pvalue,var_g,pred_perf_r2,pred_perf_pval,pred_perf_qval,n_snps_used,n_snps_in_cov,n_snps_in_model\nENSG00000150938,CRIM1,4.190697619877402,0.7381499095142079,2.7809807629839122e-05,0.09833448081630237,0.13320775358,1.97496173512e-30,7.47907447189e-30,37,37,37\n...\n```\nWhere each row is a gene's association result:\n* `gene`: a gene's id: as listed in the Tissue Transcriptome model.\nEnsemble Id for most gene model releases. Can also be a intron's id for splicing model releases.\n* `gene_name`: gene name as listed by the Transcriptome Model, typically HUGO for a gene. It can also be an intron's id.\n* `zscore`: S-PrediXcan's association result for the gene, typically HUGO for a gene.\n* `effect_size`: S-PrediXcan's association effect size for the gene. Can only be computed when `beta` from the GWAS is used.\n* `pvalue`: P-value of the aforementioned statistic.\n* `pred_perf_r2`: (cross-validated) R2 of tissue model's correlation to gene's measured transcriptome (prediction performance). Not all model families have this (e.g. MASHR).\n* `pred_perf_pval`: pval of tissue model's correlation to gene's measured transcriptome (prediction performance). Not all model families have this (e.g. MASHR).\n* `pred_perf_qval`: qval of tissue model's correlation to gene's measured transcriptome (prediction performance). Not all model families have this (e.g. MASHR).\n* `n_snps_used`: number of snps from GWAS that got used in S-PrediXcan analysis\n* `n_snps_in_cov`: number of snps in the covariance matrix\n* `n_snps_in_model`: number of snps in the model\n* `var_g`: variance of the gene expression, calculated as `W' * G * W`\n(where `W` is the vector of SNP weights in a gene's model,\n`W'` is its transpose, and `G` is the covariance matrix)\n\nIf `--additional_output` is used when running S-PrediXcan, you'll get two additional columns:\n* `best_gwas_p`: the highest p-value from GWAS snps used in this model\n* `largest_weight`: the largest (absolute value) weight in this model\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "MetaXcan"
        ],
        "type": "Text_excerpt",
        "value": "You also have the option of installing the MetaXcan package to your python distribution.\nThis will make the **metax** library available for development, and install on your system path\nthe main MetaXcan scripts.\n\nYou can install it from the **software** folder with:\n\n```bash\n# ordinary install\n$ python setup.py install\n```\n\nAlternatively, if you are going to modify the sources, the following may be more convenient:\n\n```bash\n# developer mode instalation\npython setup.py develop\n```\n\nPIP support coming soon-ish.\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9075779884062657,
      "result": {
        "original_header": "S-PrediXcan on windows",
        "type": "Text_excerpt",
        "value": "Please see the following [article](https://github.com/hakyimlab/MetaXcan/wiki/MetaXcan-on-Windows) in the wiki.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8036406011358069,
      "result": {
        "original_header": "A remark on individual-level genotype format",
        "type": "Text_excerpt",
        "value": "Associations are output as a tab-separated file. \n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hakyimlab/MetaXcan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2015 hakyimlab\nSoftware mostly written by heroico\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaXcan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "hakyimlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 531805,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 866,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 124,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://patsy.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hakyim",
          "type": "User"
        },
        "date_created": "2018-08-22T17:38:06Z",
        "date_published": "2018-08-29T15:34:41Z",
        "description": "first release for zenodo",
        "html_url": "https://github.com/hakyimlab/MetaXcan/releases/tag/v0.6.5",
        "name": "release for zenodo",
        "release_id": 12635911,
        "tag": "v0.6.5",
        "tarball_url": "https://api.github.com/repos/hakyimlab/MetaXcan/tarball/v0.6.5",
        "type": "Release",
        "url": "https://api.github.com/repos/hakyimlab/MetaXcan/releases/12635911",
        "value": "https://api.github.com/repos/hakyimlab/MetaXcan/releases/12635911",
        "zipball_url": "https://api.github.com/repos/hakyimlab/MetaXcan/zipball/v0.6.5"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "MetaXcan"
        ],
        "type": "Text_excerpt",
        "value": "The software is developed and tested in Linux and Mac OS environments. The main S-PrediXcan script is also supported in Windows.\n\nTo run S-PrediXcan, you need  [Python 3.5](https://www.python.org/) or higher, with the following libraries:\n* [numpy (>=1.11.1)](http://www.numpy.org/)\n* [scipy (>=0.18.1)](http://www.scipy.org/) \n* [pandas (>=0.18.1)](http://pandas.pydata.org/)\n* [sqlalchemy](https://www.sqlalchemy.org/) is needed at some unit tests.\n\nTo run PrediXcan Associations and MulTiXcan, you also need:\n* [patsy (>=0.5.0)](https://patsy.readthedocs.io/en/latest/)\n* [statsmodels (>=0.8.0)](https://www.statsmodels.org/stable/index.html)\n* [h5py (>=2.7.1)](https://github.com/h5py/h5py)\n* [h5py-cache (>=1.0.0)](https://pypi.python.org/pypi/h5py-cache/1.0) *Now folded into h5py\n\nTo run prediction of biological mechanisms on individual-level data, you will also need:\n* [bgen_reader (>=3.0.3)](https://pypi.org/project/bgen-reader/)\n* [cyvcf2 (>=0.8.0)](https://brentp.github.io/cyvcf2)\n\n[R](https://www.r-project.org/) with [ggplot](http://ggplot2.org/) and [dplyr](https://cran.r-project.org/web/packages/dplyr/index.html) \nis needed for some optional statistics and charts.\n\nWe recommend a tool like [Conda](https://www.anaconda.com/distribution/) to set up a working environment for MetaXcan.\nTools like [pyenv](https://github.com/pyenv/pyenv) also work, but the **bgen-reader** dependency currently takes some effort to get going on **pyenv**.\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:29:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 144
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support &amp; Community",
        "parent_header": [
          "MetaXcan"
        ],
        "type": "Text_excerpt",
        "value": "Issues and questions can be raised at this repository's issue tracker.\n\nThere is also a [Google Group](https://groups.google.com/forum/?hl=en#!forum/predixcanmetaxcan) mail list for general discussion, feature requests, etc. \nJoin if you want to be notified of new releases, feature sets and important news concerning this software.\n\nYou can check [here](https://github.com/hakyimlab/MetaXcan/wiki) for the release history.\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Cautionary Warning to Existing Users on Updates and Transcriptome Models",
        "parent_header": [
          "MetaXcan",
          "Support &amp; Community"
        ],
        "type": "Text_excerpt",
        "value": "Transcriptome Models are a key component of PrediXcan and S-PrediXcan input. As models are improved,\nsometimes the format of these databases needs be changed too. We only provide support for the very latest databases;\nif a user updates their repository clone to the latest version and MetaXcan complains about the transcriptome weight dbs,\nplease check if new databases [have been published here](http://predictdb.org).\n\nFor the time being, the only way to use old transcriptome models is to use older versions of MetaXcan.\n\nOlder versions of MetaXcan have a **MetaXcan.py** script, when it meant to be an entry point to all MetaXcan tools, but it has since been renamed **SPrediXcan.py**.\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example conda environment setup",
        "parent_header": [
          "MetaXcan"
        ],
        "type": "Text_excerpt",
        "value": "A quick-and-dirty solution to install the basic requirements is using [Miniconda](https://www.anaconda.com/open-source) and the file [`software/conda_env.yaml`](https://github.com/hakyimlab/MetaXcan/blob/master/software/conda_env.yaml)\nin this repository to create a working environment.\n\n```bash\nconda env create -f /path/to/this/repo/software/conda_env.yaml\nconda activate imlabtools\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup and Usage Example on a UNIX-like operating system",
        "parent_header": [
          "MetaXcan"
        ],
        "type": "Text_excerpt",
        "value": "The following example assumes that you have **python 3.5** (or higher), **numpy**, and **scipy** installed.\n\n1) Clone this repository.\n```bash\n$ git clone https://github.com/hakyimlab/MetaXcan\n```\n\n2) Go to the software folder.\n```bash\n$ cd MetaXcan/software\n```\n\n3) Download example [data](https://uchicago.box.com/s/us7qhue3juubq66tktpogeansahxszg9).\n\nThis may take a few minutes depending on your connection: it has to download approximately 200Mb worth of data.\nDownloaded data will include an appropiate **Transcriptome Model Database**, a **GWAS/Meta Analysis summary statistics**, and **SNP covariance matrices**.\n\nExtract it with:\n```bash\ntar -xzvpf sample_data.tar.gz\n```\n\n4) Run the High-Level S-PrediXcan Script\n```bash\n./SPrediXcan.py \\\n--model_db_path data/DGN-WB_0.5.db \\\n--covariance data/covariance.DGN-WB_0.5.txt.gz \\\n--gwas_folder data/GWAS \\\n--gwas_file_pattern \".*gz\" \\\n--snp_column SNP \\\n--effect_allele_column A1 \\\n--non_effect_allele_column A2 \\\n--beta_column BETA \\\n--pvalue_column P \\\n--output_file results/test.csv\n```\nThis should take less than a minute on a 3GHZ computer. For the full specification of command line parameters, you can check the [wiki](https://github.com/hakyimlab/MetaXcan/wiki/MetaXcan's-Command-Line-Reference).\n\n\nThe example command parameters mean:\n\n* `--model_db_path` Path to tissue transriptome model\n* `--covariance` Path to file containing covariance information. This covariance should have information related to the tissue transcriptome model.\n* `--gwas_folder` Folder containing GWAS summary statistics data.\n* `--gwas_file_pattern` This option allows the program to select which files from the input to use based on their name.\n...This allows to ignore several support files that might be generated at your GWAS analysis, such as plink logs.\n* `--snp_column` Argument with the name of the column containing the RSIDs.\n* `--effect_allele_column` Argument with the name of the column containing the effect allele (i.e. the one being regressed on).\n* `--non_effect_allele_column` Argument with the name of the column containing the non effect allele.\n* `--beta_column` Tells the program the name of a column containing -phenotype beta data for each SNP- in the input GWAS files.\n* `--pvalue_column` Tells the program the name of a column containing -PValue for each SNP- in the input GWAS files.\n* `--output_file` Path where results will be saved to.\n\nIts output is a CSV file that looks like:\n\n```\ngene,gene_name,zscore,effect_size,pvalue,var_g,pred_perf_r2,pred_perf_pval,pred_perf_qval,n_snps_used,n_snps_in_cov,n_snps_in_model\nENSG00000150938,CRIM1,4.190697619877402,0.7381499095142079,2.7809807629839122e-05,0.09833448081630237,0.13320775358,1.97496173512e-30,7.47907447189e-30,37,37,37\n...\n```\nWhere each row is a gene's association result:\n* `gene`: a gene's id: as listed in the Tissue Transcriptome model.\nEnsemble Id for most gene model releases. Can also be a intron's id for splicing model releases.\n* `gene_name`: gene name as listed by the Transcriptome Model, typically HUGO for a gene. It can also be an intron's id.\n* `zscore`: S-PrediXcan's association result for the gene, typically HUGO for a gene.\n* `effect_size`: S-PrediXcan's association effect size for the gene. Can only be computed when `beta` from the GWAS is used.\n* `pvalue`: P-value of the aforementioned statistic.\n* `pred_perf_r2`: (cross-validated) R2 of tissue model's correlation to gene's measured transcriptome (prediction performance). Not all model families have this (e.g. MASHR).\n* `pred_perf_pval`: pval of tissue model's correlation to gene's measured transcriptome (prediction performance). Not all model families have this (e.g. MASHR).\n* `pred_perf_qval`: qval of tissue model's correlation to gene's measured transcriptome (prediction performance). Not all model families have this (e.g. MASHR).\n* `n_snps_used`: number of snps from GWAS that got used in S-PrediXcan analysis\n* `n_snps_in_cov`: number of snps in the covariance matrix\n* `n_snps_in_model`: number of snps in the model\n* `var_g`: variance of the gene expression, calculated as `W' * G * W`\n(where `W` is the vector of SNP weights in a gene's model,\n`W'` is its transpose, and `G` is the covariance matrix)\n\nIf `--additional_output` is used when running S-PrediXcan, you'll get two additional columns:\n* `best_gwas_p`: the highest p-value from GWAS snps used in this model\n* `largest_weight`: the largest (absolute value) weight in this model\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Where to go from here",
        "parent_header": [
          "MetaXcan"
        ],
        "type": "Text_excerpt",
        "value": "Check [software](https://github.com/hakyimlab/MetaXcan/tree/master/software) folder in this repository if you want to learn\nabout more general or advanced usages of S-PrediXcan, or MulTiXcan and SMulTiXcan.\n\nCheck out the [Wiki](https://github.com/hakyimlab/MetaXcan/wiki) for exhaustive usage information.\n\nThe code lies at\n```bash\n/software\n```\n\nNew release and features coming soon!\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/hakyimlab/MetaXcan/master/README.md",
      "technique": "header_analysis"
    }
  ]
}