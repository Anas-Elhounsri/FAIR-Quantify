{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ksanao/TGNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2011-06-15T21:50:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-08-04T23:46:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Transcript to Genome Consistency Network"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9339996054399125,
      "result": {
        "type": "Text_excerpt",
        "value": "h1. Visualization and quality assessment of _de novo_ genome assemblies \nThis software is fully described in the paper:\n\"**Riba-Grognuz, Keller, Falquet, Xenarios & Wurm (2011) Visualization and quality assessment of _de novo_ genome assemblies.**\":http://dx.doi.org/10.1093/bioinformatics/BTR569 \nIn brief, our scripts create Cytoscape files to visualize transcript evidence that suggests adjacency between scaffolds and contigs.  \n**Input**  : assembly fasta (1), transcript fasta (2), AGP scaffolding file (3), blat alignment (instead fasta) (4)\n      *# requires scaffolded contig fasta to proceed on contig level (@-c@ flag)\n         requires scaffold (and unscaffolded contig) fasta to proceed on scaffold level\n      *# fasta with transcript sequences obtained independently from genomic assembly\n      *# requires scaffolding information in \"AGP\":http://www.ncbi.nlm.nih.gov/projects/genome/assembly/agp/AGP_Specification.shtml file\n      *# blat alignment in psl format instead of fasta (transcripts to genome assembly) \n**Output** : tab delimited files with nodes, edges and properties and summary of blat alignments\n      *# On contig level (@-c@ flag)\n          out.contig.nw - defines nodes, edges and edge attributes\n          out.contig.attr - defines node attributes\n          out.contig.blat.stat - statistics of blat alignments\n      *# On scaffold level (default)\n          out.scaffold.nw - defines nodes, edges and edge attributes\n          out.scaffold.attr - defines node attributes\n          out.withinOneScaffold - self loop nodes\n          out.scaffold.blat.stat - statistics of blat alignments \n**Options**\n@-a@ file specifying scaffolding way in agp format\n@-c@ flag to build network on contig level (required if contig.fasta is submitted)\n@-g@ fasta file with scaffolded genome contigs (requires -c flag) or\n\tfasta file with genomic scaffolds (can include unscaffolded contigs)\n@-h@ print help\n@-k@ flag to keep blat alignment files\n\tdefault: do not keep\n@-l@ match length (bp, minimum transcript match length for blat output filterting)\n\tdefault=200 \n@-n@ network.name (string to be used for out files)\n\tdefault=out\n@-o@ overlap (bp, maximum overlap of split transcript alignments)\n\tdefault=50 \n@-p@ transcript to genome alignment file in psl format (can be submitted instead fasta files)\n@-q@ flag to keep folder with temporary files\n@-i@ intron size threshold (bp)\n\tdefault=20000 \n@-s@ maximum allowed size difference between a gap and a sequence to fill in the gap (bp, required only for scaffold level) \n\tdefault=4000 \n@-t@ fasta file with transcript sequences\n@-w@ mismatch (floating, percentage of allowed mismatch bases)\n\tdefault=0.05 \nThe @example/input@ directory contains some sequence (FASTA) and scaffolding (AGP) data required to generate the equivalent of Figure 1 from _Riba-Grognuz et al_. These input files are subset from the \"fire ant genome project (Wurm et al 2011)\":http://www.pnas.org/cgi/doi/10.1073/pnas.1009690108 . These files can be processed as follows: \nh2. Example of Cytoscape session \nNetwork can be interpreted based on topology and visual properties. In many cases topology highlights potential regions for improvements and potential problematic regions. In contig example one of the contigs has three alternative paths: 2 suggested by scaffolding and an extra one suggested by transcript alignment. This is an illustration of potentially problematic case. In scaffold example the same problematic case is not visible from topology, and therefore the inconsistency between scaffolding and transcript mapping information is shown with zigzag connection. In contig example double (full-line and vertical slash) connections between nodes indicate consistent scaffolding. In scaffold example small nodes linked to bigger ones with triangular arrohead lines indicate potential improvement cases. \n* **Contig-level Visual Style Description**\n** nodes represent scaffolded contigs, \n** node sizes are proportional to contig lengths,\n** line widths are proportional to transcript lengths,\n** vertical dashes indicate contig adjacency according to scaffolding information,\n** full lines connect nodes with common aligned transcripts,\n** zigzag lines indicate inconsistency between scaffolding and transcript mapping information,\n** triangle arrowheads show contig order within a scaffold,\n** line colors indicate mapping strands: magenta - plus/plus, cyan - minus/minus, violet - opposite strands. \n* **Scaffold-level Visual Style Description**\n** nodes represent scaffolds (white with gray border) and un-scaffolded contigs (gray),\n** node sizes are proportional to contig and scaffold lengths,\n** line widths are proportional to transcript lengths,\n** full lines connect nodes with common aligned transcripts,\n** zigzag lines indicate inconsistency between scaffolding and transcript mapping information,\n** arrowheads indicate merge (circle) and join cases (triangle, show order of adjacent scaffolds),\n** line colors indicate mapping strands: magenta - plus/plus, cyan - minus/minus, violet - opposite strands. \n* **How can I get an AGP file?**\nSome assemblers generate AGP files, for example, newbler generates a file called 454Scaffolds.txt, which is an \"AGP-format\":http://www.ncbi.nlm.nih.gov/projects/genome/assembly/agp/AGP_Specification.shtml file with scaffolding information. Other assemblers, like SOAPdenovo, do not produce an \"AGP\":http://www.ncbi.nlm.nih.gov/projects/genome/assembly/agp/AGP_Specification.shtml file. In this case it is possible to create one based on scaffold sequences: the contiguous sequences separated by gaps should then be defined as contigs and the respective contig and gap coordinates in each scaffold should be specified according to \"AGP-format\":http://www.ncbi.nlm.nih.gov/projects/genome/assembly/agp/AGP_Specification.shtml. \n* **I do not have an AGP file. Can I assess the quality of my assembly?**\nIn the absence of AGP file unscaffolded contigs and scaffolds can be processed on scaffold level. All merge cases will be defined as inconsistent in the absence of scaffolding information. Processing on contig-level requires contig fasta and AGP file, both can be generated if scaffold fasta is available. \n* **My node sizes are not scaled according to respective sequence lengths**\nCheck if the maximum and minimum values for node size scaling cover your data (in Vizual properties menu click on node size, then on graph, then on button \"Min/Max\" and adjust values). If this does not help, check whether the lengths of genomic sequences were improted as integer values. \n* **Why visual style is not applied?**\nCheck whether you have selected a style called TGNet from VizMapper menu. Make sure that during import of network and attribute files the first row was transferred as column headers (check-box Transfer first line as attribute names). \n"
      },
      "source": "https://raw.githubusercontent.com/ksanao/TGNet/master/README.textile",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ksanao/TGNet/wiki"
      },
      "source": "https://raw.githubusercontent.com/ksanao/TGNet/master/README.textile",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ksanao/TGNet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ksanao/TGNet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ksanao/TGNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/ksanao/TGNet/master/README.textile",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksanao/TGNet/master/makeCytoscapeNetwork.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksanao/TGNet/master/scripts/processOnScaffoldLevel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksanao/TGNet/master/scripts/processOnContigLevel.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9195456060125459,
      "result": {
        "type": "Text_excerpt",
        "value": "h2. Software requirements\n* \"BLAT\":http://genome.cshlp.org/content/12/4/656.short (tested with Standalone BLAT v. 32x1). \"Source\":http://users.soe.ucsc.edu/~kent/src/ \"Binaries\":http://hgdownload.cse.ucsc.edu/admin/exe/ .\n* \"Cytoscape\":http://www.cytoscape.org/ (tested with versions 2.7.0, 2.8.2)\n* a UNIX machine (tested on Mac OS X 10.6 and CentOS 4.6) \n**Input**  : assembly fasta (1), transcript fasta (2), AGP scaffolding file (3), blat alignment (instead fasta) (4)\n      *# requires scaffolded contig fasta to proceed on contig level (@-c@ flag)\n         requires scaffold (and unscaffolded contig) fasta to proceed on scaffold level\n      *# fasta with transcript sequences obtained independently from genomic assembly\n      *# requires scaffolding information in \"AGP\":http://www.ncbi.nlm.nih.gov/projects/genome/assembly/agp/AGP_Specification.shtml file\n      *# blat alignment in psl format instead of fasta (transcripts to genome assembly) \n**Processing On Scaffold Level**\n@makeCytoscapeNetwork.sh -g genome.fasta -t transcript.fasta -a file.agp [-klinoqsw]@\n@makeCytoscapeNetwork.sh -p blat.alignment.psl -a file.agp [-klinoqsw]@ \n**Processing On Contig Level**\n @makeCytoscapeNetwork.sh -g genome.fasta -t transcript.fasta -a file.agp -c [-klinoqsw]@\n @makeCytoscapeNetwork.sh -p blat.alignment.psl -a file.agp -c [-klinoqsw]@ \nUse @makeCytoscapeNetwork.sh -h@ for option description \nIf all works fine you should get the following session (files below can by opened with Cytoscape)   \n      @example/cytoscape/Example.scaffold.cys@\n      @example/cytoscape/Example.contig.cys@ \n"
      },
      "source": "https://raw.githubusercontent.com/ksanao/TGNet/master/README.textile",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.900331630384121,
      "result": {
        "type": "Text_excerpt",
        "value": "h2. Example data \n  *  **On scaffold level**:\n        @./makeCytoscapeNetwork.sh -g example/input/ExampleScaffold.fasta -t example/input/ExampleTranscript.fasta -a example/input/Example.agp -n Example@\n        or\n        @./makeCytoscapeNetwork.sh -p example/input/ExampleScaffold.psl -a example/input/Example.agp -n Example@\n  *  **On contig level**:\n        @./makeCytoscapeNetwork.sh -c -g example/input/ExampleContig.fasta -t example/input/ExampleTranscript.fasta -a example/input/Example.agp -n Example@\n        or\n        @./makeCytoscapeNetwork.sh -c -p example/input/ExampleContig.psl -a example/input/Example.agp -n Example@ \n* **Importing network**\n    ** From cytoscape menu select File, then Import and choose Network from Table option in drop-down menu\n    ** Select file example/output/Example.scaffold.nw or example/output/Example.contig.nw\n    ** Specify columns 1,2,3 as target,interaction,source respectfully, select all other columns\n    ** Tick a check-box Show Text File Import Options\n    ** Tick a check-box Transfer first line as attribute names\n    ** Import\n*  **Importing node attributes**\n    ** From cytoscape menu select File, then Import and choose Attribute from Table option in drop-down menu\n    ** Select file example/output/Example.scaffold.attr or example/output/Example.contig.attr\n    ** Tick a check-box Show Text File Import Options\n    ** Tick a check-box Transfer first line as attribute names\n    ** Import\n* **Importing visual style**\n    ** From cytoscape menu select File, then Import and choose Vizmap Property File\n    ** Import a pre-built file @styles/TGNet.props@\n    ** From VizMapper menu select a style called TGNet\n* **Network Layout**\n    ** From cytoscape menu select Layout, then Cytoscape Layouts, then choose Force-Directed Layout, unweighted\n* **Saving Cytoscape Session**\n    ** From cytoscape menu select File, then Save \n"
      },
      "source": "https://raw.githubusercontent.com/ksanao/TGNet/master/README.textile",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ksanao/TGNet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TGNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ksanao"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 26956,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 13953,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksanao/TGNet/master/README.textile"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:01:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ]
}