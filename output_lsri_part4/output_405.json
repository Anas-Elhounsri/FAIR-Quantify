{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE"
        ],
        "type": "Text_excerpt",
        "value": "[Zhang XO, Gingeras TR, Weng Z#. Genome-wide analysis of polymerase III-transcribed Alu elements suggests cell type-specific enhancer function. *Genome Res*. 2019, 29:1402-1414](https://genome.cshlp.org/content/29/9/1402.abstract)\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kepbod/rampage_alu"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-27T17:53:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-23T05:23:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kepbod/rampage_alu/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kepbod/rampage_alu/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kepbod/rampage_alu"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pipeline to identify expressed Alu elements using RAMPAGE"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/workflow.jpg"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kepbod/rampage_alu/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018-2019 Xiao-Ou Zhang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE"
        ],
        "type": "Text_excerpt",
        "value": "Copyright (C) 2018-2019 Xiao-Ou Zhang. See the [LICENSE](https://github.com/kepbod/rampage_alu/blob/master/LICENSE) file for license rights and limitations (MIT).\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rampage_alu"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kepbod"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 20567,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pysam.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://joblib.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Softwares",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "* [F-seq](http://fureylab.web.unc.edu/software/fseq/)\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python libraries",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "* [docopt](http://docopt.org/)\n* [seqlib](https://github.com/kepbod/seqlib)\n* [pysam](https://pysam.readthedocs.io/en/latest/index.html)\n* [pybedtools](https://daler.github.io/pybedtools/)\n* [numpy](http://www.numpy.org/)\n* [joblib](https://joblib.readthedocs.io/en/latest/)\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "description",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:10:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "A schematic flow shows the pipeline",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE"
        ],
        "type": "Text_excerpt",
        "value": "![workflow](https://github.com/kepbod/rampage_alu/blob/master/workflow.jpg)\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1:",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Fetch proper read pairs and remove PCR dunplicates.\n\n```\nUsage: rm_pcr.py [options] <rampage>...\n\nOptions:\n    -h --help                      Show help message.\n    --version                      Show version.\n    -p THREAD --thread=THREAD      Threads. [default: 5]\n    -o OUTPUT --output=OUTPUT      Output directory. [default: rampage_peak]\n    --min=MIN                      Minimum read counts. [default: 1]\n```\n\n* Inputs: BAM files of RAMPAGE (`<rampage>...`)\n* Output: A output folder containing relevant files (`-o OUTPUT`)\n    * `rampage_plus_5end.bed`: BED file of the 5' end of plus strand read pairs\n    * `rampage_plus_3read.bed`: BED file of the 3' end of plus strand read pairs\n    * `rampage_minus_5end.bed`: BED file of the 5' end of minus strand read pairs\n    * `rampage_minus_3read.bed`: BED file of the 3' end of minus strand read pairs\n    * `rampage_link.bed`: BED file linking the 5' and 3' ends of read pairs\n\nNote:\n1. If there are multiple RAMPAGE BAM files (different replicates) derived from the same samples, you could simply list them afterwards.\n2. You could run with multiple threads using `-p THREAD`.\n3. You could set the minimum read filter for read pairs using `--min=MIN`.\n\nExample: \n\n```\nrm_pcr.py -o rampage_peak rampage_rep1.bam rampage_rep2.bam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2:",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Call peaks using 5' end of RAMPAGE read pairs\n\n```\nUsage: call_peak.py [options] <rampagedir>\n\nOptions:\n    -h --help                      Show help message.\n    -v --version                   Show version.\n    -l LENGTH                      Feature length for F-seq. [default: 30]\n    --wig                          Create Wig files.\n    -p PERCENT                     Retained percent of reads in resized peaks.\n                                   [default: 0.95]\n```\n\n* Input: the output folder created by `rm_pcr.py`\n* Output: `rampage_peaks.txt` under the input folder\n\nFormat of `rampage_peaks.txt`:\n\n| Field       | Description                   |\n| :---------: | :---------------------------- |\n| Chrom       | Chromosome                    |\n| Start       | Start of peak region          |\n| End         | End of peak region            |\n| Name        | peak                          |\n| Score       | 0                             |\n| Strand      | Strand of peak                |\n| Peak        | peak site                     |\n| Height      | Height of peak site           |\n| Peak reads  | Reads of (peak site \u00b1 2 bp)   |\n| Total       | Total reads of peak region    |\n| Start_Fseq  | Start of F-seq peak region    |\n| End_Fseq    | End of F-seq peak region      |\n| RPM         | RPM of peak region            |\n\nNote:\n\n1. You could set feature length for F-seq peak calling using `-l LENGTH`.\n2. You could create wig files by setting `--wig`.\n3. You could run with multiple threads using `-p THREAD`.\n\nExample: \n\n```\ncall_peak.py rampage_peak\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3:",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Calculate entropy for RAMPAGE peaks\n\n```\nUsage: entropy.py [options] <rampagedir>\n\nOptions:\n    -h --help                      Show help message.\n    --version                      Show version.\n    -p THREAD --thread=THREAD      Threads. [default: 5]\n```\n\n* Input: the output folder created by `rm_pcr.py`\n* Output: `rampage_entropy.txt` under the input folder\n\nFormat of `rampage_entropy.txt`:\n\nThe first thirteen columns of `rampage_entropy.txt` are the same as `rampage_peaks.txt`.\n\nThe additional two columns are listed below:\n\n| Field       | Description                   |\n| :---------: | :---------------------------- |\n| Entropy     | Entropy of RAMPAGE peak       |\n| 3' end      | 3' end of read pairs in peak  |\n\nNote:\n\n1. You could run with multiple threads using `-p THREAD`.\n\nExample: \n\n```\nentropy.py rampage_peak\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 4:",
        "parent_header": [
          "Pipeline to identify expressed Alu elements using RAMPAGE",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Annotate expressed Alu elements\n\n```\nUsage: annotate_alu.py [options] -f ref (-a alu | -r rep) <rampagedir>\n\nOptions:\n    -h --help                      Show help message.\n    --version                      Show version.\n    -f ref                         Gene annotations.\n    -t type                        File type of gene annotations.\n                                   [default: ref]\n    --promoter region              Promoter region. [default: 250]\n    -a alu                         Alu annotations (BED format).\n    -r rep                         Repeatmasker annotations (RMSK format).\n    --extend length                Alu extended length. [default: 50]\n    --entropy entropy              Entropy cutoff. [default: 2.5]\n    --span span                    Span cutoff. [default: 1000]\n    --coverage coverage            Coverage cutoff. [default: 0.5]\n    -o out                         Output file. [default: alu_peak.txt]\n```\n\n* Input: \n    * gene annotation file (`-f ref`)\n    * Alu annotation file (`-a alu` or `-r rep`)\n    * the output folder created by `rm_pcr.py`\n* Output: expressed Alu file (`-o out`) \n\nFormat of expressed Alu file:\n\nThe first fifteen columns are the same as `rampage_entropy.txt`.\n\nThe additional six columns are listed below:\n\n| Field       | Description                   |\n| :---------: | :---------------------------- |\n| Chrom       | Chromosome of Alu             |\n| Start       | Start of Alu                  |\n| End         | End of Alu                    |\n| Name        | Name of Alu                   |\n| Score       | 0                             |\n| Strand      | Strand of Alu                 |\n\nNote:\n\n1. The the default format of gene annotation file is [Gene Predictions and RefSeq Genes with Gene Names](https://genome.ucsc.edu/FAQ/FAQformat.html#format9) format. You could use gene annotation file in BED format by setting `-t bed`.\n2. If using Repeatmask annotation file, you could download them from UCSC.\n3. You could set the promoter region length using `--promoter region`.\n4. You could set the Alu annotation extension length using `--extend length`.\n5. You could set entropy cutoff using `--entropy entropy`.\n6. You could set RAMPAGE effective length cutoff using `--span span`.\n7. You could set Alu coverage cutoff using `--coverage coverage`.\n\nExample: \n\n```\nannotate_alu.py -f ref.txt -a alu.bed -o alu_peak.txt rampage_peak\n```"
      },
      "source": "https://raw.githubusercontent.com/kepbod/rampage_alu/master/README.md",
      "technique": "header_analysis"
    }
  ]
}