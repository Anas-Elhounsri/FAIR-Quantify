{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/compomics/ThermoRawFileParser"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-03-21T13:40:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-30T07:17:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Thermo RAW file parser that runs on Linux/Mac and all other platforms that support Mono"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9585346076965584,
      "result": {
        "original_header": "ThermoRawFileParser",
        "type": "Text_excerpt",
        "value": "Wrapper around the .net (C#) ThermoFisher ThermoRawFileReader library for running on Linux with mono (works on Windows too). It takes a thermo RAW file as input and outputs a metadata file and the spectra in 3 possible formats:\n* MGF\n* mzML and indexed mzML\n* Apache Parquet: under development \nAs of version 1.2.0, 2 subcommands are available (shoutout to the [eubic 2020 developers meeting](https://eubic-ms.org/events/2020-developers-meeting/), see [usage](#usage) for examples):\n* query: returns one or more spectra in JSON PROXI by scan number(s)\n* xic: returns chromatogram data based on JSON filter input \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9891328192872126,
      "result": {
        "original_header": "ThermoRawFileParser Publication:",
        "type": "Text_excerpt",
        "value": "  * Hulstaert N, Shofstahl J, Sachsenberg T, Walzer M, Barsnes H, Martens L, Perez-Riverol Y: _ThermoRawFileParser: Modular, Scalable, and Cross-Platform RAW File Conversion_ [[PMID 31755270](https://www.ncbi.nlm.nih.gov/pubmed/31755270)].\n  * If you use ThermoRawFileParser as part of a publication, please include this reference.\n \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8564306576210634,
      "result": {
        "original_header": "Release Notes",
        "type": "Text_excerpt",
        "value": "You can read release notes (starting from version 1.1.7) in the [wiki page](https://github.com/compomics/ThermoRawFileParser/wiki/ReleaseNotes)\n \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9824872625907776,
      "result": {
        "original_header": "Galaxy integration",
        "type": "Text_excerpt",
        "value": "ThermoRawFileParser is available in the Galaxy [ToolShed](https://toolshed.g2.bx.psu.edu/view/galaxyp/thermo_raw_file_converter/a3edda696e4d) and is deployed at the [European Galaxy Server](https://usegalaxy.eu/root?tool_id=toolshed.g2.bx.psu.edu/repos/galaxyp/thermo_raw_file_converter/thermo_raw_file_converter/).\n \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/compomics/ThermoRawFileParser/wiki/ReleaseNotes"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/compomics/ThermoRawFileParser/wiki"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "parent_header": [
          "ThermoRawFileParser"
        ],
        "type": "Text_excerpt",
        "value": "Click [here](https://github.com/compomics/ThermoRawFileParser/releases) to go to the release page (with [release notes](https://github.com/compomics/ThermoRawFileParser/wiki/ReleaseNotes) starting from v1.1.7).\n\nYou can find the ThermoRawFileParserGUI [here](https://github.com/compomics/ThermoRawFileParserGUI).\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/compomics/ThermoRawFileParser/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 50
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "compomics/ThermoRawFileParser"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ThermoRawFileParser"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9897023697071436,
      "result": {
        "original_header": "Release Notes",
        "type": "Text_excerpt",
        "value": "You can read release notes (starting from version 1.1.7) in the [wiki page](https://github.com/compomics/ThermoRawFileParser/wiki/ReleaseNotes)\n \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9780403825994494,
      "result": {
        "original_header": "Logging",
        "type": "Text_excerpt",
        "value": "By default the parser only logs to console. To enable logging to file, uncomment the file appender in the `log4net.config` file.\n```\n<log4net>\n    <root>\n        <level value=\"INFO\" />\n        <appender-ref ref=\"console\" />\n        \n    </root>\n    <appender name=\"console\" type=\"log4net.Appender.ConsoleAppender\">\n        <layout type=\"log4net.Layout.PatternLayout\">\n            <conversionPattern value=\"%date %level %logger - %message%newline\" />\n        </layout>\n    </appender>\n    \n</log4net>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999999769441528,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "First check the latest version tag on [biocontainers/thermorawfileparser/tags](https://quay.io/repository/biocontainers/thermorawfileparser?tab=tags). Then pull and run the container with\n```bash\ndocker run -i -t -v /home/user/raw:/data_input quay.io/biocontainers/thermorawfileparser:<tag> ThermoRawFileParser.sh --help\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8095720202279428,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "First check the latest version tag on [biocontainers/thermorawfileparser/tags](https://quay.io/repository/biocontainers/thermorawfileparser?tab=tags). Then pull and run the container with\n```bash\ndocker run -i -t -v /home/user/raw:/data_input quay.io/biocontainers/thermorawfileparser:<tag> ThermoRawFileParser.sh --help\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ThermoRawFileParser"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "compomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C#",
        "size": 443977,
        "type": "Programming_language",
        "value": "C#"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1935,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 118,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caetera",
          "type": "User"
        },
        "date_created": "2024-10-14T10:04:34Z",
        "date_published": "2024-10-14T10:18:13Z",
        "description": "- Fixing CV annotations in PROXI format",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.4.5",
        "name": "v1.4.5",
        "release_id": 179776712,
        "tag": "v1.4.5",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.4.5",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/179776712",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/179776712",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.4.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caetera",
          "type": "User"
        },
        "date_created": "2024-05-09T13:41:41Z",
        "date_published": "2024-05-10T14:37:29Z",
        "description": "* Speedup the processing of files when only some MS levels are written to the output (closes #176)\r\n* Handling of raw files missing the supplementary activation flag (closes #175)\r\n* Using CVTerm \"Orbitap\" instead of \"FTICR\" for Orbitrap-based instruments (closes #177)\r\n* Unification of command line arguments (#179)\r\n* Fixing metadata output for files missing MS part (partial #178)\r\n* Minor fixes to mzML output and cleaning unused code",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.4.4",
        "name": "v1.4.4",
        "release_id": 155270120,
        "tag": "v1.4.4",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.4.4",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/155270120",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/155270120",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.4.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caetera",
          "type": "User"
        },
        "date_created": "2023-09-15T14:45:32Z",
        "date_published": "2023-09-15T14:46:11Z",
        "description": "* Update Thermo .NET assemblies to 5.0.0.93\r\n* Added support for Thermo Astral\r\n* Added support for PRM files without MS1 (shout-out to @lazear, fixes #163 #164)\r\n* Fix for negative values in isolation window (fixes #162)\r\n* Complete support for raw files without MS data (only for MzML and metadata output) (shout-out to @wolfgangcolsman, fixes #157)\r\n* Added expected runtime to metadata output (shout-out to @wolfgangcolsman, fixes #166)",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.4.3",
        "name": "v1.4.3",
        "release_id": 121285302,
        "tag": "v1.4.3",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.4.3",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/121285302",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/121285302",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.4.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caetera",
          "type": "User"
        },
        "date_created": "2023-02-10T15:57:04Z",
        "date_published": "2023-02-11T17:08:06Z",
        "description": "* Proper handling of precursors in decision tree methods from tribrids\r\n* Output file extension always follows the file format and (if employed) gzip compression\r\n* Support for input files provided as symlinks\r\n* Support for single file output for `xic` subcommand\r\n* Allowing optional field `comment` in XIC input json file\r\n* Thermo .NET assemblies were updated to version 5.0.0.88",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.4.2",
        "name": "v1.4.2",
        "release_id": 92116429,
        "tag": "v1.4.2",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/92116429",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/92116429",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caetera",
          "type": "User"
        },
        "date_created": "2022-10-21T16:51:22Z",
        "date_published": "2022-10-21T17:04:24Z",
        "description": "* Files with missing trailer information can be processed\r\n* Using dedicated CV term for mzML output\r\n* Support for all possible MS levels in MGF output\r\n* Proper processing of empty RAW files\r\n* Fixed a bug in handling isolation offset in mzML output\r\n* Refining OS exit codes reporting and \"warning as error\" key\r\n* More logging levels\r\n* Exit codes and logging work in the same way for subcommands\r\n",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.4.1",
        "name": "v1.4.1",
        "release_id": 80640424,
        "tag": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/80640424",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/80640424",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caetera",
          "type": "User"
        },
        "date_created": "2022-06-10T18:22:04Z",
        "date_published": "2022-06-10T18:39:03Z",
        "description": "- Precursor intensity was added to mzML files\r\n- Support for all possible MS levels\r\n- `-x` switch has reversed its meaning\r\n- Plain mzML (non-indexed) is forced when using `-s` and mzML format\r\n- Updated Ontology terms for ionization methods (HUPO PSI-MS version 4.1.79) \r\n- Switch to include noise and baseline data (`-N`)\r\n- Spectral points are sorted by mass\r\n- Metadata, format, and logging switches recognize both numeric and string values of parameters\r\n\r\n(See release notes for details)",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.4.0",
        "name": "v1.4.0",
        "release_id": 69177083,
        "tag": "v1.4.0",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/69177083",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/69177083",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2021-04-20T12:00:07Z",
        "date_published": "2021-04-20T12:12:52Z",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.3.4",
        "name": "v1.3.4",
        "release_id": 41707635,
        "tag": "v1.3.4",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.3.4",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/41707635",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/41707635",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.3.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2021-04-01T13:37:08Z",
        "date_published": "2021-04-01T13:44:29Z",
        "description": "* removed BOM prefix in indexed mzML output\r\n* addition of MS:1000576 (no compression) CV term when no compression is used\r\n* Same metadata output for both TEXT and JSON formats\r\n* FAIMS compensation voltage output\r\n* Thermo libraries upgrade to 5.0.0.71",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.3.3",
        "name": "v1.3.3",
        "release_id": 40826437,
        "tag": "v1.3.3",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/40826437",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/40826437",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2020-09-11T18:41:23Z",
        "date_published": "2020-10-02T14:29:20Z",
        "description": "* Flag -x include reference and exception peaks\r\n* SPS masses are included as precursors in mzML\r\n* Ignore all not .raw files when processing folder\r\n* Updates in instrument and detector mapping to PSI-MS CV terms",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.3.2",
        "name": "v1.3.2",
        "release_id": 32095772,
        "tag": "v1.3.2",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/32095772",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/32095772",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caetera",
          "type": "User"
        },
        "date_created": "2020-09-11T18:41:23Z",
        "date_published": "2020-09-11T18:47:18Z",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.3.1",
        "name": "v1.3.1",
        "release_id": 31146044,
        "tag": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/31146044",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/31146044",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caetera",
          "type": "User"
        },
        "date_created": "2020-08-26T17:40:41Z",
        "date_published": "2020-08-26T17:52:46Z",
        "description": "UV/PDA data and other fixes",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.3.0",
        "name": "v1.3.0",
        "release_id": 30168573,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/30168573",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/30168573",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2020-05-04T09:08:16Z",
        "date_published": "2020-05-04T09:18:22Z",
        "description": "Default centroiding of segmented scan data",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.2.3",
        "name": "v1.2.3",
        "release_id": 26134543,
        "tag": "v1.2.3",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/26134543",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/26134543",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2020-03-02T09:27:31Z",
        "date_published": "2020-03-02T09:32:57Z",
        "description": "fix in biocontainer docker file",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.2.2",
        "name": "v1.2.2",
        "release_id": 24123427,
        "tag": "v1.2.2",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/24123427",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/24123427",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2020-02-10T09:09:25Z",
        "date_published": "2020-02-14T13:14:02Z",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.2.1",
        "name": "v1.2.1",
        "release_id": 23679160,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/23679160",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/23679160",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2020-02-06T14:48:53Z",
        "date_published": "2020-02-06T15:01:34Z",
        "description": "xic and query subcommands",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "release_id": 23448453,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/23448453",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/23448453",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2019-09-25T13:40:37Z",
        "date_published": "2019-09-25T13:54:08Z",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.1.11",
        "name": "v1.1.11",
        "release_id": 20245517,
        "tag": "v1.1.11",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.1.11",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/20245517",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/20245517",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.1.11"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2019-08-23T11:57:47Z",
        "date_published": "2019-08-23T12:01:03Z",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.1.10",
        "name": "v1.1.10",
        "release_id": 19492776,
        "tag": "v1.1.10",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.1.10",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/19492776",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/19492776",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.1.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2019-07-02T15:14:28Z",
        "date_published": "2019-07-02T15:28:31Z",
        "description": "no zlib compression flag addition",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.1.9",
        "name": "v1.1.9",
        "release_id": 18362962,
        "tag": "v1.1.9",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/18362962",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/18362962",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2019-06-18T14:54:29Z",
        "date_published": "2019-06-18T14:56:50Z",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.1.8",
        "name": "v1.1.8",
        "release_id": 18066604,
        "tag": "v1.1.8",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/18066604",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/18066604",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2019-06-04T11:35:45Z",
        "date_published": "2019-06-04T11:41:40Z",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.1.7",
        "name": "v1.1.7",
        "release_id": 17767878,
        "tag": "v1.1.7",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/17767878",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/17767878",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nielshulstaert",
          "type": "User"
        },
        "date_created": "2019-05-16T14:00:03Z",
        "date_published": "2019-05-16T14:05:52Z",
        "description": "removed monoisotopic mass userparam when value is zero \r\nchanged selected ion mz in mzML to monoisotopic mass when available",
        "html_url": "https://github.com/compomics/ThermoRawFileParser/releases/tag/v1.1.6",
        "name": "v1.1.6",
        "release_id": 17397463,
        "tag": "v1.1.6",
        "tarball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/tarball/v1.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/17397463",
        "value": "https://api.github.com/repos/compomics/ThermoRawFileParser/releases/17397463",
        "zipball_url": "https://api.github.com/repos/compomics/ThermoRawFileParser/zipball/v1.1.6"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "(Linux) Requirements",
        "parent_header": [
          "ThermoRawFileParser"
        ],
        "type": "Text_excerpt",
        "value": "[Mono](https://www.mono-project.com/download/stable/#download-lin) (install mono-complete if you encounter \"assembly not found\" errors).\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:16:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 185
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "ThermoRawFileParser"
        ],
        "type": "Text_excerpt",
        "value": "```\nmono ThermoRawFileParser.exe -i=/home/user/data_input/raw_file.raw -o=/home/user/data_input/output/ -f=0 -g -m=0\n```\n\nwith only the mimimal required argument `-i` or `-d` this becomes\n\n```\nmono ThermoRawFileParser.exe -i=/home/user/data_input/raw_file.raw\n```\nor\n\n```\nmono ThermoRawFileParser.exe -d=/home/user/data_input/\n```\n\nFor running on Windows, omit `mono`. The optional parameters only work in the -option=value format. The tool can output some RAW file metadata `-m=0|1` (0 for JSON, 1 for TXT) and the spectra file `-f=0|1|2|3|4` (0 for MGF, 1 for mzML, 2 for indexed mzML, 3 for Parquet, 4 for no output) or both. Use the `-p` flag to disable the thermo native peak picking. \n\n```\nUsage is ThermoRawFileParser.exe [subcommand] [options]\noptional subcommands are xic|query (use [subcommand] -h for more info]):\n  -h, --help                 Prints out the options.\n      --version              Prints out the version of the executable.\n  -i, --input=VALUE          The raw file input (Required). Specify this or an\n                               input directory -d.\n  -d, --input_directory=VALUE\n                             The directory containing the raw files (Required).\n                               Specify this or an input raw file -i.\n  -b, --output=VALUE    \t The output file. Specify this or an output\n                               directory -o. Specifying neither writes to the\n                               input directory.\n  -o, --output_directory=VALUE\n\t\t\t\t\t\t\t The output directory. Specify this or an output\n                               file -b. Specifying neither writes to the input\n                               directory.\n  -s, --stdout               Write to standard output. Cannot be combined with\n                               file or directory output. Implies silent logging,\n                                i.e. logging level 0\n  -f, --format=VALUE         The spectra output format: 0 for MGF, 1 for mzML,\n                               2 for indexed mzML, 3 for Parquet, 4 for None (\n                               no output); both numeric and text (case\n                               insensitive) value recognized. Defaults to\n                               indexed mzML if no format is specified.\n  -m, --metadata=VALUE       The metadata output format: 0 for JSON, 1 for TXT,\n                               2 for None (no output); both numeric and text (\n                               case insensitive) value recognized. Defaults to\n                               None\n  -c, --metadata_output_file=VALUE\n                             The metadata output file. By default the metadata\n                               file is written to the output directory.\n  -g, --gzip                 GZip the output file.\n  -p, --noPeakPicking[=VALUE]\n                             Don't use the peak picking provided by the native\n                               Thermo library. By default peak picking is\n                               enabled. Optional argument allows disabling peak\n                               peaking only for selected MS levels and should\n                               be a comma-separated list of integers (1,2,3)\n                               and/or intervals (1-3), open-end intervals (1-)\n                               are allowed\n  -z, --noZlibCompression    Don't use zlib compression for the m/z ratios and\n                               intensities. By default zlib compression is\n                               enabled.\n  -a, --allDetectors         Extract additional detector data: UV/PDA etc\n  -l, --logging=VALUE        Optional logging level: 0 for silent, 1 for\n                               verbose, 2 for default, 3 for warning, 4 for\n                               error; both numeric and text (case insensitive)\n                               value recognized.\n  -e, --ignoreInstrumentErrors\n                             Ignore missing properties by the instrument.\n  -x, --excludeExceptionData Exclude reference and exception data\n  -L, --msLevel=VALUE        Select MS levels (MS1, MS2, etc) included in the\n                               output, should be a comma-separated list of\n                               integers (1,2,3) and/or intervals (1-3), open-\n                               end intervals (1-) are allowed\n  -P, --mgfPrecursor         Include precursor scan number in MGF file TITLE\n  -N, --noiseData            Include noise data in mzML output\n  -w, --warningsAreErrors    Return non-zero exit code for warnings; default\n                               only for errors\n  -u, --s3_url[=VALUE]       Optional property to write directly the data into\n                               S3 Storage.\n  -k, --s3_accesskeyid[=VALUE]\n                             Optional key for the S3 bucket to write the file\n                               output.\n  -t, --s3_secretaccesskey[=VALUE]\n                             Optional key for the S3 bucket to write the file\n                               output.\n  -n, --s3_bucketName[=VALUE]\n                             S3 bucket name\n```\n\nOutput file extension is determined by the used output format and (optional) gzip compression, for example, if format is MGF without gzip compression, the output file will receive `.mgf` extension, if format is mzML with gzip compression the output file will have `.mzML.gz` extension. All user input will be standardized to fulfill abovementioned requirements.\n\nA (java) graphical user interface is also available [here](https://github.com/compomics/ThermoRawFileParserGUI) that enables the selection of an input RAW directory or one ore more RAW files.\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "query subcommand",
        "parent_header": [
          "ThermoRawFileParser",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Enables the retrieval spectra by (a) scan number(s) in [PROXI format](https://github.com/HUPO-PSI/proxi-schemas).\n\n```\nmono ThermoRawFileParser.exe query -i=/home/user/data_input/raw_file.raw -o=/home/user/output.json n=\"1-5, 20, 25-30\"\n```\n\n```\nThermoRawFileParser.exe query --help\nusage is:\n  -h, --help                 Prints out the options.\n  -i, --input=VALUE          The raw file input (Required).\n  -n, --scans=VALUE          The scan numbers. e.g. \"1-5, 20, 25-30\"\n  -b, --output=VALUE    \t The output file. Specifying none writes the output\n                               file to the input file parent directory.\n  -p, --noPeakPicking        Don't use the peak picking provided by the native\n                               Thermo library. By default peak picking is\n                               enabled.\n  -s, --stdout               Pipes the output into standard output. Logging is\n                               being turned off\n  -w, --warningsAreErrors    Return non-zero exit code for warnings; default\n                               only for errors\n  -l, --logging=VALUE        Optional logging level: 0 for silent, 1 for\n                               verbose, 2 for default, 3 for warning, 4 for\n                               error; both numeric and text (case insensitive)\n                               value recognized.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "xic subcommand",
        "parent_header": [
          "ThermoRawFileParser",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Return one or more chromatograms based on query JSON input.\n\n```\nmono ThermoRawFileParser.exe xic -i=/home/user/data_input/raw_file.raw -j=/home/user/xic_input.json\n```\n\n```\nThermoRawFileParser.exe xic --help\n  -h, --help                 Prints out the options.\n  -i, --input=VALUE          The raw file input (Required). Specify this or an\n                               input directory -d\n  -d, --input_directory=VALUE\n                             The directory containing the raw files (Required).\n                               Specify this or an input file -i.\n  -j, --json=VALUE           The json input file (Required).\n  -p, --print_example        Show a json input file example.\n  -b, --output=VALUE    \t The output file. Specify this or an output\n                               directory. Specifying neither writes to the\n                               input directory.\n  -o, --output_directory=VALUE         \n\t\t\t\t\t\t\t The output directory. Specify this or an output\n                               file. Specifying neither writes to the input\n                               directory.\n  -6, --base64               Encodes the content of the xic vectors as base 64\n                               encoded string.\n  -s, --stdout               Pipes the output into standard output. Logging is\n                               being turned off.\n  -w, --warningsAreErrors    Return non-zero exit code for warnings; default\n                               only for errors\n  -l, --logging=VALUE        Optional logging level: 0 for silent, 1 for\n                               verbose, 2 for default, 3 for warning, 4 for\n                               error; both numeric and text (case insensitive)\n                               value recognized.\n```\n\nProvide one of the following filters:\n * M/Z and tolerance (tolerance unit optional, defaults to `ppm`)\n * M/Z start and end\n * sequence and tolerance (tolerance unit optional, defaults to `ppm`)\n\noptionally one can define starting and ending retention times, provide filter string (defaults to `ms`, i.e. only MS1 scans), and a comment (free text) field; any valid filter string is supported,\nhowever only basic validation is performed, see [issue #158](https://github.com/compomics/ThermoRawFileParser/issues/158) for details. Comment can contain any text and will be preserved in the output.\n\nAn example input JSON file:\n\n```\n[\n        {\n            \"mz\":488.5384,\n            \"tolerance\":10,\n            \"tolerance_unit\":\"ppm\"           \n        },\n        {\n            \"mz\":575.2413,\n            \"tolerance\":10,\n            \"rt_start\":630,\n            \"rt_end\":660,\n            \"scan_filter\":\"ms2\"\n        },\n        {\n            \"mz_start\":749.7860,\n            \"mz_end\" : 750.4,            \n            \"rt_start\":630,\n            \"rt_end\":660\n        },\n        {\n            \"sequence\":\"TRANNEL\",\n            \"tolerance\":10\n        },\n        {\n            \"mz\":1014.5099732499732,\n            \"rt_start\":14.0600881872,\n            \"rt_end\":14.4167198290667,\n            \"tolerance\":5,\n            \"tolerance_unit\":\"ppm\",\n            \"comment\":\"Only ion trap scans\"\n            \"scan_filter\":\"ITMS\"\n        }\n   }\n]\n\n```\n\n[Go to top of page](#thermorawfileparser)\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/ThermoRawFileParser/master/README.md",
      "technique": "header_analysis"
    }
  ]
}