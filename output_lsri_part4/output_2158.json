{
  "application_domain": [
    {
      "confidence": 0.9968007856631342,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/urdvr/biojs-vis-gprofiler"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "biojs-vis-gprofiler"
        ],
        "type": "Text_excerpt",
        "value": "Please submit all issues and pull requests to the\n[tambeta/biojs-vis-gprofiler](http://github.com/tambeta/biojs-vis-gprofiler) repository!\n"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-10-27T14:09:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-23T10:14:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A BioJS component for visualizing g:Profiler enrichment analysis results"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9552029674947439,
      "result": {
        "original_header": "biojs-vis-gprofiler",
        "type": "Text_excerpt",
        "value": "Retrieve most relevant terms from g:Profiler and render these as a string\ncloud.\n \n"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9882979277394177,
      "result": {
        "original_header": "Compatibility notes",
        "type": "Text_excerpt",
        "value": "Note that version 0.6.0 of biojs-vis-gprofiler introduces some breaking changes\nto the API of the `GProfiler` class and therefore to the parameters accepted by\n`bioJSVisGProfiler.render`. This is due to migrating to g:Profiler 2 API and\ndropping support for legacy g:Profiler. \n* `domain` - The set of possible values is different: these are now source IDs\n  as accepted by `srcFilter`; except in the case of GO whose subset is still\n  {`BP`, `CC`, `MF`} for backward compatibility.\n* `subgraph` - Always 1.\n* `depth` - Always 1.\n* `intersection` - Always an empty array. \n"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Index",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "**Classes**\n\n* [class: BioJSVisGProfiler](#BioJSVisGProfiler)\n  * [new BioJSVisGProfiler(attrs)](#new_BioJSVisGProfiler)\n  * [bioJSVisGProfiler.render(attrs)](#BioJSVisGProfiler#render)\n  * [bioJSVisGProfiler.renderStored(data)](#BioJSVisGProfiler#renderStored)\n  * [bioJSVisGProfiler.getGProfiler()](#BioJSVisGProfiler#getGProfiler)\n  * [bioJSVisGProfiler.getInfoboxId()](#BioJSVisGProfiler#getInfoboxId)\n  * [event: \"onrender\"](#BioJSVisGProfiler#event_onrender)\n  * [event: \"onclick\"](#BioJSVisGProfiler#event_onclick)\n* [class: GProfiler](#GProfiler)\n  * [new GProfiler()](#new_GProfiler)\n  * [gProfiler.query(attrs, cb)](#GProfiler#query)\n  * [gProfiler.getQueryParams(queryAttrs)](#GProfiler#getQueryParams)\n  * [gProfiler.getQueryURL(queryAttrs)](#GProfiler#getQueryURL)\n  * [gProfiler.getRootURL()](#GProfiler#getRootURL)\n\n**Typedefs**\n\n* [callback: renderCb](#renderCb)\n* [callback: distillerCb](#distillerCb)\n* [callback: scorerCb](#scorerCb)\n \n<a name=\"BioJSVisGProfiler\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "class: BioJSVisGProfiler",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "**Members**\n\n* [class: BioJSVisGProfiler](#BioJSVisGProfiler)\n  * [new BioJSVisGProfiler(attrs)](#new_BioJSVisGProfiler)\n  * [bioJSVisGProfiler.render(attrs)](#BioJSVisGProfiler#render)\n  * [bioJSVisGProfiler.renderStored(data)](#BioJSVisGProfiler#renderStored)\n  * [bioJSVisGProfiler.getGProfiler()](#BioJSVisGProfiler#getGProfiler)\n  * [bioJSVisGProfiler.getInfoboxId()](#BioJSVisGProfiler#getInfoboxId)\n  * [event: \"onrender\"](#BioJSVisGProfiler#event_onrender)\n  * [event: \"onclick\"](#BioJSVisGProfiler#event_onclick)\n\n<a name=\"new_BioJSVisGProfiler\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "new BioJSVisGProfiler(attrs)",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: BioJSVisGProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Construct a BioJSVisGProfiler object.\n\n**Params**\n\n- attrs `Object` - Pass properties to the constructor via this object.  \n\n**Properties**\n\n- container `string` - Container wherein the cloud will be rendered,\n in selector format. _required_  \n- width `int` - Width of the rendered cloud, in pixels.\n_default_: 300  \n- height `int` - Height of the rendered cloud, in pixels.\n_default_: 300  \n- maxN `int` - Max number of strings to display.  \n- maxTermLen `int` - Max length of a term description, keep this at a\n reasonable value to ensure all terms are displayed. No effect if useTerms\n is false.  \n- useTerms `boolean` - Display whole functional terms instead of\n single words.  \n- warnings `boolean` - Log rendering warnings to the console.  \n- showLogo `boolean` - Set to false to suppress displaying the\n g:Profiler logo at the bottom right.  \n- showInfo `boolean` - Set to false to suppress displaying the\n default tooltip upon clicking a string.  \n- sizer <code>[renderCb](#renderCb)</code> - Callback function returning the point size of a\n string.  \n- colorer <code>[renderCb](#renderCb)</code> - Callback function returning the color of a\n string.  \n- scorer <code>[scorerCb](#scorerCb)</code> - Callback function returning the score for a\n string. This is used for ordering to select `maxN` top strings and is passed\n to the `sizer` and `colorer` callbacks. Note that the scores are normalized\n to sum to 1.  \n- distiller <code>[distillerCb](#distillerCb)</code> - Callback function returning an array of\n strings to be rendered.  \n\n**Example**  \n```\nvar gp = require('biojs-vis-gprofiler');\n\ngp = new gp({\n  container  : \"#myContainer\",\n  width      : 600,\n  height     : 600,\n});\n\ngp.on(\"onrender\", function() {\n  console.log(\"caught render event\");\n});\n\ngp.render({\n  query    : [\"swi4\", \"swi6\", \"mbp1\"],\n  organism : \"scerevisiae\",\n});\n```\n\n<a name=\"BioJSVisGProfiler#render\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "bioJSVisGProfiler.render(attrs)",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: BioJSVisGProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Query g:Profiler and render a cloud.\n\n**Params**\n\n- attrs `Object` - Passed through to GProfiler.[query](#GProfiler#query).  \n\n**Fires**\n\n- [onrender](#BioJSVisGProfiler#event_onrender)\n- [onclick](#BioJSVisGProfiler#event_onclick)\n\n<a name=\"BioJSVisGProfiler#renderStored\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "bioJSVisGProfiler.renderStored(data)",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: BioJSVisGProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Render cloud based on an object previously returned by\nGProfiler.[query](#GProfiler#query).\n\n**Params**\n\n- data `Object` - Object returned by GProfiler.[query](#GProfiler#query).  \n\n**Fires**\n\n- [onrender](#BioJSVisGProfiler#event_onrender)\n- [onclick](#BioJSVisGProfiler#event_onclick)\n\n<a name=\"BioJSVisGProfiler#getGProfiler\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "bioJSVisGProfiler.getGProfiler()",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: BioJSVisGProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Return an instance of [GProfiler](#GProfiler).\n\n<a name=\"BioJSVisGProfiler#getInfoboxId\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "bioJSVisGProfiler.getInfoboxId()",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: BioJSVisGProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Return the infobox element id attribute.\n\n<a name=\"BioJSVisGProfiler#event_onrender\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "event: \"onrender\"",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: BioJSVisGProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Fired when cloud rendering has completed.\n\n<a name=\"BioJSVisGProfiler#event_onclick\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "event: \"onclick\"",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: BioJSVisGProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Fired upon click on a cloud element\n\n**Params**\n\n- termdata `Array` - Array of data structures returned from\n g:Profiler per functional category associated with the clicked string.  \n- event `Event`  \n\n<a name=\"GProfiler\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "class: GProfiler",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "**Members**\n\n* [class: GProfiler](#GProfiler)\n  * [new GProfiler()](#new_GProfiler)\n  * [gProfiler.query(attrs, cb)](#GProfiler#query)\n  * [gProfiler.getQueryParams(queryAttrs)](#GProfiler#getQueryParams)\n  * [gProfiler.getQueryURL(queryAttrs)](#GProfiler#getQueryURL)\n  * [gProfiler.getRootURL()](#GProfiler#getRootURL)\n\n<a name=\"new_GProfiler\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "new GProfiler()",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: GProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Construct a GProfiler object.\n\n<a name=\"GProfiler#query\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "gProfiler.query(attrs, cb)",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: GProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Query g:Profiler. See also _Compatibility notes_ above.\n\n**Params**\n\n- attrs `Object` - g:Profiler query attributes. See\n [g:Profiler](http://biit.cs.ut.ee/gprofiler) for detailed documentation on\n these parameters.  \n- cb `function` - A callback function receiving the result object from\n a g:Profiler query.\n\nFields of _attrs_:  \n\n**Properties**\n\n- query `Array` - A list of query symbols. _required_  \n- organism `String` - The organism name in g:Profiler format,\n generally the first character of the genus + species in lowercase. E.g.\n \"Mus musculus\" -> \"mmusculus\". _default_: hsapiens  \n- significant `boolean` - Only return statistically significant\n results. _default_: true  \n- orderedQuery `boolean` - Ordered query. _default_: false.  \n- excludeIEA `boolean` - Exclude electronic GO annotations.\n _default_: false.  \n- underrep `boolean` - Measure underrepresentation. _default_: false.  \n- userThreshold `float` - Custom significance threshold.\n Defaults to 0.05 in g:Profiler.  \n- correctionMethod `String` - Algorithm used for determining the\n significance threshold, one of \"gSCS\", \"fdr\", \"bonferroni\". _default_:\n \"gSCS\".  \n- domainSize `String` - Statistical domain size, one of \"annotated\",\n \"known\". _default_: annotated.  \n- numericNS `String` - Namespace to use for fully numeric IDs.  \n- customBG `Array` - Array of symbols to use as a statistical\n background.  \n- srcFilter `Array` - Array of data sources to use. Currently these\n include GO (GO:BP, GO:MF, GO:CC to select a particular GO branch), KEGG,\n REAC, TF, MI, CORUM, HP. Please see the\n [g:GOSt web tool](http://biit.cs.ut.ee/gprofiler/) for the comprehensive\n list and details on incorporated data sources.  \n\n<a name=\"GProfiler#getQueryParams\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "gProfiler.getQueryParams(queryAttrs)",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: GProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Return the HTTP request parameters for a query.\n\n**Params**\n\n- queryAttrs `Object` - See the documentation for GProfiler.[query](#GProfiler#query). If not specified, the active query (the last query\nexecuted via GProfiler.[query](#GProfiler#query)) is used. Otherwise, an\nerror is thrown.  \n\n**Returns**: `Object`  \n<a name=\"GProfiler#getQueryURL\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "gProfiler.getQueryURL(queryAttrs)",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: GProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Return g:Profiler URL encoding a query.\n\n**Params**\n\n- queryAttrs `Object` - See the documentation for GProfiler.[query](#GProfiler#query). If not specified, the active query (the last query\nexecuted via GProfiler.[query](#GProfiler#query)) is used. Otherwise, an\nerror is thrown.  \n\n**Returns**: `String` | `null` - If the resulting URL lengths exceeds the maximum\n allowed length, `null` is returned.  \n<a name=\"GProfiler#getRootURL\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "gProfiler.getRootURL()",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation",
          "class: GProfiler"
        ],
        "type": "Text_excerpt",
        "value": "Return g:Profiler root URL.\n\n**Returns**: `String`  \n<a name=\"renderCb\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "callback: renderCb",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "**Params**\n\n- attrs `Object` - Pass properties via this object.  \n\n**Properties**\n\n- score `float` - A score for the string (sum of all scores == 1).  \n- scaling `int` - A constant scaling value proportional to the size\n of the container.  \n- str `string` - The string being rendered.  \n- termdata `Array` - Array of data structures returned from\n g:Profiler per functional category associated with the current string.  \n\n**Type**: `function`  \n<a name=\"distillerCb\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "callback: distillerCb",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "**Params**\n\n- termdata `Object` - The data structure returned from g:Profiler for\n a functional category.  \n\n**Type**: `function`  \n**Returns**: `Array` | `null` - - An array of strings associated with the current term.\n Return `null` to discard the term.  \n<a name=\"scorerCb\"></a>"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "callback: scorerCb",
        "parent_header": [
          "biojs-vis-gprofiler",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "**Params**\n\n- attrs `Object` - Pass properties via this object.  \n\n**Properties**\n\n- str `string` - The string being rendered.  \n- termdata `Array` - Array of data structures returned from\n g:Profiler per functional category associated with the current string.  \n\n**Type**: `function`  \n**Returns**: `float`  \n\n"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tambeta/biojs-vis-gprofiler/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/urdvr/biojs-vis-gprofiler/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "urdvr/biojs-vis-gprofiler"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biojs-vis-gprofiler"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/urdvr/biojs-vis-gprofiler/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The BSD License\n\nCopyright (c) 2014, Tambet Arak\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\n* Neither the name of the Tambet Arak nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "biojs-vis-gprofiler"
        ],
        "type": "Text_excerpt",
        "value": "The BSD License\n\nCopyright (c) 2014-2019, Tambet Arak\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\n* Neither the name of the Tambet Arak nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biojs-vis-gprofiler"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "urdvr"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 52677,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 1245,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 278,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:32:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "biojs-vis-gprofiler"
        ],
        "type": "Text_excerpt",
        "value": "If you have any problems or a suggestion please open an issue\n[here](https://github.com/tambeta/biojs-vis-gprofiler/issues).\n"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "biojs-vis-gprofiler"
        ],
        "type": "Text_excerpt",
        "value": "Install the module with: `npm install biojs-vis-gprofiler`. Copy the minified\nmodule `build/biojsvisgprofiler.min.js` to your scripts directory.\n\nUsage without a module loader:\n\n```html\n<script src=\"/path/to/biojsvisgprofiler.min.js\"></script>\n<script type=\"text/javascript\">\n\ndocument.addEventListener(\"DOMContentLoaded\", function(e) {\n  gp = new biojsVisGprofiler({\n    container : \"#myContainer\",\n    width     : 600,\n    height    : 600,\n  });\n\n  gp.on(\"onrender\", function() {\n    console.log(\"caught render event\");\n  });\n\n  gp.render({\n    query     : [\"swi4\", \"swi6\", \"mbp1\", \"mcm1\", \"fkh1\", \"fkh2\"],\n    organism  : \"scerevisiae\",\n  });\n});\n\n</script>\n```\n\nIf using a module loader such as [require.js](http://requirejs.org/docs/start.html)\n`require` the module from within your application or directly, such as:\n\n```html\n<script src=\"require.js\"></script>\n<script>\n\nrequire(['/path/to/biojsvisgprofiler.min.js'], function(biojsVisGprofiler) {\n\t...\n});\n\n</script>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tambeta/biojs-vis-gprofiler/master/README.md",
      "technique": "header_analysis"
    }
  ]
}