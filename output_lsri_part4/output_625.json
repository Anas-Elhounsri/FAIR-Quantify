{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/maiziex/Aquila_stLFR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-11T17:36:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-30T11:20:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Human haplotype-resolved assembly and variant detection for stLFR, hybrid assembly for linked-reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8397757515403274,
      "result": {
        "original_header": "*Optional parameters",
        "type": "Text_excerpt",
        "value": "**--num_threads:** default = 8. It's recommended not to change this setting unless large memory node could be used (2*memory capacity(it suggests for assembly below)), then try to use \"--num_threads 12\".  \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Download hg19 \"Uniqness_map\" folder by wget using the link",
        "parent_header": [
          "Install through Github:",
          "Aquila assembly for other version of human referece: hg19"
        ],
        "type": "Text_excerpt",
        "value": "```\nwget https://zenodo.org/record/7689958/files/Uniqness_map_hg19.tar.gz\n```"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/maiziex/Aquila_stLFR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/maiziex/Aquila_stLFR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "maiziex/Aquila_stLFR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ":milky_way: Aquila_stLFR :eagle:"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install through Bioconda (The updated version 1.2.11):",
        "type": "Text_excerpt",
        "value": "Version <a href=\"https://github.com/maiziex/Aquila_stLFR/blob/master/src/version_history_tracking.md\">history tracking</a> \n```\nconda install aquila_stlfr\n```\n(Please ensure <a href=\"https://bioconda.github.io/user/install.html#set-up-channels\">channels</a> are properly setup for bioconda before installing) \n\n```\nAquila_stLFR_step1 --help\nAquila_stLFR_step2 --help\nAquila_stLFR_clean --help\nAquila_step1_hybrid --help\nAquila_stLFR_assembly_based_variants_call --help\nAquila_stLFR_phasing_all_variants --help\nAquila_step0_sortbam_hybrid --help\nAquila_stLFR_fastq_preprocess --help\n# You can also check the below corresponding scripts for details\n```\n```\n#Download the reference file (hg38)\nwget https://zenodo.org/record/7689958/files/source.tar.gz\n\n#Download hg38 \"Uniqness_map\"\nwget https://zenodo.org/record/7689958/files/Uniqness_map_hg38.tar.gz\n```"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies for Github installation:",
        "parent_header": [
          "Install through Bioconda (The updated version 1.2.11):"
        ],
        "type": "Text_excerpt",
        "value": "Aquila_stLFR utilizes <a href=\"https://www.python.org/downloads/\">Python3 (+ numpy, pysam, sortedcontainers, and scipy)</a>, <a href=\"http://samtools.sourceforge.net/\">SAMtools</a>, and <a href=\"https://github.com/lh3/minimap2\">minimap2</a>. To be able to execute the above programs by typing their name on the command line, the program executables must be in one of the directories listed in the PATH environment variable (\".bashrc\"). <br />\nOr you could just run \"./install.sh\" to check their availability and install them if not, but make sure you have installed \"python3\", \"conda\" and \"wget\" first. \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install through Github:",
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/maiziex/Aquila_stLFR.git\ncd Aquila_stLFR\nchmod +x install.sh\n./install.sh\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "source folder:",
        "parent_header": [
          "Install through Github:"
        ],
        "type": "Text_excerpt",
        "value": "After running \"./install.sh\", a folder \"source\" would be download, it includes human GRCh38 reference fasta file, or you could also just download it by yourself from the corresponding official websites. \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2:",
        "parent_header": [
          "Install through Github:",
          "Running The Code:"
        ],
        "type": "Text_excerpt",
        "value": "```\nAquila_stLFR/bin/Aquila_stLFR_step2.py --out_dir Assembly_results_S12878 --num_threads 30 --reference Aquila_stLFR/source/ref.fa\n```\n#### *Required parameters\n**--reference:** \"Aquila_stLFR/source/ref.fa\" is the reference fasta file you can download by \"./install\".\n\n#### *Optional parameters\n**--out_dir:** default = ./Asssembly_results, make sure it's the same as \"--out_dir\" from ***Step1*** if you want to define your own output directory name.\n\n**--num_threads:** default = 30, this determines the number of files assembled simultaneously by SPAdes.  \n\n**--num_threads_spades:** default = 5, this is the \"-t\" for SPAdes. \n\n**--block_len_use:** default = 100000 (100kb)\n\n**--chr_start --chr_end:** if you only want to assembly some chromosomes or only one chromosome. For example: use \"--chr_start 1 --chr_end 2\" \n\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Final Output:",
        "parent_header": [
          "Install through Github:"
        ],
        "type": "Text_excerpt",
        "value": "**Assembly_Results_S12878/Assembly_Contigs_files:** Aquila_contig.fasta and Aquila_Contig_chr*.fasta \n```\nAssembly_results_S12878\n|\n|-H5_for_molecules \n|   \u2514-S12878_chr*_sorted.h5    --> (Fragment files for each chromosome including barcode, variants annotation (0: ref allele; 1: alt allele), coordinates for each fragment)\n|\n|-HighConf_file\n|   \u2514-chr*_global_track.p      --> (Pickle file for saving coordinates of high-confidence boundary points)\n|\n|-results_phased_probmodel\n|   \u2514-chr*.phased_final        --> (Phased fragment files)\n|\n|-phase_blocks_cut_highconf\n|\n|-Raw_fastqs\n|   \u2514-fastq_by_Chr_*           --> (fastq file for each chromosome)\n|\n|-ref_dir\n|\n|-Local_Assembly_by_chunks\n|   \u2514-chr*_files_cutPBHC\n|       |-fastq_by_*_*_hp1.fastq                  --> (fastq file for a small phased chunk of haplotype 1)\n|       |-fastq_by_*_*_hp2.fastq                  --> (fastq file for a small phased chunk of haplotype 2)\n|       |-fastq_by_*_*_hp1_spades_assembly        --> (minicontigs: assembly results for the small chunk of haplotype 1) \n|       \u2514-fastq_by_*_*_hp2_spades_assembly        --> (minicontigs: assembly results for the small chunk of haplotype 2)\n|\n\u2514-Assembly_Contigs_files\n    |-Aquila_cutPBHC_minicontig_chr*.fasta        --> (final minicontigs for each chromosome)\n    |-Aquila_Contig_chr*.fasta                    --> (final contigs for each chromosome)\n    \u2514-Aquila_contig.fasta                         --> (final contigs for WGS)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Final Output Format:",
        "parent_header": [
          "Install through Github:"
        ],
        "type": "Text_excerpt",
        "value": "Aquila_stLFR outputs an overall contig file `Aquila_Contig_chr*.fasta` for each chromosome, and one contig file for each haplotype: `Aquila_Contig_chr*_hp1.fasta` and `Aquila_Contig_chr*_hp2.fasta`. For each contig, the header, for an instance, \u201c>36_PS39049620:39149620_hp1\u201d includes contig number \u201c36\u201d, phase block start coordinate \u201c39049620\u201d, phase block end coordinate \u201c39149620\u201d, and haplotype number \u201c1\u201d. Within the same phase block, the haplotype number \u201chp1\u201d and \u201chp2\u201d are arbitrary for maternal and paternal haplotypes. For some contigs from large phase blocks, the headers are much longer and complex, for an instance, \u201c>56432_PS176969599:181582362_hp1_ merge177969599:178064599_hp1-177869599:177969599_hp1\u201d. \u201c56\u201d denotes contig number, \u201c176969599\u201d denotes the start coordinate of the final big phase block, \u201c181582362\u201d denotes the end coordinate of the final big phase block, and \u201chp1\u201d denotes the haplotype \u201c1\u201d. \u201c177969599:178064599_hp1\u201d and \u201c177869599:177969599_hp1\u201d mean that this contig is concatenated from minicontigs in small chunk (start coordinate: 177969599, end coordinate: 178064599, and haplotype: 1) and small chunk (start coordinate: 177869599, end coordinate: 177969599, and haplotype: 1). \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8697444469280593,
      "result": {
        "original_header": "Step 1:",
        "type": "Text_excerpt",
        "value": "```\nAquila_stLFR/bin/Aquila_stLFR_step1.py --fastq_file S12878.fastq --bam_file S12878.bam --vcf_file S12878_freebayes.vcf --sample_name S12878 --out_dir Assembly_results_S12878 --uniq_map_dir Aquila_stLFR/Uniqness_map_hg38\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.957904920878609,
      "result": {
        "original_header": "*Required parameters",
        "type": "Text_excerpt",
        "value": "**--fastq_file:** \"S12878.fastq\" is the stLFR fastq file (with BX:Z:barcode at the header, you can use Aquila_stLFR/bin/Aquila_stLFR_fastq_preprocess.py to generate the input fastq file, <a href=\"https://github.com/maiziex/Aquila_stLFR/blob/master/src/How_to_get_bam_and_vcf.md\">check here for the processing details</a>) \n**--bam_file:** \"S12878.bam\" is bam file generated from bwa-mem. How to get bam file, you can also check <a href=\"https://github.com/maiziex/Aquila_stLFR/blob/master/src/How_to_get_bam_and_vcf.md\">here</a>. \n**--vcf_file:** \"S12878_freebayes.vcf\" is VCF file generated from variant caller like \"FreeBayes\". How to get vcf file, you can also check <a href=\"https://github.com/maiziex/Aquila_stLFR/blob/master/src/How_to_get_bam_and_vcf.md\">here</a>.  \n**--sample_name:** \"S12878\" are the sample name you can define.  \n**--uniq_map_dir:** \"Aquila_stLFR/Uniqness_map_hg38\" is the uniqness file you can download by \"./install.sh\".\n \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9763400927627917,
      "result": {
        "original_header": "*Optional parameters",
        "type": "Text_excerpt",
        "value": "**--out_dir:** default = ./Asssembly_results. You can define your own folder, for example \"Assembly_results_S12878\".  \n**--chr_start --chr_end:** if you only want to assembly some chromosomes or only one chromosome. For example: use \"--chr_start 1 --chr_end 5\"  will assemble chromsomes 1,2,3,4,5. Use \"--chr_start 2 --chr_end 2\" will only assembly chromosome 2. \n(*Notes: Use 23 for \"chrX\") \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9953211185090831,
      "result": {
        "original_header": "Step 2: (The same as single library assembly)",
        "type": "Text_excerpt",
        "value": "```\nAquila_stLFR/bin/Aquila_stLFR_step2.py --out_dir Assembly_results_hybrid --num_threads 30 --reference Aquila_stLFR/source/ref.fa\n```\n#### *Required parameters\n**--reference:** \"Aquila_stLFR/source/ref.fa\" is the reference fasta file you can download by \"./install\". \n#### *Optional parameters\n**--out_dir:** default = ./Asssembly_results, make sure it's the same as \"--out_dir\" from step1 if you want to define your own output directory name. \n**--chr_start --chr_end:** if you only want to assembly some chromosomes or only one chromosome. \n \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8359641025644611,
      "result": {
        "original_header": "Step 1:",
        "type": "Text_excerpt",
        "value": "```\nAquila_stLFR/bin/Aquila_stLFR_step1.py --fastq_file S12878.fastq --bam_file S12878.bam --vcf_file S12878_freebayes.vcf --sample_name S12878 --out_dir Assembly_results_S12878 --uniq_map_dir Aquila_stLFR/Uniqness_map_hg38\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/maiziex/Aquila_stLFR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2019 Xin (Maizie) Zhou\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Aquila_stLFR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "maiziex"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 334402,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 99628,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 34637,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 30935,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 957,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies for Github installation:",
        "parent_header": [
          "Install through Bioconda (The updated version 1.2.11):"
        ],
        "type": "Text_excerpt",
        "value": "Aquila_stLFR utilizes <a href=\"https://www.python.org/downloads/\">Python3 (+ numpy, pysam, sortedcontainers, and scipy)</a>, <a href=\"http://samtools.sourceforge.net/\">SAMtools</a>, and <a href=\"https://github.com/lh3/minimap2\">minimap2</a>. To be able to execute the above programs by typing their name on the command line, the program executables must be in one of the directories listed in the PATH environment variable (\".bashrc\"). <br />\nOr you could just run \"./install.sh\" to check their availability and install them if not, but make sure you have installed \"python3\", \"conda\" and \"wget\" first. \n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running The Code:",
        "parent_header": [
          "Install through Github:"
        ],
        "type": "Text_excerpt",
        "value": "Put the \"Aquila_stLFR/bin\" in the \".bashrc\" file, and source the \".bashrc\" file <br />\nOr just use the fullpath of \"**Aquila_stLFR_step1.py**\" and \"**Aquila_stLFR_step2.py**\"\n\n*We provide  <a href=\"https://github.com/maiziex/Aquila_stLFR/blob/master/example_data/run_example_data.md\">a small chromosome (chr21) example dataset</a> to run the whole pipeline before you try it into the large dataset. \n\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Step 1 for chromosomes parallelly on multiple(23) nodes",
        "parent_header": [
          "Hybrid assembly of 10x linked-reads and stLFR:",
          "Step 1:",
          "Memory/Time Usage For Step 1"
        ],
        "type": "Text_excerpt",
        "value": "Coverage | Memory| Time for chr1 on a single node | \n--- | --- | --- | \n90X | 350GB | 1-10:20:10 |\n\nCoverage | Memory| Time for chr21 on a single node | \n--- | --- | --- | \n90X | 100GB | 06:27:28 |\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2:",
        "parent_header": [
          "Install through Github:",
          "Running The Code:"
        ],
        "type": "Text_excerpt",
        "value": "```\nAquila_stLFR/bin/Aquila_stLFR_step2.py --out_dir Assembly_results_S12878 --num_threads 30 --reference Aquila_stLFR/source/ref.fa\n```\n#### *Required parameters\n**--reference:** \"Aquila_stLFR/source/ref.fa\" is the reference fasta file you can download by \"./install\".\n\n#### *Optional parameters\n**--out_dir:** default = ./Asssembly_results, make sure it's the same as \"--out_dir\" from ***Step1*** if you want to define your own output directory name.\n\n**--num_threads:** default = 30, this determines the number of files assembled simultaneously by SPAdes.  \n\n**--num_threads_spades:** default = 5, this is the \"-t\" for SPAdes. \n\n**--block_len_use:** default = 100000 (100kb)\n\n**--chr_start --chr_end:** if you only want to assembly some chromosomes or only one chromosome. For example: use \"--chr_start 1 --chr_end 2\" \n\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Step 2 for chromosomes parallelly on multiple nodes",
        "parent_header": [
          "Install through Github:",
          "Running The Code:",
          "Step 2:",
          "Memory/Time Usage For Step 2"
        ],
        "type": "Text_excerpt",
        "value": "Coverage| Memory| Time for chr1 on a single node | --num_threads | --num_threads_spades|\n--- | --- | --- | ---|---|\n90X| 100GB | 11:13:19 |30 | 20|\n\nCoverage| Memory| Time for chr21 on a single node | --num_threads | --num_threads_spades|\n--- | --- | --- | ---|---|\n90X| 100GB | 01:38:09 |30 | 20|\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "If your hard drive storage is limited(Aquila_stLFR could generate a lot of intermediate files for local assembly), it is suggested to quily clean some data by running `Aquila_stLFR_clean.py`. Or you can keep them for some analysis (check the above output directory tree for details).",
        "parent_header": [
          "Install through Github:",
          "Final Output Format:",
          "Clean Data"
        ],
        "type": "Text_excerpt",
        "value": "```\nAquila_stLFR/bin/Aquila_stLFR_clean.py --assembly_dir Assembly_results_S12878 \n```\n"
      },
      "source": "https://raw.githubusercontent.com/maiziex/Aquila_stLFR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:12:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}