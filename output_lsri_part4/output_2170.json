{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gjtucker/PC-Select"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-03-11T22:51:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-04T13:48:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9899980971639681,
      "result": {
        "original_header": "Simulated genotypes and phenotypes",
        "type": "Text_excerpt",
        "value": "Runs the simulation in Table 1.  Briefly, creates 100 simulated data sets with 1000 individuals and 10000 markers with p = 0.05, 0.005 markers causal and with or without population stratification.  See manuscript for details.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9066296318074468,
      "result": {
        "original_header": "Real genotypes and simulated phenotypes",
        "type": "Text_excerpt",
        "value": "Running this example requires real genotype data in plink binary format in the data directory.  First, convert the data into eigenstrat format.  \n1) Run a preprocessor to generate working files\n```matlab\nn_pcs = 5;\npreprocess('data/MS_ALL.geno', 'data', n_pcs);\npreprocess_real_geno_sim_pheno\ngenerate_data_and_runner('../working/5k_individuals', 1, 200)\n```\n \nRuns the simulation in Table 2.  Briefly, creates 200 simulated data sets with 5000 individuals and 50000 markers (subsampled from real genotypes) with p = 0.05, 0.005 markers causal and with or without population stratification.  See manuscript for details. \n"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.942182352854654,
      "result": {
        "original_header": "Real genotypes and real phenotypes",
        "type": "Text_excerpt",
        "value": "For the WTCCC2 MS data, we found that cross-validation selected all markers for both PC-Select and FaST-LMM Select.  We used GCTA (http://www.complextraitgenomics.com/software/gcta/) to compute the association statistics in this case.  We ran the following in the shell to do that\n```\ngcta64 --bfile data/MS_ALL --autosome --make-grm --out data/MS_ALL --thread-num 8\ngcta64 --grm data/MS_ALL --pca 5 --out data/MS_ALL\ngcta64 --mlma-loco --bfile data/MS_ALL --pheno data/phen.txt --out data/MS_ALL_pc --thread-num 8 --mlma-no-adj-covar --qcovar data/MS_ALL.eigenvec\ngcta64 --mlma-loco --bfile data/MS_ALL --pheno data/phen.txt --out MS_ALL_no_pc --thread-num 8 --mlma-no-adj-covar\n```\n \nwhere data/MS_ALL.{bim,bam,fam} contain the genotypes and phen.txt contains the phenotypes. \n"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/gjtucker/PC-Select/wiki"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gjtucker/PC-Select/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gjtucker/PC-Select/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gjtucker/PC-Select"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Accompanying code for PC-Select"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/setup.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "Accompanying code for PC-Select"
        ],
        "type": "Text_excerpt",
        "value": "* Run setup.sh \n* Download FaSTLMM Select from (http://research.microsoft.com/en-us/um/redmond/projects/mscompbio/fastlmm/) and put it in this directory.\n* Download GCTA (http://www.complextraitgenomics.com/software/gcta/mlmassoc.html)\n* (Optional) The real genotypes and phenotypes are made available by the WTCCC2 (http://www.wtccc.org.uk/ccc2/).  To run those analyses, acquire the data from WTCCC2 and convert to eigenstrat format ((http://www.hsph.harvard.edu/alkes-price/software/).\n\nAll of the following commands should be run from the src directory in Matlab unless otherwise specified.\n"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Cross-validation on large data sets",
        "parent_header": [
          "Accompanying code for PC-Select"
        ],
        "type": "Text_excerpt",
        "value": "Selects the number of SNPs to include in the GRM by CV log-likelihood.\n\nThis example assumes that you are in the directory of .m files and you have a data directory with the genotypes in eigenstrat format.  The phenotype is data/phen.txt and covariates are data/covars.txt.\n\n1) Run a preprocessor to generate working files\n\n```matlab\nn_pcs = 5;\npreprocess('data/MS_ALL.geno', 'data', n_pcs);\n```\n\nCreates data/GRM.mat, data/pcs.mat.\n\n2) Run CV code \n\n```matlab\ntop_k_choices = [10, 100, 1000, 10000];\nres = zeros(length(top_k_choices), 1);\n\nfor i = 1:length(top_k_choices)\n    res(i) = cross_validation('data', 'data/phen.txt', ...\n        'data/covars.txt', top_k_choices(i), 10, 1, true);\nend\n\n[~, I] = min(res);\ntop_k_choices(I)\n```"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9982735430640345,
      "result": {
        "original_header": "Real genotypes and simulated phenotypes",
        "type": "Text_excerpt",
        "value": "2) Then in the shell run\n```\nsh ../working/5k_individuals/sh_src/run.sh\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8278935093219296,
      "result": {
        "original_header": "Real genotypes and simulated phenotypes",
        "type": "Text_excerpt",
        "value": "Running this example requires real genotype data in plink binary format in the data directory.  First, convert the data into eigenstrat format.  \n"
      },
      "source": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gjtucker/PC-Select/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PC-Select"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "gjtucker"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 34895,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 611,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gjtucker/PC-Select/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:35:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}