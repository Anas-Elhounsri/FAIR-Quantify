{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xiexiaowei/pgRNAFinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-04-07T06:27:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-05-06T13:28:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "design distance independent paired-gRNA"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9366834722992209,
      "result": {
        "type": "Text_excerpt",
        "value": "##########################################################################################\nAnyone can use the source codes or the excutable file of pgRNAFinder free of charge for non-commercial use. \nFor commercial use, please contact the author. Please send bug reports to: xiexw3@mail2.sysu.edu.cn\nThis README file covers the following topics: \n1. Prerequest for pgRNAFinder\n2. pgRNAFinder frame\n3. Prepare pgRNAFinder input files\n4. How to run pgRNAFinder and the usage of parameters\n5. pgRNAFinder output files explanation \nThe goals achieved by each step:\nscript1. Getting fasta sequence from genomic region, gene name and target sequence.\nscript2: Getting sgRNA followed by four common PAMs such as NGG, NAG, NNGRRT, NNNNACA and any self-definded PAM comprised of A,G,C,T,N,R.\nscript3: Then, sgRNA having low-complexity sequence and specific restriction enzyme site will be discarded.\nscript4. The remaining sgRNA will be submit to SSC for evaluating efficiency (restricted to human and mouse). \n       At the same time, judging whether on-target sites locate in exon region and overlap with phast conserved element.\nscript5. Getting off-target sites based on Off-Spotter for ten species.\nscript6. Counting off-targets and off-targets located in exon for sgRNA.\n       Combining pgRNA from sgRNA and counting off-targets and off-targets located in exon for pgRNA.\n       At the same time, judging whether knockout regions of pgRNA locate in exon region and overlap with phast conserved element.\nscript7. Counting CG content, pair distance, deletion frequency and coverage. Finally output the suitable pgRNA with user-defined parameters.  \n##########################################################################################\n3. Prepare pgRNAFinder input \npgRNAFinder permits three kinds of inputs:\n1). genomic_region (chr:start-end)\n    chr1:69091-70008\n    chr1:38605757-38605866\n    chr8:128752630-128753214\n    ...\n2). gene name \n    OR4F5\n    tert\n    ...\n3). target_sequence\n    The file must have the following structure(fasta format). \n    Notice: Header that starts with \">\" and is followed by the unique sequence name with no space. \n    >seq1\n    CTGC...GACGCT\n    >seq2\n    CTTTCTTAAAG..\n    .....AAAGAGGC \nOptions:\n-i <str>\t      Input file\n-o <str>              Output file\n-g <str>              Genome: hg19, hg38, mm10, bosTau, canFam, danRer, galGal, ratNor, sacCer or susScr.  \n-f <str>              Flag: genomic_region, gene_name or target_sequence; should be consistent with the format of input.     \n-pam <str>            PAM sequence: NGG, NAG, NNGRRT, NNNNACA or self-definded sequence comprised of A,G,C,T,N,R\n-ul <int>             gRNA length: the number of base in the upstream of PAM; at better >=20bp for off-target analysis\n-dl <int>             Downstream length: the number of base in the downstream of PAM\n-enzys <str>          Restriction enzyme\uff1ano enzyme or GAGACC or GAGACC,GGTCTC or self-defined like e1,e2,...en\n-s <float>            SSC score: for evaluating gRNA efficiency, only SSC score higher than the cutoff will be reported.\n-mis <int>            Mismatch of Off-Spotter when finding off-targets(at most): 0, 1, 2, 3, 4, 5\n-gRNA <str>           gRNA type: sg(for designing single gRNA) or pg(for designing paired gRNA)\n-ontarget <str>       gRNA site: exon(>=1 gRNA located in exon) or all(report all gRNAs)\n-ota <int>\t      Off-targets located in genome(at most): Only those gRNAs whose Off-targets is lower than the cutoff will be reported. \n-ote <int>\t      Off-targets located in exon(at most): Lower is better.\n-cg <float>\t      Minimum~Maximum value of GC content\n-dis <int>\t      Minimum~Maximum distance between pgRNA\n-cover <float>        Minimum~Maximum coverage: equal to distance between pgRNA divided by the length of sequence\n-strand <str>         Strand: same(two gRNAs are in the same stand), diff(two gRNAs are in the different stand), both(report all gRNAs)\n-otsite <str>         yes (output detailed off-target sites) or no (don't output detailed off-target sites) \nAdvised options for better gRNAs: (some of which are also the default options of website)\n-ul                   >=20bp is recommended\n-s                    >0.5 is recommended\n-mis                  default is 2\n-gRNA                 default is pg\n-ontarget             exon is recommended; As for target sequence, here this option must be \"all\".\n-ota     \t      default is 10\n-ote                  default is 5\n-cg                   0.2~0.8 is recommended\n-strand               default: diff for paired nick; both for long pair\n-dis                  default: -2~32bp for paired nickase; 200~1000bp for paired guide RNA\n-cover                default 0.0~1.0 \nThere are 28 columns in this output file. Their meaning are:\t\nfield                  Meaning\nquery_info             Name of input sequence\ngRNA1                  Base sequence of one gRNA  \t\ngRNA2                  Base sequence of another pairwise gRNA \npos1                   Position of gRNA1 (the genome position for genomic_region and gene_name; the relative position in input sequence for target sequence)\npos2                   Position of gRNA2\nstrand1                Strand of gRNA1\nstrand2                Strand of gRNA2\nSSC_score1             Efficiency score for gRNA1 by SSC software (This has two kinds: score or non-SSC. non-SSC means that gRNA length, PAM and species can't meet the request of SSC software.)\nSSC_score2             Efficiency score for gRNA2 by SSC software\non_target1             On-target site of gRNA1    (This has three kinds: Ensemblid_genename_exon or non-exonic or unknown. non-exonic means that gRNA locates in non-coding region; unknown appears when flag is target_sequence.)\non_target2             On-target site of gRNA2\non_target_pair         On-target site of knockout region between pgRNA\nphastCE1               Phast conserved element overlapping with gRNA1  (This has three kinds: sum,count or non-phastCE or unknown. non-phastCE means no overlap with any phast conserved element; unknown appears when flag is target_sequence.)\nphastCE2               Phast conserved element overlapping with gRNA2\nphastCE_pair           Phast conserved element overlapping with knockout region between pgRNA\not_num1_in_exon\t       The number of off-targets located in exon for gRNA1\not_num2_in_exon\t       The number of off-targets located in exon for gRNA2\not_num_pair_in_exon    The number of off-targets located in exon for pgRNA (>=1 off-target located in exon)\not_num1\t               The number of off-targets for gRNA1\not_num2\t               The number of off-targets for gRNA2\not_num_pair            The number of off-targets for pgRNA (>=1 off-target located in exon)\nCG1\t               CG content of gRNA1\nCG2\t               CG content of gRNA2\npair_dis               Distance between pgRNA\ncover\t               Coverage of pgRNA     \ndel_freq               Deletion frequency, this value depends on the distance between pgRNA\not_site1               Detailed off-target sites for gRNA1\t\not_site2               Detailed off-target sites for gRNA2 \n\n2) single gRNA:\noutput example: (We advise you to view the output in excel.)\nquery_info\tgRNA\tpos\tstrand\tSSC_score\ton_target\tphastCE\tot_num\tot_num_in_exon\tCG\tot_site\nchr1:69091-70008\tCCACTGTTATGACAATAAGAAGGTTTCCAA\t69187\t-\t0.59\tENSG00000186092.4_OR4F5_exon\t(1466,5)\t3\t2\t0.37\t{'chr19': '110783__ENSG00000176695.5_OR4F17_exon', 'chr3': '122986852__non-exonic', 'chr15': '102463136__ENSG00000177693.3_OR4F4_exon'}\nchr1:69091-70008\tGTACATGGGAGAGTGAAGGTGGGAGTCAGA\t69219\t-\t0.55\tENSG00000186092.4_OR4F5_exon\t(746,2)\t5\t4\t0.53\t{'chr7': '142760355__ENSG00000179420.10_OR6W1P_exon', 'chr11': '7795190__ENSG00000166408.3_OR5P1P_exon', 'chr19': '110815__ENSG00000176695.5_OR4F17_exon', 'chr15': '102463104__ENSG00000177693.3_OR4F4_exon', 'chr2': '13424__non-exonic'}\n...\nExplanation is the similar to above. \n"
      },
      "source": "https://raw.githubusercontent.com/xiexiaowei/pgRNAFinder/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xiexiaowei/pgRNAFinder/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xiexiaowei/pgRNAFinder/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xiexiaowei/pgRNAFinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/xiexiaowei/pgRNAFinder/master/README.txt",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.995948931166784,
      "result": {
        "type": "Text_excerpt",
        "value": "##########################################################################################\n1. Prerequest for pgRNAFinder\n1). Python 2.7\n2). bedtools v2.25.0\n    fastaFromBed,intersectBed and groupBy were used.\n3). SSC (SSC0.1)\n    website: https://sourceforge.net/projects/spacerscoringcrispr/?source=typ_redirect\n    install steps:\n    download SSC0.1.tar.gz\n    tar -zxvf SSC0.1.tar.gz\n    run \"make\" in unzipped directory\n    done\n4). Off-Spotter_v0.2.2\n    website: https://cm.jefferson.edu/downloads/off-spotter-help/\n    install steps:\n    download Off-Spotter_v0.2.2.zip\n    unzip Off-Spotter_v0.2.2.zip\n    run \"make\" in unzipped directory\n    done\n    Before running, you must build index by \"Table_Creation\" like this:\n    Table_Creation -i fasta -o directory\n    Table_Creation -i /data8/xiexw/gRNA_tool/genomes/hg19.fa -o /data8/xiexw/Off-Spotter/hg19/\n5). necessary reference files:\n    \u2460. gennome sequence              \n    \u2461. gene position                 \n    \u2462. exon region for on-target     \n    \u2463. fasta for Off-Spotter         \n    \u2464. exon region for Off-Spotter\n    \u2465. phast conserved element\n    \u2466. gene structure\n    Corresponding files of ten genomes have been provided in ftp://222.200.187.83/genomes\n    Current ten genomes: hg19, hg38, mm10, bosTau, canFam, danRer, galGal, ratNor, sacCer and susScr.\n    More infomation about reference can be seen from \"reference_README.txt\" in the \"Links\" page of pgRNAFinder website. \n##########################################################################################\n2. pgRNAFinder frame\npgRNAFinder is a software package, which contains these scripts as follows: \n1). 01_get_sequence_for_search.py\n2). 02_search_sgRNA.py\n3). 03_get_sgRNA_candidate.py\n4). 04_sgRNA_efficiency.py       (It would call ontarget_phast.py)\n5). 05_offtarget_for_sgRNA.py \n6). 06_count_offtarget.py        (Itwould call ontarget_phast_pgRNA.py and ontarget_phast.py)\n7). 07_select_output.py \n8). run.py \nNotice: run.py is the main script. All you need to do is running run.py, which will automatically call scripts from 01 to 07. \n##########################################################################################\n4. How to run pgRNAFinder and the usage of parameters\nUsage: \npython run.py -i input -o output.txt -g genome -f flag -pam PAM -ul gRNA_length -dl downstream_length -enzys enzymes \\\n-s SSC_score -mis mismatch -gRNA type -ontarget ontarget -ota OTnum -ote OTnum_in_exon -cg CG -dis distance -cover coverage -strand strand -otsite yes,no \nExamples:\n1). for----sg\npython run.py -i genomic_region.txt -o output.txt -g hg19 -f genomic_region -pam NGG -ul 20 -dl 7 -enzys no \\\n-s 0.5 -mis 2 -gRNA sg -ontarget all -ota 10 -ote 5 -cg 0.2~0.8 -otsite yes\n2). for----pg \npython run.py -i genomic_region.txt -o output.txt -g hg19 -f genomic_region -pam NGG -ul 20 -dl 7 -enzys no \\\n-s 0.5 -mis 2 -gRNA pg -ontarget all -ota 10 -ote 5 -cg 0.2~0.8 -dis 0~1000 -cover 0.0~1.0 -strand all -otsite yes \nAdvised options for better gRNAs: (some of which are also the default options of website)\n-ul                   >=20bp is recommended\n-s                    >0.5 is recommended\n-mis                  default is 2\n-gRNA                 default is pg\n-ontarget             exon is recommended; As for target sequence, here this option must be \"all\".\n-ota     \t      default is 10\n-ote                  default is 5\n-cg                   0.2~0.8 is recommended\n-strand               default: diff for paired nick; both for long pair\n-dis                  default: -2~32bp for paired nickase; 200~1000bp for paired guide RNA\n-cover                default 0.0~1.0 \n##########################################################################################\n5. pgRNAFinder output files explanation\n1) pgRNA:\noutput example: (We advise you to view the output in excel.)\nquery_info\tgRNA1\tgRNA2\tpos1\tpos2\tstrand1\tstrand2\tSSC_score1\tSSC_score2\ton_target1\ton_target2\ton_target_pair\tphastCE1\tphastCE2\tphastCE_pair\tot_num1\tot_num2\tot_num_pair\tot_num1_in_exon\tot_num2_in_exon\tot_num_pair_in_exon\tCG1\tCG2\tpair_dis\tcover\tdel_freq\tot_site1\tot_site2\nchr1:67091-70091\tGAGTGTGTAGGACTAAGAAATGGGATTCAG\tCAGAGTAGTAAAGAGAAAAGTGGAATTTCC\t67351-67381\t67378-67408\t+\t+\t0.51\t0.54\tnon-exonic\tnon-exonic\tnon-exonic\tnon-phastCE\tnon-phastCE\tnon-phastCE\t2\t5\t1\t0\t0\t0\t0.43\t0.37\t3\t0.00\t1.00\t{'chr19': '108940__non-exonic', 'chr15': '102464544__non-exonic'}\t{'chr13': '53296344__non-exonic', 'chr7': '24663568__non-exonic', 'chr19': '108967__non-exonic', 'chr3': '157860263__non-exonic', 'chr1': '210265930__non-exonic'}\nchr1:67091-70091\tGAGTGTGTAGGACTAAGAAATGGGATTCAG\tCTATACCTTCATGTCTCCCGTGGAATGTTA\t67351-67381\t67490-67520\t+\t+\t0.51\t0.56\tnon-exonic\tnon-exonic\tnon-exonic\tnon-phastCE\tnon-phastCE\tnon-phastCE\t2\t2\t2\t0\t0\t0\t0.43\t0.43\t109\t0.04\t0.89\t{'chr19': '108940__non-exonic', 'chr15': '102464544__non-exonic'}\t{'chr19': '109079__non-exonic', 'chr15': '102464405__non-exonic'}\n... \n"
      },
      "source": "https://raw.githubusercontent.com/xiexiaowei/pgRNAFinder/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8968986846835995,
      "result": {
        "type": "Text_excerpt",
        "value": "##########################################################################################\n2. pgRNAFinder frame\npgRNAFinder is a software package, which contains these scripts as follows: \n1). 01_get_sequence_for_search.py\n2). 02_search_sgRNA.py\n3). 03_get_sgRNA_candidate.py\n4). 04_sgRNA_efficiency.py       (It would call ontarget_phast.py)\n5). 05_offtarget_for_sgRNA.py \n6). 06_count_offtarget.py        (Itwould call ontarget_phast_pgRNA.py and ontarget_phast.py)\n7). 07_select_output.py \n8). run.py \nNotice: run.py is the main script. All you need to do is running run.py, which will automatically call scripts from 01 to 07. \n##########################################################################################\n4. How to run pgRNAFinder and the usage of parameters\nUsage: \npython run.py -i input -o output.txt -g genome -f flag -pam PAM -ul gRNA_length -dl downstream_length -enzys enzymes \\\n-s SSC_score -mis mismatch -gRNA type -ontarget ontarget -ota OTnum -ote OTnum_in_exon -cg CG -dis distance -cover coverage -strand strand -otsite yes,no \nExamples:\n1). for----sg\npython run.py -i genomic_region.txt -o output.txt -g hg19 -f genomic_region -pam NGG -ul 20 -dl 7 -enzys no \\\n-s 0.5 -mis 2 -gRNA sg -ontarget all -ota 10 -ote 5 -cg 0.2~0.8 -otsite yes\n2). for----pg \npython run.py -i genomic_region.txt -o output.txt -g hg19 -f genomic_region -pam NGG -ul 20 -dl 7 -enzys no \\\n-s 0.5 -mis 2 -gRNA pg -ontarget all -ota 10 -ote 5 -cg 0.2~0.8 -dis 0~1000 -cover 0.0~1.0 -strand all -otsite yes \n"
      },
      "source": "https://raw.githubusercontent.com/xiexiaowei/pgRNAFinder/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xiexiaowei/pgRNAFinder/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pgRNAFinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "xiexiaowei"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 37160,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xiexiaowei/pgRNAFinder/master/README.txt"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:21:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}