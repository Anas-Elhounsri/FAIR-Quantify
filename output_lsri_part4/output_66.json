{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elkebir-group/MCT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-12T03:05:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-19T16:29:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Algorithms for summarizing cancer phylogenies using multiple consensus trees"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9976579252258297,
      "result": {
        "original_header": "MCT-Solver - Multiple Consensus Tree Solver",
        "type": "Text_excerpt",
        "value": "Multiple Consensus Tree (MCT) is a problem that takes a set of input trees on the same set of vertices and an integer k as input, find k consensus trees and a k-clustering of the input trees such that the sum of the distance of each input tree to its corresponding consensus tree is minimized.\nMCT-Solver contains 3 approaches to this problem, Brute Force, MILP, and Coordinate Ascent. \n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elkebir-group/MCT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elkebir-group/MCT/master/analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/analysis.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elkebir-group/MCT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elkebir-group/MCT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MCT-Solver - Multiple Consensus Tree Solver"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elkebir-group/MCT/master/Overview.png"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9395132768791168,
      "result": {
        "original_header": "Compilation",
        "type": "Text_excerpt",
        "value": "To compile MCT-Solver, execute the following commands from the root of the repository: \n    $ mkdir build\n    $ cd build\n    $ cmake .. -DCPLEX=1\n    $ make  \nIn case CMake fails to detect LEMON, run the following command with adjusted paths: \n    $ cmake -DLIBLEMON_ROOT=~/lemon  \nThe compilation results in the following files in the `build` directory: \n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elkebir-group/MCT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MCT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "elkebir-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 382690,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 132494,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 6816,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1293,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "MCT-Solver - Multiple Consensus Tree Solver",
          "Compilation instructions"
        ],
        "type": "Text_excerpt",
        "value": "MCT-Solver is written in C++11 and thus requires a modern C++ compiler (GCC >= 4.8.1, or Clang). In addition, SPhyR has the following dependencies.\n\n* [CMake](http://www.cmake.org/) (>= 2.8)\n* [Boost](http://www.boost.org) (>= 1.38)\n* [LEMON](http://lemon.cs.elte.hu/trac/lemon) graph library (>= 1.3)\n* [CPlex](https://www.ibm.com/analytics/data-science/prescriptive-analytics/cplex-optimizer) (>= 12.7)\n\n[Graphviz](http://www.graphviz.org) is required to visualize the resulting DOT files, but is not required for compilation.\n\n\n\n<a name=\"comp\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 01:42:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage instructions",
        "parent_header": [
          "MCT-Solver - Multiple Consensus Tree Solver"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"io\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "I/O formats",
        "parent_header": [
          "MCT-Solver - Multiple Consensus Tree Solver",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "MCT-Solver's input file is text based. The first line includes the the number of mutations (mutation clusters), in the format of \"# m out of m mutations\".\nThe second line includes the number of input trees, in the format of \"n #trees\" \nThen, each subsequent m line defines the an input tree. More specifically, the first line of the m lines includes the number of edges in the format of \"m-1 #edges, tree i\", and the following m-1 lines are descriptions of the edges of the tree in the format of \"v1 v2\" indicating that v1 is the unique parent of v2 in this tree.\n\n<a name=\"BF\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Brute Force (`mCTPBF`)",
        "parent_header": [
          "MCT-Solver - Multiple Consensus Tree Solver",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "    Usage:\n\t  ./mCTPBF [--help|-h|-help] [-c str] -k int -p str [-t int] trees\n\tWhere:\n\t  trees\n\t\t Input trees\n\t  --help|-h|-help\n\t\t Print a short help message\n\t  -c str\n\t\t Clustering\n\t  -k int\n\t\t Number of clusters\n\t  -p str\n\t\t Path to results (make it unique)\n\t  -t int\n\t\t Time limit in seconds (default: -1, no time limit)\n\n\nAn example execution:\n\n    $ ./mCTPBF -k 2 -p output ../data/TracerX/T_CRUK0013.txt\n\nThe file `output_cluster0.dot`, `output_cluster1.dot` contains the Parent-Child graph and the optimal consensus tree of the 2 cluster.\nThe file `output_clustering.txt` contains the clustering of the input trees.\nThe file `output_summary.csv` contains the summary of result.\n\n<a name=\"ILP\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MILP (`mCTPILP`)",
        "parent_header": [
          "MCT-Solver - Multiple Consensus Tree Solver",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "\tUsage:\n\t  ./mCTPILP [--help|-h|-help] [-T int] [-c str] -k int [-m int] -p str\n\t\t [-t int] [-v] trees\n\tWhere:\n\t  trees\n\t\t Input trees\n\t  --help|-h|-help\n\t\t Print a short help message\n\t  -T int\n\t\t Number of threads (default: 1)\n\t  -c str\n\t\t Clustering\n\t  -k int\n\t\t Number of clusters\n\t  -m int\n\t\t Memory limit in MB (default: -1, no memory limit)\n\t  -p str\n\t\t Path to results (make it unique)\n\t  -t int\n\t\t Time limit in seconds (default: -1, no time limit)\n\t  -v\n\t\t Verbose output (default: False)\n\nAn example execution:\n\n    $ ./mCTPILP -k 2 -p output ../data/TracerX/T_CRUK0013.txt\n\n<a name=\"CA\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MILP (`mCTPCA`)",
        "parent_header": [
          "MCT-Solver - Multiple Consensus Tree Solver",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "\t./mCTPCA -h\n\tUsage:\n\t  ./mCTPCA [--help|-h|-help] -k int -p str [-r int] [-s int] [-t int] trees\n\tWhere:\n\t  trees\n\t\t Input trees\n\t  --help|-h|-help\n\t\t Print a short help message\n\t  -k int\n\t\t Number of clusters\n\t  -p str\n\t\t Path to results (make it unique)\n\t  -r int\n\t\t Number of restarts (default: 50)\n\t  -s int\n\t\t Seed for random number generator (default:0)\n\t  -t int\n\t\t Time limit in seconds (default: -1, no time limit)\n\nAn example execution:\n\n    $ ./mCTPCA -k 2 -p output ../data/TracerX/T_CRUK0013.txt\n\n<a name=\"viz\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Solution visualization (`visualize`)",
        "parent_header": [
          "MCT-Solver - Multiple Consensus Tree Solver",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "The `visualize` executable generates a tree in DOT format.\n\n\tUsage:\n\t  ./visualize [--help|-h|-help] [-a] trees clustering\n\tWhere:\n\t  trees\n\t\t Input trees\n\t  clustering\n\t\t Clustering\n\t  --help|-h|-help\n\t\t Print a short help message\n\t  -a\n\t\t Show all arcs\n\n\nAn example execution:\n\n    $ ./visualize ../data/TracerX/T_CRUK0013.txt output_clustering.txt >test.dot\n    $ dot -Tpng test.dot -o test.png\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/MCT/master/README.md",
      "technique": "header_analysis"
    }
  ]
}