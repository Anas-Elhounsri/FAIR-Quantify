{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KChen-lab/Cyclum"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-12T18:28:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-09T13:59:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Identify circular trajectories in scRNA-seq data using an autoencoder with sinusoidal activations"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "Cyclum"
        ],
        "type": "Text_excerpt",
        "value": "Cyclum is a package to tackle cell cycle. It provides methods to recover cell cycle information and remove cell cycle factor from the scRNA-seq data. The methodology is to rely on the circular manifold, instead of the marker genes. We provide an Auto-Encoder based realization at this time, and we are adding Gaussian Process Latent Variable Model soon.\n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8817605334770976,
      "result": {
        "original_header": "Refine labels from other sources:",
        "type": "Text_excerpt",
        "value": "If you have labels from other sources such as `scanpy.tl.score_genes_cell_cycle` or `Seurat::CellCycleScoring`, \nyou can use Cyclum to refine the result along the inferred pseudotime.\n```python\nfrom cyclum.postproc import refine_labels\nrefine_labels(pseudotime=[4, 5, 1, 2, 3, 6, 7, 8], original_labels=['G1', 'G1', 'G1', 'G1', 'S', 'S', 'G2M', 'G2M'])\n```\nIt will output BASH2* as the refined result. \nNote that an `S` is replaced by `G1` as it is surrounded by `G1`s.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9943286575004855,
      "result": {
        "original_header": "Transferring data between python and R",
        "type": "Text_excerpt",
        "value": "Although Python is a good data analysis tool in addition to a general programing language, researchers may want to use R, which is more focused on statistics. Cyclum is implemented in python, but in order to help use both languages, we implemented `mat2hdf` and `hdf2mat` in both Python and R, to help transferring data back and forth rapidly. In general, the correspondence of data structures in R and Python are: unnamed matrices -- 2D numpy.array, named matrices -- pandas.DataFrame, data.frame -- pandas.DataFrame. (Prerequisites: `hdf5r` in R, `h5py` in python.)\n \n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9649570935836247,
      "result": {
        "original_header": "Transferring data to GSEA",
        "type": "Text_excerpt",
        "value": "[GSEA](http://software.broadinstitute.org/gsea/index.jsp) is a powerful tool to perform downstream gene enrichment analysis. We implemented in R...\n- `mat2txt`, which writes a expression matrix to a GSEA compatible `.txt` file (Prerequisite: `data.table`, for much faster writing than `write.table`),\n- `vec2cls`, which writes phenotypes (either discrete, e.g., cell type, or continuous, e.g., pseudotime) to a GSEA compatible `.cls` file,\n- `mat2cls`, which writes multiple sets of phenotypes (continuous only, e.g., multiple PCs) to a GSEA compatible `.cls` file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9887892711288415,
      "result": {
        "original_header": "The old version",
        "type": "Text_excerpt",
        "value": "We revised almost everything, except for the concept of using sinusoidal function in an autoencoder to find circular biological processes *ab initio*. The autoencoder is now rewritten using [keras](https://keras.io/), in a more readable way. We hope this will help researchers who want to experiment similar network structures. We also implemented class `cyclum.tuning.CyclumAutoTune`, which automatically select the proper number of linear components to help find the \"most circular\" manifold. The old version is kept in [`old-version`](old-version).\n \n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KChen-lab/cyclum/tree/master/old-version/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/KChen-lab/cyclum/wiki"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KChen-lab/cyclum/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/example_mESC_simulated.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/example_mESC_simulated.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/example_mel78.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/example_mel78.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/example_mESC.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/example_mESC.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/example_mESC_neo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/example_mESC_neo.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KChen-lab/Cyclum/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KChen-lab/Cyclum"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cyclum"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/compile_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/recompile_docs.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/old-version/docs/Illustration.PNG"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Cyclum"
        ],
        "type": "Text_excerpt",
        "value": "You can install cyclum by running the following commands, in a directory you desire.\n\n```bash\nconda create -n cyclum python=3.7 pip\nconda activate cyclum\ngit clone https://github.com/KChen-lab/Cyclum.git\ncd Cyclum\npip install .\n```\n:warning: **This will install cyclum and its dependencies to your system, which affects more than just this directory.** Thus, we highly recommend virtual environment such to avoid messing up your system / breaking dependencies of other software. [Miniconda](https://docs.conda.io/en/latest/miniconda.html) may be a good choice if you have not already installed one.\n\nYou can then run Jupyter notebook simple using the following command.\n```bash\njupyter notebook\n```\nA browser window will open showing the directory, where you can go to `tests/notebokks` to view/run the exmaples.\n\n:warning: Please be advised that pip will attemp to install the latest version of the dependencies, which is different from where this program is tested (shown in the table below). TensorFlow < 1.15.2 has a known security issue and are not recommended. However, you can force pip to install specific versions by change `install_requires=[...]` in `setup.py` to `install_requires=['keras==2.2.4', 'numpy==1.16.5', 'pandas==0.25.2', 'scikit-learn==0.21.3', 'h5py==2.9.0', 'jupyter==1.0.0', 'matplotlib==3.1.1', 'tensorflow==1.14.0']`.\n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KChen-lab/Cyclum/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "artifical-neural-network, latent-process-inference, single-cell-rna-seq, trajectory-inference-methods"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 KChen-lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cyclum"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "KChen-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 113610,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 19214,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 10012,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software dependencies:",
        "parent_header": [
          "Cyclum",
          "Use as portable software"
        ],
        "type": "Text_excerpt",
        "value": "Cyclum was tested on these package versions. Please make sure that you have TensorFlow 1.x. Cyclum is compatible with newer versions shown in the \"Latest tested\" column.\n|Software    | Version| Latest tested |\n|------------|--------|---------------|\n|python      | 3.7.4  | 3.7.6         |\n|keras       | 2.2.4  | 2.3.1         |\n|tensorflow  | 1.14.0 | 1.15.2        |\n|numpy       | 1.16.5 | 1.18.1        |\n|pandas      | 0.25.2 | 1.0.1         |\n|scikit-learn| 0.21.3 | 0.22.1        |\n|h5py        | 2.9.0  | 2.10.0        |\n|jupyter     | 1.0.0  | 1.0.0         |\n|matplotlib  | 3.1.1  | 3.1.3         |\n\nWe recommend Miniconda to manage the packages. The code should work on packages of newer versions, but in case it fails, you can return to the specific version by, for example, `conda install python=3.7.4`.\n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:07:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials",
        "parent_header": [
          "Cyclum"
        ],
        "type": "Text_excerpt",
        "value": "We provide a [one-click self-contained demo](https://github.com/KChen-lab/Cyclum-Demo) ships with its dataset, which shows how to start with an expression matrix, then decide the optimal dimensionality, and finally calculate the circular pseudotime. \n\nMore examples are available in [test/notebooks](https://github.com/KChen-lab/Cyclum/tree/master/tests/notebooks), where there is a detailed [table of contents](https://github.com/KChen-lab/Cyclum/blob/master/tests/notebooks/README.md). \n\n![Illustration](old-version/docs/Illustration.PNG)\n\nOur paper was published: [Liang S, Wang F, Han J, Chen K. Latent periodic process inference from single-cell RNA-seq data. Nat Commun 11(1):1441, 3/2020. e-Pub 3/2020. PMID: 32188848](https://www.nature.com/articles/s41467-020-15295-9). [old preprint](https://www.biorxiv.org/content/10.1101/625566v1) was able @ BioRxiv. Documentation for submodules and classes in the Cyclum Python module is available as a [website](https://kchen-lab.github.io/Cyclum/docs/_build/html/index.html). Explanations of other files in [test](https://github.com/KChen-lab/Cyclum/tree/master/tests) are available as `README.md` in the corresponding folders.\n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use as portable software",
        "parent_header": [
          "Cyclum"
        ],
        "type": "Text_excerpt",
        "value": "You can also use cyclum as a portable software, without installing. All the notebooks contains code that add cyclum to the path, so that you can run them directly. However, please make sure the dependencies are fulfilled. \n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "System requriment:",
        "parent_header": [
          "Cyclum",
          "Use as portable software"
        ],
        "type": "Text_excerpt",
        "value": "The code is on Debian GNU/Linux 10 (buster) with both CPU and GPU. The code should run on most mainstream systems (Linux, Mac, Windows) supporting Tensorflow.\n"
      },
      "source": "https://raw.githubusercontent.com/KChen-lab/cyclum/master/README.md",
      "technique": "header_analysis"
    }
  ]
}