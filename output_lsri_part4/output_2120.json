{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 02: one sample, one tool, different reference genomes",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "When want to compare the differences between runs on different genome builds, we can add each runs and define a different gene annotation for each run. Imagine we have run a sample with TopHat-Fusion on reference genomes hg18 and hg19, we can run FuMa as follows:\n\n\tfuma \\\n\t    -a  \"hg18:genes_hg18.bed\" \\\n\t        \"hg19:genes_hg19.bed\" \\\n\t    \\\n\t    -s  \"thf_hg18:Tophat-Fusion Post result:thf_hg18/result.txt\" \\\n\t        \"thf_hg19:Tophat-Fusion Post result:thf_hg19/result.txt\" \\\n\t    -l  \"thf_hg18:hg18\" \\\n\t        \"thf_hg19:hg19\" \\\n\t    -f  \"list\" \\\n\t    -o  \"thf_hg18_hg19_overlap.txt\"\n\nIt is important that the gene annotations genes_hg18.bed and genes_hg19.bed contain similar gene names, since matching is based on these names. Therefore it is recommanded to remove gene names that are specific per annotation; the latest genes only available in hg19 will never be matched with hg18 simply because they do not exist in hg18.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "- Beccuti, M., Carrara, M., Cordero, F., Lazzarato, F., Donatelli, S., Nadalin, F., Policriti, A., and Calogero, R. A. (2014). Chimera: a Bioconductor package for secondary analysis of fusion products. Bioinformatics (Oxford, England), 30(24), 3556--7.\n- Benelli M, Pescucci C, Marseglia G, Severgnini M, Torricelli F, Magi A. Discovering chimeric transcripts in paired-end RNA-seq data by using EricScript. Bioinformatics. 2012; 28(24): 3232-3239.\n- Blankenberg, D., Kuster, G. V., Coraor, N., Ananda, G., Lazarus, R., Mangan, M., Nekrutenko, A., and Taylor, J. (2010). Galaxy: A web-based genome analysis tool for experimentalists. Current protocols in molecular biology, pages 19--10.\n- Carnevali, P., Baccash, J., Halpern, A. L., Nazarenko, I., Nilsen, G. B., Pant, K. P., Ebert, J. C., Brownley, A., Morenzoni, M., Karpinchyk, V., Martin, B., Ballinger, D. G., and Drmanac, R. (2012). Computational Techniques for Human Genome Resequencing Using Mated Gapped Reads.\n- Davidson, M., Majewski, I., Oshlack, A. (2015). JAFFA: High sensitivity transcriptome-focused fusion gene detection. Genome Medicine, 7(1), 1-12.\n- Dobin, A., Davis, C. A., Schlesinger, F., Drenkow, J., Zaleski, C., Jha, S., Batut, P., Chaisson, M., and Gingeras, T. R. (2013). STAR: Ultrafast universal RNA-seq aligner. Bioinformatics, 29, 15--21.\n- Edgren, H., Murumagi, A., Kangaspeska, S., Nicorici, D., Hongisto, V., Kleivi, K., Rye, I. H., Nyberg, S., Wolf, M., Borresen-Dale, A.-L., and Kallioniemi, O. (2011). Identification of fusion genes in breast cancer by paired-end RNA-sequencing. Genome biology, 12(1), R6.\n- Ge, H., Liu, K., Juan, T., Fang, F., Newman, M., and Hoeck, W. (2011). Fusionmap: detecting fusion genes from next-generation sequencing data at base-pair resolution. Bioinformatics.\n- Giardine, B., Riemer, C., Hardison, R. C., Burhans, R., Elnitski, L., Shah, P., Zhang, Y., Blankenberg, D., Albert, I., Taylor, J., Miller, W. C., Kent, W. J., and Nekrutenko, A. (2005). Galaxy: a platform for interactive large-scale genome analysis. Genome research, 15(10), 1451--1455.\n- Goecks, J., Nekrutenko, A., Taylor, J., and Team, T. G. (2010). Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences. Genome Biol, 11(8), R86.\n- Iyer, M. K., Chinnaiyan, A. M., and Maher, C. A. (2011). Chimerascan: a tool for identifying chimeric transcription in sequencing data. Bioinformatics, 27(20), 2903--2904.\n- Kim, D. and Salzberg, S. L. (2011). TopHat-Fusion: an algorithm for discovery of novel fusion transcripts. Genome biology, 12(8), R72.\n- McPherson, A., Hormozdiari, F., Zayed, A., Giuliany, R., Ha, G., Sun, M. G. F., Griffith, M., Moussavi, A., Senz, J., Melnyk, N., Pacheco, M., Marra, M. A., Hirst, M., Nielsen, T. O., Sahinalp, S. C., Huntsman, D., and Shah, S. P. (2011). Defuse: An algorithm for gene fusion discovery in tumor rna-seq data. PLoS Computational Biology, 7.\n- Nicorici, D., Satalan, M., Edgren, H., Kangaspeska, S., Murumagi, A., Kallioniemi, O., Virtanen, S., and Kilkku, O. (2014). Fusioncatcher - a tool for finding somatic fusion genes in paired-end rna-sequencing data. Technical report.\n- Sanna, C. R., Li, W.-H., and Zhang, L. (2008). Overlapping genes in the human and mouse genomes. BMC genomics, 9, 169.\n- Tomlins, S. A., Laxman, B., Varambally, S., Cao, X., Yu, J., Helgeson, B. E., Cao, Q., Prensner, J. R., Rubin, M. A., Shah, R. B., Mehra, R., and Chinnaiyan, A. M. (2008). Role of\nthe tmprss2-erg gene fusion in prostate cancer. Neoplasia, 10(2), 177--188.\n- Wu, T. D. and Watanabe, C. K. (2005). GMAP: a genomic mapping and alignment program for mRNA and EST sequences. Bioinformatics (Oxford, England), 21(9), 1859--75.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ErasmusMC-Bioinformatics/fuma"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-06-16T08:29:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-03-18T15:14:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ":dash::leopard: Fusion Matcher: Match predicted fusions according to chromosomal location or gene annotation(s)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "This is the Manual as part of the Supplementary Material that belongs to the manuscript: *FuMa: reporting overlap in RNA-seq detected fusion genes* (under submission). FuMa (Fusion Matcher) matches predicted fusion events (both genomic and transcriptomic) according to chromosomal location and corresponding annotated genes. It is the organisation of the transcriptome (provided by the user) that forms the basis for FuMa to consider fusion genes to be identical or not. The provided gene annotation can be adjusted to define the biological question. For example, if it is desired to only consider fusion events that occur within exons, FuMa can be provided a list of such regions instead of entire genes. Currently FuMa supports input files from:\n\n+\tChimera (Beccuti et al., 2014)\n+\tChimeraScan (Iyer et al., 2011)\n+\tCompleteGenomics (Carnevali et al., 2012)\n+\tDeFuse (McPherson et al., 2011)\n+\tEricScript (Benelli et al., 2012)\n+\tFusionCatcher (Nicorici et al., 2014)\n+\tFusionMap (Ge et al., 2011)\n+\tGMAP (Wu and Watanabe, 2005)\n+\tJAFFA (Davidson et al., 2015)\n+\tSTAR (Dobin et al., 2013)\n+\tSTAR Fusion ([https://github.com/STAR-Fusion/STAR-Fusion](https://github.com/STAR-Fusion/STAR-Fusion))\n+\tTopHat-Fusion (Kim and Salzberg, 2011)\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9756013838183567,
      "result": {
        "original_header": "Technical Implementation",
        "type": "Text_excerpt",
        "value": "Matching fusion genes based on the genomic location shows limited accuracy. Therefore it is more convenient to use the gene names overlapping the breakpoints instead. Since \u223c10% of the annotated human genes are overlapping (Sanna et al., 2008), and more genes and transcripts are being discovered by the RNA-Seq technology, breakpoints frequently span multiple genes. This complicates matching based on gene names and to account for that, matching two fusion genes in FuMa is achieved using set-theory based matching (overlap or subset). First both genomic partners of a fusion event are annotated with overlapping gene(s). Then fusion genes will be matches based on the opverlapping genes (using set-theory). The overlap- and subset matching approach have the advantage over the more stringent exact gene matching (EGM) approach that a certain level of overlapping genes are considered as acceptable. They behave quite similar but have features that require a more detailed explanation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9835524391066441,
      "result": {
        "original_header": "Overlap-based matching",
        "type": "Text_excerpt",
        "value": "Overlap based matching is the default matching scheme of FuMa. It considers two fusion genes identical if both the genes sets, the left and the right, have at least one overlapping gene in common. We provide a more detailed description ([Fig. S1a: Example of overlap matching](#fig-s1a-example-of-overlap-matching)) and outline a corresponding truth-table. This scheme is less stringent than matching using subset based matching and has a few noteworthy characteristics: \n - **Long genes.** Long genes may span more other genes by chance. Therefore, two distant fusion genes that, by chance, also fall in the same long gene, may be matched only because they both overlap this same long gene. (See [example 1](#example-1-long-genes))\n - **Set expansion or set shrinkage.** When two (input) fusion genes match, the matched fusion gene has to have annotated genes based on the gene sets of the two (input) fusion genes. There are two sets that make sense to return; the intersect (all genes that must be present in both fusion genes) or the union (all genes, that must be present in at least one of them). When we use the union, those genes that are present in only one or in both gene sets, we introduce a problem we refer to as *set expansion*, which will result in an outcome that is dependent on the order of matching and on the iteration depth. This is very undesirable behavior and therefore FuMa returns the intersect instead. But the intersect of two gene sets may create a gene sets that are smaller than both gene sets initially used for matching. We refer to this as *set shrinkage*. For example, if set (*GREEN*, *BLUE*) is being matched with (*BLUE*, *RED*), the set of overlapping genes will be (*BLUE*). This is different from the subset method, because there the smallest initial gene set is being returned, since that's the set shared by both fusion genes. Therefore the gene sets in the subset method will never become smaller than the gene set of the smallest input gene set, while for the overlap based method the matched subset is not neccesairily equal to any set observed at the breakpoints. (See [example 2](#2-set-expansion-and-shrinkage)) \n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9494288640226011,
      "result": {
        "original_header": "Subset-based matching",
        "type": "Text_excerpt",
        "value": "The subset matching approach of FuMa considers two fusion genes identical if one of the left gene sets is a subset of the other left gene set, and one of the right gene sets is a subset of the other right gene set. Consequently for both the left and the right gene set, the intersect (subset) will be returned to the matched fusion gene. To illustrate how the subset matching methodology works, we give an example ([Fig. S1b: Example of the subset matching methodology](#fig-s1b-example-of-the-subset-matching-methodology)) and outline the corresponding truth-table. \n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ErasmusMC-Bioinformatics/fuma/wiki"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ErasmusMC-Bioinformatics/fuma/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ErasmusMC-Bioinformatics/fuma/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ErasmusMC-Bioinformatics/fuma"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FuMa (Fusion Matcher) "
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yhoogstrate/fuma/raw/master/share/Fig_S1.png"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yhoogstrate/fuma/raw/master/share/Fig_S1.png"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yhoogstrate/fuma/raw/master/share/Fig_S2.png"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Exact gene set matching (EGM)",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Technical Implementation"
        ],
        "type": "Text_excerpt",
        "value": "EGM consider fusion genes to be identical if their left and right gene sets are exactly identical. This is the most stringt matching scheme.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 2: set expansion and shrinkage",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Technical Implementation",
          "Differences between matching types"
        ],
        "type": "Text_excerpt",
        "value": "When the overlap based matching is used and consideres two fusion genes a match, a consensus left- and right gene set has to be returned for the merged fusion gene. There are two sets that can practically be returned, but both have some characteristics that are worthwile to mention.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Set shrinkage",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Technical Implementation",
          "Differences between matching types"
        ],
        "type": "Text_excerpt",
        "value": "The priciple of *set shrinkage* occurs when the returning gene set contain is the intersect of the two sets; contains only those genes that overlap. Consider two example fusion genes that have the following gene sets:\n\n\tFusion1: GeneA, GeneB, GeneC\n\t                  |      |\n\tFusion2:        GeneB, GeneC, GeneD, GeneE\n\nThe fusion genes are considered to be a match and the merged fusion gene should contain a new gene set. The intersect of the gene sets of *Fusion1* and *Fusion2* is (*GeneB*, *GeneC*). Hence, genes *GeneA*, *GeneD* and *GeneE* are taken out of the merged fusion.\n\nWhen we continue matching with e.g. *Fusion3*:\n\n\tFusion1,2*:     GeneB, GeneC\n\t                  |\n\tFusion3:        GeneB,        GeneD\n\nBoth fusion genes have only *GeneB* in common, and the merged fusion gene will thus only contain *GeneB*. So *GeneC* is now also lost, although it was present in *Fusion1* and *Fusion2*. *GeneB* is the only gene shared in all three fusion genes, but it may be important to know that *GeneC* was shared in two of fusion genes. This information is lost because of the nature of the overlap matching approach in combination with returning the intersect. We refer to this as the set shrinkage issue. Note that the intersect is the implemented method for overlap based matching. When the subset approach was used instead, Fusion3 would not have been considered a match with the merged fusion gene *Fusion1,2\\**.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Set expansion",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Technical Implementation",
          "Differences between matching types"
        ],
        "type": "Text_excerpt",
        "value": "**This section illustratates a methodology and this is not actually implemented in FuMa.**\n\nWhen a merged fusion gene would contain the union of the genes, we would encounter a so called set expansion which will introduce order and iteration depentent results. To illustrate the problem of set expansion, imagine the following breakpoints:\n\n 1. b1 = ```(A,A')```\n 2. b2 = ```(A,A'')```\n 3. b3 = ```(A'',B)```\n\nTo visualize such situation, we are most likely dealing with an annotation similar to this:\n\n\t       b1      b2       b3     \n\t       |       |        |      \n\t[---A'---]     |        |      \n\t     [-----A-----]      |      \n\t             [-----A''-----]   \n\t                      [---B---]\n\nWhen we match these three breakpoints using the overlap-based method that returns any of the genes involved in any fusion gene, the results will become dependent on the order of matching and on the iteration depth. For this example we denote the following possible orders of matching:\n\n 1. ```(b1 & b2) & b3```\n 2. ```(b1 & b3) & b2```\n 3. ```(b2 & b3) & b1```\n \nWhen we match in **order 1**, we observe the following:\n\n 1. Iteration 1: \n    - ```(A,A') & (A,A'') -> (b1 & b2) = (A,A',A'')*```\n 2. Iteration 2:\n    - ```(A,A',A'')* & (A'',B) -> (b1 & b2 & b3) = (A,A',A'',B)```\n\nWhen we match in **order 2**, we observe the following:\n\n 1. Iteration 1:\n    - ```(A,A') & (A'',B) -> ``` no match; b1 and b3 are not considered to be identical\n \nWhen we match in **order 3**, we observe the following:\n\n 1. Iteration 1:\n    - ```(A,A'') & (A'',B) -> (b2 & b3) = (A,A'',B)*```\n 2. Iteration 2:\n    - ```(A,A'',B)* & (A,A') -> (b1 & b2 & b3) = (A,A',A'',B)```\n\nThis illustrates that *b1* and *b3* are considered identical in *order 1* and *order 3*, but not in *order 2*. \n\nThe second problem we encounter is that the gene sets have become larger. Before matching, the gene sets all had a size of 2 genes, after the first iteration the size of the matches were 3 genes and after the second iteration the size of the genes sets have become 4 genes. Therefore, the merged fusion gene can be matched with more fusion genes than each of the input fusion genes themselves. Therefore it is not a convenient strategy to return the entire set of genes.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Debian, Ubuntu and derivatives",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "FuMa requires Python 2.7, depends on HTSeq and can be obtained via git. We recommand the following commands to install FuMa (on Ubuntu and Debian derivate systems):\n\n\tsudo apt-get install build-essential python-dev git python-pip\n\tsudo pip uninstall fuma\n\t\n\tgit clone https://github.com/yhoogstrate/fuma.git\n\t\n\tcd fuma\n\t\n\tpython setup.py build\n\tpython setup.py test\n\tsudo python setup.py install\n\t\n\tfuma --version\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ErasmusMC-Bioinformatics/fuma/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fuma"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ErasmusMC-Bioinformatics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 344106,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 100,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:24:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Fig. S1a: Example of overlap matching",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Technical Implementation",
          "Overlap-based matching"
        ],
        "type": "Text_excerpt",
        "value": "*Both scenario's (left and right) illustrate two predicted fusion genes, Fusion #1 and Fusion #2. Both have the same right location (red dashed line through the yellow gene), located in one single gene annotation, the yellow gene. Fusion #1 has two annotated genes on its left location: the green and the blue gene. In the right scenario, Fusion #2 is located in the blue and purple gene while in the left scenario it is only located within the blue gene. In the left scenario, the two fusions are considered identical because the left gene set of Fusion #2 (blue) overlaps the left gene set of Fusion #1 (blue and green). Also in the right scenario, the left gene sets (purple, blue) and (green, blue) are overlaping and the fusion genes are therefore considered to be identical, but the set is reduced to (blue) since that's the part that overlaps. The corresponding table of FuMa's overlap based matching strategy is given below [Table S1a: Overlap-based truth table](#table-s1a-overlap-based-truth-table). Depending on the genes spanning the breakpoints (first four columns), FuMa determines whether the fusion genes match (fifth column). The first four columns represent the gene sets (delimited with a comma) spanning the left and right locations. These gene names correspond to the colors used in figure above. The 5th column indicates whether FuMa considers the two fusions a match or not. The 6th and 7th columns represent the gene sets of the merged fusion gene as result of matching Fusion #1 and #2. The first examples matches because (blue) overlaps (blue, green), the second example matches because (blue, purple) and (blue, green) have blue in common.*\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Fig. S1b: Example of the subset matching methodology",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Technical Implementation",
          "Subset-based matching"
        ],
        "type": "Text_excerpt",
        "value": "*Both scenario's (left and right) illustrate two predicted fusion genes. In addition, both fusion genes have the same right location (red dashed line), located in one single gene annotation, the yellow gene. Also, Fusion #1 has two annotated genes on its left location: the green- and the blue gene. In the right scenario, Fusion #2 is located in the blue- and purple gene while in the left scenario it is only located within the blue gene. Therefore, in the left scenario, the two fusions are considered identical because the left gene set of Fusion #2 (blue) is a subset of the left gene set of Fusion #1 (blue and green). In the right scenario, the left gene sets (purple, blue) and (green, blue) are no subsets of each other and the fusion genes are therefore considered as distinct fusion genes. The corresponding table of FuMa's subset based matching strategy is given below [Table S1b: Subset-based truth table](#table-s1b-subset-based-truth-table). Depending on the genes spanning the breakpoints (first four columns), FuMa determines whether the fusion genes match (fifth column). The first four columns represent the gene sets (delimited with a comma) spanning the left and right locations. These gene names correspond to the colors used in the figure above. The 5th column indicates whether FuMa considers the two fusions a match or not. The 6th and 7th columns represent the gene sets of the merged fusion gene as result of matching Fusion #1 and #2. The first examples matches because (blue) is a valid subset of (blue, green) while the second example does not match because the left gene sets contain either (purple) or (green) which are mutually exclusive.*\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 1: long genes",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Technical Implementation",
          "Differences between matching types"
        ],
        "type": "Text_excerpt",
        "value": "\t    f1                     f2\n\t    |                      |\n\t[ gene-A ]             [ gene-B ]\n\t[---------- long gene ----------]\n\nIn the illustrated example situation above, fusion genes *f1* and *f2* shall be matched using the overlap approach, since they both overlap *long gene*. In the case long gene is a really huge gene, it may span many other genes. Any fusion annotated upon this very long gene will in the overlap based matching be considered a match with any other fusion gene annotated within the long gene. When the subset matching was used, they would not have been considered a match, since (*gene-A*, *long gene*) is not a subset of (*gene-B*, *long gene*).\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 2: set expansion and shrinkage",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Technical Implementation",
          "Differences between matching types"
        ],
        "type": "Text_excerpt",
        "value": "When the overlap based matching is used and consideres two fusion genes a match, a consensus left- and right gene set has to be returned for the merged fusion gene. There are two sets that can practically be returned, but both have some characteristics that are worthwile to mention.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Galaxy",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Because usage of FuMa via the command line can be experienced as complicated, we also provide FuMa as Galaxy tool (Goecks\net al., 2010; Blankenberg et al., 2010; Giardine et al., 2005). The toolshed repository is in which FuMa is available is:\n\n[https://toolshed.g2.bx.psu.edu/view/yhoogstrate/fuma](https://toolshed.g2.bx.psu.edu/view/yhoogstrate/fuma)\n\nTo install FuMa via Galaxy, you have to make sure you have the main toolshed [https://toolshed.g2.bx.psu.edu/](https://toolshed.g2.bx.psu.edu/) is configured in the servers tool_sheds_conf.xml. To install FuMa within galaxy, follow the procedure via the galaxy admin panel. We have made FuMa publicly available at the following galaxy instance:\n\n[https://bioinf-galaxian.erasmusmc.nl/galaxy/](https://bioinf-galaxian.erasmusmc.nl/galaxy/)\n\nWe have made the example data available as shared data library at the following url:\n\n[https://bioinf-galaxian.erasmusmc.nl/galaxy/library/list#folders/F313c46a90355d6dd](https://bioinf-galaxian.erasmusmc.nl/galaxy/library/list#folders/F313c46a90355d6dd)\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Command line",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To run FuMa via the command line, each dataset should be given as a separate file. Similarly, the corresponding gene annotation has to be linked to each dataset. Similarly, the file format has to be specified for each input dataset. This is a rather complex information structure and therefore, unfortunately, the command line arguments may be experienced as complicated. The command line usage of FuMa is:\n\n\tusage: fuma [-h] [-V] [--formats] [-m {overlap,subset,egm}]\n\t            [--strand-specific-matching] [--verbose]\n\t            [-a [ADD_GENE_ANNOTATION [ADD_GENE_ANNOTATION ...]]] -s ADD_SAMPLE\n\t            [ADD_SAMPLE ...]\n\t            [-l [LINK_SAMPLE_TO_ANNOTATION [LINK_SAMPLE_TO_ANNOTATION ...]]]\n\t            [-f {summary,list,extensive}] [-o OUTPUT]\n\t\n\toptional arguments:\n\t  -h, --help            show this help message and exit\n\t  -V, --version         show program's version number and exit\n\t  --formats             show accepted dataset formats\n\t  -m {overlap,subset,egm}, --matching-method {overlap,subset,egm}\n\t                        The used method to match two gene sets. Overlap\n\t                        matches when two gene set have one or more genes\n\t                        overlapping. Subset matches when one gene set is a\n\t                        subset of the other. EGM is exact gene matching; all\n\t                        genes in both sets need to be identical to match.\n\t  --strand-specific-matching\n\t                        Take strand specificness into account (5' -> 3' ? 3'\n\t                        -> 5')\n\t  --verbose             increase output verbosity\n\t  -a [ADD_GENE_ANNOTATION [ADD_GENE_ANNOTATION ...]], --add-gene-annotation [ADD_GENE_ANNOTATION [ADD_GENE_ANNOTATION ...]]\n\t                        annotation_alias:filename * file in BED format\n\t  -s ADD_SAMPLE [ADD_SAMPLE ...], --add-sample ADD_SAMPLE [ADD_SAMPLE ...]\n\t                        sample_alias:format:filename (available formats: fuma\n\t                        --formats)\n\t  -l [LINK_SAMPLE_TO_ANNOTATION [LINK_SAMPLE_TO_ANNOTATION ...]], --link-sample-to-annotation [LINK_SAMPLE_TO_ANNOTATION [LINK_SAMPLE_TO_ANNOTATION ...]]\n\t                        sample_alias:annotation_alias\n\t  -f {summary,list,extensive}, --format {summary,list,extensive}\n\t                        Output-format\n\t  -o OUTPUT, --output OUTPUT\n\t                        output filename; '-' for stdout\n\t\n\t\n\tFor more info please visit:\n\t<https://github.com/yhoogstrate/fuma>\n\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-a ADD_GENE_ANNOTATION",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "Gene annotations have to be provided in a tab-delimited file, with the first column containing the genes chromosome, the second and the third column the (1-based) start and end position, and the fourth column the (unique) gene identifier or name, as shown in the example below:\n\n\tchr1   100000000  120000000  GeneNameA\n\tchr2   100000000  120000000  GeneNameB\n\tchr21  100000000  120000000  GeneNameC\n\tchr22  100000000  120000000  GeneNameD\n\tchrX   140000000  160000000  GeneNameX\n\tchrY   140000000  160000000  GeneNameY\n\nThis format is compatible with the BED format [https://genome.ucsc.edu/FAQ/FAQformat.html#format1](https://genome.ucsc.edu/FAQ/FAQformat.html#format1), but requires that the 4th column is present and requires it to contain unique gene names. Additional columns are allowed, but are nowhere taken into account. **Do not provide BED files that describe one exon per line** because this will exclude the introns, but provide BED files that describe one gene per line instead. For files with one exon per line, we can not merge  exons into genes because when they are merged on the basis of the gene names, duplicates on the same chromosome that span a large distance may introduce overlap and large uncertainty.\n\nIn contrast, if you explicitly want to match only in exon regions, you should use BED files with one exon per line. In that case is advised to provide non-unique gene names, like the following example:\n\n\tchr1  100000000  100001000  GeneNameA\n\tchr1  100002000  100003000  GeneNameA\n\tchr1  100005000  100006000  GeneNameA\n\tchr2  100000000  100100000  GeneNameB\n\tchr2  100101000  100103000  GeneNameB\n\nIn FuMa the gene annotation argument is provided as unique alias followed by the filename, separated with a colon:\n\n\t-a \"hg19:somefile.bed\"\n\nIn this case the alias of the BED-file, hg19, will later be used to link it to datasets. In case you want multiple references, you can provide arguments delimited with whitespaces:\n\n\t-a \"hg18:somefile_hg18.bed\" \"hg19:somefile_hg19.bed\"\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Obtain BED file -&gt; fuma-gencode-gtf-to-bed",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "Because obtaining such files turns out to more difficult than expected, we have provided an extra utility named `fuma-gencode-gtf-to-bed`.\nThe user should start with download a GTF file from (at least tested with) GenCode. Then user should proceed with running the following command:\n\n\tfuma-gencode-gtf-to-bed -o converted.bed input.gtf\n\nThe utility will use all annotations in the GTF file and will aggregate all exons per `transcript_id`, while it will use the gene_id as unique identifier in the BED file. The reason for this is that if transcripts that belong to the same gene while they are quite distant to each other (or homologues using the same name, which happens), they will be annotated per transcript such that the long distance between the transcripts will not unneccesairily be marked as part of that gene. In case multiple transcripts from the same gene are annotated upon each other, FuMa will treat them as the same gene as long as their identifier is the same, which is the case since the `gene_id` is being used for this.\n\nThis tool should work for all GTF files for which all entries have a proper and uniquely wise correct definition of the `gene_id` and `transcript_id`.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-s ADD_SAMPLE",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "To provide FuMa a fusion gene detection experiment, it should be provided with the \"-s\" argument which should follow the following syntax:\n\n*sample_alias*:*format*:*filename*\n\nThe *sample_alias* will be used for two things: (1) as column header and alias in the final output and (2) to link the references to the samples. The format is the file format in which the fusion genes are described. Note that some tools have multiple output formats. These are usually the file formats for interim output files.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-l LINK_SAMPLE_TO_ANNOTATION",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "Each dataset must be annotated with only one gene annotation. This can be achieved using the following argument syntax:\n\n*sample_alias*:*annotation_alias*\n\nIn case you have a particular same *s* and a reference *ref*, you can link *s* to *ref* as follows:\n\n\t-l \"s:ref\"\n\nIn case you have two samples, one on *ref1* and one on *ref2*, you can provide it as follows:\n\n\t-l \"defuse_hg18:hg18\" \"chimerascan_hg19:hg19\"\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-l MATCHING_METHOD",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "FuMa has the option to use three methods to match fusion genes; 'overlap', 'subset' and 'egm' (default is 'overlap'). These method can be selected with the ```-m``` or ```--matching-method```, argument as follows:\n\n\tfuma -m egm [ ... ]\n\n\tfuma --matching-method subset [ ... ]\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-f OUTPUT_FORMAT",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "FuMa has the built-in option for several output formats. The most straight-forward format is the '*list*' output format which contains per (matched) fusion gene, for each matching tool, the genomic locations and identifier(s) or an empty column if the tool didn't pick it up. In the following example we have three fusion genes; one detected by TopHat fusion, one by STAR and one by both. The corresponding output in '*list*' format would be something like:\n\n| Left Genes | Right Genes | STAR             | TopHat Fusion\n|:-----------|:------------|:-----------------|:-------------\n| FOO1       | BAR1        | UID_A=chr1:12-34 |\n| FOO2       | BAR2        |                  | TID_A=chr4:66-77\n| DOX1       | BOX5        | UID_B=chr5:85-95 | TID_B=chr5:88-99\n\nOccasionally tools predict multiple fusion events within the same left- and right genes, which FuMa will consider as duplicates. In case we observe a duplicate, we simply provide both identifiers delimited with a comma into one cell, such that duplicate entries can always be traced back in the output:\n\n| Left Genes | Right Genes | FusionMap\n|:-----------|:------------|:---------\n| FOO1       | BAR1        | UID_A=chr1:12-34,UID_B=chr1:12-34\n\nWhen a breakpoint location spans multiple gene annotations, the genes in the column are delimited with a colon:\n\n| Left Genes | Right Genes | OncoFuse\n|:-----------|:------------|:---------\n| FOO1:FOO2  | BAR1        | UID_A=chr1:12-34\n\nThe Galaxy wrapper has the option to replace the columns to TRUE or FALSE depending on whether a match was found or not.\n\nThe output format '*extensive*' is file format similar to the format Complete Genomics provides (http://www.completegenomics.com/documents/DataFileFormats_Cancer_Pipeline_2.4.pdf from p135) and that only contains those fusion genes that have at least one match. This format is in particular useful if the output of one run needs to be (re-)used for another run.\n\nThe output format '*summary*' is a set of tables that contains the numbers of detected matches per dataset combination, useful for creating Venn diagrams.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--strand-specific-matching",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "FuMa has the built-in option to separate fusion genes based on the predicted strand of the acceptor or donor. In the following example we have fusion genes #1 and #2, with exactly the same breakpoints, but the transcripts of the second gene are predicted to have different strands.\n\n\t#1:\n\t        b1 (+) ->          <- (-) b2\n\t        |                         |\n\t[ --- Gene A --- ]        [ --- Gene B --- ]\n\t\n\t#2:\n\t        b1 (+) ->                 b2 (+) ->\n\t        |                         |\n\t[ --- Gene A --- ]        [ --- Gene B --- ]\n\nTo let FuMa consider these fusion as distinct fusion genes because of the different strands, the user has to enable strand specific matching by including the ```--strand-specific-matching``` argument:\n\n\tfuma \\\n\t    --strand-specific-matching \\"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--acceptor-donor-order-specific-matching",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "\t    -a  \"hg19:genes_hg19.bed\" \\\n\t    \\\n\t    -s  \"chimerascan:chimerascan:FOO_chimerascan/chimeras.bedpe\" \\\n\t        \"defuse:defuse:FOO_defuse/results.tsv\" \\\n\t    -l  \"chimerascan:hg19\" \\\n\t        \"defuse:hg19\" \\\n\t    -f  \"list\" \\\n\t    -o  \"chimerascan_defuse_overlap.txt\"\n\nIt is recommended to use this option together with the  **```--acceptor-donor-order-specific-matching```** option.\n\n#### --acceptor-donor-order-specific-matching ####\nThe order in which the acceptor and donor gene are denoted is for certain tools determinant where the transcript started. This information may be crucial to explain the function and biological role of a fusion gene. For example, TMPRSS2-ERG, a fusion gene found in about 50% of all screened prostate cancers, uses regulatory elements from the androgen driven gene TMPRSS2, fused to the gene ERG that has an oncogenic role in human prostate cancer (Tomlins et. al, 2008). These principles would not apply if the order of these genes would be vice versa.\n\nFuMa has the built-in option to separate fusion genes based on the order of the denotation of the acceptor or donor. In the following example we have fusion genes #1 and #2, with exactly the same breakpoints, but the order of the acceptor and donor gene has changed.\n\n\t#1:\n\t        break1                    break2\n\t        |                         |\n\t[ --- Gene A --- ]        [ --- Gene B --- ]\n\t\n\t#2:\n\t        break1                    break2\n\t        |                         |\n\t[ --- Gene B --- ]        [ --- Gene A --- ]\n\nTo let FuMa consider these fusion as distinct fusion genes because of the different order of the donor and acceptor, the user has to enable strand specific matching by including the ```--acceptor-donor-order-specific-matching``` argument:\n\n\tfuma \\\n\t    --acceptor-donor-order-specific-matching \\\n\t    -a  \"hg19:genes_hg19.bed\" \\\n\t    \\\n\t    -s  \"chimerascan:chimerascan:FOO_chimerascan/chimeras.bedpe\" \\\n\t        \"defuse:defuse:FOO_defuse/results.tsv\" \\\n\t    -l  \"chimerascan:hg19\" \\\n\t        \"defuse:hg19\" \\\n\t    -f  \"list\" \\\n\t    -o  \"chimerascan_defuse_overlap.txt\"\n\n**It is important to state that some file formats (interim output and discordant reads) do not take this information into account.**\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input formats",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "FuMa supports the following file formats:\n\n| Tools              | File                  | Format string\n|:-------------------|:----------------------|:-------------\n| Chimera            | prettyPrint() output  | chimera\n| ChimeraScan        | chimeras.bedpe        | chimerascan\n| Complete Genomics  | highConfidenceJu*.tsv | complete-genomics\n| Complete Genomics  | allJunctionsBeta*.tsv | complete-genomics\n| DeFuse             | results.txt           | defuse\n| DeFuse             | results.classify.txt  | defuse\n| DeFuse             | results.filtered.txt  | defuse\n| EricScript         | .results.total.txt    | ericscript *************\n| Fusion Catcher     | final-list_cand*.txt  | fusion-catcher_final\n| FusionMap          |                       | fusionmap\n| JAFFA              | jaffa_results.cvs     | jaffa\n| Trinity + GMAP     |                       | trinity-gmap\n| OncoFuse           |                       | oncofuse\n| RNA STAR           | Chimeric.out.junction | rna-star_chimeric\n| SOAPFuse           | final.*.for.genes.txt | soapfuse-final-gene\n| SOAPFuse           | final.*.for.trans.txt | soapfuse-final-transcript\n| STAR Fusion        | _candidates.final     | star-fusion_final\n| TopHat Fusion pre  | fusions.out           | tophat-fusion_pre\n| TopHat Fusion post | potential_fusion.txt  | tophat-fusion_post_potential_fusion\n| TopHat Fusion post | result.txt            | tophat-fusion_post_result\n| TopHat Fusion post | result.html           | tophat-fusion_post_result_html\n\n************* EricScript often contains entries with unknown breakpoints.\nBecause no genomic coordinates are given those fusion genes can not be\nimported into FuMa and only those with breakpoints will be taken into account.\n\nOr run the following command line argument to get an overview of the versions at the command line:\n\n\tfuma --formats\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--verbose",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Usage",
          "Command line"
        ],
        "type": "Text_excerpt",
        "value": "If you would like to see additional statistics during runtime (or post-runtime\nif you store the output) you should run FuMa with the `--verbose` argument:\n\n\tfuma \\\n\t    -a  \"hg19:genes_hg19.bed\" \\\n\t    \\\n\t    -s  \"chimerascan:chimerascan:FOO_chimerascan/chimeras.bedpe\" \\\n\t        \"defuse:defuse:FOO_defuse/results.tsv\" \\\n\t    -l  \"chimerascan:hg19\" \\\n\t        \"defuse:hg19\" \\\n\t    -f  \"list\" \\\n\t    -o  \"chimerascan_defuse_overlap.txt\" \\\n\t    --verbose\n\nThis allows the user to inspect the numbers of duplicate fusions, the\nnumber of parsed genes from the gene set and showing which datasets\nare being compared at run time.\n\n* Note: As of 2.12.1 this argument is required, in preliminary versions\nthis was by default enabled.\n\n### Galaxy ###\n\nAfter having FuMa installed in Galaxy via the toolshed, it can be opened by typing '*fuma*' in the '*search tools*' field on the left panel in galaxy. When it has opened, the interface should be similar to [Fig. S2: FuMa in Galaxy](#fig-s2-fuma-in-galaxy). The main input of the Galaxy wrapper is a set of datasets. You can as add many datasets as the server can handle in terms of resources. For each dataset the user needs to specify (1) the history item in galaxy that contains the output file of the fusion gene detection experiment, (2) the corresponding file format and name of the tool that corresponds to the history item and (3) a corresponding gene annotation file (in BED format). Lastly, the user can specify the desired output format and proceed with the analysis.\n\n![Fig. S2: FuMa in Galaxy](https://github.com/yhoogstrate/fuma/raw/master/share/Fig_S2.png)\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 01: one sample, two tools",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Imagine we have run sample FOO with Defuse and ChimeraScan, on the same reference genome (hg19). The corresponding gene annotation on hg19 is genes_hg19.bed and the output should be stored in chimerascan_defuse_overlap.txt. The command line argument to run this analysis would be:\n\n\tfuma \\\n\t    -a  \"hg19:genes_hg19.bed\" \\\n\t    \\\n\t    -s  \"chimerascan:chimerascan:FOO_chimerascan/chimeras.bedpe\" \\\n\t        \"defuse:defuse:FOO_defuse/results.tsv\" \\\n\t    -l  \"chimerascan:hg19\" \\\n\t        \"defuse:hg19\" \\\n\t    -f  \"list\" \\\n\t    -o  \"chimerascan_defuse_overlap.txt\"\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 02: one sample, one tool, different reference genomes",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "When want to compare the differences between runs on different genome builds, we can add each runs and define a different gene annotation for each run. Imagine we have run a sample with TopHat-Fusion on reference genomes hg18 and hg19, we can run FuMa as follows:\n\n\tfuma \\\n\t    -a  \"hg18:genes_hg18.bed\" \\\n\t        \"hg19:genes_hg19.bed\" \\\n\t    \\\n\t    -s  \"thf_hg18:Tophat-Fusion Post result:thf_hg18/result.txt\" \\\n\t        \"thf_hg19:Tophat-Fusion Post result:thf_hg19/result.txt\" \\\n\t    -l  \"thf_hg18:hg18\" \\\n\t        \"thf_hg19:hg19\" \\\n\t    -f  \"list\" \\\n\t    -o  \"thf_hg18_hg19_overlap.txt\"\n\nIt is important that the gene annotations genes_hg18.bed and genes_hg19.bed contain similar gene names, since matching is based on these names. Therefore it is recommanded to remove gene names that are specific per annotation; the latest genes only available in hg19 will never be matched with hg18 simply because they do not exist in hg18.\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 03: Edgren dataset as part of Chimera supplement",
        "parent_header": [
          "FuMa (Fusion Matcher) <a href=\"https://travis-ci.org/yhoogstrate/fuma\"><img alt=\"Build Status\" src=\"https://travis-ci.org/yhoogstrate/fuma.svg?branch=master\" /></a>",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "The publicly available data from the Edgren dataset has been performed on FusionMap, ChimeraScan and DeFuse as proof of concept data for the Chimera package (Edgren et al., 2011; Beccuti et al., 2014). To obtain these result you should run the following command:\n\n\twget http://www.bioconductor.org/packages/release/bioc/src/contrib/chimera_1.10.0.tar.gz\n\ttar -xzf chimera_1.10.0.tar.gz\n\nWithin the source of the chimera package, you can find the files with the following command line command:\n\n\tfind . -type f | grep -i -E \"Edgr[e]{1,2}n\"\n\nPlease check whether the output is identical to:\n\n\t./chimera/inst/examples/Edgreen_fm.txt\n\t./chimera/inst/examples/edgren.stat.detection.txt\n\t./chimera/inst/examples/Edgren_df.tsv\n\t./chimera/inst/examples/Edgren_cs.txt\n\t./chimera/inst/examples/Edgren_true.positives.txt\n\nTo get a gene reference and the True positivies with genomic coordinates, run at the command line:\n\n\twget https://testtoolshed.g2.bx.psu.edu/repos/yhoogstrate/fuma/raw-file/tip/test-data/refseq_genes_hg19.bed\n\twget https://testtoolshed.g2.bx.psu.edu/repos/yhoogstrate/fuma/raw-file/tip/test-data/edgren_tp.txt\n\nWe can proceed with FuMa by running at the command line:\n\n\tedir=\"./chimera/inst/examples/\"\n\tfuma \\\n\t    -a  \"hg19:refseq_genes_hg19.bed\" \\\n\t    \\\n\t    -s  \"chimerascan:chimerascan:\"$edir\"Edgren_cs.txt\" \\\n\t        \"defuse:defuse:\"$edir\"Edgren_df.tsv\" \\\n\t        \"fusionmap:fusionmap:\"$edir\"Edgreen_fm.txt\" \\\n\t        \"edgren_TP:fusionmap:edgren_tp.txt\" \\\n\t    -l  \"fusionmap:hg19\" \\\n\t        \"defuse:hg19\" \\\n\t        \"chimerascan:hg19\" \\\n\t        \"edgren_TP:hg19\" \\\n\t    -f  \"list\" \\\n\t    -o  \"edgren_fuma_list.txt\"\n\nTo convert the columns to boolean values, we run:\n\n\tfuma-list-to-boolean-list \\\n\t-o \"edgren_fuma_booleanlist.txt\" \\\n\t   \"edgren_fuma_list.txt\"\n\nTo find all fusion genes present in 3 or more datasets, run at the command:\n\n\tgrep -E \"Left-genes|TRUE.*?TRUE.*?TRUE.*?\" \"edgren_fuma_booleanlist.txt\"\n\nThis will return the following list of 20 fusion genes:\n\n\tNM_018837:NM_198596:NM_001161841\tNM_006420\tTRUE\tTRUE\tTRUE\tTRUE\n\n\tLeft-genes\tRight-genes\tchimerascan\tdefuse\tfusionmap\tedgren_TP\n\tTEKT4P2\tBRWD1\tTRUE\tTRUE\tTRUE\tFALSE\n\tMED1\tACSF2\tTRUE\tTRUE\tTRUE\tFALSE\n\tBCAS3\tMED13\tTRUE\tTRUE\tTRUE\tFALSE\n\tSUMF1\tLRRFIP2\tTRUE\tTRUE\tFALSE\tTRUE\n\tCMTM7\tGLB1\tTRUE\tTRUE\tFALSE\tTRUE\n\tNUP214\tNOTCH1\tTRUE\tTRUE\tFALSE\tTRUE\n\tEIF3H\tCYTH1\tTRUE\tTRUE\tFALSE\tTRUE\n\tSNF8\tRPS6KB1\tTRUE\tTRUE\tFALSE\tTRUE\n\tBCAS3\tBCAS4\tTRUE\tTRUE\tFALSE\tTRUE\n\tIKZF3\tVAPB\tTRUE\tTRUE\tFALSE\tTRUE\n\tCEP250\tZMYND8\tTRUE\tTRUE\tFALSE\tTRUE\n\tTTI1\tDIDO1\tTRUE\tTRUE\tFALSE\tTRUE\n\tBSG\tNFIX\tTRUE\tTRUE\tFALSE\tTRUE\n\tMYO9B\tRAB22A\tTRUE\tTRUE\tFALSE\tTRUE\n\tANKHD1-EIF4EBP3:ANKHD1\tPCDH1\tTRUE\tTRUE\tTRUE\tTRUE\n\tACACA\tSTAC2\tTRUE\tTRUE\tTRUE\tTRUE\n\tMYO19\tSKA2\tTRUE\tTRUE\tTRUE\tTRUE\n\tSULF2\tARFGEF2\tTRUE\tTRUE\tTRUE\tTRUE\n\tTATDN1\tGSDMB\tTRUE\tTRUE\tTRUE\tTRUE\n\tPKIA\tRARA\tTRUE\tTRUE\tTRUE\tTRUE\n"
      },
      "source": "https://raw.githubusercontent.com/ErasmusMC-Bioinformatics/fuma/master/README.md",
      "technique": "header_analysis"
    }
  ]
}