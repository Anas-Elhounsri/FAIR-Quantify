{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bioinfologics/w2rap-contigger"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-04-20T13:56:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-27T08:28:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An Illumina PE genome contig assembler, can handle large (17Gbp) complex (hexaploid) genomes."
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bioinfologics/w2rap-contigger/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bioinfologics/w2rap-contigger/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinfologics/w2rap-contigger"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "w2rap-contigger"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Compilation instructions",
        "parent_header": [
          "w2rap-contigger",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "This is a big-ish codebase to compile, so we recomment using the `-j` flag on make to use multiplr processors (the examples use 4, but more is better).\n\n```\ngit clone https://github.com/gonzalogacc/w2rap-contigger.git\ncd w2rap-contigger\ncmake -D CMAKE_CXX_COMPILER=g++ .  \nmake -j 4\n```\n\nIf you want to link a particular malloc library set the `MALLOC_LIBRARY` variable during cmake:\n\n```\ngit clone https://github.com/gonzalogacc/w2rap-contigger.git\ncd w2rap-contigger\ncmake -D CMAKE_CXX_COMPILER=g++ -D MALLOC_LIBRARY=<path_to_library.so> .  \nmake -j 4\n```\n\nRight now Intel's tbbmalloc have the best performance in our systems. Jemalloc ha also improved performance in the past. In both cases it is a small gain and varies from system to system, it can even turn into a loss, so beware.\n\n*Note:* for older versions, due to inneficient allocation patterns, jemalloc used to have quite a positive impact in some scenarios, so if you're using any of the \"6 binaries\" versions, do link with jemalloc.\n"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9908783740128436,
      "result": {
        "original_header": "w2rap-contigger",
        "type": "Text_excerpt",
        "value": "http://bioinfologics.github.io/the-w2rap-contigger/ \n \n"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bioinfologics/w2rap-contigger/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2014 Broad Institute\nCopyright (c) 2016 The Genome Analysis Centre\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "w2rap-contigger"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bioinfologics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 5677924,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 113989,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 14751,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bjclavijo",
          "type": "User"
        },
        "date_created": "2017-01-06T19:56:56Z",
        "date_published": "2017-01-24T17:35:36Z",
        "html_url": "https://github.com/bioinfologics/w2rap-contigger/releases/tag/docker",
        "name": "docker",
        "release_id": 5253648,
        "tag": "docker",
        "tarball_url": "https://api.github.com/repos/bioinfologics/w2rap-contigger/tarball/docker",
        "type": "Release",
        "url": "https://api.github.com/repos/bioinfologics/w2rap-contigger/releases/5253648",
        "value": "https://api.github.com/repos/bioinfologics/w2rap-contigger/releases/5253648",
        "zipball_url": "https://api.github.com/repos/bioinfologics/w2rap-contigger/zipball/docker"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-requisites",
        "parent_header": [
          "w2rap-contigger",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* Cmake 2.8.0+  \n* GCC 5.2.0+ (you can also use ICC)\n* (Optional) jemalloc or another malloc library (intel's work too).\n"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running w2rap-contigger",
        "parent_header": [
          "w2rap-contigger"
        ],
        "type": "Text_excerpt",
        "value": "You need to create a new directory for the intermediate and output files.\n\nThe current version of the w2rap contigger runs in 7 steps. By default the contigger will run each of these steps in order, not dumping unnecessary intermediate files. You can use the `--from_step` and `--to_step` options to start from and finish after particular steps. When run this way, the contigger will read the output files from the previous step and dump the necessary files for the next step to run. If you want to dump the output of every step you can use the `--dump_all 1` option.\n\n\nStep # | Description | Outputs\n:---|---|---\n1 | Read loading | binary-formatted reads\n2 | Build small k (k=60) graph from reads | small k graph, read paths\n3 | Build large K graph from small k graph and reads | large K graph, read paths\n4 | Clean large K graph | large K cleaned graph, read paths\n5 | Local assemblies on the large K graph \"gaps\" | large K completed graph, read paths\n6 | Graph simplification and PathFinder | large K simplified graph, read paths, raw/contig-lines GFA and fasta\n7 | PE-scale scaffolding across gaps in the large K graph | large K simplified graph with jumps, read paths, raw/lines GFA and fasta\n\n"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parallel performance considerations",
        "parent_header": [
          "w2rap-contigger",
          "Running w2rap-contigger"
        ],
        "type": "Text_excerpt",
        "value": "The code has been optimised with local process binning. You should make sure your system will pin threads (as per openmp definition of) to make the best use of memory locality. This can be achieved setting the `OMP_PROC_BIND` or `GOMP_CPU_AFFINITY`/ `KMP_AFFINITY` variables. Particular optimal settings will depend on your system. If you run your software through a scheduler such as SLURM or PBS, the scheduler should set all variables if correctly configured.\n\nIn most systems (specially most NUMA systems), using thread-local allocation should have a positive impact on performance. Whilst many systems will use thread-local by default, or have some smart policy, you should consider setting the `MALLOC_PER_THREAD=1` variable if that improves performance on your system (i.e. linux's default malloc can have a good gain from this).\n\n"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running **old versions** of w2rap-contigger",
        "parent_header": [
          "w2rap-contigger"
        ],
        "type": "Text_excerpt",
        "value": "Previous versions of the contigger have 6 binaries for the different steps of the assembly. You need to create a new directory for the intermediate and output files, then run each of the 6 steps sequentially.\n\nEach step requires the path to the output directory and a prefix. Step 01 also requires a path to the input reads (either a bam file or 2 fastq files separated by a ','). Step 02 accepts an optional -K parameter to change the K of the last stage DBG. All steps accept a -t flag to set the thread count for parallel sections, although not all sections will use all processors.\n\nIn most systems (specially most NUMA systems), using thread-local allocation will have a positive impact on performance. We are not aware of cases where it produced a significant negative impact, so we recommend setting the `MALLOC_PER_THREAD=1` variable.\n\nExample run with input bam file:\n\n```\nmkdir test_k260\nexport MALLOC_PER_THREAD=1\n./01_unipaths -o test_k260 -p example -r example.bam\n./02_qgraph -o test_k260 -p example -K 260\n./03_clean -o test_k260 -p example\n./04_patching -o test_k260 -p example\n./05_simplify -o test_k260 -p example\n./06_scaffolding -o test_k260 -p example\n```\n\n\nExample run with input fastq files:\n\n```\nmkdir test_k260\nexport MALLOC_PER_THREAD=1\n./01_unipaths -o test_k260 -p example -r example_r1.fastq,example_r2.fastq\n./02_qgraph -o test_k260 -p example -K 260\n./03_clean -o test_k260 -p example\n./04_patching -o test_k260 -p example\n./05_simplify -o test_k260 -p example\n./06_scaffolding -o test_k260 -p example\n```\n\nYour assembly will end up in the `a.lines.fasta` file.\n"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:41:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 44
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "w2rap-contigger",
          "Running w2rap-contigger"
        ],
        "type": "Text_excerpt",
        "value": "Example run with input bam file, K=260:\n\n```\nmkdir test_k260\n#optionally, remember to set MALLOC_PER_THREAD and/or OMP_PROC_BIND\nexport OMP_PROC_BIND=spread\nexport MALLOC_PER_THREAD=1\n./w2rap-contigger -o test_k260 -p example -r example.bam -K 260\n```\n\n\nExample run with input fastq files, K=260 dumping all intermediate files:\n\n```\nmkdir test_k260\n#optionally, remember to set MALLOC_PER_THREAD and/or OMP_PROC_BIND\nexport OMP_PROC_BIND=spread\nexport MALLOC_PER_THREAD=1\n./w2rap-contigger -o test_k260 -p example -r example_r1.fastq,example_r2.fastq -K 260\n```\n\nExample run with input fastq files, K=260, runing step2 independently (this steps usually has usually the highest memory peak):\n\n```\nmkdir test_k260\n#optionally, remember to set MALLOC_PER_THREAD and/or OMP_PROC_BIND\nexport OMP_PROC_BIND=spread\nexport MALLOC_PER_THREAD=1\n./w2rap-contigger -o test_k260 -p example -r example_r1.fastq,example_r2.fastq -K 260 --to_step 1\n./w2rap-contigger -o test_k260 -p example -r example_r1.fastq,example_r2.fastq -K 260 --from_step 2 --to_step 2\n./w2rap-contigger -o test_k260 -p example -r example_r1.fastq,example_r2.fastq -K 260 --from_step 3\n```\n\nYour assembly will end up in the `a.lines.fasta` file.\n"
      },
      "source": "https://raw.githubusercontent.com/bioinfologics/w2rap-contigger/master/README.md",
      "technique": "header_analysis"
    }
  ]
}