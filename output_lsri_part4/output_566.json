{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AlgoLab/gppf"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-04-24T14:09:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-07T16:46:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "General Parsimony Phylogeny models from Frequencies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9340394920718033,
      "result": {
        "original_header": "gppf",
        "type": "Text_excerpt",
        "value": "\n`-k K` Specifies the **k**-value of the selected model. \n(Persistent(k), Dollo(k),Camin-Sokal(k))\n- For a persistent model without restrictions, use `-k full`. \n- Do not specify any **k** for Perfect Pyholgeny model. If specified it will be ignored. \n\n`-t(--time) TIME` Specifies the maximum time allowed for the computation. \nType `-t 0` to not impose a limit. \n`-c(--clones) CLONES` Specifies the number of clones allowed, expressed as a fraction of the input mutations. Eg `-c 0.8`.\nThe actual amount of maximum clones used is calculated by : `[clones] * #Mutations`. \nExample of commands:\n- `./gppf -m persistent -f data/simulated/n10_m20/21.sim -t 0 -c 0.8 -k 2` \nstarts a Persistent(2) model without time limit and with a clone limit of 80%\n- `./gppf -m dollo -f data/simulated/n10_m20/21.sim -t 300 -c 1 -k 4 -e`\nstarts a Dollo(4) model with a time limit of 300 seconds (5 minutes), with a clone limit of 100%\nand with a experimental-format output.\n \n"
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9413980120354242,
      "result": {
        "original_header": "Input format",
        "type": "Text_excerpt",
        "value": "**gppf** accepts two different input format:\n- The [simulated data format](data/simulated/n10_m20/0.sim), for a file with extension `.sim` (required), is a frequency matrix F of tab separated values. The first line is a dummy line of mutation names. \n- The [real data format](data/real/cll077_deep.txt) is a format were the input is a tab-separated text file. The first line contains the sample names. The first column contains mutations ids. The consecutive pair of columns contains read counts\nfor reference and mutated alleles.\n \n"
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8835010031511116,
      "result": {
        "original_header": "Detailed-format Output",
        "type": "Text_excerpt",
        "value": "When not running an experiment **gppf** outputs the detailed information in detail in a file called `res_INPUTNAME.txt` created in the\nsame folder where gppf is running. The output file contains:\n- Elapsed time\n- Input name\n- Number of samples\n- Number of mutations\n- Clone limit\n- Total clone used\n- Model (k)\n- Total error\n- Solution accuracy\n- Clonal matrix\n- Usage matrix\n- Extended matrix\n- Error matrix\n- Inferred matrix F\n- Tree in DOT code \nWe can see as an example the output of [CLL077](experimental_results/real/res_cll077_deep.txt),\nto run the execution of *CLL077* as described in the paper use: \n"
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8874691456276214,
      "result": {
        "original_header": "Replicating the experiments in the paper",
        "type": "Text_excerpt",
        "value": "To start the experiments described in the paper, run the bash files `start_exp1.sh` and `start_exp2.sh`.\nNote that these experiments can be easily parallelized by separating the `for` cycles in different files\nor sessions. The bash files also recreate the plot and the table present in the paper by running programs\n`plot_from_csv.R` and `make_table.py`. The last two programs require the output file of `gppf` to be in \nthe root directory, (as default).\n \n"
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8835121032564319,
      "result": {
        "original_header": "Exporting the model in MPS format",
        "type": "Text_excerpt",
        "value": "It is also possible to export the ILP model to the standard MPS format using the `--mps` argument.\nWith this flag *gpps* will output the model in MPS format that can be fed to any other Solver that support it,\nlike CPLEX, Google OR-Tools, etc.\n \n"
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AlgoLab/gppf/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AlgoLab/gppf/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AlgoLab/gppf"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "General Parsimony Phylogeny models from Frequencies"
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AlgoLab/gppf/master/start_exp2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AlgoLab/gppf/master/start_exp1.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AlgoLab/gppf/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 AlgoLab - Experimental Algorithms Lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gppf"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "AlgoLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 36577,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1314,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1180,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "General Parsimony Phylogeny models from Frequencies"
        ],
        "type": "Text_excerpt",
        "value": "To run `gppf` are required:\n- **Python** 2.7.12 +\n- **Gurobi** 6.5.2 +\n\nTo reproduce experiments described in the paper the following are also required:\n- **R** 3.3.3 with packages:\n\t- *ggplot2*\n\t- *grid*\n\t- *plyr*\n\t- *readr*\n\nFor generating samples:\n- **ms** by Hudson\n\n"
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:59:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use on Single Cell Sequencing Data",
        "parent_header": [
          "General Parsimony Phylogeny models from Frequencies"
        ],
        "type": "Text_excerpt",
        "value": "We provide here another tool, called *gpps*, similar to the previous one, \nthat can be used to infer cancer progressions from single cell data.\nDifferently from the previous tool, *gpps* employs a maximum likelihood search\nto find the best tree that explain the input, starting from single cell data.\n\nThe tool can be run with the following arguments:\n\n```\n  -m {perfect,persistent,dollo}, --model {perfect,persistent,dollo}\n  -f FILE, --file FILE  path of the input file.\n  -k K                  k-value of the selected model. Eg: Dollo(k)\n  -t TIME, --time TIME  maximum time allowed for the computation. Type 0 to\n                        not impose a limit.\n  -o OUTDIR, --outdir OUTDIR\n                        output directory.\n  -e, --exp             set -e to get experimental-format results.\n  -b FALSEPOSITIVE, --falsepositive FALSEPOSITIVE\n                        set -b False positive probability.\n  -a FALSENEGATIVE, --falsenegative FALSENEGATIVE\n                        set -a False negative probability.\n```\n\nWhere `-a` and `-b` are respectively the false negative and false positive rates for the\nSingle Cell Sequencing."
      },
      "source": "https://raw.githubusercontent.com/AlgoLab/gppf/master/README.md",
      "technique": "header_analysis"
    }
  ]
}