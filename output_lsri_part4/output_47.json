{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/schmidt-lab/SPINE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-25T13:18:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-25T11:05:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8496056019533945,
      "result": {
        "original_header": "Protein domain insertion via programmed oligo libraries",
        "type": "Text_excerpt",
        "value": "Python script for generating oligo libraries and PCR primers for programmed domain insertion\n \n"
      },
      "source": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9889129455752,
      "result": {
        "original_header": "Data Formats",
        "type": "Text_excerpt",
        "value": "Targeted genes must be in fasta format and include a minimum of 30 bases surrounding gene.\nEntire plasmid sequence is advised to search for nonspecific amplification <br />\nFinal output is fasta format. One file for oligo pools and one file for PCR primers\n \n"
      },
      "source": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.963408414853547,
      "result": {
        "original_header": "Position arguments",
        "type": "Text_excerpt",
        "value": "Gene start is defined as base number of first base in first codon and gene end is defined as base number of last base in last codon.\n(Program will subtract 1 from gene start for python numbering) \n"
      },
      "source": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/schmidt-lab/SPINE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/schmidt-lab/SPINE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "schmidt-lab/SPINE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SPINE: Saturated Programmable INsertion Engineering"
      },
      "source": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/schmidt-lab/SPINE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "engineering, mutagenesis, protein, science"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 schmidt-lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SPINE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "schmidt-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 67115,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "calbect",
          "type": "User"
        },
        "date_created": "2021-04-30T18:44:54Z",
        "date_published": "2021-11-09T02:26:51Z",
        "description": "**Protein domain insertion via programmed oligo libraries**\r\n\r\nPython script for generating oligo libraries and PCR primers for programmed domain insertion\r\n",
        "html_url": "https://github.com/schmidt-lab/SPINE/releases/tag/science",
        "name": "v.0.1.13",
        "release_id": 52968633,
        "tag": "science",
        "tarball_url": "https://api.github.com/repos/schmidt-lab/SPINE/tarball/science",
        "type": "Release",
        "url": "https://api.github.com/repos/schmidt-lab/SPINE/releases/52968633",
        "value": "https://api.github.com/repos/schmidt-lab/SPINE/releases/52968633",
        "zipball_url": "https://api.github.com/repos/schmidt-lab/SPINE/zipball/science"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Python Dependencies",
        "type": "Text_excerpt",
        "value": "biopython <br />\nnumpy\n"
      },
      "source": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Test",
        "type": "Text_excerpt",
        "value": "Domain Insertion Scanning:\npython3 run_spine.py -wDir tests -geneFile combined_fasta.fa -oligoLen 230 -mutationType DIS\n\nDeep Mutational Scanning:\npython3 run_spine.py -wDir tests -geneFile Kir.fa -oligoLen 230 -mutationType DMS -usage ecoli\n"
      },
      "source": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 01:36:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "```\noptional arguments:\n-h, --help                 show this help message and exit\n-wDir WDIR                 Working directory for fasta files and output folder\n-geneFile GENEFILE         Input all gene sequences including backbone in a fasta\n                           format. Place all in one fasta file. Name description\n                           can include start and end points (>gene1 start:1\n                           end:2)\n-handle HANDLE             Genetic handle for domain insertion.  This is important\n                           for defining the linker. Currently uses BsaI (4 base\n                           overhang), but this can be swapped for SapI (3 base\n                           overhang).\n-matchSequences            Find similar sequences between genes to avoid printing\n                           the same oligos multiple times. Default: No matching\n-oligoLen OLIGOLEN         Synthesized oligo length\n-fragmentLen FRAGMENTLEN   Maximum length of gene fragment\n-overlap OVERLAP           Enter number of bases to extend each fragment for\n                           overlap. This could help with insertion coverage close to\n                           fragment boundary. Overlap does not add additional\n                           insertions and thus no additional oligos.\n-mutationType              Run deep insertion scan \"DIS\" or deep mutation scan \"DMS\"\n-usage USAGE               Default is \"human\". Or select \"ecoli\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/schmidt-lab/SPINE/master/README.md",
      "technique": "header_analysis"
    }
  ]
}