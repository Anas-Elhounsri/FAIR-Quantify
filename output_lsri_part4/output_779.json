{
  "application_domain": [
    {
      "confidence": 50.44,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sedab/PathCNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-04T20:41:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-07T09:29:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pathology image classifier architecture"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sedab/PathCNN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/test_eval.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/test_eval.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/test_train.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/test_train.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/Final%20evaluation%20and%20viz.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/Final%20evaluation%20and%20viz.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/test_evaluation-exclude-normal.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/test_evaluation-exclude-normal.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/100RandomExamples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/100RandomExamples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/new_transforms_examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/new_transforms_examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/.ipynb_checkpoints/test_evaluation-exclude-normal-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/JupyterNotebooks/.ipynb_checkpoints/test_evaluation-exclude-normal-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/TSNE/tsne_visualize.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/TSNE/tsne_visualize.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/.ipynb_checkpoints/test_train-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/.ipynb_checkpoints/test_train-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/.ipynb_checkpoints/test_eval-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/.ipynb_checkpoints/test_eval-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/pan-cancer/tsne_combine_her2_er_pr.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/pan-cancer/tsne_combine_her2_er_pr.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/pan-cancer/confusion-matrix.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/pan-cancer/confusion-matrix.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/utils/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/utils/.ipynb_checkpoints/Untitled-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sedab/PathCNN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sedab/PathCNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Efficient pan-cancer whole-slide image classification using convolutional neural networks"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/run_multiple_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/run_job.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/run_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/run_tsne.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Installation guide",
        "parent_header": [
          "Data:"
        ],
        "type": "Text_excerpt",
        "value": "* Instructions\nClone this repo to your local machine using:\n```\n git clone https://github.com/sedab/PathCNN.git\n \n```\n* Typical install time on a \"normal\" desktop computer is around 3 minutes.\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sedab/PathCNN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PathCNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sedab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 21606497,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 130313,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 7849,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. System requirements",
        "parent_header": [
          "Data:"
        ],
        "type": "Text_excerpt",
        "value": "* software dependencies python3, PyTorch (software has been tested on Unix machine)\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:45:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Demo",
        "parent_header": [
          "Data:"
        ],
        "type": "Text_excerpt",
        "value": "* Expected train and test time are described in the manuscript. \n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1. Data processing:",
        "parent_header": [
          "Data:",
          "3. Demo"
        ],
        "type": "Text_excerpt",
        "value": "Note that data tiling and sorting scripts come from [Nicolas Coudray](https://github.com/ncoudray/DeepPATH/). Please refer to the README within `DeepPATH_code` for the full range of options. Additionally, note that these scripts may take a significant amount of computing power. We recommend submitting sections 2.1 and 2.2 to a high performance computing cluster with multiple CPUs.\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1.1. Data tiling",
        "parent_header": [
          "Data:",
          "3. Demo",
          "3.1. Data processing:"
        ],
        "type": "Text_excerpt",
        "value": "Run ```Tiling/0b_tileLoop_deepzoom2.py``` to tile the .svs images into .jpeg images. To replicate this particular project, select the following specifications:\n\n```sh\npython -u Tiling/0b_tileLoop_deepzoom2.py -s 512 -e 0 -j 28 -f jpeg -B 25 -o <OUT_PATH> \"<INPUT_PATH>/*/*svs\"\n```\n\n* `<INPUT_PATH>`: Path to the outer directory of the original svs files\n\n* `<OUT_PATH>`: Path to which the tile files will be saved\n\n* `-s 512`: Tile size of 512x512 pixels\n\n* `-e 0`: Zero overlap in pixels for tiles\n\n* `-j 28`: 28 CPU threads\n\n* `-f jpeg`: jpeg files\n\n* `-B 25`: 25% allowed background within a tile.\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1.2. Data sorting",
        "parent_header": [
          "Data:",
          "3. Demo",
          "3.1. Data processing:"
        ],
        "type": "Text_excerpt",
        "value": "To ensure that the later sections work properly, we recommend running these commands within `<ROOT_PATH>`, the directory in which your images will be stored:\n\n```sh\nmkdir <CANCER_TYPE>TilesSorted\ncd <CANCER_TYPE>TilesSorted\n```\n\n* `<CANCER_TYPE>`: The dataset such as `'Lung'`, `'Breast'`, or `'Kidney'`\n\nNext, run `Tiling/0d_SortTiles.py` to sort the tiles into train, valid and test datasets with the following specifications.\n\n```sh\npython -u <FULL_PATH>/Tiling/0d_SortTiles.py --SourceFolder=\"<INPUT_PATH>\" --JsonFile=\"<JSON_FILE_PATH>\" --Magnification=20 --MagDiffAllowed=0 --SortingOption=3 --PercentTest=15 --PercentValid=15 --PatientID=12 --nSplit 0\n```\n\n* `<FULL_PATH>`: The full path to the cloned repository\n\n* `<INPUT_PATH>`: Path in which the tile files were saved, should be the same as `<OUT_PATH>` of step 2.1.\n\n* `<JSON_FILE_PATH>`: Path to the JSON file that was downloaded with the .svs tiles\n\n* `--Magnification=20`: Magnification at which the tiles should be considered (20x)\n\n* `--MagDiffAllowed=0`: If the requested magnification does not exist for a given slide, take the nearest existing magnification but only if it is at +/- the amount allowed here (0)\n\n* `--SortingOption=3`: Sort according to type of cancer (types of cancer + Solid Tissue Normal)\n\n* `--PercentValid=15 --PercentTest=15` The percentage of data to be assigned to the validation and test set. In this case, it will result in a 70 / 15 / 15 % train-valid-test split.\n\n* `--PatientID=12` This option makes sure that the tiles corresponding to one patient are either on the test set, valid set or train set, but not divided among these categories.\n\n* `--nSplit=0` If nSplit > 0, it overrides the existing PercentTest and PercentTest options, splitting the data into n even categories. \n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1.3. Build tile dictionary",
        "parent_header": [
          "Data:",
          "3. Demo",
          "3.1. Data processing:"
        ],
        "type": "Text_excerpt",
        "value": "Run `Tiling/BuildTileDictionary.py` to build a dictionary of slides that is used to map each slide to a 2D array of tile paths and the true label. This is used in the `aggregate` function during training and evaluation.\n\n```sh\npython3 -u Tiling/BuildTileDictionary.py --data <CANCER_TYPE> --file_path <ROOT_PATH> --train_log /gpfs/scratch/bilals01/test-repo/logs/exp6_train.log\n```\n* --file_path `<ROOT_PATH>` points to the directory path for which the sorted tiles folder is stored in, same as in 2.2.\n\n* --data `<CANCER_TYPE>` is the base name for the given type. \n\n*  train_log points to the log file from training. (This option is only needed if you are testing data where not all the classes are presented )\n\nNote that this code assumes that the sorted tiles are stored in `<ROOT_PATH><CANCER_TYPE>TilesSorted`. If you do not follow this convention, you may need to modify this code.\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Train model:",
        "parent_header": [
          "Data:",
          "3. Demo"
        ],
        "type": "Text_excerpt",
        "value": "Run `train.py` to train with our CNN architecture. sbatch file `run_job.sh` is provided as an example script for submitting a GPU job for this script. Inside the run_job.sh, set parameteres: nexp, output and param as described below. You need to create two directories where the output of the training will be saved at: one for experiemnts, and one for logs. \n\n* `exp_name` = \"exp8\" \n\n* `nexp` = \"dir/experiments/${exp_name}\" : will create a subfolder under experiments folder which will save the checkpoints and predcitions, experiment name is determined by  the param `exp_name`\n\n* `output` = \"dir/logs/${exp_name}.log\" : will create a log file under the logs folder where the training output will be printed on,log name is determined by  the param `exp_name`\n\n* `nparam` = \"--cuda  --augment --dropout=0.1 --nonlinearity='leaky' --init=\u2018xavier\u2019 --root_dir=/gpfs/scratch/bilals01/brain-kidney-lung/brain-kidney-lungTilesSorted/ --num_class=7 --tile_dict_path=/gpfs/scratch/bilals01/brain-kidney-lung/brain-kidney-lung_FileMappingDict.p\"\n\nThe model checkpoints at every epoch and steps (frequency determined by the user using step_freq) will be saved at experiments/checkpoints folder. And the **validation set** predictions and labels will be saved under experiments/outputs folder if calc_val_auc argument is used (Note that total training time will increase significantly if you choose to use this option).\n\n**nparam:**\n* `--cuda`: enables cuda\n\n* `--ngpu`: number of GPUs to use (default=1)\n\n* `--augment`: use data augmentation or not\n\n* `--batchSize`: batch size for data loaders (default=32)\n\n* `--imgSize`: the height / width that the image will be shrunk to (default=299)\n\n* `--metadata`: use metadata or not\n\n**IMPORTANT NOTE: this option is not fully implemented!** Please see section 6 for additional information about using the metadata. \n\n* `--nc`: input image channels + concatenated info channels if metadata = True (default = 3 for RGB).\n\n* `--niter`: number of epochs to train for (default=25)\n\n* `--lr`: learning rate for the optimizer (default=0.001)\n\n* `--decay_lr`: activate decay learning rate function\n\n* `--optimizer`: Adam, SGD or RMSprop (default=Adam)\n\n* `--beta1`: beta1 for Adam (default=0.5)\n\n* `--earlystop`: use early stopping\n\n* `--init`: initialization method (default=normal, xavier, kaiming)\n\n* `--model`: path to model to continue training from a checkpoint (default='')\n\n* `--experiment`: where to store samples and models (default=None)\n\n* `--nonlinearity`: nonlinearity to use (selu, prelu, leaky, default=relu)\n\n* `--dropout`: probability of dropout in each block (default=0.5)\n\n* `--method`: aggregation prediction method (max, default=average)\n\n* `--num_class`: number of classes (default=2)\n\n* `--root_dir`: path to your sorted tiles Data directory .../dataTilesSorted/ (format=\"<ROOT_PATH><CANCER_TYPE>TilesSorted/\")\n\n* `--tile_dict_path`: path to your Tile dictinory path (format=\"<ROOT_PATH><CANCER_TYPE>_FileMappingDict.p\")\n\n* `--step_freq`: how often to save the results and the checkpoints (default=100000000; won't save any steps, as this number set very high)\n\n* `--calc_val_auc`: save validation auc calculatio at each epoch \n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 Test model:",
        "parent_header": [
          "Data:",
          "3. Demo"
        ],
        "type": "Text_excerpt",
        "value": "Run ```test.py``` to evaluate a specific model on the test/validation data, ```run_test.sh``` is the associated sbatch file. Inside the run_test.sh, set parameteres: nexp, output and param as described below. \n\n* `exp_name` = \"exp8\" : set a name for the experiment\n\n* `test_val` = \"test\" : choose between test and valid\n\n* `nexp` = \"dir/experiments/${exp_name}\" : same exp directory set for the training, experiment name is determined by  the param `exp_name`\n\n* `output` = \"dir/logs/${test_val}.log\" : name the test log with \"*_test.log\", log name is determined by  the param `exp_name`\n\n* `nparam` = \"--model='epoch_2.pth' --root_dir=/gpfs/data/abl/deepomics/tsirigoslab/histopathology/Tiles/LungTilesSorted/ --num_class=7 --tile_dict_path=/gpfs/data/abl/deepomics/tsirigoslab/histopathology/Tiles/Lung_FileMappingDict.p --val=${test_val}\"\n\n**nparam:**\n* `--model`: Name of model to test, e.g. `epoch_10.pth`\n\n* `--num_class`: number of classes (default=2)\n\n* `--root_dir`: path to your sorted tiles Data directory .../dataTilesSorted/ (format=\"<ROOT_PATH><CANCER_TYPE>TilesSorted/\")\n\n* `--tile_dict_path`: path to your Tile dictinory path (format=\"<ROOT_PATH><CANCER_TYPE>_FileMappingDict.p\")\n\n* `--val`: validation vs test (default='test', or use 'valid'), use `test_val` to set the parameter\n\n* `--train_log`: log file from training (default='')\n\nThe output data will be dumped under experiments/experiment_name folder.\n\n* To run the test data with multiple check points, use run_multiple_test.sh script. Set the experiment, count (epoch number to start from) and step (increment of epoch number) variables in the script accordingly.\n\nNote: If number of classes presented is less than what the model is trained for, you will need to pass the log file created by the model as input to the test script using `--train_log` parameter\n\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.4 Evaluation:",
        "parent_header": [
          "Data:",
          "3. Demo"
        ],
        "type": "Text_excerpt",
        "value": "Use test_eval.ipynb to create the ROC curves and calculate the confidence intervals. To start a jupyter notebook on bigpurple, submit the run-jupyter.sbatch script and the follow the instructions on the output file.\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5 TSNE Analysis:",
        "parent_header": [
          "Data:",
          "3. Demo"
        ],
        "type": "Text_excerpt",
        "value": "Once the model is trained, run ```tsne.py``` to extract the last layer weights to create the TSNE plots, ```run_tsne.sh``` is the associated sbatch file.\n\n**sbatch run_tsne.sh \"--root_dir=/gpfs/scratch/bilals01/brain-kidney-lung/brain-kidney-lungTilesSorted/ --num_class=7 --tile_dict_path=/gpfs/scratch/bilals01/brain-kidney-lung/brain-kidney-lung_FileMappingDict.p --val=test\" test**\n\n* `--num_class`: number of classes (default=2)\n\n* `--root_dir`: path to your sorted tiles Data directory .../dataTilesSorted/ (format=\"<ROOT_PATH><CANCER_TYPE>TilesSorted/\")\n\n* `--tile_dict_path`: path to your Tile dictinory path (format=\"<ROOT_PATH><CANCER_TYPE>_FileMappingDict.p\")\n\n* `--val`: validation vs test (default='test', or use 'valid')\n\nThe output data will be saved at tsne_data folder\n\n* Use TSNE/tsne_visualize.ipynb to visualize the results (change the input file name to match with tsne.py output files  at tsne_data as needed)\n\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Instructions for use",
        "parent_header": [
          "Data:"
        ],
        "type": "Text_excerpt",
        "value": "* Use the model checkpoints in files in checkpoints folder and follow 4. Test model instructions in the above section.\n"
      },
      "source": "https://raw.githubusercontent.com/sedab/PathCNN/master/Readme.md",
      "technique": "header_analysis"
    }
  ]
}