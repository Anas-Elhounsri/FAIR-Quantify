{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ksahlin/BESST"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-01-22T11:32:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-11T13:05:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BESST - scaffolder for genomic assemblies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9332974023873164,
      "result": {
        "original_header": "BESST",
        "type": "Text_excerpt",
        "value": "Supported on Linux / OSX with python2 (versions >= 2.7) and python3 (versions >=3.4) [![Build Status](https://travis-ci.org/ksahlin/BESST.svg?branch=master)](https://travis-ci.org/ksahlin/BESST) \nBESST is a package for scaffolding genomic assemblies. BESST v1.0.4 is first described in [2] with various improvements in v2.0 (e.g. [3]). BESST is based on GapEst [1]. \n1. Sahlin K, Street N, Lundeberg J, Arvestad L (2012) \"Improved gap size estimation for scaffolding algorithms.\" Bioinformatics 28(17), 2215-2222 [Link](http://bioinformatics.oxfordjournals.org/content/28/17/2215.long)\n2. Sahlin K, Vezzi F, Nystedt B, Lundeberg J, Arvestad L (2014) \"BESST--efficient scaffolding of large fragmented assemblies.\" BMC Bioinformatics 15, 281 [Link](http://www.biomedcentral.com/1471-2105/15/281)\n3. Sahlin K, Chikhi R, Arvestad L (2016) \"Assembly scaffolding with PE-contaminated mate-pair libraries.\" Bioinformatics [Link](https://bioinformatics.oxfordjournals.org/content/early/2016/03/09/bioinformatics.btw064) \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8276495903892466,
      "result": {
        "original_header": "What parameters should I call BESST with?",
        "type": "Text_excerpt",
        "value": "```sh\nrunBESST -c /path/to/contigfile.fa -f /path/to/file1.bam /path/to/file2.bam ... -o /path/to/output -orientation {fr/rf}\n```\nFor more details, see section \"INPUT\" further down. BESST will then infer as much as possible from data and print inferred parameters and more to \"/path/to/output/BESST_output/Statistics.txt\". This file is useful for debugging.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9726520166516096,
      "result": {
        "original_header": "My mate pair libraries contains paired-end contamination, what should I do?",
        "type": "Text_excerpt",
        "value": "First off, always use an adaptertrimming tool. The trimming of adapters greatly improves alignments as both adapters, and chimeric parts withing reads (result of read sequence on different sides of the adapter), can greatly improve alignments and therefore scaffolding. We recommend any tool that can separate the paired reads types into MP, PE, and unknown orientation based on identifying and <em>removing</em> the adapters (we have had good experience with the tool NxTrim)\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9796206287223419,
      "result": {
        "original_header": "Significant amount of adapters found",
        "type": "Text_excerpt",
        "value": "In case the MP distribution is wide and already has good short-range spanning coverge and good coverage in general, use only the links that were identified as MPs. Below is an example of such a distribution \nThe safe approach is of course always to try both.  \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8541773718440435,
      "result": {
        "original_header": "INPUT:",
        "type": "Text_excerpt",
        "value": "* -orientation < fr/rf one for each library > \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.978398643439197,
      "result": {
        "original_header": "Optional arguments:",
        "type": "Text_excerpt",
        "value": "The following arguments are computed internally / set by BESST. It is however good to specify mean and standard deviation if your assembly is very fragmented compared to the library insert size (not enough large contains to compute library statistics on).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9101209364308535,
      "result": {
        "original_header": "Library parameters:",
        "type": "Text_excerpt",
        "value": "* -m <int> : the means of the insert sizes of the library, one integer number for each library. \n* -s <int> : standard deviation of the libraries, one integer number for each library.\n \n* -T <int> : Thresholds that are some upper levels that you think not too many PE/MP will have a longer insert size than (in the end of the mode). \n* -r <int> : Mean read length for each of the libraries. \n* -z <int ... > Coverage cutoff for repeat classification ( e.g. -z 100 says that contigs with coverages over 100 will be discarded from scaffolding). One cutoff for each library. \n* -d Check for sequencing duplicates and count only one of them (when computing nr of links) if they are occurring.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9430012321812511,
      "result": {
        "original_header": "Contig parameters:",
        "type": "Text_excerpt",
        "value": "* -k <ints> Minimum contig size to be seen as a \"large contigs\" (for statistical scoring only). One number for each library. \n* --filter_contigs <int> Remove contigs smaller than this value from all scaffolding. These contigs are not even incuded in the outpus of BESST. \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9631246493062144,
      "result": {
        "original_header": "Algorithm parameters:",
        "type": "Text_excerpt",
        "value": "* --iter <int> Maximum number of iterations in BFS search for paths between scaffolds. \n* -e <int> The least amount of witness links that is needed to create a link edge in graph (one for each library) \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9853859162934732,
      "result": {
        "original_header": "Under construction / proven unstable",
        "type": "Text_excerpt",
        "value": "* -a <float> Maximum length difference ratio for merging of haplotypic regions.\n \n* -b <int> Nr of standard deviations over mean/2 of coverage to allow for clasification of haplotype \n* -q Parallellize work load of path finder module in case of multiple processors available using multiprocessing library for pyhton. \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9744760913943297,
      "result": {
        "original_header": "MORE NOTES:",
        "type": "Text_excerpt",
        "value": "2. Mapping reads: If you want to map a mate pair library, you will need to map them as paired end library i.e. forward-reverse mode. All read pair libraries should be in this order. \n3. Order of scaffolding: It is crucial for the algorithm that you give the libraries in increasing order of the insert size. \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ksahlin/BESST/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ksahlin/BESST/wiki"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ksahlin/BESST/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ksahlin/BESST/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ksahlin/BESST"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BESST"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksahlin/BESST/master/docs/figures/isize_narrow_cont.png"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksahlin/BESST/master/docs/figures/isize_wide_cont.png"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "INSTALLATION:\n--------------\n\nBelow gives three options to install BESST.\n\nSource from GitHub\n-----------------\nThis assumes that you have the python modules pysam, networkx, numpy and scipy installed.\n\n```sh\ngit clone https://github.com/ksahlin/BESST.git\ncd BESST\n./runBESST\n```\n\n\nUsing pip or easy_install (recommended)\n---------------------------------------------------\nPython has two package installers, *pip* and *easy_install*, which makes it very easy to install **BESST**. If you have any of this installed,\n\nType for *pip* (in terminal):\n```\nsudo pip install BESST\n```\nType for *easy_install* (in terminal):\n```\nsudo easy_install BESST\n```\nIf you do not have *pip* or *easy_install* for python, you can get e.g. *pip* as follows:\n```\ncurl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py\npython get-pip.py\n``` \nWith proper installation of **BESST**, you should be able to run:\n\n```\nrunBESST\n```\n\nto view user instructions.\n\n(This installation will install the two nonstandard python module dependencies: *pysam 0.6*, *networkx (1.6<=version<=1.11)* automatically for you.)\n\n\n\nInstalling manually\n-------------------\n\nIn the **BESST** folder where *setup.py* is located, run:\n\n```python setup.py install```\n\nThis installation will not include the two modules *networkx* and *pysam*. You need to install them separately. They can be found here:\n\nhttp://networkx.github.com/documentation/latest/install.html\nPlease, be sure to install networkx version between 1.6 and 1.11. Currently BESST does not support networkx 2.x.\n\nhttp://code.google.com/p/pysam/downloads/list\n\nor installed with pip:\n```pip install  pysam networkx==1.11```\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/docs/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "INSTALLATION",
        "parent_header": [
          "BESST"
        ],
        "type": "Text_excerpt",
        "value": "See docs/INSTALL.md.\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9989328856912072,
      "result": {
        "original_header": "BESST",
        "type": "Text_excerpt",
        "value": "Supported on Linux / OSX with python2 (versions >= 2.7) and python3 (versions >=3.4) [![Build Status](https://travis-ci.org/ksahlin/BESST.svg?branch=master)](https://travis-ci.org/ksahlin/BESST) \nFor installation, see docs/INSTALL.md. Manual is found in docs/MANUAL.md. \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.873177111360942,
      "result": {
        "original_header": "What parameters should I call BESST with?",
        "type": "Text_excerpt",
        "value": "```sh\nrunBESST -c /path/to/contigfile.fa -f /path/to/file1.bam /path/to/file2.bam ... -o /path/to/output -orientation {fr/rf}\n```\nFor more details, see section \"INPUT\" further down. BESST will then infer as much as possible from data and print inferred parameters and more to \"/path/to/output/BESST_output/Statistics.txt\". This file is useful for debugging.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9686506951913906,
      "result": {
        "original_header": "BAM files and mapping",
        "type": "Text_excerpt",
        "value": "```sh\npython reads_to_ctg_map.py /path/to/lib1_A.fq /path/to/lib1_B.fq /path/to/contigs.fasta --threads N\n```\nwhere `N` is an integer specifying how many threads BWA-mem should use. `--nomem` can be specified to the above call to use BWA-sampe as the paired read alignment pipeline.\n  \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8064926814153381,
      "result": {
        "original_header": "INPUT:",
        "type": "Text_excerpt",
        "value": "Required arguments: \n* -c < path to a contig file > \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9583464696659056,
      "result": {
        "original_header": "Optional arguments:",
        "type": "Text_excerpt",
        "value": "* -o < path to location for the output > \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9006678088123001,
      "result": {
        "original_header": "Algorithm parameters:",
        "type": "Text_excerpt",
        "value": "* --iter <int> Maximum number of iterations in BFS search for paths between scaffolds. \n* --no_score Do not perform statistical scoring, only run path search between contigs. \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ksahlin/BESST/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BESST"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ksahlin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 373230,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 10361,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 6108,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ksahlin",
          "type": "User"
        },
        "date_created": "2016-08-12T19:51:35Z",
        "date_published": "2016-08-12T19:52:54Z",
        "description": "- An order of magnitude more efficient path traversal algorithm. It reduces the number of paths tried based on an DP (-ish) algorithm, therefore we can explore more of the graph in less time. This should give better quality scaffolds compared to older versions.\n- Betteer scoring of edges when library distribution is positively skwed (long tail) by fit to lognormal distribution.\n- Added better logging to Statistics.txt and fixed minor logging bugs.\n- Added an output file repeats_log.tsv on the following format: `contig_accession    length  coverage    cov/mean_cov(exp number of placements)  lib_mean    placable`. This file serves as som information to future repeat placement in scaffolding.\n- Added parameters `-z_min` (lower coverage cutoff), `-max_contig_overlap` how many bases in contig ends that are merged between two adjacent contigs in a created scaffold (default 200).\n",
        "html_url": "https://github.com/ksahlin/BESST/releases/tag/v2.2.4",
        "name": "Version 2.2.4",
        "release_id": 3878048,
        "tag": "v2.2.4",
        "tarball_url": "https://api.github.com/repos/ksahlin/BESST/tarball/v2.2.4",
        "type": "Release",
        "url": "https://api.github.com/repos/ksahlin/BESST/releases/3878048",
        "value": "https://api.github.com/repos/ksahlin/BESST/releases/3878048",
        "zipball_url": "https://api.github.com/repos/ksahlin/BESST/zipball/v2.2.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ksahlin",
          "type": "User"
        },
        "date_created": "2015-11-12T22:51:21Z",
        "date_published": "2015-11-12T23:08:56Z",
        "description": "- Ability to detect and scaffold with PE-contamination\n- More efficient (in practice) way to find paths with \"good score\" in contig graph.\n- Speed-ups in pathfinding algorithm\n- Better inference of gap sized when library is skewed (log-normal fitting - extending GapEst's assumptions of normal distribution)\n- Better inference of library insert size distribution on fragmented assemblies (based on theory from http://www.biorxiv.org/content/early/2015/08/04/023929.abstract)\n",
        "html_url": "https://github.com/ksahlin/BESST/releases/tag/2.1",
        "name": "BESST-v2",
        "release_id": 2118775,
        "tag": "2.1",
        "tarball_url": "https://api.github.com/repos/ksahlin/BESST/tarball/2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ksahlin/BESST/releases/2118775",
        "value": "https://api.github.com/repos/ksahlin/BESST/releases/2118775",
        "zipball_url": "https://api.github.com/repos/ksahlin/BESST/zipball/2.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "EXAMPLE RUN:",
        "parent_header": [
          "BESST"
        ],
        "type": "Text_excerpt",
        "value": "For scaffolding with one PE and one MP library:\n```sh\nrunBESST -c /path/to/contigfile.fa -f /path/to/file1.bam /path/to/file2.bam -orientation fr rf -o /path/to/output\n```\nIf the mate pair library was reversed complemented before it was aligned, '-orientation fr fr' should be specified.\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:15:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 57
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "BESST does not scaffold anything, what is going on?",
        "parent_header": [
          "BESST",
          "Q&amp;A"
        ],
        "type": "Text_excerpt",
        "value": "A lot of debugging can be done immediately in \"< outputfolder >/BESST_output/Statistics.txt\" file where outputfolder is specified with -o when running BESST. BESST outputs statistics of insert size distribution(s) (mate-pair and PE-contamination) as well as coverage statistics and how many read pair are used for scaffolding (for each library). Below is an example of the beginning of a file. Make sure library distribution, contamine distribution and rate looks ok, as well as coverage statistics. If this does not resolve issues or you are unsure about how to proceed, please mail **ksahlin@kth.se**.\n\n```sh\nPASS 1\n\n\nMean before filtering : 2471.05005763\nStd_est  before filtering:  1621.22128565\nMean converged: 2454.01278202\nStd_est converged:  1438.84572664\nContamine mean before filtering : 383.841809945\nContamine stddev before filtering:  541.063248334\nContamine mean converged: 371.132937665\nContamine std_est converged:  105.713828422\n\nLIBRARY STATISTICS\nMean of library set to: 2454.01278202\nStandard deviation of library set to:  1438.84572664\nMP library PE contamination:\nContamine rate (rev comp oriented) estimated to:  0.228445050646\nlib contamine mean (avg fragmentation size):  371.132937665\nlib contamine stddev:  105.713828422\nNumber of contamined reads used for this calculation:  106857.0\n-T (library insert size threshold) set to:  8209.39568857\n-k set to (Scaffolding with contigs larger than):  8209.39568857\nNumber of links required to create an edge:  5\nRead length set to:  100.38\nRelative weight of dominating link set to (default=3):  3\n\nTime elapsed for getting libmetrics, iteration 0: 41.3993628025\n\nParsing BAM file...\nL50:  37 N50:  42455 Initial contig assembly length:  4588376\nNr of contigs that was singeled out due to length constraints 78\nTime initializing BESST objects:  0.00225305557251\nNr of contigs/scaffolds included in scaffolding: 130\nTotal time elapsed for initializing Graph:  0.00791215896606\nReading bam file and creating scaffold graph...\nELAPSED reading file: 30.2451779842\nNR OF FISHY READ LINKS:  0\nNumber of USEFUL READS (reads mapping to different contigs uniquly):  434284\nNumber of non unique reads (at least one read non-unique in read pair) that maps to different contigs (filtered out from scaffolding):  29267\nReads with too large insert size from \"USEFUL READS\" (filtered out):  325897\nNumber of duplicated reads indicated and removed:  4890\nMean coverage before filtering out extreme observations =  69.01403104\nStd dev of coverage before filtering out extreme observations=  61.5185426061\nMean coverage after filtering =  51.1057077906\nStd coverage after filtering =  17.4310506587\nLength of longest contig in calc of coverage:  106467\nLength of shortest contig in calc of coverage:  8270\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EXAMPLE RUN:",
        "parent_header": [
          "BESST"
        ],
        "type": "Text_excerpt",
        "value": "For scaffolding with one PE and one MP library:\n```sh\nrunBESST -c /path/to/contigfile.fa -f /path/to/file1.bam /path/to/file2.bam -orientation fr rf -o /path/to/output\n```\nIf the mate pair library was reversed complemented before it was aligned, '-orientation fr fr' should be specified.\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/BESST/master/README.md",
      "technique": "header_analysis"
    }
  ]
}