{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cnluzon/prophtools"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-10-31T15:21:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-16T07:47:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ProphTools: Heterogeneous network prioritization tools"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9381831372215418,
      "result": {
        "original_header": "About ProphTools",
        "type": "Text_excerpt",
        "value": "``ProphTools`` package allows to perform heterogeneous network prioritization on a set \nof interconnected networks, prioritizing from a query network to the target \nnetwork by means of a hybrid approach including a Random Walk with Restarts for\nwithin network approach and propagation across different networks based on these\nresults. Final scores are computed correlating the results from\npropagating from the query network to the target network and correlating target\nnodes from within the target network. ``ProphTools`` is based on the core \nmethodology applied to create ``ProphNet``, a web-based prioritization tool that performs\nqueries on a specific gene-domain-disease network. \nProphTools methodology allows to handle any type of network\nconfiguration, so you can now download the ``ProphTools`` package,\nset up your network configuration and run queries and performance tests. \nIn addition, as the source code is provided, you are free to use ``ProphTools``\nas an API and pass your network configuration as a ``GraphDataSet`` object to a \nProphNet prioritizer.  \n\nMart\u00ednez, V\u00edctor, Cano, Carlos, and Blanco, Armando.\n**ProphNet: A generic prioritization method through propagation of information.**\nBMC bioinformatics 15.1 (2014): 1. \n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9230461491007989,
      "result": {
        "original_header": "Docker version",
        "type": "Text_excerpt",
        "value": "Example runs on an installed docker image\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nOnce you have pulled the prophtools Docker image, you can run it using `docker run` command. Keep in mind that prophtools requires input files. In this sense, you need to mount a docker data volume to use it. This can be done using the `-v` option. For instance, if you are running prophtools on a directory which has a sampledata/ directory in it which contained an example.mat: :: \nNote that you need to provide the full path to the directory that is going to be mounted by the docker container. Additionally, note that the output files persist in the data volume. \n \n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8097933757435954,
      "result": {
        "type": "Text_excerpt",
        "value": "====================================================================================\nProphTools. General Prioritization Tools for Heterogeneous Biological Networks\n==================================================================================== \n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/cnluzon/prophtools/wiki"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cnluzon/prophtools/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cnluzon/prophtools/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cnluzon/prophtools"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "About ProphTools"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cnluzon/prophtools/master/build_all.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "``ProphTools`` is provided as a python 2.7 package. At the moment it is not \navailable on PyPi, but you can download the `tar ball source distribution file <https://github.com/cnluzon/prophtools/raw/master/dist/prophtools-1.0.tar.gz>`_\nand install it: ::\n\n    pip install ./prophtools-1.0.tar.gz\n\nIf the above link does not work, you can find the tar.gz file under /dist/ at the prophtools repository.\n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9941972602429859,
      "result": {
        "original_header": "Docker version",
        "type": "Text_excerpt",
        "value": "If you prefer to forget about requirements or are running another operating system, you can use prophtools public docker version to run it as a docker container. Prophtools docker container is available at the ``Docker hub``: <https://hub.docker.com/r/cnluzon/prophtools/>. You can pull it by: :: \n    docker pull cnluzon/prophtools\n    \nFor more information about how to install and use Docker, you can read the \n`Docker documentation <https://docs.docker.com/>`_. \nExample runs on an installed docker image\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nOnce you have pulled the prophtools Docker image, you can run it using `docker run` command. Keep in mind that prophtools requires input files. In this sense, you need to mount a docker data volume to use it. This can be done using the `-v` option. For instance, if you are running prophtools on a directory which has a sampledata/ directory in it which contained an example.mat: :: \n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998940416710334,
      "result": {
        "type": "Text_excerpt",
        "value": ".. image:: https://coveralls.io/repos/github/cnluzon/prophtools/badge.svg\n    :target: https://coveralls.io/github/cnluzon/prophtools \n.. image:: https://travis-ci.org/cnluzon/prophtools.svg?branch=master\n    :target: https://travis-ci.org/cnluzon/prophtools \n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9056362242715074,
      "result": {
        "original_header": "Docker version",
        "type": "Text_excerpt",
        "value": "    docker run -v `pwd`/sampledata:/sampledata cnluzon/prophtools cross --matfile /sampledata/example.mat --src 0 --dst 1 --out /sampledata/prueba \n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cnluzon/prophtools/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, network-analysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "``ProphTools`` is implemented in python and source code is provided under the \nGPLv3.0 license. You can see more about its terms on the LICENSE.txt file.\n\n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "prophtools"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "cnluzon"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 172667,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 148,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "``ProphTools`` Requires python ``2.7`` to work, along with the following libraries (tested for the specified versions): ::\n\n    numpy (>=1.11.2)\n    scipy (>=0.18.1)\n    matplotlib (>=1.4.3)\n    scikit-learn (>=0.18)\n    networkx (>=2.0) \n\n**NOTE**: As of September 20, 2017, ``networkx`` v2.0 has been released. This new version is not totally compatible with previous versions. We have updated ProphTools to work with the newest version, so you will need to update your system to make ProphTools work properly.\n\nAll requirements are included in the ``setup.py``. However, scipy documentation suggests installing it through ``apt-get``: <http://www.scipy.org/install.html>. If you run into problems with pip I recommend to previously install scipy, numpy and matplotlib through apt-get to ensure it will work: ::\n\n    sudo apt-get install python-numpy python-scipy python-matplotlib\n    "
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:53:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use",
        "type": "Text_excerpt",
        "value": "``Prophtools`` is a command line tool. It runs internally on .mat files (for more information, see **Network configuration file format** below). In order to improve usability, the latest version of ProphTools includes conversion to this .mat formal from two file formats: \n\n* **TXT format** based on Trivial Graph Format (TGF).\n* **Graph Exchange XML format (GEXF)**. XML-based Graph specification used in many applications: https://gephi.org/gexf/format/.\n\nProphTools input file description\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAs mentioned above, ``ProphTools`` can convert two types of graph specification files to its internal ``.mat`` files. This can be done by the following command: ::\n\n    prophtools buildmat --file toy_example.txt --format txt --out toy_example.mat\n\nWhere format can be either txt or gexf, the current supported file formats. This process will also build the **precomputed** matrices that ProphTools requires to improve computation time. Please note that precomputing can take long time in large matrices. However, this process only needs to take place once.\n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TXT file format",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "The simplest file format ProphTools can handle is a TXT file based on Trivial Graph Format (TGF). Trivial Graph Format only includes a list of nodes and a list of edges, as in: ::\n\n    1 FirstNode\n    2 SecondNode\n    #\n    1 2 Edge\n\nTo this format, a third column to the node list has been added to provide subnetwork information. Additionally, edges must provide a weight value: ::\n\n    1 FirstNode node_group\n    2 SecondNode node_group\n    #\n    1 2 Edge edge_weight\n\nA toy example with three subnetworks: ::\n\n    0 node_0 0\n    1 node_1 0\n    2 node_2 0\n    3 node_3 1\n    4 node_4 1\n    5 node_5 2\n    6 node_6 2\n    7 node_7 2\n    8 node_8 2\n    ##\n    1 2 0.25\n    0 2 0.88\n    3 4 1.00\n    5 7 0.52\n    7 8 0.52\n    6 8 0.52\n    0 3 1.00\n    2 4 1.00\n    1 7 1.00\n    4 6 1.00 \n    4 8 1.00\n\nPlease note that node ids must be unique, even if they belong to different subnetworks. By default, ProphTools will use node identifiers, not labels (second column in txt file) as IDs for nodes. Optionally, you can use the ``--labels_as_ids`` parameter to use labels instead. Please note that in this case labels must be unique per node.\n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GEXF file format",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "GEXF (https://gephi.org/gexf/format/) is an adaptation of XML used to specify graphs. As you can see in prophtools/matfiles/toy_example.gexf, ProphTools supported GEXF file needs that you include a 'group' label for each node, specifying which subnetwork each node belongs to, for instance, this would be a trivial GEXF file with only one subnetwork with two nodes: ::\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <gexf xmlns=\"http://www.gexf.net/1.2draft\" version=\"1.2\">\n    <meta lastmodifieddate=\"2017-09-04\">\n    <creator>cnluzon</creator>\n    <description>Toy example gexf file to understand use with ProphTools</description>\n    </meta>\n    <graph defaultedgetype=\"undirected\" mode=\"static\">\n        \n        <attributes class=\"node\">\n            <attribute id=\"0\" title=\"group\" type=\"integer\"/>    \n        </attributes>\n        <nodes>\n            <node id=\"0\" label=\"0_group_0\">\n                <attvalue for=\"0\" value=\"0\"/>\n            </node>\n            <node id=\"1\" label=\"1_group_0\">\n                <attvalue for=\"0\" value=\"0\"/>\n            </node>\n        </nodes>\n\n        <edges>\n            <edge id=\"0\" source=\"0\" target=\"1\" weight=\"0.25\"/>\n        </edges>\n    \n    </graph>\n    </gexf>\n\nIf you want to know more, see the two examples on the matfiles folder that comes with `ProphTools`.\n\n`ProphTools` will take as an input a .mat file containing your network configuration. In order to obtain this file, it is necessary that you run `ProphTools buildmat` as explained before. Once you have your `.mat` file, you can perform two types of tasks.\n\n\nPrioritize on a network configuration\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`ProphTools` will take the aforementioned `mat` file and and three more required parameters: \n\n* ``src``: source network, \n* ``dst``: destination network, and\n* ``qindex`` or ``qname``: a list of indexes or ids separated by commas containing the source network\nnode indexes that are going to be propagated.\n\nNote that ``src`` and ``dst`` correspond to the group index provided in the txt or gexf files.\n\nFor instance: ::\n\n    prophtools prioritize --matfile example.mat --src 0 --dst 2 --qindex 1,2\n\nwill return a scored list of nodes from the destination network and their\ncorrelation scores: ::\n\n    Entity\tScore\n    c_00003\t0.105975\n    c_00017\t0.104684\n    c_00015\t0.070770\n    c_00012\t0.040780\n    c_00002\t0.031075\n\n    \nOr: ::\n\n    prophtools prioritize --matfile example.mat --src 0 --dst 2 --qname a_00001,a_00002\n\nwill output the same result. Optionally, a ``out`` parameter can be provided to save all results as a comma-separated value ``csv`` file format.\n\nCorrelation score is a value between -1.0 and 1.0, as it correspond to Pearson\ncorrelation (or Spearman if specified.)\n\nOptionally, a ``--corr_function`` parameter can be provided to specify spearman\ncorrelation: ::\n\n    prophtools prioritize --matfile network.mat --src 0 --dst 2 --qindex 1,2 --corr_function spearman\n\nPerformance test on a network set\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGiven an input .mat file, `ProphTools` can also give you an estimation on how\nwell the propagation method predicts a certain connection by performing a \nleave-one-out cross-validation on the relation you choose.\n\nThe required parameters in this case are:\n\n* ``matfile``: Input ``mat`` network configuration file.\n* ``src``: Origin network (as specified by the ``group`` label in either ``GEXF`` or ``TXT`` file).\n* ``dst``: Destination network (as specified by the ``group`` label in either ``GEXF`` or ``TXT`` file).\n\nOptionally, you can specify:\n\n* ``cross```: Number of groups for the cross validation. 5 by default.\n* ``corr_function``: Correlation function used to compute final scores. By default, this is Pearson correlation. Optionally, you can specify spearman.\n\nFor instance, to run ``ProphTools`` cross validation on the example data using spearman correlation function: ::\n\n    prophtools cross --matfile example.mat --src 0 --dst 2 --cross 5 --out results --corr_function spearman\n\nThis will save some info in ``results.txt`` regarding AUC and Average ranking values per prioritization process, and also a results.svg ROC curve will be plotted. Note that this process is more time consuming than mere prioritization, because it runs a prioritization with every node on the source network.\n\nUsing the defaults: ::\n\n    prophtools cross --matfile example.mat --src 0 --dst 2\n\n\n**APPENDIX: ProphTools native Network configuration file format**\n\nAs of ``ProphTools`` v1.1, you are no longer required to build this data on your own. However,\nthis description is kept for users that prefer this format to the text-based formats described before.\n\nThe ``--matfile`` parameter is required for all prophtools function. It is a .mat \nfile that can be generated from scipy sparse matrices using the scipy.io\nmodule and its ``loadmat`` and ``savemat`` functions.\n\n``scipy.io`` returns a dictionary where the keys are the names of the entities contained\non the .mat file. In the case of ``ProphTools``, the meta-data must be: ::\n\n    'entities':    A list of names corresponding to the name of the entity networks.\n    'relations':   A list of names corresponding to the name of the relation networks.\n    'connections': A square matrix of shape len(entities)xlen(entities) where\n                   connections[i,j]==2 means relations[2] connects entities[i] and\n                   entities[j], in a way that the ROWS in relations[2] represent\n                   entities[i] and the COLUMNS represent entities[j]. For this \n                   reason, connections is a non-symmetric matrix, meaning \n                   connections[j,i]==-1.\n\nFor each name in ``entities``, there must be an entry with that name pointing to\na matrix, and also the same for ``relations``. In addition, for each of the names\nthere will be a list of node names (to label the queries) and a precomputed matrix.\n\n**Example:**\nAs an example, imagine that we have the following network set: three entity networks,\nA, B and C, where A is connected to B with the relation REL_AB, and B is connected\nto C with the relation matrix REL_BC. We would have this configuration. The required\nmeta-data would be: ::\n\n     'entities':    ['A', 'B', 'C']\n     'relations':   ['REL_AB', 'REL_BC']\n     'connections': [[-1,  0, -1],   # connections[0,1]==0 means relations[0] connects entities[0] and entities[1]\n                     [-1, -1,  1],\n                     [-1, -1, -1]]\n\nThen, the actual adjacency matrices are provided: ::\n\n    'A': a square matrix\n    'A_precomputed': a square matrix same shape of A\n    'A_name': list of names for the nodes of A (its length is the same as A.shape)\n    'B': a square matrix\n    'B_precomputed': a square matrix same shape of B\n    'B_name': list of names for the nodes of B (its length is the same as B.shape)\n    'C': a square matrix\n    'C_precomputed': a square matrix same shape of C\n    'C_name': list of names for the nodes of C (its length is the same as C.shape)\n\n    'REL_AB': a matrix where rows correspond to A, columns to B, therefore its shape: rowsA x columnsB.\n    'REL_BC': a matrix where rows correspond to B, columns to C, therefore its shape: rowsB x columnsC.\n\nPlease note that if a matrix is named X, the precomputed matrix must be X_precomputed, and\nthe name list X_name, since ``GraphDataSet`` IO parses the .mat file this way. Also note that\nprecomputed matrices **must** be provided at this moment. To precompute them you can make use\nof the ``preprocessing`` module provided.\n\nThere is a sample example.mat matrix file that you can download under ``matfiles/example.mat`` to familiarize yourself\nwith the format.\n\nOn python command line: ::\n\n    %> import scipy.io as sio\n    %> sio.whosmat('example.mat')\n\n    [('a', (50, 50), 'sparse'),\n     ('c', (20, 20), 'sparse'),\n     ('b', (25, 25), 'sparse'),\n     ('b_precomputed', (25, 25), 'sparse'),\n     ('c_name', (20,), 'char'),\n     ('rel_bc', (25, 20), 'sparse'),\n     ('rel_ab', (50, 25), 'sparse'),\n     ('rel_ac', (50, 20), 'sparse'),\n     ('c_precomputed', (20, 20), 'sparse'),\n     ('relations', (3,), 'char'),\n     ('connections', (3, 3), 'int64'),\n     ('entities', (3,), 'char'),\n     ('a_name', (50,), 'char'),\n     ('b_name', (25,), 'char'),\n     ('a_precomputed', (50, 50), 'sparse')]\n\n    %> my_data = sio.loadmat('example.mat')\n    %> a['a']\n    <50x50 sparse matrix of type '<type 'numpy.float64'>'\n        with 1730 stored elements in Compressed Sparse Column format>\n    \n    \nLncRNA-disease network\n^^^^^^^^^^^^^^^^^^^^^^\n\nAdditionally, you can download real lncRNA-disease data from our server: `general dataset <http://genome.ugr.es:9000/download/data/lncrna_disease_prophtools_general.mat>`_, `specific dataset <http://genome.ugr.es:9000/download/data/lncrna_disease_prophtools_specific.mat>`_.\n\nDrug-gene-disease network\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also download \ndata from our server: `DrugNet file (large, includes precomputed matrices) <http://genome.ugr.es:9000/download/data/drugnet_data.zip>`_. `DrugNet file (lighter, but needs precomputation before use) <http://genome.ugr.es:9000/download/data/drugnet_data_non_precomputed.zip>`_. For more information, you can visit `DrugNet's website <http://genome.ugr.es:9000/drugnet>`_.\n\nIf you use these datasets, please cite us:\n\nMart\u00ednez, V., Navarro, C., Cano, C., Fajardo, W., Blanco, A. \n**DrugNet: Network-based drug\u2013disease prioritization by integrating heterogeneous data.** \nArtificial intelligence in medicine, 63(1), 41-49. (2015).\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/cnluzon/prophtools/master/README.txt",
      "technique": "header_analysis"
    }
  ]
}