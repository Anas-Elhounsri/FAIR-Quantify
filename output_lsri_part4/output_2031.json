{
  "application_domain": [
    {
      "confidence": 0.9237181563315552,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/danmaclean/gee_fu"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2010-02-15T21:04:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-14T15:16:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An extensible Ruby on Rails web-service application and database for visualising HTGS data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9990764546807278,
      "result": {
        "original_header": "What is Gee Fu?",
        "type": "Text_excerpt",
        "value": "Gee Fu is an application that holds Gene Feature data. It has been designed with the needs of researchers wanting to keep, share and annotate sequence and feature data.\nGee Fu is a Ruby on Rails based RESTful web-service application that stores and serves sequence assembly and genome feature data on request.  \nGee Fu is ideally suited to serving large amounts of data such as those from high-throughput sequencing experiments via bio-samtools and BAM files.  \nGee Fu is capable of receiving and handling requests from AnnoJ , a web service based viewing engine for genomic data. It can return JSON data which AnnoJ is able to render. We anticipate being able to serve up data in formats suitable for different applications as development progresses and we become aware of other rendering engines and web services that request data.  \n"
      },
      "source": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9975496261763453,
      "result": {
        "original_header": "Schema",
        "type": "Text_excerpt",
        "value": "The schema is very straightforward and easily extended. It consists of a central Features table and a many to many join table Parents that indicates which features are parents (according to their gff records) of which other features.\n \n"
      },
      "source": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9357759130378869,
      "result": {
        "original_header": "Extending the database and creating new functionality",
        "type": "Text_excerpt",
        "value": "You can extend the database exactly as if it were any other Rails application. See the Rails documentation for conventions for creating and naming new tables, Rails prefers convention over configuration so you should pay attention to these. Adding new functionality to the web app is covered by the same documentation. \n \n"
      },
      "source": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9681275159460004,
      "result": {
        "original_header": "Where to find more info",
        "type": "Text_excerpt",
        "value": "If you get really frustrated with the software, feel free to complain to me `dan.maclean@tsl.ac.uk`. A lot of your initial problems will be answered in the Rails community pages, please look there if your problem looks like it might be related to Rails more directly than this particular instance of a Rails app. \n"
      },
      "source": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/danmaclean/gee_fu/wiki"
      },
      "source": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/danmaclean/gee_fu/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/danmaclean/gee_fu/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "danmaclean/gee_fu"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up Gee Fu",
        "type": "Text_excerpt",
        "value": "* Install [rvm](https://rvm.io/) using:\n  `\\curl -L https://get.rvm.io | bash -s stable --rails --autolibs=enabled --ruby=1.9.3-p286`\n* Install redis (on OSX with [homebrew](http://mxcl.github.io/homebrew/) use)\n  `brew install redis`\n* Follow instructions given by `brew info redis` to have launchd start redis at login\n* Install git (on OSX with [homebrew](http://mxcl.github.io/homebrew/) use)\n  `brew install git`\n* Install postgres (on OSX use [PostgresApp](http://postgresapp.com/))\n* Clone the GeeFU repo\n  `git clone git://github.com/danmaclean/gee_fu.git .`\n* `cd gee_fu`\n* Accept the .rvmrc as trusted\n* Install bundler\n  `gem install bundler`\n* Setup the repo\n  `bundle install`\n* Signup for a [Mandrill](http://mandrill.com/) account and grab an API key\n* Create a .env file in the root folder with:\n\n```\nEMAIL_SENDER=My Name <me@example.com>\nMANDRILL_USERNAME=me@example.com\nMANDRILL_APIKEY=[insert API key]\n```\n\n* Create a Postgres user called gee_fu with no password\n* Change the attributes of Postgres user gee_fu to allow database creation `ALTER USER gee_fu CREATEDB;`\n* Run `rake db:setup`\n* Follow the instructions at README_FOR_DATA.mdown\n* Start the gee-fu server with `foreman start`\n* Visit http://localhost:5000\n* Once you've signed up as the first user use `rake admin:set email=me@example.com` to set your account as an admin to add Organisms\n\n"
      },
      "source": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up AnnoJ",
        "type": "Text_excerpt",
        "value": "The AnnoJ view requires a JSON format configuration file, to tell it about the genome and the service etc.  Gee Fu allows you to maintain a YAML file and convert it to the `RAILS_ROOT/public/javascripts/config.js` AnnoJ uses. Edit the file `RAILS_ROOT/config/config.yml` to set up the AnnoJ view.\n\nThe most important are the tracks stanzas, this is where you tell AnnoJ the tracks that should be available in your browser. \n\nThere are 3 track types: \n * ModelsTrack, for aggregated transcript style gene models \n * RepeatsTrack, for strandless block objects like repeats and \n * ReadsTrack, for high throughput se- quencing reads that will be be shown at various zoom-levels. The reference sequence Gee Fu provides is sent to AnnoJ as if it is a big read. Here are the different configuration options for the rest\n\n ```\n \t id : a numeric unique id for the track\n\t name: free text name\n\t type : one of ModelsTrack , RepeatsTrack , ReadsTrack\n\t data : /features/[annoj|chromosome]/experiment_id\n\t showControls : 'true' to see the individual lane control button or leave absent\n\t height : 80  start up height of the track in pixels\n\t minHeight : 20  height of track when minimised\n\t maxHeight : 60 # height of track when maximised\n\t single : # 'true' if the track is strandless otherwise absent\n```\n\nAnnoJ requires certain metadata to understand what it is that it is supposed to be rendering. This is required at a genome and individual track level. When you create an experiment or genome you have the option to add a yml metadata file. As a minimum you should include the following information for your genome:\n\n```\n\t\u2212\u2212\u2212\n\tinstitution :\n\t\tname: Your Institute\n\t\tlogo : images/ institute_logo .png\n\t\turl : http ://www.your_place.etc \n\tservice :\n\t\tformat : Unspecified\n\t\ttitle : Sample Gee Fu served browser (TAIR 9 Gene Models)\n\t\tserver : Unspecified\n\t\tversion : Vers 1\n\t\taccess: public\n\t\tdescription: Free text description of the service\n\tengineer:\n\t\tname: Mick Jagger\n\t\temail : street.fighting.man@stones.net \n\tgenome:\n\t\tversion : TAIR9\n\t\tdescription : Chr1 from TAIR9 \n\t\tspecies : Arabidopsis thaliana\n```\n"
      },
      "source": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/danmaclean/gee_fu/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gee_fu"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "danmaclean"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 266189,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 101384,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CoffeeScript",
        "size": 802,
        "type": "Programming_language",
        "value": "CoffeeScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 190,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/danmaclean/gee_fu/master/README.mdown"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:06:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ]
}