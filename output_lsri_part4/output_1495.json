{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zyndagj/repliscan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-02-24T03:45:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-12-01T21:16:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Logfold script for reptiming"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9490429739366282,
      "result": {
        "original_header": "Repliscan - Logfold Reptiming Pipeline",
        "type": "Text_excerpt",
        "value": "Pipeline for calculating Repli-seq enrichment and classifying the time replication took place.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.957613674615222,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": " - `[replicate].bed` - Bed files produced from corresponding bam\n - `[replicate].bedgraph` - Bedgraph produced from corresponding bed\n - `[replicate]_norm.bedgraph` - Normalized bedgraph produced from corresponding bed\n - `[time].bedgraph` - Aggregated signal from replicates\n - `[time]_norm.bedgraph` - Normalized aggregated signal from replicates\n - `[time]_(logFC|ratio).bedgraph` - Ratio signal when each time is normalized for sequenceability\n - `[time]_(logFC|ratio)_*.smooth.bedgraph` - Ratio signal smoothed using a specified level of Haar wavelet\n - `[time]_(logFC|ratio)_*.smooth.gff3` - GFF showing replicating regions\n - `(logFC|ratio)_segmentation.gff3` -  Segmentation GFF, which can be used as input for `RATrap.py`\n \n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9202145732564516,
      "result": {
        "original_header": "Helper Scripts",
        "type": "Text_excerpt",
        "value": "As our lab continues to utilize Repliscan for our analyses, we have developed scripts to aid subsequent analysis.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8424836366269645,
      "result": {
        "original_header": "Comparing replication between experiments",
        "type": "Text_excerpt",
        "value": "Highlights **R**egions of **A**ltered **T**iming betwen replican experiments of the same genome.\n```\nusage: RATrap.py [-h] [-d FLOAT] [-S INT] -A GFF3 -B GFF3 [-T STR] -F FASTA\n                 [-O BEDG] [--stats] [--fig EXT] [--diff]\n\nFinds the timing differences between two segmentation profiles.\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -d FLOAT    Minimum distance to be RAT (Default: 0.5)\n  -S INT      Tile Size (Default: 1000)\n  -A GFF3     First Segmentation Profile (mitotic)\n  -B GFF3     Second Segmentation Profile (endo)\n  -T STR      Times (Default: ES,MS,LS)\n  -F FASTA    Reference\n  -O BEDG     Output to bedgraph file\n  --stats     Generate stats and figures\n  --fig EXT   Figure type (Default: pdf)\n  --diff      Print fraction different and exit\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/zyndagj/repliscan/wiki"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zyndagj/repliscan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zyndagj/repliscan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zyndagj/repliscan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Repliscan - Logfold Reptiming Pipeline"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zyndagj/repliscan/master/dag.jpg"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Install Repliscan\n```\npip install --user git+https://github.com/zyndagj/repliscan.git\n```\n\nAdd Repliscan to $PATH\n```\nexport PATH=${PATH}:$HOME/.local/bin\n```\nAdd this line to `$HOME/.profile` or `$HOME/.bashrc` to make this permanent.\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8530920088038493,
      "result": {
        "original_header": "Comparing replication between experiments",
        "type": "Text_excerpt",
        "value": "Highlights **R**egions of **A**ltered **T**iming betwen replican experiments of the same genome.\n```\nusage: RATrap.py [-h] [-d FLOAT] [-S INT] -A GFF3 -B GFF3 [-T STR] -F FASTA\n                 [-O BEDG] [--stats] [--fig EXT] [--diff]\n\nFinds the timing differences between two segmentation profiles.\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -d FLOAT    Minimum distance to be RAT (Default: 0.5)\n  -S INT      Tile Size (Default: 1000)\n  -A GFF3     First Segmentation Profile (mitotic)\n  -B GFF3     Second Segmentation Profile (endo)\n  -T STR      Times (Default: ES,MS,LS)\n  -F FASTA    Reference\n  -O BEDG     Output to bedgraph file\n  --stats     Generate stats and figures\n  --fig EXT   Figure type (Default: pdf)\n  --diff      Print fraction different and exit\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zyndagj/repliscan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2016 The University of Texas at Austin (\"U. T. Austin\")\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n - Neither the name of the University of Texas at Austin nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF TEXAS AT AUSTIN ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF TEXAS AT AUSTIN BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "repliscan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zyndagj"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 61614,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 361,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zyndagj",
          "type": "User"
        },
        "date_created": "2015-12-04T21:54:03Z",
        "date_published": "2015-12-04T22:00:45Z",
        "description": "First release before restructuring into a formal python package.\n",
        "html_url": "https://github.com/zyndagj/repliscan/releases/tag/repliscan_v0.1",
        "name": "repliscan_v0.1",
        "release_id": 2236779,
        "tag": "repliscan_v0.1",
        "tarball_url": "https://api.github.com/repos/zyndagj/repliscan/tarball/repliscan_v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/zyndagj/repliscan/releases/2236779",
        "value": "https://api.github.com/repos/zyndagj/repliscan/releases/2236779",
        "zipball_url": "https://api.github.com/repos/zyndagj/repliscan/zipball/repliscan_v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "The following binaries need to exist on the user's PATH:\n\n1. bedtools - https://github.com/arq5x/bedtools2\n   \n   From Stampede/Lonestar @ TACC\n   ```\n   $ module load bedtools\n   ```\n2. samtools - https://github.com/samtools/samtools\n   \n   From Stampede/Lonestar @ TACC\n   ```\n   $ module load samtools\n   ```\n3. wavelets - http://staff.washington.edu/dbp/WMTSA/NEPH/wavelets.html\n   \n   Now provided with Repliscan\n4. python\n\n   From Stampede @ TACC\n   ```\n   $ module load python\n   ```\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Input TXT - FILE",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Running the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Each line of the text file needs to contain a short name describing the sample and then a list of bam files corresponding to that name, all separated by *tabs*.\n\nFor example:\n\n```\nEX\texample_rep_1.bam\texample_rep_2.bam\n```\n\nThe first line of this file needs to be the control (G1). All subsequent lines need to be listed sequentially according to experimental time. An example file would be:\n\n```\nG1\tG1_001.bam\tG1_002.bam\nES\tES_001.bam\nMS\tMS_001.bam\tMS_L1.bam\tMS_L2.bam\nLS\tLS.bam\n```\n\nWhen a G1 control is not produced in a Repli-seq experimental protocol as in the two examples below, a total-S can be synthesised from inside the input as shown. Just make sure that you aggregate these \"replicates\" using a sum opperation (`-a`).\n\n```\nG1\tES.bam\tMS.bam\tLS.bam\nES\tES.bam\nMS\tMS.bam\nLS\tLS.bam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Arguments",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Running the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "| Flag | Option | Description - Bold denotes Default|\n|:----:|:------:|:------------|\n|-r, --ref|**FASTA**|Reference fasta|\n|-l,--level|INT|Haar smoothing level \\[1,2,**3**,4,5\\]|\n|-w, --window|INT|Analysis bin size in base pairs - **1000**|\n|-a, --aggregate|STR|Replicate agregation method \\[**sum**, median, mean, min, max\\]|\n|-t, --threshold|STR|Replication threshold method \\[value, **auto**, percent\\]|\n|-v, --value|Float|Explicit replication threshold value \\[1.0\\] when using `-t value`|\n|--prep|Float|Remove the lowest \\[2.0\\]% of singal as noise when using `-t percent`|\n|-S,--scope|STR|Replication scope \\[**chromosome**, genome\\]|\n|-c, --classifier|STR|Segmentation classification method \\[binary, **proportion**\\]|\n|-R, --remove|STR|Outlying data to remove \\[none, sqrtGamma, lognGamma, **norm**, whiskers, percentile\\]|\n|--pcut|FLOAT|Remove the upper and lower [2.5]% of the data when using `-R percentile`|\n|--log| |Apply log transform to sequenceability ratio|\n|-f, --force| |Force the re-generation of all files|\n|--plot| |Plot Statistics|\n|  |FILE| A text file listing bams for input ***Required***|\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sequencability Method",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Running the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "- `default` - \\(sample/control\\)\n- `--log` - log\\(sample/control\\)\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Normalization Methods",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Running the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "- `DESeq` - DESeq size normalization using geometric mean.\n- `Coverage` - Transform each sample to 1X coverage across the genome. This replicates the RPGC normalization method from deepTools.\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Replication Methods",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Running the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "- `value` - A signal ratio above threshold `-v` is considered replicating.\n- `auto` - Determine a signal ratio threshold unique to each chromosome based on change in coverage.\n- `percent` - Signal ratio values for each chromosome above percentile `-p` are considered replicating.\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Segmentation Methods",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Running the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "- `binary` - Time classifications are combined on a binary basis.\n- `proportion` - Time classifications are determined based on proportion.\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Handling Replicates",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Running the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "If you have replicates in your input file,\n```\nMS\tMS_001.bam\tMS_L1.bam\tMS_L2.bam\n```\nyou can specify the method by which they are aggregated with the `-a` paramter. This accepts the following methods:\n  - sum (Default)                                    \n  - median                                           \n  - mean                                             \n  - min                                              \n  - max                                              \n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:21:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Running the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\nrepliscan.py [-h] -r FASTA [-l INT] [-w INT] [-a STR] [-t STR] [-S STR]\n             [-v FLOAT] [--prep FLOAT] [-c STR] [-R STR] [--pcut FLOAT]\n             [--log] [-f] [--plot] FILE\n```\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Results",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "To demonstrate the general applicability of repliscan we demonstrate its usage on two previously published datasets. We require that the following software be installed when not running at TACC.\n\n- bedtools\n- samtools\n- bwa\n- python\n- [wavelets](http://staff.washington.edu/dbp/WMTSA/NEPH/wavelets.html)\n- repliscan\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Lubelsky et al.",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Example Results"
        ],
        "type": "Text_excerpt",
        "value": "The continuous, LOESS smoothed results of [Lubelsky et al.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4079966/) were replicated and also run with Repliscan. These methods can be replicated by downloading the following files:\n\n- [README.txt](https://de.cyverse.org/anon-files/iplant/home/gzynda/public/lubelsky2014_replicate/README.txt)\n- [lubelsky2014.csv](https://de.cyverse.org/anon-files/iplant/home/gzynda/public/lubelsky2014_replicate/lubelsky2014.csv)\n- [replicate_continuous.sh](https://de.cyverse.org/anon-files/iplant/home/gzynda/public/lubelsky2014_replicate/replicate_continuous.sh)\n\nThese results can also be immediately viewed by downloading and loading this pre-generated IGV session. Please right-click and \"save as\", and then \"Open [the] session\" in IGV.\n\n[lubelsky_dmel_IGV.xml](https://de.cyverse.org/anon-files/iplant/home/gzynda/public/lubelsky2014_replicate/lubelsky_dmel_IGV.xml)\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Hansen et al.",
        "parent_header": [
          "Repliscan - Logfold Reptiming Pipeline",
          "Example Results"
        ],
        "type": "Text_excerpt",
        "value": "The whole-genme replicating timing profile of [Hansen et al.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2806781/) was first replicated, and then compared against the timing profile generated by Repliscan. These methods can be replicated by downloading the following files:\n\n- [hansen_replicate.sh](https://de.cyverse.org/anon-files/iplant/home/gzynda/public/hansen2010_replicate/hansen_replicate.sh)\n\nThese results can also be immediately viewed by downloading and loading this pre-generated IGV session. Please right-click and \"save as\", and then \"Open [the] session\" in IGV.\n\n[hansen_hg19_IGV.xml](https://de.cyverse.org/anon-files/iplant/home/gzynda/public/hansen2010_replicate/hansen_hg19_IGV.xml)\n"
      },
      "source": "https://raw.githubusercontent.com/zyndagj/repliscan/master/README.md",
      "technique": "header_analysis"
    }
  ]
}