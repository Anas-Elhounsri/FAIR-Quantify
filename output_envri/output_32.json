{
  "application_domain": [
    {
      "confidence": 20.59,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 50.74,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Dosovitskiy, Alexey and Beyer, Lucas and Kolesnikov, Alexander and Weissenborn, Dirk and Zhai, Xiaohua and Unterthiner, Thomas and  Dehghani, Mostafa and Minderer, Matthias and Heigold, Georg and Gelly, Sylvain and Uszkoreit, Jakob and Houlsby, Neil",
        "format": "bibtex",
        "title": "An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale",
        "type": "Text_excerpt",
        "value": "@article{dosovitskiy2020vit,\n    year = {2021},\n    journal = {ICLR},\n    author = {Dosovitskiy, Alexey and Beyer, Lucas and Kolesnikov, Alexander and Weissenborn, Dirk and Zhai, Xiaohua and Unterthiner, Thomas and  Dehghani, Mostafa and Minderer, Matthias and Heigold, Georg and Gelly, Sylvain and Uszkoreit, Jakob and Houlsby, Neil},\n    title = {An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale},\n}"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Tolstikhin, Ilya and Houlsby, Neil and Kolesnikov, Alexander and Beyer, Lucas and Zhai, Xiaohua and Unterthiner, Thomas and Yung, Jessica and Steiner, Andreas and Keysers, Daniel and Uszkoreit, Jakob and Lucic, Mario and Dosovitskiy, Alexey",
        "format": "bibtex",
        "title": "MLP-Mixer: An all-MLP Architecture for Vision",
        "type": "Text_excerpt",
        "value": "@article{tolstikhin2021mixer,\n    year = {2021},\n    journal = {arXiv preprint arXiv:2105.01601},\n    author = {Tolstikhin, Ilya and Houlsby, Neil and Kolesnikov, Alexander and Beyer, Lucas and Zhai, Xiaohua and Unterthiner, Thomas and Yung, Jessica and Steiner, Andreas and Keysers, Daniel and Uszkoreit, Jakob and Lucic, Mario and Dosovitskiy, Alexey},\n    title = {MLP-Mixer: An all-MLP Architecture for Vision},\n}"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Steiner, Andreas and Kolesnikov, Alexander and and Zhai, Xiaohua and Wightman, Ross and Uszkoreit, Jakob and Beyer, Lucas",
        "format": "bibtex",
        "title": "How to train your ViT? Data, Augmentation, and Regularization in Vision Transformers",
        "type": "Text_excerpt",
        "value": "@article{steiner2021augreg,\n    year = {2021},\n    journal = {arXiv preprint arXiv:2106.10270},\n    author = {Steiner, Andreas and Kolesnikov, Alexander and and Zhai, Xiaohua and Wightman, Ross and Uszkoreit, Jakob and Beyer, Lucas},\n    title = {How to train your ViT? Data, Augmentation, and Regularization in Vision Transformers},\n}"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Chen, Xiangning and Hsieh, Cho-Jui and Gong, Boqing",
        "format": "bibtex",
        "title": "When Vision Transformers Outperform ResNets without Pretraining or Strong Data Augmentations",
        "type": "Text_excerpt",
        "value": "@article{chen2021outperform,\n    year = {2021},\n    journal = {arXiv preprint arXiv:2106.01548},\n    author = {Chen, Xiangning and Hsieh, Cho-Jui and Gong, Boqing},\n    title = {When Vision Transformers Outperform ResNets without Pretraining or Strong Data Augmentations},\n}"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Zhuang, Juntang and Gong, Boqing and Yuan, Liangzhe and Cui, Yin and Adam, Hartwig and Dvornek, Nicha and Tatikonda, Sekhar and Duncan, James and Liu, Ting",
        "format": "bibtex",
        "title": "Surrogate Gap Minimization Improves Sharpness-Aware Training",
        "type": "Text_excerpt",
        "value": "@article{zhuang2022gsam,\n    year = {2022},\n    journal = {ICLR},\n    author = {Zhuang, Juntang and Gong, Boqing and Yuan, Liangzhe and Cui, Yin and Adam, Hartwig and Dvornek, Nicha and Tatikonda, Sekhar and Duncan, James and Liu, Ting},\n    title = {Surrogate Gap Minimization Improves Sharpness-Aware Training},\n}"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Zhai, Xiaohua and Wang, Xiao and Mustafa, Basil and Steiner, Andreas and Keysers, Daniel and Kolesnikov, Alexander and Beyer, Lucas",
        "format": "bibtex",
        "title": "LiT: Zero-Shot Transfer with Locked-image Text Tuning",
        "type": "Text_excerpt",
        "value": "@article{zhai2022lit,\n    year = {2022},\n    journal = {CVPR},\n    author = {Zhai, Xiaohua and Wang, Xiao and Mustafa, Basil and Steiner, Andreas and Keysers, Daniel and Kolesnikov, Alexander and Beyer, Lucas},\n    title = {LiT: Zero-Shot Transfer with Locked-image Text Tuning},\n}"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/google-research/vision_transformer"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google/conduct/).\n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-21T12:35:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T12:22:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.954455121345695,
      "result": {
        "original_header": "Vision Transformer and MLP-Mixer Architectures",
        "type": "Text_excerpt",
        "value": "In this repository we release models from the papers \nThe models were pre-trained on the [ImageNet](http://www.image-net.org/) and\n[ImageNet-21k](http://www.image-net.org/) datasets. We provide the code for\nfine-tuning the released models in\n[JAX](https://jax.readthedocs.io)/[Flax](http://flax.readthedocs.io). \nThe models from this codebase were originally trained in\nhttps://github.com/google-research/big_vision/\nwhere you can find more advanced code (e.g. multi-host training), as well as\nsome of the original training scripts (e.g.\n[configs/vit_i21k.py](https://github.com/google-research/big_vision/blob/main/big_vision/configs/vit_i21k.py)\nfor pre-training a ViT, or\n[configs/transfer.py](https://github.com/google-research/big_vision/blob/main/big_vision/configs/transfer.py)\nfor transfering a model). \nTable of contents: \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9534309474843197,
      "result": {
        "original_header": "Colab",
        "type": "Text_excerpt",
        "value": "Below Colabs run both with GPUs, and TPUs (8 cores, data parallelism). \nThe first Colab demonstrates the JAX code of Vision Transformers and MLP Mixers.\nThis Colab allows you to edit the files from the repository directly in the\nColab UI and has annotated Colab cells that walk you through the code step by\nstep, and lets you interact with the data. \nThe second Colab allows you to explore the >50k Vision Transformer and hybrid\ncheckpoints that were used to generate the data of the third paper \"How to train\nyour ViT? ...\". The Colab includes code to explore and select checkpoints, and\nto do inference both using the JAX code from this repo, and also using the\npopular [`timm`] PyTorch library that can directly load these checkpoints as\nwell. Note that a handful of models are also available directly from TF-Hub:\n[sayakpaul/collections/vision_transformer] (external contribution by [Sayak\nPaul]). \nThe second Colab also lets you fine-tune the checkpoints on any tfds dataset\nand your own dataset with examples in individual JPEG files (optionally directly\nreading from Google Drive). \n**Note**: As for now (6/20/21) Google Colab only supports a single GPU (Nvidia\nTesla T4), and TPUs (currently TPUv2-8) are attached indirectly to the Colab VM\nand communicate over slow network, which leads to pretty bad training speed. You\nwould usually want to set up a dedicated machine if you have a non-trivial\namount of data to fine-tune on. For details see the\n[Running on cloud](#running-on-cloud) section. \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8615937541473668,
      "result": {
        "original_header": "Fine-tuning a model",
        "type": "Text_excerpt",
        "value": "For example for fine-tuning a ViT-B/16 (pre-trained on imagenet21k) on CIFAR10\n(note how we specify `b16,cifar10` as arguments to the config, and how we\ninstruct the code to access the models directly from a GCS bucket instead of\nfirst downloading them into the local directory):\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/vit.py:b16,cifar10 \\\n    --config.pretrained_dir='gs://vit_models/imagenet21k'\n```\nIn order to fine-tune a Mixer-B/16 (pre-trained on imagenet21k) on CIFAR10:\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/mixer_base16_cifar10.py \\\n    --config.pretrained_dir='gs://mixer_models/imagenet21k'\n```\nThe \"How to train your ViT? ...\" paper added >50k checkpoints that you can\nfine-tune with the [`configs/augreg.py`] config. When you only specify the model\nname (the `config.name` value from [`configs/model.py`]), then the best i21k\ncheckpoint by upstream validation accuracy (\"recommended\" checkpoint, see\nsection 4.5 of the paper) is chosen. To make up your mind which model you want\nto use, have a look at Figure 3 in the paper. It's also possible to choose a\ndifferent checkpoint (see Colab [`vit_jax_augreg.ipynb`]) and then specify the\nvalue from the `filename` or `adapt_filename` column, which correspond to the\nfilenames without `.npz` from the [`gs://vit_models/augreg`] directory.\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/augreg.py:R_Ti_16 \\\n    --config.dataset=oxford_iiit_pet \\\n    --config.base_lr=0.01\n```\n \nNote that our code uses all available GPUs/TPUs for fine-tuning. \n- Different models require different amount of memory. Available memory also\n  depends on the accelerator configuration (both type and count). If you\n  encounter an out-of-memory error you can increase the value of\n  `--config.accum_steps=8` -- alternatively, you could also decrease the\n  `--config.batch=512` (and decrease `--config.base_lr` accordingly).\n- The host keeps a shuffle buffer in memory. If you encounter a host OOM (as\n  opposed to an accelerator OOM), you can decrease the default\n  `--config.shuffle_buffer=50000`. \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9288457331097644,
      "result": {
        "original_header": "Vision Transformer",
        "type": "Text_excerpt",
        "value": "by Alexey Dosovitskiy\\*\u2020, Lucas Beyer\\*, Alexander Kolesnikov\\*, Dirk\nWeissenborn\\*, Xiaohua Zhai\\*, Thomas Unterthiner, Mostafa Dehghani, Matthias\nMinderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit and Neil Houlsby\\*\u2020. \nOverview of the model: we split an image into fixed-size patches, linearly embed\neach of them, add position embeddings, and feed the resulting sequence of\nvectors to a standard Transformer encoder. In order to perform classification,\nwe use the standard approach of adding an extra learnable \"classification token\"\nto the sequence.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9752590952309075,
      "result": {
        "original_header": "Available ViT models",
        "type": "Text_excerpt",
        "value": "We provide a variety of ViT models in different GCS buckets. The models can be\ndownloaded with e.g.:\n```\nwget https://storage.googleapis.com/vit_models/imagenet21k/ViT-B_16.npz\n```\n \nWe also would like to emphasize that high-quality results can be achieved with\nshorter training schedules and encourage users of our code to play with\nhyper-parameters to trade-off accuracy and computational budget.\nSome examples for CIFAR-10/100 datasets are presented in the table below. \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9840336070045314,
      "result": {
        "original_header": "MLP-Mixer",
        "type": "Text_excerpt",
        "value": "MLP-Mixer (*Mixer* for short) consists of per-patch linear embeddings, Mixer\nlayers, and a classifier head. Mixer layers contain one token-mixing MLP and one\nchannel-mixing MLP, each consisting of two fully-connected layers and a GELU\nnonlinearity. Other components include: skip-connections, dropout, and linear\nclassifier head. \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.902678842579625,
      "result": {
        "original_header": "Available Mixer models",
        "type": "Text_excerpt",
        "value": "We provide the Mixer-B/16 and Mixer-L/16 models pre-trained on the ImageNet and\nImageNet-21k datasets. Details can be found in Table 3 of the Mixer paper. All\nthe models can be found at: \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9132610451195587,
      "result": {
        "original_header": "Expected Mixer results",
        "type": "Text_excerpt",
        "value": "We ran the fine-tuning code on Google Cloud machine with four V100 GPUs with the\ndefault adaption parameters from this repository. Here are the results: \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9520899302847514,
      "result": {
        "original_header": "LiT models",
        "type": "Text_excerpt",
        "value": "For details, refer to the Google AI blog post\n[LiT: adding language understanding to image models](http://ai.googleblog.com/2022/04/locked-image-tuning-adding-language.html),\nor read the CVPR paper \"LiT: Zero-Shot Transfer with Locked-image text Tuning\"\n(https://arxiv.org/abs/2111.07991). \nWe published a Transformer B/16-base model with an ImageNet zeroshot accuracy of\n72.1%, and a L/16-large model with an ImageNet zeroshot accuracy of 75.7%. For\nmore details about these models, please refer to the\n[LiT model card](model_cards/lit.md). \nWe provide a in-browser demo with small text encoders for interactive use (the\nsmallest models should even run on a modern cell phone): \nAnd finally a Colab to use the JAX models with both image and text encoders: \nNote that none of above models support multi-lingual inputs yet, but we're\nworking on publishing such models and will update this repository once they\nbecome available. \nThis repository only contains evaluation code for LiT models. You can find the\ntraining code in the `big_vision` repository: \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9141925380943808,
      "result": {
        "original_header": "Changelog",
        "type": "Text_excerpt",
        "value": "- 2022-08-18: Added LiT-B16B_2 model that was trained for 60k steps\n  (LiT_B16B: 30k) without linear head on the image side (LiT_B16B: 768) and has\n  better performance. \n- 2022-06-09: Added the ViT and Mixer models trained from scratch using\n  [GSAM] on ImageNet without strong data augmentations. The resultant ViTs\n  outperform those of similar sizes trained using AdamW optimizer or the\n  original [SAM] algorithm, or with strong data augmentations. \n- 2022-04-14: Added models and Colab for [LiT models](#lit-models). \n- 2021-07-29: Added ViT-B/8 AugReg models (3 upstream checkpoints and adaptations\n  with resolution=224). \n- 2021-06-20: Added the \"How to train your ViT? ...\" paper, and a new\n  Colab to explore the >50k pre-trained and fine-tuned checkpoints mentioned in\n  the paper. \n- 2021-06-18: This repository was rewritten to use Flax Linen API and\n  `ml_collections.ConfigDict` for configuration. \n- 2021-05-19: With publication of the \"How to train your ViT? ...\"\n  paper, we added more than 50k ViT and hybrid models pre-trained on ImageNet and\n  ImageNet-21k with various degrees of data augmentation and model regularization,\n  and fine-tuned on ImageNet, Pets37, Kitti-distance, CIFAR-100, and Resisc45.\n  Check out [`vit_jax_augreg.ipynb`] to navigate this treasure trove of models!\n  For example, you can use that Colab to fetch the filenames of recommended\n  pre-trained and fine-tuned checkpoints from the `i21k_300` column of Table 3 in\n  the paper. \n- 2020-12-01: Added the R50+ViT-B/16 hybrid model (ViT-B/16 on\n  top of a Resnet-50 backbone). When pretrained on imagenet21k, this model\n  achieves almost the performance of the L/16 model with less than half the\n  computational finetuning cost. Note that \"R50\" is somewhat modified for the\n  B/16 variant: The original ResNet-50 has [3,4,6,3] blocks, each reducing the\n  resolution of the image by a factor of two. In combination with the ResNet\n  stem this would result in a reduction of 32x so even with a patch size of\n  (1,1) the ViT-B/16 variant cannot be realized anymore. For this reason we\n  instead use [3,4,9] blocks for the R50+B/16 variant. \n- 2020-10-29: Added ViT-B/16 and ViT-L/16 models pretrained\n  on ImageNet-21k and then fine-tuned on ImageNet at 224x224 resolution (instead\n  of default 384x384). These models have the suffix \"-224\" in their name.\n  They are expected to achieve 81.2% and 82.7% top-1 accuracies respectively. \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.958372410725084,
      "result": {
        "original_header": "Disclaimers",
        "type": "Text_excerpt",
        "value": "Note: This repository was forked and modified from\n[google-research/big_transfer](https://github.com/google-research/big_transfer). \n**This is not an official Google product.** \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/google-research/vision_transformer/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/vision_transformer/main/vit_jax.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/vit_jax.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/vision_transformer/main/vit_jax_augreg.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/vit_jax_augreg.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/vision_transformer/main/lit.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/lit.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1271
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/google-research/vision_transformer/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "google-research/vision_transformer"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Vision Transformer and MLP-Mixer Architectures"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/vision_transformer/main/vit_figure.png"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/vision_transformer/main/mixer_figure.png"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Vision Transformer and MLP-Mixer Architectures"
        ],
        "type": "Text_excerpt",
        "value": "Make sure you have `Python>=3.10` installed on your machine.\n\nInstall JAX and python dependencies by running:\n\n```\n# If using GPU:\npip install -r vit_jax/requirements.txt\n\n# If using TPU:\npip install -r vit_jax/requirements-tpu.txt\n```\n\nFor newer versions of [JAX](https://github.com/google/jax), follow the instructions\nprovided in the corresponding repository linked here. Note that installation\ninstructions for CPU, GPU and TPU differs slightly.\n\nInstall [Flaxformer](https://github.com/google/flaxformer), follow the instructions\nprovided in the corresponding repository linked here.\n\nFor more details refer to the section [Running on cloud](#running-on-cloud)\nbelow.\n\n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup VM",
        "parent_header": [
          "Vision Transformer and MLP-Mixer Architectures",
          "Running on cloud"
        ],
        "type": "Text_excerpt",
        "value": "And then fetch the repository and the install dependencies (including `jaxlib`\nwith TPU support) as usual:\n\n```bash\ngit clone --depth=1 --branch=master https://github.com/google-research/vision_transformer\ncd vision_transformer\n\n# optional: install virtualenv\npip3 install virtualenv\npython3 -m virtualenv env\n. env/bin/activate\n```\n\nIf you're connected to a VM with GPUs attached, install JAX and other dependencies with the following\ncommand:\n\n```bash\npip install -r vit_jax/requirements.txt\n```\n\nIf you're connected to a VM with TPUs attached, install JAX and other dependencies with the following\ncommand:\n\n```bash\npip install -r vit_jax/requirements-tpu.txt\n```\n\nInstall [Flaxformer](https://github.com/google/flaxformer), follow the instructions\nprovided in the corresponding repository linked here.\n\nFor both GPUs and TPUs, Check that JAX can connect to attached accelerators with the command:\n```bash\npython -c 'import jax; print(jax.devices())'\n```\n\nAnd finally execute one of the commands mentioned in the section\n[fine-tuning a model](#fine-tuning-a-model).\n\n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8216541089829554,
      "result": {
        "original_header": "Vision Transformer and MLP-Mixer Architectures",
        "type": "Text_excerpt",
        "value": "In this repository we release models from the papers \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999994778781711,
      "result": {
        "original_header": "Colab",
        "type": "Text_excerpt",
        "value": "\n[`timm`]: https://github.com/rwightman/pytorch-image-models\n[sayakpaul/collections/vision_transformer]: https://tfhub.dev/sayakpaul/collections/vision_transformer\n[Sayak Paul]: https://github.com/sayakpaul \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9994999793209893,
      "result": {
        "original_header": "Fine-tuning a model",
        "type": "Text_excerpt",
        "value": "For example for fine-tuning a ViT-B/16 (pre-trained on imagenet21k) on CIFAR10\n(note how we specify `b16,cifar10` as arguments to the config, and how we\ninstruct the code to access the models directly from a GCS bucket instead of\nfirst downloading them into the local directory):\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/vit.py:b16,cifar10 \\\n    --config.pretrained_dir='gs://vit_models/imagenet21k'\n```\nIn order to fine-tune a Mixer-B/16 (pre-trained on imagenet21k) on CIFAR10:\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/mixer_base16_cifar10.py \\\n    --config.pretrained_dir='gs://mixer_models/imagenet21k'\n```\nThe \"How to train your ViT? ...\" paper added >50k checkpoints that you can\nfine-tune with the [`configs/augreg.py`] config. When you only specify the model\nname (the `config.name` value from [`configs/model.py`]), then the best i21k\ncheckpoint by upstream validation accuracy (\"recommended\" checkpoint, see\nsection 4.5 of the paper) is chosen. To make up your mind which model you want\nto use, have a look at Figure 3 in the paper. It's also possible to choose a\ndifferent checkpoint (see Colab [`vit_jax_augreg.ipynb`]) and then specify the\nvalue from the `filename` or `adapt_filename` column, which correspond to the\nfilenames without `.npz` from the [`gs://vit_models/augreg`] directory.\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/augreg.py:R_Ti_16 \\\n    --config.dataset=oxford_iiit_pet \\\n    --config.base_lr=0.01\n```\n \nCurrently, the code will automatically download CIFAR-10 and CIFAR-100 datasets.\nOther public or custom datasets can be easily integrated, using [tensorflow\ndatasets library](https://github.com/tensorflow/datasets/). Note that you will\nalso need to update `vit_jax/input_pipeline.py` to specify some parameters about\nany added dataset. \nTo see a detailed list of all available flags, run `python3 -m vit_jax.train\n--help`. \n- Different models require different amount of memory. Available memory also\n  depends on the accelerator configuration (both type and count). If you\n  encounter an out-of-memory error you can increase the value of\n  `--config.accum_steps=8` -- alternatively, you could also decrease the\n  `--config.batch=512` (and decrease `--config.base_lr` accordingly).\n- The host keeps a shuffle buffer in memory. If you encounter a host OOM (as\n  opposed to an accelerator OOM), you can decrease the default\n  `--config.shuffle_buffer=50000`. \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9371375727369056,
      "result": {
        "original_header": "Available ViT models",
        "type": "Text_excerpt",
        "value": "We provide a variety of ViT models in different GCS buckets. The models can be\ndownloaded with e.g.:\n```\nwget https://storage.googleapis.com/vit_models/imagenet21k/ViT-B_16.npz\n```\n \nWe recommend using the following checkpoints, trained with [AugReg] that have\nthe best pre-training metrics: \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9693587137165897,
      "result": {
        "original_header": "MLP-Mixer",
        "type": "Text_excerpt",
        "value": "For installation follow [the same steps](#installation) as above.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9049189404720487,
      "result": {
        "original_header": "Available Mixer models",
        "type": "Text_excerpt",
        "value": "https://console.cloud.google.com/storage/mixer_models/ \nNote that these models are also available directly from TF-Hub:\n[sayakpaul/collections/mlp-mixer] (external contribution by [Sayak\nPaul]). \n[sayakpaul/collections/mlp-mixer]: https://tfhub.dev/sayakpaul/collections/mlp-mixer\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8703294402007478,
      "result": {
        "original_header": "LiT models",
        "type": "Text_excerpt",
        "value": "https://google-research.github.io/vision_transformer/lit/ \nhttps://github.com/google-research/big_vision/tree/main/big_vision/configs/proj/image_text \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9990599087097273,
      "result": {
        "original_header": "Disclaimers",
        "type": "Text_excerpt",
        "value": "\n[GSAM]: https://arxiv.org/abs/2203.08065\n[SAM]: https://arxiv.org/abs/2010.01412\n[AugReg]: https://arxiv.org/abs/2106.10270 \n[`vit_jax/configs/models.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/models.py\n[`model_cards/lit.md`]: https://github.com/google-research/vision_transformer/blob/main/model_cards/lit.md \n[`gs://vit_models/imagenet21k`]: https://console.cloud.google.com/storage/browser/vit_models/imagenet21k/\n[`gs://vit_models/imagenet21k+imagenet2012`]: https://console.cloud.google.com/storage/browser/vit_models/imagenet21k+imagenet2012/\n[`gs://vit_models/augreg`]: https://console.cloud.google.com/storage/browser/vit_models/augreg/\n[`gs://vit_models/sam`]: https://console.cloud.google.com/storage/browser/vit_models/sam/\n[`gs://mixer_models/sam`]: https://console.cloud.google.com/storage/mixer_models/sam/\n[`gs://vit_models/gsam`]: https://console.cloud.google.com/storage/browser/vit_models/gsam/\n[`gs://mixer_models/gsam`]: https://console.cloud.google.com/storage/mixer_models/gsam/\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8317932400635565,
      "result": {
        "original_header": "Fine-tuning a model",
        "type": "Text_excerpt",
        "value": "For example for fine-tuning a ViT-B/16 (pre-trained on imagenet21k) on CIFAR10\n(note how we specify `b16,cifar10` as arguments to the config, and how we\ninstruct the code to access the models directly from a GCS bucket instead of\nfirst downloading them into the local directory):\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/vit.py:b16,cifar10 \\\n    --config.pretrained_dir='gs://vit_models/imagenet21k'\n```\nIn order to fine-tune a Mixer-B/16 (pre-trained on imagenet21k) on CIFAR10:\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/mixer_base16_cifar10.py \\\n    --config.pretrained_dir='gs://mixer_models/imagenet21k'\n```\nThe \"How to train your ViT? ...\" paper added >50k checkpoints that you can\nfine-tune with the [`configs/augreg.py`] config. When you only specify the model\nname (the `config.name` value from [`configs/model.py`]), then the best i21k\ncheckpoint by upstream validation accuracy (\"recommended\" checkpoint, see\nsection 4.5 of the paper) is chosen. To make up your mind which model you want\nto use, have a look at Figure 3 in the paper. It's also possible to choose a\ndifferent checkpoint (see Colab [`vit_jax_augreg.ipynb`]) and then specify the\nvalue from the `filename` or `adapt_filename` column, which correspond to the\nfilenames without `.npz` from the [`gs://vit_models/augreg`] directory.\n```bash\npython -m vit_jax.main --workdir=/tmp/vit-$(date +%s) \\\n    --config=$(pwd)/vit_jax/configs/augreg.py:R_Ti_16 \\\n    --config.dataset=oxford_iiit_pet \\\n    --config.base_lr=0.01\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8073093651095591,
      "result": {
        "original_header": "Expected Mixer results",
        "type": "Text_excerpt",
        "value": "upstream     | model      | dataset | accuracy | wall_clock_time | link\n:----------- | :--------- | :------ | -------: | :-------------- | :---\nImageNet     | Mixer-B/16 | cifar10 | 96.72%   | 3.0h            | [tensorboard.dev](https://tensorboard.dev/experiment/j9zCYt9yQVm93nqnsDZayA/)\nImageNet     | Mixer-L/16 | cifar10 | 96.59%   | 3.0h            | [tensorboard.dev](https://tensorboard.dev/experiment/Q4feeErzRGGop5XzAvYj2g/)\nImageNet-21k | Mixer-B/16 | cifar10 | 96.82%   | 9.6h            | [tensorboard.dev](https://tensorboard.dev/experiment/mvP4McV2SEGFeIww20ie5Q/)\nImageNet-21k | Mixer-L/16 | cifar10 | 98.34%   | 10.0h           | [tensorboard.dev](https://tensorboard.dev/experiment/dolAJyQYTYmudytjalF6Jg/) \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/google-research/vision_transformer/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2020] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vision_transformer"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "google-research"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2702144,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 117118,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2010.01412\n[AugReg]: https://arxiv.org/abs/2106.10270\n\n[`vit_jax/configs/models.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/models.py\n[`model_cards/lit.md`]: https://github.com/google-research/vision_transformer/blob/main/model_cards/lit.md\n\n[`configs/augreg.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/augreg.py\n[`configs/model.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/models.py\n[`vit_jax_augreg.ipynb`]: https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax_augreg.ipynb\n[`vit_jax.ipynb`]: https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax.ipynb\n\n[`gs://vit_models/imagenet21k`]: https://console.cloud.google.com/storage/browser/vit_models/imagenet21k/\n[`gs://vit_models/imagenet21k+imagenet2012`]: https://console.cloud.google.com/storage/browser/vit_models/imagenet21k+imagenet2012/\n[`gs://vit_models/augreg`]: https://console.cloud.google.com/storage/browser/vit_models/augreg/\n[`gs://vit_models/sam`]: https://console.cloud.google.com/storage/browser/vit_models/sam/\n[`gs://mixer_models/sam`]: https://console.cloud.google.com/storage/mixer_models/sam/\n[`gs://vit_models/gsam`]: https://console.cloud.google.com/storage/browser/vit_models/gsam/\n[`gs://mixer_models/gsam`]: https://console.cloud.google.com/storage/mixer_models/gsam/"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2203.08065"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2106.10270"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2106.01548"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2010.01412"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2105.01601"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2203.08065\n[SAM]: https://arxiv.org/abs/2010.01412\n[AugReg]: https://arxiv.org/abs/2106.10270\n\n[`vit_jax/configs/models.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/models.py\n[`model_cards/lit.md`]: https://github.com/google-research/vision_transformer/blob/main/model_cards/lit.md\n\n[`configs/augreg.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/augreg.py\n[`configs/model.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/models.py\n[`vit_jax_augreg.ipynb`]: https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax_augreg.ipynb\n[`vit_jax.ipynb`]: https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax.ipynb\n\n[`gs://vit_models/imagenet21k`]: https://console.cloud.google.com/storage/browser/vit_models/imagenet21k/\n[`gs://vit_models/imagenet21k+imagenet2012`]: https://console.cloud.google.com/storage/browser/vit_models/imagenet21k+imagenet2012/\n[`gs://vit_models/augreg`]: https://console.cloud.google.com/storage/browser/vit_models/augreg/\n[`gs://vit_models/sam`]: https://console.cloud.google.com/storage/browser/vit_models/sam/\n[`gs://mixer_models/sam`]: https://console.cloud.google.com/storage/mixer_models/sam/\n[`gs://vit_models/gsam`]: https://console.cloud.google.com/storage/browser/vit_models/gsam/\n[`gs://mixer_models/gsam`]: https://console.cloud.google.com/storage/mixer_models/gsam/"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2106.10270\n\n[`vit_jax/configs/models.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/models.py\n[`model_cards/lit.md`]: https://github.com/google-research/vision_transformer/blob/main/model_cards/lit.md\n\n[`configs/augreg.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/augreg.py\n[`configs/model.py`]: https://github.com/google-research/vision_transformer/blob/main/vit_jax/configs/models.py\n[`vit_jax_augreg.ipynb`]: https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax_augreg.ipynb\n[`vit_jax.ipynb`]: https://colab.research.google.com/github/google-research/vision_transformer/blob/main/vit_jax.ipynb\n\n[`gs://vit_models/imagenet21k`]: https://console.cloud.google.com/storage/browser/vit_models/imagenet21k/\n[`gs://vit_models/imagenet21k+imagenet2012`]: https://console.cloud.google.com/storage/browser/vit_models/imagenet21k+imagenet2012/\n[`gs://vit_models/augreg`]: https://console.cloud.google.com/storage/browser/vit_models/augreg/\n[`gs://vit_models/sam`]: https://console.cloud.google.com/storage/browser/vit_models/sam/\n[`gs://mixer_models/sam`]: https://console.cloud.google.com/storage/mixer_models/sam/\n[`gs://vit_models/gsam`]: https://console.cloud.google.com/storage/browser/vit_models/gsam/\n[`gs://mixer_models/gsam`]: https://console.cloud.google.com/storage/mixer_models/gsam/"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2010.11929"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2111.07991"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running on cloud",
        "parent_header": [
          "Vision Transformer and MLP-Mixer Architectures"
        ],
        "type": "Text_excerpt",
        "value": "While above [colabs](#colab) are pretty useful to get started, you would usually\nwant to train on a larger machine with more powerful accelerators.\n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create a VM",
        "parent_header": [
          "Vision Transformer and MLP-Mixer Architectures",
          "Running on cloud"
        ],
        "type": "Text_excerpt",
        "value": "You can use the following commands to setup a VM with GPUs on Google Cloud:\n\n```bash\n# Set variables used by all commands below.\n# Note that project must have accounting set up.\n# For a list of zones with GPUs refer to\n# https://cloud.google.com/compute/docs/gpus/gpu-regions-zones\nPROJECT=my-awesome-gcp-project  # Project must have billing enabled.\nVM_NAME=vit-jax-vm-gpu\nZONE=europe-west4-b\n\n# Below settings have been tested with this repository. You can choose other\n# combinations of images & machines (e.g.), refer to the corresponding gcloud commands:\n# gcloud compute images list --project ml-images\n# gcloud compute machine-types list\n# etc.\ngcloud compute instances create $VM_NAME \\\n    --project=$PROJECT --zone=$ZONE \\\n    --image=c1-deeplearning-tf-2-5-cu110-v20210527-debian-10 \\\n    --image-project=ml-images --machine-type=n1-standard-96 \\\n    --scopes=cloud-platform,storage-full --boot-disk-size=256GB \\\n    --boot-disk-type=pd-ssd --metadata=install-nvidia-driver=True \\\n    --maintenance-policy=TERMINATE \\\n    --accelerator=type=nvidia-tesla-v100,count=8\n\n# Connect to VM (after some minutes needed to setup & start the machine).\ngcloud compute ssh --project $PROJECT --zone $ZONE $VM_NAME\n\n# Stop the VM after use (only storage is billed for a stopped VM).\ngcloud compute instances stop --project $PROJECT --zone $ZONE $VM_NAME\n\n# Delete VM after use (this will also remove all data stored on VM).\ngcloud compute instances delete --project $PROJECT --zone $ZONE $VM_NAME\n```\n\nAlternatively, you can use the following similar commands to set up a Cloud VM\nwith TPUs attached to them (below commands copied from the [TPU tutorial]):\n\n[TPU tutorial]: https://cloud.google.com/tpu/docs/jax-quickstart-tpu-vm\n\n```bash\nPROJECT=my-awesome-gcp-project  # Project must have billing enabled.\nVM_NAME=vit-jax-vm-tpu\nZONE=europe-west4-a\n\n# Required to set up service identity initially.\ngcloud beta services identity create --service tpu.googleapis.com\n\n# Create a VM with TPUs directly attached to it.\ngcloud alpha compute tpus tpu-vm create $VM_NAME \\\n    --project=$PROJECT --zone=$ZONE \\\n    --accelerator-type v3-8 \\\n    --version tpu-vm-base\n\n# Connect to VM (after some minutes needed to setup & start the machine).\ngcloud alpha compute tpus tpu-vm ssh --project $PROJECT --zone $ZONE $VM_NAME\n\n# Stop the VM after use (only storage is billed for a stopped VM).\ngcloud alpha compute tpus tpu-vm stop --project $PROJECT --zone $ZONE $VM_NAME\n\n# Delete VM after use (this will also remove all data stored on VM).\ngcloud alpha compute tpus tpu-vm delete --project $PROJECT --zone $ZONE $VM_NAME\n```\n"
      },
      "source": "https://raw.githubusercontent.com/google-research/vision_transformer/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:01:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10178
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}