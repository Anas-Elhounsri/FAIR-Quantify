{
  "application_domain": [
    {
      "confidence": 87.08,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "Project-22: Feedback and Memory in Transformers"
        ],
        "type": "Text_excerpt",
        "value": "If you use the code in this repository in any manner, cite the repository:\n```python\n@misc{patil2021-feedback-github,\n    author       = {Rajaswa Patil},\n    title        = {feedback-and-memory-in-transformers},\n    month        = apr,\n    year         = 2021,\n    publisher    = {Github},\n    url          = \"https://github.com/rajaswa/feedback-and-memory-in-transformers\"\n    }\n```\n\nIf you use the code for Feedback Transfomer or the Sequence Copy & Reverse task, cite the Feedback Transformer paper:\n```python \n@misc{fan2021addressing,\n      title={Addressing Some Limitations of Transformers with Feedback Memory}, \n      author={Angela Fan and Thibaut Lavril and Edouard Grave and Armand Joulin and Sainbayar Sukhbaatar},\n      year={2021},\n      eprint={2002.09402},\n      archivePrefix={arXiv},\n      primaryClass={cs.LG}\n}\n```\n\nIf you use the code from COGS Benchmark data processing and loading, cite the COGS paper:\n```python\n@inproceedings{kim-linzen-2020-cogs,\n    title = \"{COGS}: A Compositional Generalization Challenge Based on Semantic Interpretation\",\n    author = \"Kim, Najoung  and\n      Linzen, Tal\",\n    booktitle = \"Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP)\",\n    month = nov,\n    year = \"2020\",\n    address = \"Online\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://www.aclweb.org/anthology/2020.emnlp-main.731\",\n    doi = \"10.18653/v1/2020.emnlp-main.731\",\n    pages = \"9087--9105\",\n    abstract = \"Natural language is characterized by compositionality: the meaning of a complex expression is constructed from the meanings of its constituent parts. To facilitate the evaluation of the compositional abilities of language processing architectures, we introduce COGS, a semantic parsing dataset based on a fragment of English. The evaluation portion of COGS contains multiple systematic gaps that can only be addressed by compositional generalization; these include new combinations of familiar syntactic structures, or new combinations of familiar words and familiar structures. In experiments with Transformers and LSTMs, we found that in-distribution accuracy on the COGS test set was near-perfect (96{--}99{\\%}), but generalization accuracy was substantially lower (16{--}35{\\%}) and showed high sensitivity to random seed (+-6{--}8{\\%}). These findings indicate that contemporary standard NLP models are limited in their compositional generalization capacity, and position COGS as a good way to measure progress.\",\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Rajaswa Patil",
        "format": "bibtex",
        "title": "feedback-and-memory-in-transformers",
        "type": "Text_excerpt",
        "url": "https://github.com/rajaswa/feedback-and-memory-in-transformers",
        "value": "@misc{patil2021-feedback-github,\n    url = {https://github.com/rajaswa/feedback-and-memory-in-transformers},\n    publisher = {Github},\n    year = {2021},\n    month = {April},\n    title = {feedback-and-memory-in-transformers},\n    author = {Rajaswa Patil},\n}"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Angela Fan and Thibaut Lavril and Edouard Grave and Armand Joulin and Sainbayar Sukhbaatar",
        "format": "bibtex",
        "title": "Addressing Some Limitations of Transformers with Feedback Memory",
        "type": "Text_excerpt",
        "value": "@misc{fan2021addressing,\n    primaryclass = {cs.LG},\n    archiveprefix = {arXiv},\n    eprint = {2002.09402},\n    year = {2021},\n    author = {Angela Fan and Thibaut Lavril and Edouard Grave and Armand Joulin and Sainbayar Sukhbaatar},\n    title = {Addressing Some Limitations of Transformers with Feedback Memory},\n}"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Kim, Najoung  and\nLinzen, Tal",
        "doi": "10.18653/v1/2020.emnlp-main.731",
        "format": "bibtex",
        "title": "{COGS}: A Compositional Generalization Challenge Based on Semantic Interpretation",
        "type": "Text_excerpt",
        "url": "https://www.aclweb.org/anthology/2020.emnlp-main.731",
        "value": "@inproceedings{kim-linzen-2020-cogs,\n    abstract = {Natural language is characterized by compositionality: the meaning of a complex expression is constructed from the meanings of its constituent parts. To facilitate the evaluation of the compositional abilities of language processing architectures, we introduce COGS, a semantic parsing dataset based on a fragment of English. The evaluation portion of COGS contains multiple systematic gaps that can only be addressed by compositional generalization; these include new combinations of familiar syntactic structures, or new combinations of familiar words and familiar structures. In experiments with Transformers and LSTMs, we found that in-distribution accuracy on the COGS test set was near-perfect (96{--}99{\\%}), but generalization accuracy was substantially lower (16{--}35{\\%}) and showed high sensitivity to random seed (+-6{--}8{\\%}). These findings indicate that contemporary standard NLP models are limited in their compositional generalization capacity, and position COGS as a good way to measure progress.},\n    pages = {9087--9105},\n    doi = {10.18653/v1/2020.emnlp-main.731},\n    url = {https://www.aclweb.org/anthology/2020.emnlp-main.731},\n    publisher = {Association for Computational Linguistics},\n    address = {Online},\n    year = {2020},\n    month = {November},\n    booktitle = {Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP)},\n    author = {Kim, Najoung  and\nLinzen, Tal},\n    title = {{COGS}: A Compositional Generalization Challenge Based on Semantic Interpretation},\n}"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rajaswa/feedback-and-memory-in-transformers"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "Project-22: Feedback and Memory in Transformers"
        ],
        "type": "Text_excerpt",
        "value": "Submit an issue.\n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-17T05:44:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-12T05:46:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "My final project submission for the Meta Learning course at BITS Goa (conducted by TCS Research)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9748588290486311,
      "result": {
        "original_header": "Project-22: Feedback and Memory in Transformers",
        "type": "Text_excerpt",
        "value": "My final project submission for the [Meta Learning](https://sites.google.com/view/meta-learning-2021/home) course at [BITS Goa](https://www.bits-pilani.ac.in/goa/) (conducted by [TCS Research](https://www.tcs.com/tcs-research) & BITS Goa). The project is based on the [Feedback Transformer paper](https://arxiv.org/abs/2002.09402). The paper introduces a feedback mechanism in transformer models by adding a recurrent memory-attention based approach. This helps the transformer model in:\n1. Accessing higher level (layers) representations\n2. Maintaining a belief state\n3. Perform a learnable wieghted combined top-down and bottom-up processing\n4. Decrease compute memory-consumption at inference \n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9690409498698428,
      "result": {
        "original_header": "Key Contributions",
        "type": "Text_excerpt",
        "value": "The key contributions of this project can be listed as follows:\n1. [Implementing and Open-sourcing a modular customizable Feedback Transformer Model in PyTorch](https://github.com/rajaswa/feedback-and-memory-in-transformers#feedback-transformer-implementation)\n2. [Experimenting the Feedback Transformer Model with COGS Benchmark (Compositional Generalization)](https://github.com/rajaswa/feedback-and-memory-in-transformers#solving-cogs-with-feedback-transformer)\n3. [Implementing the Sequence Copy & Reverse Task from the original Feedback Transformer Paper](https://github.com/rajaswa/feedback-and-memory-in-transformers/blob/main/README.md#sequence-copy--reverse-task)\n \n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.972886841960621,
      "result": {
        "original_header": "Feedback Transformer Implementation",
        "type": "Text_excerpt",
        "value": "The Feedback Transformer Model has been implemented as PyTorch model class in the given notebook. You can adjust the various hyperparameters and turn the feedback ON/OFF in the Encoder and Decoder of the Model independently. Use the model in the following manner:\n```python\nmodel = FeedbackTransformerModel(\n            encoder_feedback = False,   # Disable Feedback Mehancism in the Encoder\n            decoder_feedback = True,    # Enable Feedback Mehancism in the Decoder\n            memory_context = 8,         # How long to look in the past for Memory-attention\n            input_vocab_size = 800,     # Input Vocabulary Size\n            output_vocab_size = 800,    # Output Vocabulary Size\n            d_model = 128,              # Model Embedding Dimension\n            nhead = 8,                  # Number of Heads in Multi-head Cross-attention and Memory-attention\n            num_layers = 4,             # Number of Encoder and Decoder blocks\n            dim_feedforward = 256,      # Feedforward Dimension\n            max_seq_length = 1000,      # Maximum Sequence Length in Data\n            dropout = 0.1,              # Model Dropout Probability \n            PAD_IDX = 0,                # PAD Token ID to Mask Padding tokens for Attention\n            activation = \"gelu\",        # Model Activation Function: \"gelu\" / \"relu\"\n    )\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9929411178700049,
      "result": {
        "original_header": "Solving COGS with Feedback Transformer",
        "type": "Text_excerpt",
        "value": "The [COGS Benchmark](https://github.com/najoungkim/COGS) is a benchmark for evaluating **compositional generalization & reasoning** in natural language. The COGS task is that of mapping a **natural language sentence to a lambda-expression based semantic logical form**:\n```python\ninput_sentence = \"The moose wanted to read .\"\noutput_logical_form = \"* moose ( x _ 1 ) ; want . agent ( x _ 2 , x _ 1 ) AND want . xcomp ( x _ 2 , x _ 4 ) AND read . agent ( x _ 4 , x _ 1 )\"\n```\n \nThis can be treated as a **sequence-to-sequence semantic-parsing** task. What makes this task challenging is its **Generalization test set**. The following points make it quite challenging:\n1. Novel (unseen in training) Combination of Familiar Primitives and Grammatical Roles\n2. Novel (unseen in training) Combination Modified Phrases and Grammatical Roles\n3. Deeper Recursion (results in longer sentences and deeper lingusitic strucutre i.e. parse tree)\n4. Verb Argument Structure Alternation\n5. Verb Class Alteration \nThe COGS dataset can be loaded as a PyTorch-Lightning Module in the following manner:\n```python\ndatamodule = COGSDataModule(\n                        batch_size=128,         # Batch Size for Training \n                        num_workers=2,          # Number of workers for Data Loading\n                        use_100=False,          # Whether to use single-exposure or hundred-exposures for pimitives in the training set\n                        use_Gen=True            # Whether to use normal test set or generaliztion test set\n            )\n```\n**NOTE**: _The feedback transformer paper does not include this benchmark or any related task. This is the first attempt (to the best of my knowledge) to inspect the effect of incoroporating feedback and memory based architectural biases in solving compositional generalization problem in natural language._\n \n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9301135058528897,
      "result": {
        "original_header": "Discussion",
        "type": "Text_excerpt",
        "value": "* The **Validation accuracy** (roughly equal to the Normal test accuracy) reflects the **_Expressivity_** of the models towards the COGS task\n    * Access to higher level representations might help in semantic-parsing by allowing top-down processing\n    * In general, incorporating feedback gives the model **more expressivity** with **lesser number of parameters**\n* The **Generalization test accuracy** (usually lower than Validation and Normal test accuracy) reflects the **_Compositional Generalization_** capabilities of the models\n    * This needs accurate inference on previously unseen novel linguistic structures and an ability to maintain a belief state for longer contexts\n    * On an absolute scale, incorporating feedback **increases the Generalization test accuracies** significantly\n    * High _Expressivity_ can lead to poor _Compositional Generalization_ in Vanilla Transformer models (as reported in the [COGS Paper](https://www.aclweb.org/anthology/2020.emnlp-main.731.pdf))\n    * The Vanilla Transformer model (no feedback) shows a **5.84%** decrease in accuracy between the Validation and Generalization test set\n    * Enabling feedback in Decoder reduces the drop in Generalization accuracy to **4.37%**\n    * Enabling feedback in Encoder further reduces the the drop in Generalization accuracy to **4.98%** \n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9697147106893285,
      "result": {
        "original_header": "Sequence Copy &amp; Reverse Task",
        "type": "Text_excerpt",
        "value": "The Sequence Copy & Reverse task is included in the [Feedback Transformer paper](https://arxiv.org/abs/2002.09402) as an Algorithmic task to test the role of memory in long-sequence processing. Since the official dataset is not publicly available, we generate the dataset synthetically.  \nThe sequence copy & reverse dataset can be loaded as a PyTorch-Lightning Module in the following manner:\n```python\ndatamodule = SequenceCopyDataModule(\n    batch_size=64,                  # Batch Size for Training\n    num_workers=2,                  # Number of workers for Data Loading\n    num_samples_train=10000,        # Number of samples to generate for training set\n    num_samples_eval=1000,          # Number of samples to generate for validation and test set\n    max_length_train=10,            # Sequence length in training samples\n    max_length_eval=50,             # Sequence length in evaluation samples (Should be significantly longer to test for memory effect)\n    reverse=True,                   # Whether to Copy the Input Sequence or Reverse the Input Sequence\n)\n``` \n**NOTE**: _The ablation analysis for this task with Feedback Transformer is still in progress. One can still train the Feedback Transformer for this task using the last section of the project's colab notebook._\n \n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rajaswa/feedback-and-memory-in-transformers/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/Feedback_and_Memory_in_Transformers.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/Feedback_and_Memory_in_Transformers.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rajaswa/feedback-and-memory-in-transformers/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rajaswa/feedback-and-memory-in-transformers"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Project-22: Feedback and Memory in Transformers"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.8532639078847645,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "While the PyTorch-Lightning profiler and Tensorboard logger (included in the notebook) will give a detailed insights into the experiments, here are key metrics to report: \n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rajaswa/feedback-and-memory-in-transformers/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Rajaswa Patil\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "feedback-and-memory-in-transformers"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rajaswa"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 24437213,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2002.09402"
      },
      "source": "https://raw.githubusercontent.com/rajaswa/feedback-and-memory-in-transformers/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:27:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ]
}