{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hab-spc/hab_rnd"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-07T04:38:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-27T03:36:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Research side of the hab projects"
      },
      "technique": "GitHub_API"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/hab-spc/hab_rnd/wiki"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download required files",
        "parent_header": [
          "hab_rnd",
          "Set up"
        ],
        "type": "Text_excerpt",
        "value": "Download the [dataset](https://drive.google.com/file/d/183opFeIupbHUN-6Ifq7jBcfwV6JNSSk8/view?usp=sharing) and store\n it within the project dir as `phytoplankton-db`.\nThe main dataset for comparing counts is under `../counts`. Use the latest version.\n\nNext, ensure that the root directory variable in `counts_analysis/c_utils.py` for accessing the datasets is set as the\n following:\n```\nROOT_DIR = 'phytoplankton-db'\n\nCOUNTS_CSV = {\n    'counts': f'{ROOT_DIR}/counts/master_counts_v11.csv',\n    # truncate pier to 1000s (500s offset)\n    'counts-pier1000s': f'{ROOT_DIR}/counts/master_counts-pier1000s.csv',\n    # include other counts for the time series\n    'counts-v9': f'{ROOT_DIR}/counts/master_counts_v9.csv',  # Baseline\n    'counts-v10': f'{ROOT_DIR}/counts/master_counts_v10.csv',  # CV model\n    # zhouyuan baseline model\n    'tsfm-counts': f'{ROOT_DIR}/counts/master_counts_v4-tsfm.csv'\n}\n```"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hab-spc/hab_rnd/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/analyze_poor_performance.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/analyze_poor_performance.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/methods-summary.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/methods-summary.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/daily_counts-summary.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/daily_counts-summary.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/relative_abundance_work-all_classes.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/relative_abundance_work-all_classes.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/cells_ml_time_series.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/cells_ml_time_series.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/class_counts-summary.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/class_counts-summary.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/figures.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/figures.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/OLS_log.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/OLS_log.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/regression_plot-fig7.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/regression_plot-fig7.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/classifier_work.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/classifier_work.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/mase_analysis_raw_counts.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/mase_analysis_raw_counts.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/validate_exp/validate_time_dst.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/validate_exp/validate_time_dst.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/auto_pier_analysis_notebooks/Auto-Pier_Analysis_34min.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/auto_pier_analysis_notebooks/Auto-Pier_Analysis_34min.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/auto_pier_analysis_notebooks/Auto-Pier_Analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/auto_pier_analysis_notebooks/Auto-Pier_Analysis.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hab-spc/hab_rnd/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hab-spc/hab_rnd"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hab_rnd"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda Setup Instructions",
        "parent_header": [
          "hab_rnd",
          "Set up",
          "System Requirements"
        ],
        "type": "Text_excerpt",
        "value": "If you are using conda, you can get started by cloning this repository and using the \nenvironment.yaml file as in the following:\n```bash\nconda env create -n hab_rnd -f env.yml\n```\nand then activate the environment using the following,\n```bash\nconda activate hab_rnd\n```\n\nNext add the environment to the jupyter kernels:\n```bash\npython -m ipykernel install --user --name=hab_rnd\n```\nOnce you run `jupyter lab` you should find the hab_rnd virtual environment as one of your notebook kernel options in\n the launcher.\n"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999696027432319,
      "result": {
        "original_header": "Directory Structure",
        "type": "Text_excerpt",
        "value": "The directory structure of the Hab_RND looks like this:\n```.env\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 analyze_poor_performance.ipynb          <- One-time notebook for performance analysis\n\u251c\u2500\u2500 auto_pier_analysis_notebooks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Auto-Pier_Analysis.ipynb            <- 6 Hour Fill-in-the-Blanks Auto-Pier analysis\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Auto-Pier_Analysis_34min.ipynb      <- 34 min Fill-in-the-Blanks Auto-Pier analysis\n\u251c\u2500\u2500 cells_ml_time_series.ipynb              <- One-time notebook for microscopy analysis\n\u251c\u2500\u2500 class_counts-summary.ipynb              \n\u251c\u2500\u2500 classifier_work.ipynb\n\u251c\u2500\u2500 counts_analysis\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 analyze_smape.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 c_utils.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 calibrate_metric-zhouyuan.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 calibrate_metric.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 class_counts.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gtruth_analysis.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 investigate_metric.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 investigate_temporal_vol_error.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_class_error_counts.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_class_summary.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_daily_counts_summary.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_reldist_time.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 time_smape_analysis.py\n\u251c\u2500\u2500 cv_pier_confusion_matrix.png\n\u251c\u2500\u2500 daily_counts-summary.ipynb\n\u251c\u2500\u2500 eval_classifier_count_error.py\n\u251c\u2500\u2500 eval_counts.py                          <- Script to generate count error comparisons\n\u251c\u2500\u2500 eval_error_metric.py                    <- Script to compare agreement & error metrics\n\u251c\u2500\u2500 experiment_metric.py\n\u251c\u2500\u2500 figures.ipynb\n\u251c\u2500\u2500 get_counts.py                           <- Script to generate counts datasets\n\u251c\u2500\u2500 get_roi_counts.py\n\u251c\u2500\u2500 mase_analysis_raw_counts.ipynb\n\u251c\u2500\u2500 methods-summary.ipynb                   <- Main notebook for comparing methods & some figure generations\n\u251c\u2500\u2500 prepare_db\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap_counts.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 create_csv.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logger.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 parse_csv.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 set_micro_counts.py\n\u251c\u2500\u2500 recover_counts.py\n\u251c\u2500\u2500 relative_abundance_work-all_classes.ipynb\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 results__counts_analysis.ipynb\n\u2514\u2500\u2500 validate_exp                            <- Old directory for validation comparisons\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 get_predicted_day_counts.py\n    \u251c\u2500\u2500 get_seq_timebins_counts.py\n    \u251c\u2500\u2500 get_timewindow_counts.py\n    \u251c\u2500\u2500 stat_fns.py                         <- Script of statistical analysis functions\n    \u251c\u2500\u2500 transform_data.py\n    \u251c\u2500\u2500 v_utils.py\n    \u251c\u2500\u2500 val_go.py\n    \u2514\u2500\u2500 validate_time_dst.ipynb\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.917816811814205,
      "result": {
        "original_header": "Directory Structure",
        "type": "Text_excerpt",
        "value": "The directory structure of the Hab_RND looks like this:\n```.env\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 analyze_poor_performance.ipynb          <- One-time notebook for performance analysis\n\u251c\u2500\u2500 auto_pier_analysis_notebooks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Auto-Pier_Analysis.ipynb            <- 6 Hour Fill-in-the-Blanks Auto-Pier analysis\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Auto-Pier_Analysis_34min.ipynb      <- 34 min Fill-in-the-Blanks Auto-Pier analysis\n\u251c\u2500\u2500 cells_ml_time_series.ipynb              <- One-time notebook for microscopy analysis\n\u251c\u2500\u2500 class_counts-summary.ipynb              \n\u251c\u2500\u2500 classifier_work.ipynb\n\u251c\u2500\u2500 counts_analysis\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 analyze_smape.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 c_utils.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 calibrate_metric-zhouyuan.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 calibrate_metric.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 class_counts.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gtruth_analysis.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 investigate_metric.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 investigate_temporal_vol_error.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_class_error_counts.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_class_summary.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_daily_counts_summary.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_reldist_time.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 time_smape_analysis.py\n\u251c\u2500\u2500 cv_pier_confusion_matrix.png\n\u251c\u2500\u2500 daily_counts-summary.ipynb\n\u251c\u2500\u2500 eval_classifier_count_error.py\n\u251c\u2500\u2500 eval_counts.py                          <- Script to generate count error comparisons\n\u251c\u2500\u2500 eval_error_metric.py                    <- Script to compare agreement & error metrics\n\u251c\u2500\u2500 experiment_metric.py\n\u251c\u2500\u2500 figures.ipynb\n\u251c\u2500\u2500 get_counts.py                           <- Script to generate counts datasets\n\u251c\u2500\u2500 get_roi_counts.py\n\u251c\u2500\u2500 mase_analysis_raw_counts.ipynb\n\u251c\u2500\u2500 methods-summary.ipynb                   <- Main notebook for comparing methods & some figure generations\n\u251c\u2500\u2500 prepare_db\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap_counts.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 create_csv.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logger.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 parse_csv.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 set_micro_counts.py\n\u251c\u2500\u2500 recover_counts.py\n\u251c\u2500\u2500 relative_abundance_work-all_classes.ipynb\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 results__counts_analysis.ipynb\n\u2514\u2500\u2500 validate_exp                            <- Old directory for validation comparisons\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 get_predicted_day_counts.py\n    \u251c\u2500\u2500 get_seq_timebins_counts.py\n    \u251c\u2500\u2500 get_timewindow_counts.py\n    \u251c\u2500\u2500 stat_fns.py                         <- Script of statistical analysis functions\n    \u251c\u2500\u2500 transform_data.py\n    \u251c\u2500\u2500 v_utils.py\n    \u251c\u2500\u2500 val_go.py\n    \u2514\u2500\u2500 validate_time_dst.ipynb\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hab-spc/hab_rnd/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hab_rnd"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "hab-spc"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 27656778,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 163813,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System Requirements",
        "parent_header": [
          "hab_rnd",
          "Set up"
        ],
        "type": "Text_excerpt",
        "value": "1. Python 3.6 or higher\n2. Python libraries: pandas, holoviews, scipy, seaborn, hvplot, jupyterlab\n"
      },
      "source": "https://raw.githubusercontent.com/hab-spc/hab_rnd/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:14:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ]
}