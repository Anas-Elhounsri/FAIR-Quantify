{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "tf-imle"
        ],
        "type": "Text_excerpt",
        "value": "```bibtex\n@inproceedings{niepert21imle,\n  author    = {Mathias Niepert and\n               Pasquale Minervini and\n               Luca Franceschi},\n  title     = {Implicit {MLE:} Backpropagating Through Discrete Exponential Family\n               Distributions},\n  booktitle = {NeurIPS},\n  series    = {Proceedings of Machine Learning Research},\n  publisher = {{PMLR}},\n  year      = {2021}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Mathias Niepert and\nPasquale Minervini and\nLuca Franceschi",
        "format": "bibtex",
        "title": "Implicit {MLE:} Backpropagating Through Discrete Exponential Family\nDistributions",
        "type": "Text_excerpt",
        "value": "@inproceedings{niepert21imle,\n    year = {2021},\n    publisher = {{PMLR}},\n    series = {Proceedings of Machine Learning Research},\n    booktitle = {NeurIPS},\n    title = {Implicit {MLE:} Backpropagating Through Discrete Exponential Family\nDistributions},\n    author = {Mathias Niepert and\nPasquale Minervini and\nLuca Franceschi},\n}"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nec-research/tf-imle"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-26T11:58:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-11T09:56:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Tensorflow implementation and notebooks for Implicit Maximum Likelihood Estimation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "tf-imle"
        ],
        "type": "Text_excerpt",
        "value": "Implicit MLE (I-MLE) makes it possible to include discrete combinatorial optimization algorithms, such as Dijkstra's algorithm or integer linear programming (ILP) solvers, as well as complex discrete probability distributions in standard deep learning architectures. The figure below illustrates the setting I-MLE was developed for. <img src=\"https://render.githubusercontent.com/render/math?math=h_{\\mathbf{v}}\"> is a standard neural network, mapping some input <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{x}\"> to the input parameters <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{\\theta}\"> of a discrete combinatorial optimization algorithm or a discrete probability distribution, depicted as the black box. In the forward pass, the discrete component is executed and its *discrete* output <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{z}\"> fed into a downstream neural network <img src=\"https://render.githubusercontent.com/render/math?math=f_{\\mathbf{u}}\">. Now, with I-MLE it is possible to estimate gradients of <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{\\theta}\"> with respect to a loss function, which are used during backpropagation to update the parameters <img src=\"https://render.githubusercontent.com/render/math?math=\\mathbf{v}\"> of the upstream neural network.\n\n![Illustration of the problem addressed by I-MLE](https://github.com/nec-research/tf-imle/blob/main/images/i-mle-figure1.PNG)\n\nThe core idea of I-MLE is that it defines an implicit maximum likelihood objective whose gradients are used to update upstream parameters of the model. Every instance of I-MLE requires two ingredients:\n1. A method to approximately sample from a complex and possibly intractable distribution. For this we use Perturb-and-MAP (aka the Gumbel-max trick) and propose a novel family of noise perturbations tailored to the problem at hand.\n2. A method to compute a surrogate empirical distribution: Vanilla MLE reduces the KL divergence between the current distribution and the empirical distribution. Since in our setting, we do not have access to such an empirical distribution, we have to design surrogate empirical distributions which we term *target distributions*. Here we propose two families of target distributions which are widely applicable and work well in practice.\n\n\nHere is a short video presentation about I-MLE:\n\n[![Video presentation of I-MLE](https://img.youtube.com/vi/hb2b0K2PTxI/0.jpg)](https://www.youtube.com/watch?v=hb2b0K2PTxI)\n\n[Slides](https://github.com/nec-research/tf-imle/blob/main/talk_slides_neurips.pdf) of the presentation.\n"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9282308465741563,
      "result": {
        "original_header": "tf-imle",
        "type": "Text_excerpt",
        "value": "Tensorflow 2 and PyTorch implementation and Jupyter notebooks for Implicit Maximum Likelihood Estimation (I-MLE) proposed in the NeurIPS 2021 paper [Implicit MLE: Backpropagating Through Discrete Exponential Family Distributions.](https://arxiv.org/abs/2106.01798) \nI-MLE is also available as a PyTorch library: https://github.com/uclnlp/torch-imle\n \n"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nec-research/tf-imle/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/notebooks/topk.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/notebooks/topk.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/notebooks/.ipynb_checkpoints/topk-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/notebooks/.ipynb_checkpoints/topk-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/top-k%20demo_prop1-th1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/top-k%20demo_prop1-th1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff-gm-pnm-luca.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff-gm-pnm-luca.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff-sampling.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff-sampling.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff-replicate-paper.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff-replicate-paper.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff-gm-pnm-mathias.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/bbdiff-gm-pnm-mathias.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/.ipynb_checkpoints/bbdiff-gm-pnm-luca-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/ipybooks/tf_m/.ipynb_checkpoints/bbdiff-gm-pnm-luca-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/L2X/L2X-experiments-neurips.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/L2X/L2X-experiments-neurips.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/DVAE/discrete-VAE-experiments-neurips.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/DVAE/discrete-VAE-experiments-neurips.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nec-research/tf-imle/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nec-research/tf-imle"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tf-imle"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/WARCRAFT/download.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=h_{\\mathbf{v}}"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\mathbf{x}"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\mathbf{\\theta}"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\mathbf{z}"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=f_{\\mathbf{u}}"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\mathbf{\\theta}"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\mathbf{v}"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/images/i-mle-figure1.PNG"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://img.youtube.com/vi/hb2b0K2PTxI/0.jpg"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999339960106169,
      "result": {
        "original_header": "tf-imle",
        "type": "Text_excerpt",
        "value": "I-MLE is also available as a PyTorch library: https://github.com/uclnlp/torch-imle\n \n"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nec-research/tf-imle/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "SOFTWARE LICENSE AGREEMENT\n\nACADEMIC OR NON-PROFIT ORGANIZATION NONCOMMERCIAL RESEARCH USE ONLY\n\nBY USING OR DOWNLOADING THE SOFTWARE, YOU ARE AGREEING TO THE TERMS OF THIS\nLICENSE AGREEMENT.  IF YOU DO NOT AGREE WITH THESE TERMS, YOU MAY NOT USE OR\nDOWNLOAD THE SOFTWARE.\n\nThis is a license agreement (\"Agreement\") between your academic institution or\nnon-profit organization or self (called \"Licensee\" or \"You\" in this Agreement)\nand NEC Laboratories Europe GmbH (called \"Licensor\" in this Agreement).  All\nrights not specifically granted to you in this Agreement are reserved for\nLicensor. \n\nRESERVATION OF OWNERSHIP AND GRANT OF LICENSE: Licensor retains exclusive\nownership of any copy of the Software (as defined below) licensed under this\nAgreement and hereby grants to Licensee a personal, non-exclusive,\nnon-transferable license to use the Software for noncommercial research\npurposes, without the right to sublicense, pursuant to the terms and conditions\nof this Agreement. NO EXPRESS OR IMPLIED LICENSES TO ANY OF LICENSOR'S PATENT\nRIGHTS ARE GRANTED BY THIS LICENSE. As used in this Agreement, the term\n\"Software\" means (i) the actual copy of all or any portion of code for program\nroutines made accessible to Licensee by Licensor pursuant to this Agreement,\ninclusive of backups, updates, and/or merged copies permitted hereunder or\nsubsequently supplied by Licensor,  including all or any file structures,\nprogramming instructions, user interfaces and screen formats and sequences as\nwell as any and all documentation and instructions related to it, and (ii) all\nor any derivatives and/or modifications created or made by You to any of the\nitems specified in (i).\n\nCONFIDENTIALITY/PUBLICATIONS: Licensee acknowledges that the Software is\nproprietary to Licensor, and as such, Licensee agrees to receive all such\nmaterials and to use the Software only in accordance with the terms of this\nAgreement.  Licensee agrees to use reasonable effort to protect the Software\nfrom unauthorized use, reproduction, distribution, or publication. All\npublication materials mentioning features or use of this software must\nexplicitly include an acknowledgement the software was developed by NEC\nLaboratories Europe GmbH.\n\nCOPYRIGHT: The Software is owned by Licensor.  \n\nPERMITTED USES:  The Software may be used for your own noncommercial internal\nresearch purposes. You understand and agree that Licensor is not obligated to\nimplement any suggestions and/or feedback you might provide regarding the\nSoftware, but to the extent Licensor does so, you are not entitled to any\ncompensation related thereto.\n\nDERIVATIVES: You may create derivatives of or make modifications to the\nSoftware, however, You agree that all and any such derivatives and\nmodifications will be owned by Licensor and become a part of the Software\nlicensed to You under this Agreement.  You may only use such derivatives and\nmodifications for your own noncommercial internal research purposes, and you\nmay not otherwise use, distribute or copy such derivatives and modifications in\nviolation of this Agreement.\n\nBACKUPS:  If Licensee is an organization, it may make that number of copies of\nthe Software necessary for internal noncommercial use at a single site within\nits organization provided that all information appearing in or on the original\nlabels, including the copyright and trademark notices are copied onto the\nlabels of the copies.\n\nUSES NOT PERMITTED:  You may not distribute, copy or use the Software except as\nexplicitly permitted herein. Licensee has not been granted any trademark\nlicense as part of this Agreement.  Neither the name of NEC Laboratories Europe\nGmbH nor the names of its contributors may be used to endorse or promote\nproducts derived from this Software without specific prior written permission.\n\nYou may not sell, rent, lease, sublicense, lend, time-share or transfer, in\nwhole or in part, or provide third parties access to prior or present versions\n(or any parts thereof) of the Software.\n\nASSIGNMENT: You may not assign this Agreement or your rights hereunder without\nthe prior written consent of Licensor. Any attempted assignment without such\nconsent shall be null and void.\n\nTERM: The term of the license granted by this Agreement is from Licensee's\nacceptance of this Agreement by downloading the Software or by using the\nSoftware until terminated as provided below.  \n\nThe Agreement automatically terminates without notice if you fail to comply\nwith any provision of this Agreement.  Licensee may terminate this Agreement by\nceasing using the Software.  Upon any termination of this Agreement, Licensee\nwill delete any and all copies of the Software. You agree that all provisions\nwhich operate to protect the proprietary rights of Licensor shall remain in\nforce should breach occur and that the obligation of confidentiality described\nin this Agreement is binding in perpetuity and, as such, survives the term of\nthe Agreement.\n\nFEE: Provided Licensee abides completely by the terms and conditions of this\nAgreement, there is no fee due to Licensor for Licensee's use of the Software\nin accordance with this Agreement.\n\nDISCLAIMER OF WARRANTIES:  THE SOFTWARE IS PROVIDED \"AS-IS\" WITHOUT WARRANTY OF\nANY KIND INCLUDING ANY WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS\nFOR A PARTICULAR USE OR PURPOSE OR OF NON- INFRINGEMENT.  LICENSEE BEARS ALL\nRISK RELATING TO QUALITY AND PERFORMANCE OF THE SOFTWARE AND RELATED MATERIALS.\n\nSUPPORT AND MAINTENANCE: No Software support or training by the Licensor is\nprovided as part of this Agreement.  \n\nEXCLUSIVE REMEDY AND LIMITATION OF LIABILITY: To the maximum extent permitted\nunder applicable law, Licensor shall not be liable for direct, indirect,\nspecial, incidental, or consequential damages or lost profits related to\nLicensee's use of and/or inability to use the Software, even if Licensor is\nadvised of the possibility of such damage.\n\nEXPORT REGULATION: Licensee agrees to comply with any and all applicable export\ncontrol laws, regulations, and/or other laws related to embargoes and sanction\nprograms administered by law.\n\nSEVERABILITY: If any provision(s) of this Agreement shall be held to be\ninvalid, illegal, or unenforceable by a court or other tribunal of competent\njurisdiction, the validity, legality and enforceability of the remaining\nprovisions shall not in any way be affected or impaired thereby.\n\nNO IMPLIED WAIVERS: No failure or delay by Licensor in enforcing any right or\nremedy under this Agreement shall be construed as a waiver of any future or\nother exercise of such right or remedy by Licensor.\n\nGOVERNING LAW: This Agreement shall be construed and enforced in accordance\nwith the laws of Germany without reference to conflict of laws principles.  You\nconsent to the personal jurisdiction of the courts of this country and waive\ntheir rights to venue outside of Germany.\n\nENTIRE AGREEMENT AND AMENDMENTS: This Agreement constitutes the sole and entire\nagreement between Licensee and Licensor as to the matter set forth herein and\nsupersedes any previous agreements, understandings, and arrangements between\nthe parties relating hereto.\n"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tf-imle"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "nec-research"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 840664,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 572803,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 631,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2106.01798"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "TensorFlow 2 implementation:",
        "parent_header": [
          "tf-imle",
          "Requirements:"
        ],
        "type": "Text_excerpt",
        "value": "* tensorflow==2.3.0 or tensorflow-gpu==2.3.0\n* numpy==1.18.5\n* matplotlib==3.1.1\n* scikit-learn==0.24.1\n* tensorflow-probability==0.7.0\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:09:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 68
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example: I-MLE as a Layer",
        "parent_header": [
          "tf-imle"
        ],
        "type": "Text_excerpt",
        "value": "The following is an instance of I-MLE implemented as a layer. This is a class where the optimization problem is computing the k-subset (top-k) configuration, the target distribution is based on perturbation-based implicit differentiation, and the perturb-and-MAP noise perturbations are drawn from the sum-of-gamma distribution.\n\n```python\nclass IMLESubsetkLayer(tf.keras.layers.Layer):\n    \n    def __init__(self, k, _tau=10.0, _lambda=10.0):\n        super(IMLESubsetkLayer, self).__init__()\n        # average number of 1s in a solution to the optimization problem\n        self.k = k\n        # the temperature at which we want to sample\n        self._tau = _tau\n        # the perturbation strength (here we use a target distribution based on perturbation-based implicit differentiation\n        self._lambda = _lambda  \n        # the samples we store for the backward pass\n        self.samples = None \n        \n    @tf.function\n    def sample_sum_of_gamma(self, shape):\n        \n        s = tf.map_fn(fn=lambda t: tf.random.gamma(shape, 1.0/self.k, self.k/t), \n                  elems=tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]))   \n        # now add the samples\n        s = tf.reduce_sum(s, 0)\n        # the log(m) term\n        s = s - tf.math.log(10.0)\n        # divide by k --> each s[c] has k samples whose sum is distributed as Gumbel(0, 1)\n        s = self._tau * (s / self.k)\n\n        return s\n    \n    @tf.function\n    def sample_discrete_forward(self, logits): \n        self.samples = self.sample_sum_of_gamma(tf.shape(logits))\n        gamma_perturbed_logits = logits + self.samples\n        # gamma_perturbed_logits is the input to the combinatorial opt algorithm\n        # the next two lines can be replaced by a custom black-box algorithm call\n        threshold = tf.expand_dims(tf.nn.top_k(gamma_perturbed_logits, self.k, sorted=True)[0][:,-1], -1)\n        y = tf.cast(tf.greater_equal(gamma_perturbed_logits, threshold), tf.float32)\n        \n        return y\n    \n    @tf.function\n    def sample_discrete_backward(self, logits):     \n        gamma_perturbed_logits = logits + self.samples\n        # gamma_perturbed_logits is the input to the combinatorial opt algorithm\n        # the next two lines can be replaced by a custom black-box algorithm call\n        threshold = tf.expand_dims(tf.nn.top_k(gamma_perturbed_logits, self.k, sorted=True)[0][:,-1], -1)\n        y = tf.cast(tf.greater_equal(gamma_perturbed_logits, threshold), tf.float32)\n        return y\n    \n    @tf.custom_gradient\n    def subset_k(self, logits):\n\n        # sample discretely with perturb and map\n        z_train = self.sample_discrete_forward(logits)\n        # compute the top-k discrete values\n        threshold = tf.expand_dims(tf.nn.top_k(logits, self.k, sorted=True)[0][:,-1], -1)\n        z_test = tf.cast(tf.greater_equal(logits, threshold), tf.float32)\n        # at training time we sample, at test time we take the argmax\n        z_output = K.in_train_phase(z_train, z_test)\n        \n        def custom_grad(dy):\n\n            # we perturb (implicit diff) and then resuse sample for perturb and MAP\n            map_dy = self.sample_discrete_backward(logits - (self._lambda*dy))\n            # we now compute the gradients as the difference (I-MLE gradients)\n            grad = tf.math.subtract(z_train, map_dy)\n            # return the gradient            \n            return grad\n\n        return z_output, custom_grad\n  ```\n\n"
      },
      "source": "https://raw.githubusercontent.com/nec-research/tf-imle/main/README.md",
      "technique": "header_analysis"
    }
  ]
}