{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pabloinsente/sf_for_beh_ss"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-01T18:43:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-04T18:19:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introducing software development practices and tools for research in the behavioral and social sciences"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Summary and conclusion",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "In this tutorial, we have accomplished the following:\n\n1. A project structure\n2. An isolated virtual environment to manage our dependencies\n3. A version control system to track our progress and changes\n4. An automated data analysis script\n5. A machine learning experiment tracking system\n6. A semi-automated unit testing script\n\nBy combining all these elements, we created a project workflow that is:\n\n- **reusable**: you can use parts of your code for further analysis and/or projects\n- **maintainable**: easy to fix\n- **extensible**: easy to add extra functionality\n- **shareable**: others can clone my repo and run your script easily\n- **reliable**: you can trust your results (with appropriate testing)\n- **reproducible**: others can produce the same results given the same data and dependencies\n\nOf course, this is a **minimal and very simple example**. All the attributes that we mentioned (reliable, reproducible, etc) are not a matter of all of nothing, but **guiding principles**. Our hope that **the practices and tools used in this tutorial contribute to getting closer to such ideals**.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9977456056499382,
      "result": {
        "original_header": "Introducing software development practices and tools for research in the behavioral and social sciences",
        "type": "Text_excerpt",
        "value": "Research in the behavioral and social sciences (B&SS) is **increasingly relying on complex computational procedures**. Nonetheless, researchers in the B&SS usually have **little formal training** in software development in the context of scientific computing. This situation limits researchers' ability to produce data processing pipelines that are **reproducible, reusable, reliable, maintainable, extensible, and shareable** with the wider scientific community. Introducing a **set of practices and tools from software development** can significantly help to alleviate this situation and improve the long-term sustainability of research that relies on heavy computation. \nIn this talk, I provide a **selection of practices and tools** requiring relatively **low effort** in exchange of **high impact** on improving researchers' computational work-flows. I also provide a **minimal example** illustrating the application of these simple principles in an end-to-end data analysis project.\n \n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pabloinsente/sf_for_beh_ss/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.2 Create the repo documentation files",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "1. Creating a simple and well-organized data file system"
        ],
        "type": "Text_excerpt",
        "value": "At the root of your project, it's usually expected to see at least three elements:\n\n- **README.md**: think about this as the abstract of a paper plus instructions about installation and usage.\n- **requirements.txt**: to indicate the required software dependencies (using pip). More about this later.\n- **LICENSE.txt**: to inform potential users about the usability of your code. GitHub provides a guide about how to chose a License [here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository), and how to add one [here](https://help.github.com/en/github/building-a-strong-community/adding-a-license-to-a-repository)\n\nLet's add the files:\n\n```Bash\ntouch README.md requirements.txt LICENSE.txt\n```\n\n**README.md content**: creating README files is repetitive. We'll use this template to add our content:\n\n```bash\n# Title\n\n## Requirements\n\n## Installation\n\n## Usage\n```\n\nTo open the README.md in VS Code:\n\n```bash\ncode README.md LICENSE.txt\n```\n\nTo add the contents of your License, we can use this [site](https://choosealicense.com/)\n\nCopy-paste the template and save it once you're done.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pabloinsente/sf_for_beh_ss/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/src/eda.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/src/eda.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pabloinsente/sf_for_beh_ss/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pabloinsente/sf_for_beh_ss"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introducing software development practices and tools for research in the behavioral and social sciences"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/project_template.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.4 Check installed packages",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "2. Using virtual environments"
        ],
        "type": "Text_excerpt",
        "value": "```Python\npip list\n```\n\nThe output should look similar to this (Version may vary):\n\n| Package    | Version |\n|------------|---------|\n| pip        | 19.2.3  |\n| setuptools | 41.2.0  |\n\nIf you see more packages, your pip installation is probably not pointing to the `/venv` directory (this often happens when you forget to activate your venv).\n\nOnce we have the venv **activated** (this is easy to forget), we can safely install dependencies using pip.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.5 Installing packages",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "2. Using virtual environments"
        ],
        "type": "Text_excerpt",
        "value": "One way to install packages is to simply type `pip name-package`. A better way is to specify the package name and version in the **requirements.txt** file. Open the file in vscode by typing `code requirements.txt`, and copy-paste:\n\n```Python\naltair==4.0.0\njupyterlab==1.2.4\nnumpy==1.17.4\npandas==0.25.3\nscikit-learn==0.21.3\nscipy==1.3.3\nstatsmodels==0.10.2\ntensorflow==2.0.0\nwandb==0.8.20\nwatermark==2.0.2\nselenium==3.141.0\npytest==5.3.2\n```\n\nBefore installing dependencies, check the pip version by\n\n```bash\npip --version\n```\n\nIf you see a version older than `19.2.3`, upgrade with:\n\n```bash\npip install --upgrade pip\n```\n\nNow you're ready to install the dependencies by running:\n\n```Python\npip install -r requirements.txt\n```\n\nYou can check the installation with:\n\n```Python\npip list\n```\n\nTo **deactivate** the environment:\n\n```Python\ndeactivate\n```\n\nOr simply close your terminal\n\nIf you want to **delete the environment** run:\n\n```Bash\nrm -rf venv/\n```\n\nThe main advantage of the requirements.txt file is that **allows other people to reproduce your dependencies**\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Check git installation",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "```git\ngit --version\n```\n\nIf you need to install Git, got to [this link](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and follow installation instructions for your system\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Example 2: Setting up machine learning experiment tracking",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Before moving forward, remember to push your changes by:\n\n```bash\ngit add -A\ngit commit -m \"stats results\"\ngit push origin master\n```\n\nMachine learning usually entails many rounds of **iterating** over multiple hyper-parameters, architectures, data partitions, etc. This makes hard to **keep track** of your experiments and metrics over time, which may **hinder reproducibility**. Several tools have been created recently to tackle this issue (e.g., MLflow, Comet, etc). In our case, we will use [Weight & Biases](https://www.wandb.com/) to showcase a very simple example of how this might work.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.1 To install Weight and Biases",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "5. Example 2: Setting up machine learning experiment tracking"
        ],
        "type": "Text_excerpt",
        "value": "This should be installed already (if you pip installed the `requirements.txt`). Otherwise, it can be installed by:\n\n```Python\npip install wandb\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.2 To sing up or login to an existing account",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "5. Example 2: Setting up machine learning experiment tracking"
        ],
        "type": "Text_excerpt",
        "value": "```Python\nwandb login\n```\n\nThis should prompt you to Log in. If you don't have an account, create one and Log in. Follow the instructions and **past the key to the command line**. If you did this right, you should see a `Successfully logged in to Weights & Biases!` message.\n\nSince we don't have time to write an ML pipeline, we will use scripts provided in the `/src` folder of the workshop repo, and add some code to those scripts to make things work. Again, copy and paste `ml.py` and `nn.py` from `sf_for_beh_ss/src` into your own `my_awesome_project/src`. \n\n```bash\ncp ../sf_for_beh_ss/src/ml.py ../sf_for_beh_ss/src/nn.py ./src\n```\n\nThen open the files in vscode:\n\n```bash\ncode ./src/ml.py ./src/nn.py\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.3 Tracking configuration and metrics",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "5. Example 2: Setting up machine learning experiment tracking"
        ],
        "type": "Text_excerpt",
        "value": "Tracking configuration and metrics with wandb is done in 4 steps:\n\n```Python\n# Step 1: import wandb\nimport wandb\n\n# Step 2: initialize wandb project tracking\nwandb.init(project='my-awesome-project')\n\n# Step 3: add tracking configuration\nconfig = wandb.config # Config is a variable that holds and saves hyperparameters and inputs\nconfig.epochs = 100\nconfig.dropout = 0.2\n...\n# Step 4: tell wandb to log the experiment configuration and metrics\n# For instance, at the end of a Keras model, we just need to add a Wandb Callback\n\n# fit the model\nmodel.fit(X_train_transform,\n          y_train,\n          epochs=config.epochs,\n          validation_data=(X_test_transform, y_test),\n          callbacks=[WandbCallback()])\n```\n\nWeight & Biases support multiple python frameworks: Scikit-learn, Tensorflow, Keras, Pytorch, Fast.ai, and XGBoost. Each framework follows the same steps with minimal variations. See the [documentation](https://docs.wandb.com/library/frameworks) to learn more about this.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.1 To install pytest run",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "6. Testing your code"
        ],
        "type": "Text_excerpt",
        "value": "This should be installed already (if you pip installed the `requirements.txt`). Otherwise, it can be installed by:\n\n```bash\npip install pytest\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.2 Check pytest installation",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "6. Testing your code"
        ],
        "type": "Text_excerpt",
        "value": "```bash\npytest --version\n```\n\nAgain, you just need to copy-paste the `test_my_code.py` file from `sf_for_beh_ss/tests` into your own `my_awesome_project/tests`\n\n```bash\ncp ../sf_for_beh_ss/tests/test_my_code.py ./tests\n```\n\n\n\n`pytest` works by searching for files that have ``test_something.py`` or ``something_test.py`` (note the **\"test\"** keyword), and running any function or method beginning with **\"test\"**. Let's check our unit-test contents before running:\n\n```bash\ncd tests\ncode test_my_code.py\n```\n\nTo run the unit test:\n\n```bash\npytest\n```\n\nThe pytest output should output something like this (if successful):\n\n```console\n=========1 passed in 0.51s=========\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pabloinsente/sf_for_beh_ss/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "best-practices, cognitive-science, data-science, machine-learning, programming, psychology, scientific-computing, social-sciences"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences"
        ],
        "type": "Text_excerpt",
        "value": "[MIT](https://choosealicense.com/licenses/mit/)\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sf_for_beh_ss"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "pabloinsente"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 3543912,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 13847,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 709,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "5.4 Run the examples",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "5. Example 2: Setting up machine learning experiment tracking"
        ],
        "type": "Text_excerpt",
        "value": "To run the scikit-learn example. Navigate to the `src/` directory and run\n\n```Python\ncd src/\npython ml.py\n```\n\nIf successful, wand should output something like:\n\n```bash\nwandb: Synced some-funny-name: https://app.wandb.ai/username/projectname/runs/hasg-number\n```\n\nThen, you can click in that link to see your results.\n\nTo run the Tensorflow/Keras example:\n\n```Python\npython nn.py\n```\n\nIf the scripts ran successfully, wandb will generate a URL where you can see the project data and metrics on-line.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.1 To install pytest run",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "6. Testing your code"
        ],
        "type": "Text_excerpt",
        "value": "This should be installed already (if you pip installed the `requirements.txt`). Otherwise, it can be installed by:\n\n```bash\npip install pytest\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:19:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences"
        ],
        "type": "Text_excerpt",
        "value": "In this tutorial, we will reproduce the contents of this repo step-by-step. Therefore, it is recommended to create a directory to host both the `sf_for_beh_ss` repo and your reproduction. To do this, run in the command line:\n\n```Git\n# make the directory\nmkdir tutorial\n# navigate inside the directory\ncd tutorial\n# clone the tutorial materials\ngit clone https://github.com/pabloinsente/sf_for_beh_ss.git\n```\n\nTo run the examples, you'll need **python 3.7** installed in a **Linux/Mac machine**.\n\nFor **Windows users**, there are two ways to make the code work:\n\n- Installing [**cygwin**](https://www.cygwin.com/) and running everything from the cygwin console\n- Installing the **Ubuntu 18.04 LTS distribution** in the [Windows subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10). If you use this option, you'll need to type this to access your Windows Desktop files (replace **yourName** with your user-name):\n\n```bash\ncd /mnt/c/Users/yourName/Desktop\n```\n\nCheck your python installation by typing in the command line:\n\n```bash\npython --version\n```\n\nIf you have a different python version, go and install [python 3.7](https://www.python.org/downloads/). Look under the *\"Looking for a specific release?\"* section.\n\n**Python tip**: managing multiple versions of python may be messy. One solution is to use [pyenv](https://github.com/pyenv/pyenv). Here is an [excellent tutorial](https://realpython.com/intro-to-pyenv/) about installing and using `pyenv` in multiple OS.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences"
        ],
        "type": "Text_excerpt",
        "value": " Python scripts and Jupyter notebooks are provided in the ```/src``` directory. The step-by-step instructions are next in this document.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial Outline",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences"
        ],
        "type": "Text_excerpt",
        "value": "1. Creating a simple and well-organized data file system\n2. Using virtual environments\n3. Using version control systems\n4. Example 1: Writing a basic reproducible script\n5. Example 2: Setting up a machine learning experiment tracking\n6. Testing your code\n7. Summary and conclusions\n8. Resources to learn more\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Creating a simple and well-organized data file system",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "In the social sciences, it is common to find code repositories where everything is dump into the same directory: data, code, charts, manuscripts, etc. I've done this multiple times in the past and I regret it. There are many ways in which you can organize your projects. We'll generate a repository structure based on a few conventions around software development. We'll use the command line to populate our project.\n\n**Note about the command-line**: using the command-line may be confusing. It can make you feel like you'd break your computer if you make a typo. You can make your experience better by installing a terminal emulator in your computer. Terminal emulators add multiple capabilities like auto-complete, coloring, easy copy-paste, multiple terminals in the same window, and more. Here a few options:\n\n- Linux: [Tilix](https://gnunn1.github.io/tilix-web/)\n- Mac-OS: [iterm2](https://iterm2.com/index.html)\n- Windows: [cmder](https://cmder.net//)\n\n**About learning to use the command-line**: learning to use the command-line and bash is beyond the scope of this tutorial. There are many good resources out there for this (see [here](https://github.com/awesome-lists/awesome-bash)), but the trick is just using it as much as you can for your day-to-day tasks (and goggling). There a few commands worth mentioning for this tutorial:\n\n- `cd`: change directory\n- `mkdir`: make a directory\n- `ls`: list files\n- `touch`: create files\n- `rm`: remove files\n- `rm -r`: remove directories\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.1 Create project directory",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "1. Creating a simple and well-organized data file system"
        ],
        "type": "Text_excerpt",
        "value": "We'll start by creating a project directory:\n\n```bash\n# make a directory to host your project\nmkdir my_awesome_project\n# navigate into your project directory\ncd my_awesome_project\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.3 Create the main folders",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "1. Creating a simple and well-organized data file system"
        ],
        "type": "Text_excerpt",
        "value": "It is good idea to separate every element of your project into sub-directories:\n\n```Bash\nmkdir src data docs results tests\n```\n\nWe will add some fillers files to our directories in the meantime:\n\n```bash\ntouch ./src/eda.py ./src/eda.ipynb\ntouch ./src/stats_example.py ./src/stats_refactor.py ./src/stats_helper.py\ntouch ./src/ml.py ./src/nn.py\ntouch ./src/__init__.py ./tests/__init__.py\ntouch ./data/fake_data.csv\ntouch ./docs/code_notes.md\ntouch ./results/fake_plot.jpg\ntouch ./tests/test_my_code.py\n```\n\nNow, if you `ls` your directories you'll se files:\n\n```bash\nls ./data ./docs ./results ./src ./tests\n```\n\n**Note**: GitHub will not upload directories if they are empty. Hence, we created some empty files. More on this later.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Using virtual environments",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Virtual environments are a way to isolate the software requirements for your project. In brief, they say: **\"use this version of python, and these versions of these packages, and here is where you can find them\"**.\n\nUsing virtual environments is a good idea because they **avoid interference between the dependencies of multiple projects** living in your system. They also **avoid altering dependencies of your system installation** of python. Finally, they also **facilitate reproducibility** of your projects by specifying the environment in which your code was run.\n\n**Note about environments and dependencies**: other programming languages like R, Julia, etc., have their own solutions for environment isolation and dependency management. Today's examples are based on python. If you need to use multiple programming languages, the best solution is to use Docker containers, in which you can \"package\" your whole software system: code, runtime, system tools, system libraries and settings, to be reproduced in another machine. Docker is beyond the scope of this tutorial. You can learn more [here](https://www.docker.com/resources/what-container), [here](https://www.youtube.com/watch?v=Q2u1wcfmlzw), and [here](https://www.youtube.com/watch?v=gBalsA-x300).\n\nThere are multiple alternatives to create virtual environments in python. We'll use [**venv**](https://docs.python.org/3/library/venv.html) because of it's lightweight and simple to use.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.1 Create virtual environment",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "2. Using virtual environments"
        ],
        "type": "Text_excerpt",
        "value": "In the root of your project directory type:\n\n```Python\npython3 -m venv venv\n```\n\n**Note**: if you're not sure where in your file system is your terminal, type this to see the path:\n\n```terminal\npwd\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2 Activate virtual environment",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "2. Using virtual environments"
        ],
        "type": "Text_excerpt",
        "value": "Creating your venv is the first step. To actually use it, you need to active it by running:\n\n```Python\nsource venv/bin/activate\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.3 Verify venv activation",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "2. Using virtual environments"
        ],
        "type": "Text_excerpt",
        "value": "As a sanity check:\n\n```Python\nwhich python\n```\n\nThe output should point to your current directory. It should look similar to:\n\n```Bash\n/home/yourname/Desktop/my_awesome_project/venv/bin/python\n```\n\nAs long as your venv is active, python will go to that directory to search for dependencies, and `pip` will install dependencies in there as well.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Using version control systems",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Version control systems are tools for **managing and tracking code changes over time in a semi-automated manner**. If you have ever created something like this...\n\n```Python\nmy_analysis_script.py\nmy_analysis_script_final.py\nmy_analysis_script_final_FINAL.py\nmy_analysis_script_final_FINAL_FOR_REAL.py\nmy_analysis_script_2.py\nmy_analysis_script_2_this_is_the_last_one.py\n...\n```\n\n...you may need to use version control. There are many version control systems around (Subversion, Mercurial, etc), but Git is the most popular by far.\n\n**What is Git**: Git is a version control software managing, tracking, and logging your code in your machine. Git is commonly used along with GitHub as a hosting service.\n\n**What is GitHub**: GitHub is a hosting service for Git. It allows for saving everything related to your project in the cloud instead of your own machine.\n\nLearning Git may take a while. Fortunately, there are relatively few commands needed to track your projects effectively. The rest can be goggled as needed.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Check the git status",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "Run this in the root of your project directory:\n\n```git\ngit status\n```\n\nThe output should look like this:\n\n```console\nfatal: not a git repository (or any parent up to mount point /)\n```\n\nThis is fine. This means that Git has not initiated tracking in that directory.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 Initialize git tracking",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "```git\ngit init\n```\n\nThis creates an empty Git repository or reinitialize an existing one. You'll not see the repository because it is a `.git` directory (directories starting with a \".\" are normally hidden)\n\nTo confirm the initialization type:\n\n```git\ngit status\n```\n\nIt should say something like this:\n\n```git\nOn branch master\n\nNo commits yet\n...\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.4 Create .gitignore file",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "```git\ntouch .gitignore\n```\n\nThe `.gitignore` file tells to git: **\"DON'T track this files\"**. Whatever you put in there, should not appear in GitHub later.\n\n**Populating .gitignore**: adding files to be ignored to .gitignore may be repetitive. We'll use [this webpage](https://www.gitignore.io/) to automatically generate .gitignore files based on the dependencies we're using. Once on the page, ask for `python`, `jupyter`, and `venv` in the search bar. Then copy-paste the generated text into your own `.gitignore`\n\n```bash\ncode .gitignore\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5 Add files to local repository",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "```git\ngit add -A\n```\n\nThis stages the files to be committed. This is how we tell git: **\"prepare these files to be committed\"**. The \"-A\" flag stands for \"all changes\"\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.6 Commit files",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "```git\ngit commit -m \"First commit\"\n```\n\nCommit prepares the added files to be pushed to the remote repository. This is how we tell git: **\"save these changes locally, I'll send them to GitHub later\"**. The \"-m\" flag (short for --message) attach commentary to your commit. This is useful to record what changes you made to your code.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.7 Creating a remote repository",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "To push our files to our remote repository, we need to create one in the first place.\n\nGo to [https://github.com/](https://github.com/) and create a new **empty repository** (don't add README or LICENSE). Then copy the remote repository URL.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.8 Connect with the remote repository",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "To connect our local repository with our remote one, run this replacing **<GITHUB_URL>** with your remote URL:\n\n```git\ngit remote add origin <GITHUB_URL>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.9 Check new remote",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "```git\ngit remote -v\n```\n\nThe output should look like:\n\n```console\norigin https://github.com/pabloinsente/sf_for_beh_ss.git (fetch)\norigin https://github.com/pabloinsente/sf_for_beh_ss.git (push)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.10 Push local changes to remote repository",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "3. Using version control systems"
        ],
        "type": "Text_excerpt",
        "value": "Now we are ready to push our changes to GitHub (our remote bucket for git and our code):\n\n```git\ngit push origin master\n```\n\nThis should prompt to you enter your `username` and `password`.\n\n**Note about connecting to GitHub**: If you `push` and `fetch` a lot, you may want to avoid typing your user-name and password every time by connecting to GitHub with SSH. [Here](https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh) is a GitHub guide about how to configure SSH.\n\nAfter pushing, If you go to your GitHub repo, you should see the added changes.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Example 1: Writing a basic reproducible script",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "We have accomplished three things:\n\n1. A project structure\n2. An isolated virtual environment to manage our dependencies\n3. A version control system to track our progress\n\nNow we need some **code that processes data in automated and reproducible fashion**. We will walk through the `eda.ipynb` and `stats_example.py` files to see an example of how this may work. You just need to copy-paste them from the workshop repo `sf_for_beh_ss/src` into your own `my_awesome_project/src` directory. Remember also to copy-paste the `mental_health_tech_data.csv` from `sf_for_beh_ss/data` to your `my_awesome_project/data`\n\nAssuming that `sf_for_beh_ss` and `my_awesome_project` are under the same directory, you can copy-paste by running:\n\n```bash\ncp ../sf_for_beh_ss/src/eda.ipynb ../sf_for_beh_ss/src/stats_example.py ./src\ncp ../sf_for_beh_ss/data/mental_health_tech_data.csv ./data\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 Jupyter Notebook (`eda.ipynb`) instructions",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "4. Example 1: Writing a basic reproducible script"
        ],
        "type": "Text_excerpt",
        "value": "From the root of your repository run:\n\n```bash\ncd src\njupyter lab eda.ipynb\n```\n\nThis should open Jupyter Lab. Further instructions in the notebook\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2 Stats Example (`stats_example.py`)",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "4. Example 1: Writing a basic reproducible script"
        ],
        "type": "Text_excerpt",
        "value": "Before moving forward, remember to push your changes by:\n\n```bash\ngit add -A\ngit commit -m \"eda results\"\ngit push origin master\n```\n\nFrom the root of your repository run:\n\n```bash\ncd src\ncode stats_example.py stats_refactor.py stats_helper.py\n```\n\nTo run the `stats_example.py`:\n\n```python\npython stats_example.py\n```\n\nThe output should look like:\n\n```console\nPearson Chi-square: 175.95516961872426\nP-value: 0.0\nDegrees of freedom: 1\nTest interpretation: reject null hypothesis\nExpected frequencies\n             No         Yes\nNo   377.040767  241.959233\nYes  384.959233  247.040767\n\n```\n\nNow we will refactor the `stats_example.py` file by separating the **functions** (`stats_helper.py`) and the **function calls**  (`stats_refactor.py`). Further instructions will be given in the workshop. Once you're done, run:\n\n```bash\npython stats_refactor.py # to print to the console\npython stats_refactor.py > ../results/chi2.txt # to print to a .txt file\n```\n\nPrint the results from your file:\n\n```bash\ncat ../results/chi2.txt  \n```\n\nNow, you have a data analysis script that is:\n\n- **reusable**: you can use parts of your code for further analysis and/or projects\n- **maintainable**: easy to fix\n- **extensible**: easy to add more functionality\n- **shareable**: others can clone your repo and run your script easily\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Example 2: Setting up machine learning experiment tracking",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Before moving forward, remember to push your changes by:\n\n```bash\ngit add -A\ngit commit -m \"stats results\"\ngit push origin master\n```\n\nMachine learning usually entails many rounds of **iterating** over multiple hyper-parameters, architectures, data partitions, etc. This makes hard to **keep track** of your experiments and metrics over time, which may **hinder reproducibility**. Several tools have been created recently to tackle this issue (e.g., MLflow, Comet, etc). In our case, we will use [Weight & Biases](https://www.wandb.com/) to showcase a very simple example of how this might work.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.2 To sing up or login to an existing account",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "5. Example 2: Setting up machine learning experiment tracking"
        ],
        "type": "Text_excerpt",
        "value": "```Python\nwandb login\n```\n\nThis should prompt you to Log in. If you don't have an account, create one and Log in. Follow the instructions and **past the key to the command line**. If you did this right, you should see a `Successfully logged in to Weights & Biases!` message.\n\nSince we don't have time to write an ML pipeline, we will use scripts provided in the `/src` folder of the workshop repo, and add some code to those scripts to make things work. Again, copy and paste `ml.py` and `nn.py` from `sf_for_beh_ss/src` into your own `my_awesome_project/src`. \n\n```bash\ncp ../sf_for_beh_ss/src/ml.py ../sf_for_beh_ss/src/nn.py ./src\n```\n\nThen open the files in vscode:\n\n```bash\ncode ./src/ml.py ./src/nn.py\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.3 Tracking configuration and metrics",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "5. Example 2: Setting up machine learning experiment tracking"
        ],
        "type": "Text_excerpt",
        "value": "Tracking configuration and metrics with wandb is done in 4 steps:\n\n```Python\n# Step 1: import wandb\nimport wandb\n\n# Step 2: initialize wandb project tracking\nwandb.init(project='my-awesome-project')\n\n# Step 3: add tracking configuration\nconfig = wandb.config # Config is a variable that holds and saves hyperparameters and inputs\nconfig.epochs = 100\nconfig.dropout = 0.2\n...\n# Step 4: tell wandb to log the experiment configuration and metrics\n# For instance, at the end of a Keras model, we just need to add a Wandb Callback\n\n# fit the model\nmodel.fit(X_train_transform,\n          y_train,\n          epochs=config.epochs,\n          validation_data=(X_test_transform, y_test),\n          callbacks=[WandbCallback()])\n```\n\nWeight & Biases support multiple python frameworks: Scikit-learn, Tensorflow, Keras, Pytorch, Fast.ai, and XGBoost. Each framework follows the same steps with minimal variations. See the [documentation](https://docs.wandb.com/library/frameworks) to learn more about this.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.4 Run the examples",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "5. Example 2: Setting up machine learning experiment tracking"
        ],
        "type": "Text_excerpt",
        "value": "To run the scikit-learn example. Navigate to the `src/` directory and run\n\n```Python\ncd src/\npython ml.py\n```\n\nIf successful, wand should output something like:\n\n```bash\nwandb: Synced some-funny-name: https://app.wandb.ai/username/projectname/runs/hasg-number\n```\n\nThen, you can click in that link to see your results.\n\nTo run the Tensorflow/Keras example:\n\n```Python\npython nn.py\n```\n\nIf the scripts ran successfully, wandb will generate a URL where you can see the project data and metrics on-line.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Testing your code",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Before moving forward, remember to push your changes by:\n\n```bash\ngit add -A\ngit commit -m \"ml results\"\ngit push origin master\n```\n\nCode testing is an uncommon, yet very important part of writing software for scientific computing in a reliable and reproducible fashion. There are multiple frameworks in the python ecosystem for this. We will use `pytest` because of its simplicity and popularity.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8. Resources to learn more",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Software development is an enormous field with a lot to offer to people doing computationally intensive research. In this tutorial, the mantra was to provide a **minimal set of practices and tools**. Below you can find a list of resources to learn more\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Virtual environments",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "8. Resources to learn more"
        ],
        "type": "Text_excerpt",
        "value": "- [Python Virtual Environments: A Primer](https://realpython.com/python-virtual-environments-a-primer/)\n- [venv documentation](https://docs.python.org/3/library/venv.html)\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Version control",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "8. Resources to learn more"
        ],
        "type": "Text_excerpt",
        "value": "- [Resources to learn Git](https://try.github.io/)\n- [Pro Git Book](https://git-scm.com/book/en/v2)\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Writing better code",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "8. Resources to learn more"
        ],
        "type": "Text_excerpt",
        "value": "- [How to Write Beautiful Python Code With PEP 8](https://realpython.com/python-pep8/)\n- [Python Code Quality: Tools & Best Practices](https://realpython.com/python-code-quality/)\n- [Refactoring (Book)](https://python-patterns.guide/fowler-refactoring/)\n- [Clean Code (Book)](https://www.oreilly.com/library/view/clean-code/9780136083238/)\n- [Maintainable Code in Data Science](https://www.youtube.com/watch?v=KQ0LY_0Pqck&feature=youtu.be)\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ML tracking systems",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "8. Resources to learn more"
        ],
        "type": "Text_excerpt",
        "value": "- [Weights & Biases Tutorials](https://www.wandb.com/tutorials)\n- [MLflow Tutorials](https://mlflow.org/docs/0.1.0/tutorial.html)\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing code",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "8. Resources to learn more"
        ],
        "type": "Text_excerpt",
        "value": "- [Software Testing for Data Scientist](https://youtu.be/WTj6T0QdHHM)\n- [Getting Started With Testing in Python](https://realpython.com/python-testing/)\n- [Python Testing with pytest (Book)](https://pragprog.com/book/bopytest/python-testing-with-pytest)\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Articles about scientific computing",
        "parent_header": [
          "Introducing software development practices and tools for research in the behavioral and social sciences",
          "Tutorial Instructions",
          "8. Resources to learn more"
        ],
        "type": "Text_excerpt",
        "value": "- Wilson, G., Aruliah, D. A., Brown, C. T., Hong, N. P. C., Davis, M., Guy, R. T., ... & Waugh, B. (2014). **Best practices for scientific computing**. PLoS biology, 12(1), e1001745.\n- Wilson, G., Bryan, J., Cranston, K., Kitzes, J., Nederbragt, L., & Teal, T. K. (2017). **Good enough practices in scientific computing**. PLoS computational biology, 13(6), e1005510.\n- Sandve, G. K., Nekrutenko, A., Taylor, J., & Hovig, E. (2013). **Ten simple rules for reproducible computational research**.\n- Hart, E. M., Barmby, P., LeBauer, D., Michonneau, F., Mount, S., Mulrooney, P., ... & Hollister, J. W. (2016). **Ten simple rules for digital data storage**.\n- Rule, A., Birmingham, A., Zuniga, C., Altintas, I., Huang, S. C., Knight, R., ... & Rose, P. W. (2019). **Ten simple rules for writing and sharing computational analyses in Jupyter Notebooks**. PLoS computational biology, 15(7).\n- Perez-Riverol, Y., Gatto, L., Wang, R., Sachsenberg, T., Uszkoreit, J., Leprevost, F. da V., \u2026 Vizca\u00edno, J. A. (2016). **Ten Simple Rules for Taking Advantage of Git and GitHub**. PLOS Computational Biology, 12(7), e1004947.\n- Taschuk, M., & Wilson, G. (2017). **Ten simple rules for making research software more robust**. PLOS Computational Biology, 13(4), e1005412.\n- Hinsen, K. (2015). **Technical Debt in Computational Science**. Computing in Science & Engineering, 17(6), 103\u2013107.\n"
      },
      "source": "https://raw.githubusercontent.com/pabloinsente/sf_for_beh_ss/master/README.md",
      "technique": "header_analysis"
    }
  ]
}