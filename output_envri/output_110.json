{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Titcombe, Tom and Hall, Adam J and Papadopoulos, Pavlos and Romanini, Daniele",
        "format": "bibtex",
        "title": "Practical Defences Against Model Inversion Attacks for Split Neural Networks",
        "type": "Text_excerpt",
        "value": "@article{titcombe2021practical,\n    year = {2021},\n    journal = {arXiv preprint arXiv:2104.05743},\n    author = {Titcombe, Tom and Hall, Adam J and Papadopoulos, Pavlos and Romanini, Daniele},\n    title = {Practical Defences Against Model Inversion Attacks for Split Neural Networks},\n}"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TTitcombe/Model-Inversion-SplitNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "Defending SplitNN with Noise"
        ],
        "type": "Text_excerpt",
        "value": "If you have a question about\nthe paper/\nexperiments/\nresults,\nor have\nnoticed a bug in the code,\nplease open an issue\nin this repository.\n\nIf you are providing code,\nplease follow these conventions:\n\n- `black` to format code\n- `isort` to format imports\n- Add type hints\n- Add docstrings to functions and classes\n- Use `pytorch_lightning` to build PyTorch models\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-07T12:41:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-14T10:52:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Research into model inversion on SplitNN"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Motivation",
        "parent_header": [
          "Defending SplitNN with Noise",
          "Summary"
        ],
        "type": "Text_excerpt",
        "value": "Data input SplitNNs have been shown to be susceptible to,\namongst other attacks,\nblack box model inversion.\nIn this attack,\nan adversary trains an \"inversion\" model to\nturn intermediate data (data sent between model parts)\nback into raw input data.\nThis attack is a particularly relevant for a computational server\ncolluding with a data holder.\nApplying differential privacy directly to the model\n(differentially private stochastic gradient descent - the Abadi method)\ndoes not defend against this attack\nas output from a trained model part is deterministic\nand therefore a decoder model can be trained.\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Aims",
        "parent_header": [
          "Defending SplitNN with Noise",
          "Summary"
        ],
        "type": "Text_excerpt",
        "value": "This project aims to protect SplitNNs\nfrom black box model inversion attack\nby adding noise to the data being transferred between model parts.\nThe idea is that the stochasticity of intermediate data can stop a model\nfrom learning to invert it back into raw data.\nAdditionally,\nwe combine the noise addition with NoPeekNN,\nin which the model learns to create an intermediate distribution\nas uncorrelated with the input data as possible.\nWhile NoPeekNN does not provide any guarantees on data leakage,\nunlike differential privacy,\nwe aim to demonstrate that it can provide some protection against\na model inversion attack.\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9267633373162825,
      "result": {
        "original_header": "Notebooks",
        "type": "Text_excerpt",
        "value": "We have provided relevant analysis in the [`notebooks/`](notebooks) folder.\nBe aware that previous exploratory notebooks were removed.\nLook over previous commits for a full history of experimentation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9393272468757189,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "The [`data/`](./data/)\nfolder is intentionally\nleft empty\nto preserve the project\nstructure.\nThis project uses the\nMNIST\nand EMNIST\ndatasets.\nEach dataset\nwill be downloaded to\n`data/`\nwhen first used\nby a script.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TTitcombe/Model-Inversion-SplitNN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/2_MNIST_dp_mitigations/2_post_training_noise.ipynb"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/2_MNIST_dp_mitigations/2_post_training_noise.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/2_MNIST_dp_mitigations/3_noise_and_nopeek.ipynb"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/2_MNIST_dp_mitigations/3_noise_and_nopeek.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/2_MNIST_dp_mitigations/1_laplacian_noise.ipynb"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/2_MNIST_dp_mitigations/1_laplacian_noise.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/1_MNIST_non_dp_mitigations/1_data_volume.ipynb"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/1_MNIST_non_dp_mitigations/1_data_volume.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/1_MNIST_non_dp_mitigations/2_nopeek.ipynb"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/notebooks/1_MNIST_non_dp_mitigations/2_nopeek.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TTitcombe/Model-Inversion-SplitNN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TTitcombe/Model-Inversion-SplitNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Defending SplitNN with Noise"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/main.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TTitcombe/Model-Inversion-SplitNN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "machine-learning, model-inversion, model-inversion-attacks, privacy, research, split-neural-network, splitnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Defending SplitNN with Noise"
        ],
        "type": "Text_excerpt",
        "value": "Apache 2.0. See the full [license](LICENSE).\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Model-Inversion-SplitNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "TTitcombe"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1649051,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 38692,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1359,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2104.05743. ([link](https://arxiv.org/abs/2104.05743))**\n\n## Summary\n\n### Motivation\n\nData input SplitNNs have been shown to be susceptible to,\namongst other attacks,\nblack box model inversion.\nIn this attack,\nan adversary trains an \"inversion\" model to\nturn intermediate data (data sent between model parts)\nback into raw input data.\nThis attack is a particularly relevant for a computational server\ncolluding with a data holder.\nApplying differential privacy directly to the model\n(differentially private stochastic gradient descent - the Abadi method)\ndoes not defend against this attack\nas output from a trained model part is deterministic\nand therefore a decoder model can be trained.\n\n### Aims\n\nThis project aims to protect SplitNNs\nfrom black box model inversion attack\nby adding noise to the data being transferred between model parts.\nThe idea is that the stochasticity of intermediate data can stop a model\nfrom learning to invert it back into raw data.\nAdditionally,\nwe combine the noise addition with NoPeekNN,\nin which the model learns to create an intermediate distribution\nas uncorrelated with the input data as possible.\nWhile NoPeekNN does not provide any guarantees on data leakage,\nunlike differential privacy,\nwe aim to demonstrate that it can provide some protection against\na model inversion attack.\n\n## Get started\n\n### Requirements\n\nDeveloped in Python `3.8`,\nbut similar minor versions should work.\n\n#### Environment\n\nA [conda environment](./environment.yml),\n`dpsnn`,\nhas been provided\nwith all packages required to run the experiments,\nincluding the local source code\n(Pytorch-cpu only - remove `cpuonly` to enable GPU computation).\n- Run `conda env create -f environment.yml` to create the environment\nusing the latest packages OR\n- Run `conda env create -f environment-lock.yml` to use fixed package versions\n(for reproducibility).\n- `conda activate dpsnn` to activate the environment\n\n### Build from source\n\nTo install the local source code only:\n1. Clone this repo\n1. In a terminal, navigate to the repo\n1. Run `pip install -e .`.\n\nThis installs the local package `dpsnn`.\n\n### Train models\n\nScripts to train a classifier and attacker can be found in [`scripts`](./scripts):\n\n- `python scripts/train_model.py --noise_scale <noise_level> --nopeek_weight <weight>` to train a differentially private model\nusing noise drawn from Laplacian distribution with scale `<noise_level>` and NoPeek loss weighted by `<weight>`.\n\n- `python scripts/train_attacker.py --model <name>` to train an attacker on a trained model,\n`<name>`\n\nClassifiers are stored in [models/classifiers](./models/classifiers/)\nand are named like `mnist_<noise>noise_<nopeek>nopeek_epoch=<X>.ckpt`,\nwhere `<noise>` is the scale of laplacian noise added to the intermediate\ntensor _during training_ as a decimal. `...05noise` means scale 0.5,\n`...10noise` means scale 1.0.\n`<nopeek>` is the weighting of NoPeek loss\nin the loss function,\nusing the same decimal scheme as with noise.\n`<X>` is the number of training epochs\nduring which the classifier was performing the best.\n\nAttack models are stored in [models/attackers](./models/attackers/)\nand are named like\n`mnist_attacker_model<<classifier>>_set<noise>noise.ckpt`,\nwhere `<classifier>` is the stem\n(everything but the ckpt suffix)\nof the classifier it's attacking.\n`<noise>` refers to the scale of noise applied\nto the intermediate tensor\n_after training_.\n`_set<noise>noise` is not included\nif the noise scale of the classifier\ndoes not change from what it was trained on.\n\n### Run experiments\n\nTo replicate all experiments present in the paper,\nrun `./main.sh <arg>`,\nwhere `<arg>` is:\n\n- `noise` to train models with noise\n- `nopeek` to train models with NoPeek\n- `combo` to train models with both NoPeek and noise\n- `plain` to train a model without defences\n- `performance` to calculate the accuracy and Distance Correlation of each model in `models/classifiers/`\n- `all` to run all experiments\n\n## Notebooks\n\nWe have provided relevant analysis in the [`notebooks/`](notebooks) folder.\nBe aware that previous exploratory notebooks were removed.\nLook over previous commits for a full history of experimentation.\n\n## Data\n\nThe [`data/`](./data/)\nfolder is intentionally\nleft empty\nto preserve the project\nstructure.\nThis project uses the\nMNIST\nand EMNIST\ndatasets.\nEach dataset\nwill be downloaded to\n`data/`\nwhen first used\nby a script.\n\n## Contributing\n\nIf you have a question about\nthe paper/\nexperiments/\nresults,\nor have\nnoticed a bug in the code,\nplease open an issue\nin this repository.\n\nIf you are providing code,\nplease follow these conventions:\n\n- `black` to format code\n- `isort` to format imports\n- Add type hints\n- Add docstrings to functions and classes\n- Use `pytorch_lightning` to build PyTorch models\n\n## Publications\nTitcombe, T., Hall, A. J., Papadopoulos, P., & Romanini, D. (2021). Practical Defences Against Model Inversion Attacks for Split Neural Networks. arXiv preprint https://arxiv.org/abs/2104.05743. ([link](https://arxiv.org/abs/2104.05743))\n\nYou can cite this work using:\n\n    @article{titcombe2021practical,\n        title={Practical Defences Against Model Inversion Attacks for Split Neural Networks"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2104.05743"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2104.05743. ([link](https://arxiv.org/abs/2104.05743))\n\nYou can cite this work using:\n\n    @article{titcombe2021practical,\n        title={Practical Defences Against Model Inversion Attacks for Split Neural Networks"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Defending SplitNN with Noise",
          "Get started"
        ],
        "type": "Text_excerpt",
        "value": "Developed in Python `3.8`,\nbut similar minor versions should work.\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Environment",
        "parent_header": [
          "Defending SplitNN with Noise",
          "Get started",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "A [conda environment](./environment.yml),\n`dpsnn`,\nhas been provided\nwith all packages required to run the experiments,\nincluding the local source code\n(Pytorch-cpu only - remove `cpuonly` to enable GPU computation).\n- Run `conda env create -f environment.yml` to create the environment\nusing the latest packages OR\n- Run `conda env create -f environment-lock.yml` to use fixed package versions\n(for reproducibility).\n- `conda activate dpsnn` to activate the environment\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run experiments",
        "parent_header": [
          "Defending SplitNN with Noise",
          "Get started"
        ],
        "type": "Text_excerpt",
        "value": "To replicate all experiments present in the paper,\nrun `./main.sh <arg>`,\nwhere `<arg>` is:\n\n- `noise` to train models with noise\n- `nopeek` to train models with NoPeek\n- `combo` to train models with both NoPeek and noise\n- `plain` to train a model without defences\n- `performance` to calculate the accuracy and Distance Correlation of each model in `models/classifiers/`\n- `all` to run all experiments\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:16:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Environment",
        "parent_header": [
          "Defending SplitNN with Noise",
          "Get started",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "A [conda environment](./environment.yml),\n`dpsnn`,\nhas been provided\nwith all packages required to run the experiments,\nincluding the local source code\n(Pytorch-cpu only - remove `cpuonly` to enable GPU computation).\n- Run `conda env create -f environment.yml` to create the environment\nusing the latest packages OR\n- Run `conda env create -f environment-lock.yml` to use fixed package versions\n(for reproducibility).\n- `conda activate dpsnn` to activate the environment\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build from source",
        "parent_header": [
          "Defending SplitNN with Noise",
          "Get started"
        ],
        "type": "Text_excerpt",
        "value": "To install the local source code only:\n1. Clone this repo\n1. In a terminal, navigate to the repo\n1. Run `pip install -e .`.\n\nThis installs the local package `dpsnn`.\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Train models",
        "parent_header": [
          "Defending SplitNN with Noise",
          "Get started"
        ],
        "type": "Text_excerpt",
        "value": "Scripts to train a classifier and attacker can be found in [`scripts`](./scripts):\n\n- `python scripts/train_model.py --noise_scale <noise_level> --nopeek_weight <weight>` to train a differentially private model\nusing noise drawn from Laplacian distribution with scale `<noise_level>` and NoPeek loss weighted by `<weight>`.\n\n- `python scripts/train_attacker.py --model <name>` to train an attacker on a trained model,\n`<name>`\n\nClassifiers are stored in [models/classifiers](./models/classifiers/)\nand are named like `mnist_<noise>noise_<nopeek>nopeek_epoch=<X>.ckpt`,\nwhere `<noise>` is the scale of laplacian noise added to the intermediate\ntensor _during training_ as a decimal. `...05noise` means scale 0.5,\n`...10noise` means scale 1.0.\n`<nopeek>` is the weighting of NoPeek loss\nin the loss function,\nusing the same decimal scheme as with noise.\n`<X>` is the number of training epochs\nduring which the classifier was performing the best.\n\nAttack models are stored in [models/attackers](./models/attackers/)\nand are named like\n`mnist_attacker_model<<classifier>>_set<noise>noise.ckpt`,\nwhere `<classifier>` is the stem\n(everything but the ckpt suffix)\nof the classifier it's attacking.\n`<noise>` refers to the scale of noise applied\nto the intermediate tensor\n_after training_.\n`_set<noise>noise` is not included\nif the noise scale of the classifier\ndoes not change from what it was trained on.\n"
      },
      "source": "https://raw.githubusercontent.com/TTitcombe/Model-Inversion-SplitNN/master/README.md",
      "technique": "header_analysis"
    }
  ]
}