{
  "application_domain": [
    {
      "confidence": 0.8835742084372247,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8495672067715534,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/The-Singularity-Research/QISKit-Surface-Codes"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-05T05:50:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-21T09:39:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "QISKit implementation of surface codes"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/The-Singularity-Research/QISKit-Surface-Codes/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/Use%20Case%20Examples/surface_codes_homology.ipynb"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/Use%20Case%20Examples/surface_codes_homology.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/Use%20Case%20Examples/surface_code_tutorial_2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/Use%20Case%20Examples/surface_code_tutorial_2.ipynb",
      "technique": "file_exploration"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Surface Codes and Error Correction",
        "type": "Text_excerpt",
        "value": "For a general overview without too many technical requirements, see the \n- [Medium article](https://medium.com/@thesingularity.research/topological-quantum-computing-334ff0e36c29)\n\nA good introductory video on closely related work at IBM can be found here: \n- [A graph-based formalism for surface codes and twists](https://www.youtube.com/watch?v=Ca85qdptceQ)\n\nFor an introduction on how to use this library see the following notebook:\n\n- [Surface Code Tutorial II](https://github.com/The-Singularity-Research/QISKit-Surface-Codes/blob/master/Use%20Case%20Examples/surface_code_tutorial_2.ipynb)\n"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Current Capabilities",
        "parent_header": [
          "Surface Codes and Error Correction"
        ],
        "type": "Text_excerpt",
        "value": "This package implements general \"*surface codes*\" which \ngeneralize A. Kitaev's toric code for quantum error \ncorrection pictured below (see pg. 67 of [[1]](https://arxiv.org/pdf/1504.01444.pdf)). \n\n![Torus Code](https://github.com/The-Singularity-Research/QISKit-Surface-Codes/blob/master/Use%20Case%20Examples/torus_code.png)\n\nA more general example of a graph embedded on a torus that gives a surface code can be seen below (taken from [[2]](https://www.groundai.com/project/extracting-hidden-hierarchies-in-3d-distribution-networks/1)), \n\n<a href=\"https://www.researchgate.net/figure/A-graph-embedded-on-a-toroidal-surface-Highlighted-are-example-basis-vectors-from-a-a_fig2_266972115\"><img src=\"https://www.researchgate.net/profile/Carl_Modes/publication/266972115/figure/fig2/AS:667811957440518@1536230186800/A-graph-embedded-on-a-toroidal-surface-Highlighted-are-example-basis-vectors-from-a-a.ppm\" alt=\"A graph embedded on a toroidal surface. Highlighted are example basis vectors from (a) a fundamental cycle basis and (b) a minimum weight basis. Red: some representative tiling basis vectors. Blue and orange: basis vectors that correspond to the 2g = 2 generators of the fundamental group of the torus.\"/></a>\n\nHowever, our construction is even more general than this and allows \narbitrary graphs on surfaces of arbitrary genus. \nIn particular, any code specified by a \ngraph cellularly embedded in a compact Riemann\nsurface can be constructed using this package. The topological \ninterpretation can be summed up in the following table (pg. 68 [[1]](https://arxiv.org/pdf/1504.01444.pdf)):\n\n![Table](https://github.com/The-Singularity-Research/QISKit-Surface-Codes/blob/master/Use%20Case%20Examples/table.png)\n\nObviously error\ncorrection is necessary for fault tolerant quantum computing\nand surface codes are one of the best studied, most\nrobust, and most easily implemented types of error \ncorrection. Furthermore, they only require nearest neighbor\nqubit interaction (gates) for implementation. The surface codes\nimplemented in this package include the toric code as well as\nthe hyperbolic surface codes described in:\n- [Constructions and Noise Threshold of Hyperbolic\nSurface Codes](https://arxiv.org/pdf/1506.04029.pdf)\n- [Homological Quantum Codes\nBeyond the Toric Code](https://arxiv.org/pdf/1802.01520.pdf)\n\nThese codes provide a higher error rate threshold than the \nstandard toric codes, which have an error threshold of around \n1%. The codes can be transpiled in QISKit and run on any IBM \nhardware backend, or they can be run on specialized hardware \nfor hyperbolic surface code such as the hardware constructed \nwith around 150 qubits in:\n- [Hyperbolic Lattices in Circuit Quantum Electrodynamics](https://arxiv.org/pdf/1802.09549.pdf)\n\nand used in the simulation of hyperbolic spaces in \n- [Quantum Simulation of Hyperbolic Space with Circuit Quantum Electrodynamics:\nFrom Graphs to Geometry](https://arxiv.org/pdf/1910.12318.pdf)\n\nWith error rates on current hardware now reaching the 0.1% range\nand error thesholds well above 1% using surface codes, \nthe implementation of error correction using surface codes is both\ntimely and necessary for near term applications and will provide\nfault tolerance on most current hardware. The primary reference \nfor implementing error correction protocols and devloping \napplications to condensed matter physics and spin-glass models is: \n- [Quantum Computation with Topological Codes: from qubit to topological fault-tolerance](https://arxiv.org/pdf/1504.01444.pdf)\n"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Future Applications",
        "parent_header": [
          "Surface Codes and Error Correction"
        ],
        "type": "Text_excerpt",
        "value": "Future applications will involve: \n- modeling zeros of L-functions given by partition functions \nof lattice (or graph) Ising type models in order to understand \nthe behavior of prime numbers and RSA public key cryptography \nand elliptic curve cryptography, \n- understanding the Yang-Mills mass gap problem through \nmodeling lattice gauge theories using surface codes, \n- modeling arbitrage and cryptocurrency economies using lattice \ngauge theory, \n- training machine learning models on simulations of these \nmodels to predict arbitrage vulnerabilities and potential \ncryptocurrency instabilities\n- training machine learning models on exotic quantum hardware \narchitecture to learn and improve error correction protocols \nand logical gate implementations on non-standard surface codes \nthat go beyond simple grid qubit layouts on standard quantum \nhardware, \n- modeling quantum gravity(ies) and the AdS/CFT correspondecne \nof J. Maldecena\n- modeling quantum dynamical systems to better understand\nquantum chaos, quantum complexity, and phase transitions in\norder to better understand molecular dynamics\n- using simulations of molecular dynamics to to train \nmachine learning models for drug discovery and materials\ndiscovery\n- using molecular dynamics to understand complex quantum \nphenomena such as protein folding, molecular biology processes,\ngenetics for CRISPR, and synthetic biology\n"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Companion Work",
        "parent_header": [
          "Surface Codes and Error Correction"
        ],
        "type": "Text_excerpt",
        "value": "This package will be a part of a larger whole on error correction. \nThe error correction software will also implement graph states\nand basic applications of graph states such as:\n\n- encoding arbitrary stabilizer codes as graph states\n- Measurement Based Quantum Computing (MBQC)\n- Bipartite graph states and quantum cryptography\n- blind quantum computation\n- modeling entanglement entropy of multipartite systems\n- computing stabilizer generators of arbitrary stabilizer codes\n- weighted graph states and generalized graph states with\narbitrary (variational) controlled-U3 gates as entangling \ngates for quantum machine learning on weighted graphs and \ngraph completion problems in network analysis and \nknowledge graphs\n\nCurrently some basic constructors of graph states based on \narbitrary input graphs, as well as bipartite input graphs for\nMBQC, quantum cryptography, and blind quantum computation have\nbeen implemented, along with some basic measurement protocols.\nThis should be ready to use in the very near future as well.\n\nIBM has already implemented simple repetition codes and will \nlikely implement some of the standard examples of stabilizer \ncodes such as Calderbank-Shor-Steane codes (CSS-codes), so we \nwill likely not focus on implementing those in their standard\nform. However, developing algorithms which convert these codes\nand arbitrary stabilizer codes efficiently into graph states \nor surface codes will likely be useful and is something we are \nlikely to focus on in the future.\n\nFor supplementary material explaining some of the theoretical \naspects of surface codes, see also the following [notebook](https://github.com/The-Singularity-Research/Surface-Codes).\n\n"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/The-Singularity-Research/QISKit-Surface-Codes/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The-Singularity-Research/QISKit-Surface-Codes"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Surface Codes and Error Correction"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/Use%20Case%20Examples/torus_code.png"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://www.researchgate.net/profile/Carl_Modes/publication/266972115/figure/fig2/AS:667811957440518@1536230186800/A-graph-embedded-on-a-toroidal-surface-Highlighted-are-example-basis-vectors-from-a-a.ppm"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/Use%20Case%20Examples/table.png"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/The-Singularity-Research/QISKit-Surface-Codes/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Amelie Schreiber\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "QISKit-Surface-Codes"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "The-Singularity-Research"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1074885,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 20126,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1506.04029.pdf"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1910.12318.pdf"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1504.01444.pdf"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1802.09549.pdf"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1802.01520.pdf"
      },
      "source": "https://raw.githubusercontent.com/The-Singularity-Research/QISKit-Surface-Codes/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:32:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ]
}