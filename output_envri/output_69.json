{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dcellucci/TPMS-Research-Plan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-12-27T23:50:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-12-28T06:10:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "Cellular Solids Notes"
        ],
        "type": "Text_excerpt",
        "value": "Cellular solids are a class of materials composed of an interconnected network of struts and plates, which form the edges and faces of cells that tesselate three-dimensional space. The geometry of these cells can be represented by the constituent polyhedra in a convex uniform honeycomb. There are 28 such hon-eycombs, and common examples of the frameworks derived from these honeycombs include the Kelvin lattice, the Octet lattice, and the CubOctahedral lattice.\n\nCellular solids are found in many forms in nature, and have been applied in many engineering problems, including the construction of ultralight structural materials. Recent work in digital cellular solids introduced a decomposition of the cuboctahedral lattice into a single, two-dimensional part, which was then reversibly assembled into structures with, at the time, unprecedented stiffness-for-weight. This work showcased many desirable traits to the scalable assembly of cellular solids, including centimeter-scale construction, repairability, and mass-production of parts from high-performance materials. Subsequent work has demonstrated further capabilities of this approach, including robotic traversal and meter-scale\nstructures using a three-part strut-node construction.\n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9648962852021494,
      "result": {
        "original_header": "Cellular Solids Notes",
        "type": "Text_excerpt",
        "value": "Daniel Cellucci - January 2016 (and onward) \nMy thesis defense is in May. Paper #3 of my thesis will be the culmination of work I've done on alternative approaches to the design and construction of digital cellular solids. This repository is a set of notes, code, and media describing that work and where I think it fits. My understanding is, at best, incomplete, so that is why I am sending this to you, dear reader, for feedback and thoughts.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9450815931804715,
      "result": {
        "original_header": "Background",
        "type": "Text_excerpt",
        "value": "The choice of polyhedral honeycombs is largely a historical one. The first cellular solids were stochastic foams formed by dissolving gas into a polymer, allowing the gas to nucleate into bubbles whose arrangement can be modelled by Plateau's laws. Polyhedral honeycombs like the Kelvin lattice (or tridecahedral lattice) are one such proposed solution to the laws, by partitioning space into identical elements which maximize the volume while minimizing the surface area (subsequent, \"better\" partitions have been found but they're irregular and only marginally better). When combined with Maxwell's rigidity criterion, polyhedral honeycombs are used to model the mechanical properties of these stochastic foams, by examining whether a lattice has sufficient coordination (struts meeting at a node) in order to be kinematically determined. Since the Kelvin lattice is not kinematically determined, its mechanical performance (in terms of specific stiffness) is suboptimal compared to other honeycombs, such as the Octet truss (tetrahedral-octahedral honeycomb). \nWith the rise of additive manufacturing, the 'map' for cellular solids became the 'territory', and researchers started examining the performance of these kinematically determined honeycombs. The results agreed with what was expected with the rigidity criterion- a kinematically determined lattice displayed superior mechanical response to one that wasn't. \n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.961368270396637,
      "result": {
        "original_header": "Manufacturing Concerns",
        "type": "Text_excerpt",
        "value": "While the complexity of the octet truss is not a real concern when made using additive manufacturing, the high coordination of the lattice makes decomposition into easily-manufactured building block parts a non-trivial task. By \"easily manufactured\" I mean \n1. the primary structural part can use an existing 2.5D process, such as casting, stamping, abrasive waterjet cutting. \n2. the part is finite, as in it does not span the full size of the structure, so the parts can be tightly packed before assembly\n3. the number of parts is minimized (ideally one or two) \nTo date, no one I know of has successfully decomposed the octet truss into a set of peices which satisfy these criteria. It might just be a design problem, but another solution is to examine alternative methods for deriving frameworks whose decompositions satisfy these criteria from the outset.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9924138898583564,
      "result": {
        "original_header": "Objective: A Better Definition of What \"Easily Manufactured\" Means",
        "type": "Text_excerpt",
        "value": "1. Measuring the embodied energy of various processes e.g. injection molding and assembly vs. 3d printing and plating. \n2. Packing ratios for flat parts versus voxel parts\n3. Perhaps mass scaling for 2.5D nodes versus 3d?\n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9619409802000672,
      "result": {
        "original_header": "TPMS-Derived Frameworks",
        "type": "Text_excerpt",
        "value": "You can read more about them in the attached paper, but essentially TPMSes are three-dimensional, Riemannian manifolds which belong to a space group. Because of this, all straight lines which are embedded on a TPMS will meet at a point which is locally flat, and a solution which spans a single unit cell is sufficient to solve for the entire lattice.  \nWhile the 2D node makes the decomposition of the lattice into \"easily manufactured\" building blocks, finding the embedded straight lines is a non-trivial task. Right now there are two methods: finding the minimal patch and brute-force searching the space for straight line intersections. \n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9447780162987895,
      "result": {
        "original_header": "Method 1: Minimal Patches",
        "type": "Text_excerpt",
        "value": "The minimal patch of a TPMS is a simply connected piece of minimal surface. If the edges of the patch form a spherical polygon whose angles are of the form Pi/k, then the minimal surface can be extended by 180-degree-rotation about the boundary edges to form a complete, immersed minimal surface. As a result, the edges of the patch are the embedded straight lines of the TPMS. Additionally, there are no straight lines in the patch, since these lines would form axes for further simplification of the surface.  \nFinding these minimal patches is decidedly nontrivial. Karcher [cite], describes using the conjugate surface method. The process involves starting with the conjugate TPMS' asymmetric unit (which is decided by the space group this conjugate surface occupies) to construct the polygon of the conjugate surface method by utilizing the relationship between the asymmetric unit and the minimal patch. This process is limited to only very simple TPMS- those whose minimal contours can be \n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9761976534643055,
      "result": {
        "original_header": "Performance Analysis",
        "type": "Text_excerpt",
        "value": "In a paper I submitted to ASME MSEC, I used the two methods above to \"find\" (verify) two lattices, one derived from the D-Schwarz and one derived from the P-Schwarz TPMS. I then tested these two lattices using two methods for assessing the rigidity of a periodic framework: the symmetry-extended counting rules described by Guest and Fowler and the multiscale linear analysis of Vigliotti and Pasini. \n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9968446290587912,
      "result": {
        "original_header": "Symmetry Extended Counting Rules",
        "type": "Text_excerpt",
        "value": "Guest and Fowler introduced a method for examining the mobility of a framework by considering the symmetries of that framework. This extensions are written in the form of reducible representations of characteristics objects of the framework, which collect the characters of these objects over the symmetry operations which constitute the framework's space group. The general equation for these structures is then:\n$$\n\\Gamma(m) - \\Gamma(s) = \\Gamma(j) \\times \\Gamma_T - \\Gamma(b) + \\Gamma_T \\times \\Gamma_T - \\Gamma_T - \\Gamma_R\n$$\nWhere *m* is the number of mechanism states, *s* is the number of states of self-stress, *j* is the number of joints, *b* is the number of bars, and *T* and *R* are the relevant rigid-body translations and rotations, respectively. \n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9893081074770731,
      "result": {
        "original_header": "D-Schwarz",
        "type": "Text_excerpt",
        "value": "D-Schwarz belongs to the space group F-43m, or Td. The character table of Td is: \nWhat's important about this table is the last line- according to the counting rules, there are two mechanism states with symmetries A1 and T2, and a state of self-stress with symmetry A2. Furthermore, the mechanism state A1 has the full symmetry of the lattice. That is, there is no way the lattice can be kinematically determined if it is comprised of only pin-joints. \n \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9683283554288085,
      "result": {
        "original_header": "Multiscale Linear Analysis",
        "type": "Text_excerpt",
        "value": "While the above gives us a sense for what general behavior we expect, in order to get specific macroscopic properties from the lattice we need to look to the multiscale linear analysis provided by Vigliotti and Pasini. The primary product of this analysis is a stiffness matrix **K** which allows the determination of the effective modulus in the three principle directions of the lattice as well as the shear and hydrostatic response.  \nVigliotti and Pasini's paper describes the process for generating this matrix from the lattice primitive cell. \n"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dcellucci/TPMS-Research-Plan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/notebooks/README.ipynb"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/notebooks/README.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/notebooks/.ipynb_checkpoints/README-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/notebooks/.ipynb_checkpoints/README-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dcellucci/TPMS-Research-Plan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dcellucci/TPMS-Research-Plan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cellular Solids Notes"
      },
      "source": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dcellucci/TPMS-Research-Plan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TPMS-Research-Plan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "dcellucci"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 12575,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 6729,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dcellucci/TPMS-Research-Plan/master/README.MD"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:08:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ]
}