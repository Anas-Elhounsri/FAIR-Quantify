{
  "application_domain": [
    {
      "confidence": 33.27,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Navigating the GAN Parameter Space for Semantic Image Editing"
        ],
        "type": "Text_excerpt",
        "value": "```\n@InProceedings{Navigan_CVPR_2021,\n    author    = {Cherepkov, Anton and Voynov, Andrey and Babenko, Artem},\n    title     = {Navigating the GAN Parameter Space for Semantic Image Editing},\n    booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n    month     = {June},\n    year      = {2021},\n    pages     = {3671-3680}\n}\n```\n\n----\n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "parent_header": [
          "Navigating the GAN Parameter Space for Semantic Image Editing"
        ],
        "type": "Text_excerpt",
        "value": "Our code is based on the _Unsupervised Discovery of Interpretable Directions in the GAN Latent Space_ official implementation \\\nhttps://github.com/anvoynov/GANLatentDiscovery \\\nGenerator model is implemented over the _StyleGAN2-pytorch_: \\\nhttps://github.com/rosinality/stylegan2-pytorch \\\nGenerators weights were converted from the original _StyleGAN2_: \\\nhttps://github.com/NVlabs/stylegan2\n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Cherepkov, Anton and Voynov, Andrey and Babenko, Artem",
        "format": "bibtex",
        "title": "Navigating the GAN Parameter Space for Semantic Image Editing",
        "type": "Text_excerpt",
        "value": "@inproceedings{Navigan_CVPR_2021,\n    pages = {3671-3680},\n    year = {2021},\n    month = {June},\n    booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n    title = {Navigating the GAN Parameter Space for Semantic Image Editing},\n    author = {Cherepkov, Anton and Voynov, Andrey and Babenko, Artem},\n}"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yandex-research/navigan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-25T13:08:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-13T01:15:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Navigating the GAN Parameter Space for Semantic Image Editing"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9338504070045751,
      "result": {
        "original_header": "Navigating the GAN Parameter Space for Semantic Image Editing",
        "type": "Text_excerpt",
        "value": "Authors official implementation of the CVPR'2021 paper [_Navigating the GAN Parameter Space for Semantic Image Editing_](https://arxiv.org/abs/2011.13786) by Anton Cherepkov, Andrey Voynov, and Artem Babenko. \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9972659628614969,
      "result": {
        "original_header": "Calculating hessian's eigenvectors",
        "type": "Text_excerpt",
        "value": "__Main steps of our approach__:\n![An image](./images/scheme.png)\n* _First_: we form a low-dimensional subspace in the parameters space of a pretrained GAN;\n* _Second_: we solve an optimization problem to discover interpretable controls in this subspace. \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9586713622868462,
      "result": {
        "original_header": "Pix2PixHD",
        "type": "Text_excerpt",
        "value": "The proposed method is also applicable to pixel-to-pixel models.\nHere we present some of the effects discovered for the [label-to-streetview](https://github.com/NVIDIA/pix2pixHD) model. \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8400063894722272,
      "result": {
        "original_header": "Calculating hessian's eigenvectors",
        "type": "Text_excerpt",
        "value": "There are two options to form the low-dimensional parameters subspace: LPIPS-Hessian-based and SVD-based.\nThe first one is recommended. \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8923758078718523,
      "result": {
        "original_header": "LPIPS-Hessian-based",
        "type": "Text_excerpt",
        "value": "- ##### Calculating hessian's eigenvectors\n```\npython hessian_power_iteration.py \\\n    --out result \\                             #  script output\n    --gan_weights stylegan2-car-config-f.pt \\  #  model weigths\n    --resolution 512 \\                         #  model resolution\n    --gan_conv_layer_index 3 \\                 #  target convolutional layer index starting from 0\n    --num_samples 512 \\                        #  z-samples count to use for hessian computation\n    --num_eigenvectors 64 \\                    #  number of leading eigenvectors to calculate\n``` \n## Evaluation\nHere we present the code to visualize controls discovered by the previous steps for:\n- SVD;\n- SVD with optimization (_optimization-based_);\n- Hessian (_spectrum-based_);\n- Hessian with optimization (_hybrid_) \nSecond, modify the GAN parameters using one of the methods below. \n##### SVD-based\n```\nG = GeneratorWithWeightDeformator(\n    generator=G,\n    deformator_type='svd',\n    layer_ix=3,\n)\n```\n##### Optimization in the SVD basis\nBASH7*\n##### Hessian's eigenvectors\nBASH8*\n##### Optimization in the Hessian eigenvectors basis\nBASH9*\nNow you can apply modified parameters for every element in the batch in the following manner:\nBASH10* \n## Saving into a file\nYou can save the discovered parameters shifts (including layer_ix and data) into a file.\nIn order to do this:\n1. Modify the GAN parameters in the manner described above;\n2. Call ```G.save_deformation(path, direction_ix)```. \nNow you can apply modified parameters for every element in the batch in the following manner:\n```\n# Generate some samples\nzs = torch.randn((4, 512)).cuda()\n\n# Deformate; G.scale is a recommended scale\nG.deformate(0.5 * G.scale)\n\n# Simply call the generator\nimgs_deformated = G(zs)\n``` \n## Credits\nOur code is based on the _Unsupervised Discovery of Interpretable Directions in the GAN Latent Space_ official implementation \\\nhttps://github.com/anvoynov/GANLatentDiscovery \\\nGenerator model is implemented over the _StyleGAN2-pytorch_: \\\nhttps://github.com/rosinality/stylegan2-pytorch \\\nGenerators weights were converted from the original _StyleGAN2_: \\\nhttps://github.com/NVlabs/stylegan2\n \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9631780634536646,
      "result": {
        "original_header": "Calculating hessian's eigenvectors",
        "type": "Text_excerpt",
        "value": "# Navigating the GAN Parameter Space for Semantic Image Editing \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9202339522108112,
      "result": {
        "original_header": "Evaluation",
        "type": "Text_excerpt",
        "value": "Here we present the code to visualize controls discovered by the previous steps for:\n- SVD;\n- SVD with optimization (_optimization-based_);\n- Hessian (_spectrum-based_);\n- Hessian with optimization (_hybrid_) \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8605840530266616,
      "result": {
        "original_header": "Optimization in the Hessian eigenvectors basis",
        "type": "Text_excerpt",
        "value": "```\nG = GeneratorWithWeightDeformator(\n    generator=G,\n    deformator_type='hessian_rectification',\n    layer_ix=3,\n    checkpoint_path='_hessian_based_train_/checkpoint.pt',\n    eigenvectors_path='eigenvectors_layer3_stylegan2-car-config-f.pt'\n)\n```\nNow you can apply modified parameters for every element in the batch in the following manner:\nBASH2* \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9518320810185035,
      "result": {
        "original_header": "Saving into a file",
        "type": "Text_excerpt",
        "value": "You can save the discovered parameters shifts (including layer_ix and data) into a file.\nIn order to do this:\n1. Modify the GAN parameters in the manner described above;\n2. Call ```G.save_deformation(path, direction_ix)```.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yandex-research/navigan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/evaluation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/evaluation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/example.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 33
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yandex-research/navigan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yandex-research/navigan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Navigating the GAN Parameter Space for Semantic Image Editing"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/scheme.png"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/ffhq_original.png"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/ffhq_nose.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/ffhq_eyes.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/ffhq_eyes_dir.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/ffhq_brows.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/ffhq_vampire.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/car.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/church.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/horse.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/original_faces.jpg"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/eyes_real.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/nose_real.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/vampire_real.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/original_car.jpg"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/car_wheel_real.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/car_rot_real.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/add_curb.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/./images/road_darkening.gif"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.944637166306112,
      "result": {
        "original_header": "LPIPS-Hessian-based",
        "type": "Text_excerpt",
        "value": "Once you want to use the LPIPS-Hessian, first run its computation: \n## Pretrained directions\nAnnotated generators directions and gif examples sources: \\\nFFHQ: https://www.dropbox.com/s/7m838ewhzgcb3v5/ffhq_weights_deformations.tar \\\nCar: https://www.dropbox.com/s/rojdcfvnsdue10o/car_weights_deformations.tar \\\nHorse: https://www.dropbox.com/s/ir1lg5v2yd4cmkx/horse_weights_deformations.tar \\\nChurch: https://www.dropbox.com/s/do9yt3bggmggehm/church_weights_deformations.tar \nStyleGAN2 weights: https://www.dropbox.com/s/d0aas2fyc9e62g5/stylegan2_weights.tar \\\n_generators weights are the original models weights converted to pytorch (see credits)_ \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8810683498632694,
      "result": {
        "original_header": "Hessian's eigenvectors",
        "type": "Text_excerpt",
        "value": "```\nG = GeneratorWithWeightDeformator(\n    generator=G,\n    deformator_type='hessian',\n    layer_ix=3,\n    eigenvectors_path='eigenvectors_layer3_stylegan2-car-config-f.pt'\n)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Pretrained directions",
        "type": "Text_excerpt",
        "value": "Annotated generators directions and gif examples sources: \\\nFFHQ: https://www.dropbox.com/s/7m838ewhzgcb3v5/ffhq_weights_deformations.tar \\\nCar: https://www.dropbox.com/s/rojdcfvnsdue10o/car_weights_deformations.tar \\\nHorse: https://www.dropbox.com/s/ir1lg5v2yd4cmkx/horse_weights_deformations.tar \\\nChurch: https://www.dropbox.com/s/do9yt3bggmggehm/church_weights_deformations.tar \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8306406492620484,
      "result": {
        "original_header": "LPIPS-Hessian-based",
        "type": "Text_excerpt",
        "value": "- ##### Calculating hessian's eigenvectors\n```\npython hessian_power_iteration.py \\\n    --out result \\                             #  script output\n    --gan_weights stylegan2-car-config-f.pt \\  #  model weigths\n    --resolution 512 \\                         #  model resolution\n    --gan_conv_layer_index 3 \\                 #  target convolutional layer index starting from 0\n    --num_samples 512 \\                        #  z-samples count to use for hessian computation\n    --num_eigenvectors 64 \\                    #  number of leading eigenvectors to calculate\n``` \nFirst, import the required modules and load the generator:\n```\nfrom inference import GeneratorWithWeightDeformator\nfrom loading import load_generator\n\nG = load_generator(\n    args={'resolution': 512, 'gan_type': 'StyleGAN2'},\n    G_weights='stylegan2-car-config-f.pt'\n)\n``` \n#### Loading from file\nFirst, import the required modules and load the generator:\n```\nfrom inference import GeneratorWithFixedWeightDeformation\nfrom loading import load_generator\n\nG = load_generator(\n    args={'resolution': 512, 'gan_type': 'StyleGAN2'},\n    G_weights='stylegan2-car-config-f.pt'\n)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.821840010889845,
      "result": {
        "original_header": "Loading from file",
        "type": "Text_excerpt",
        "value": "First, import the required modules and load the generator:\n```\nfrom inference import GeneratorWithFixedWeightDeformation\nfrom loading import load_generator\n\nG = load_generator(\n    args={'resolution': 512, 'gan_type': 'StyleGAN2'},\n    G_weights='stylegan2-car-config-f.pt'\n)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yandex-research/navigan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "navigan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "yandex-research"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 871628,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 215422,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 12099,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1834,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.13786"
      },
      "source": "https://raw.githubusercontent.com/yandex-research/navigan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:01:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 296
      },
      "technique": "GitHub_API"
    }
  ]
}