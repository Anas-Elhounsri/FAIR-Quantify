{
  "application_domain": [
    {
      "confidence": 41.46,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "parent_header": [
          "SimCLR - A Simple Framework for Contrastive Learning of Visual Representations"
        ],
        "type": "Text_excerpt",
        "value": "[SimCLR paper](https://arxiv.org/abs/2002.05709):\n\n```\n@article{chen2020simple,\n  title={A Simple Framework for Contrastive Learning of Visual Representations},\n  author={Chen, Ting and Kornblith, Simon and Norouzi, Mohammad and Hinton, Geoffrey},\n  journal={arXiv preprint arXiv:2002.05709},\n  year={2020}\n}\n```\n\n[SimCLRv2 paper](https://arxiv.org/abs/2006.10029):\n\n```\n@article{chen2020big,\n  title={Big Self-Supervised Models are Strong Semi-Supervised Learners},\n  author={Chen, Ting and Kornblith, Simon and Swersky, Kevin and Norouzi, Mohammad and Hinton, Geoffrey},\n  journal={arXiv preprint arXiv:2006.10029},\n  year={2020}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Chen, Ting and Kornblith, Simon and Norouzi, Mohammad and Hinton, Geoffrey",
        "format": "bibtex",
        "title": "A Simple Framework for Contrastive Learning of Visual Representations",
        "type": "Text_excerpt",
        "value": "@article{chen2020simple,\n    year = {2020},\n    journal = {arXiv preprint arXiv:2002.05709},\n    author = {Chen, Ting and Kornblith, Simon and Norouzi, Mohammad and Hinton, Geoffrey},\n    title = {A Simple Framework for Contrastive Learning of Visual Representations},\n}"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Chen, Ting and Kornblith, Simon and Swersky, Kevin and Norouzi, Mohammad and Hinton, Geoffrey",
        "format": "bibtex",
        "title": "Big Self-Supervised Models are Strong Semi-Supervised Learners",
        "type": "Text_excerpt",
        "value": "@article{chen2020big,\n    year = {2020},\n    journal = {arXiv preprint arXiv:2006.10029},\n    author = {Chen, Ting and Kornblith, Simon and Swersky, Kevin and Norouzi, Mohammad and Hinton, Geoffrey},\n    title = {Big Self-Supervised Models are Strong Semi-Supervised Learners},\n}"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/google-research/simclr"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to Contribute\n\nSimCLR needs to maintain permanent compatibility with the pre-trained model\nfiles, so we do not plan to make any major changes to this library (other than\nwhat was promised in the README). However, we can accept small patches related\nto re-factoring and documentation. To submit contributes, there are just a few\nsmall guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google.com/conduct/).\n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-10T16:53:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T11:44:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SimCLRv2 - Big Self-Supervised Models are Strong Semi-Supervised Learners"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.922369847364872,
      "result": {
        "original_header": "SimCLR - A Simple Framework for Contrastive Learning of Visual Representations",
        "type": "Text_excerpt",
        "value": "<span style=\"color: red\"><strong>News! </strong></span> We have released a TF2 implementation of SimCLR (along with converted checkpoints in TF2), they are in <a href=\"tf2/\">tf2/ folder</a>. \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8558463975018401,
      "result": {
        "original_header": "Pre-trained models for SimCLRv2",
        "type": "Text_excerpt",
        "value": "We opensourced total 65 pretrained models here, corresponding to those in Table 1 of the <a href=\"https://arxiv.org/abs/2006.10029\">SimCLRv2</a> paper: \nThese checkpoints are stored in Google Cloud Storage: \n* Pretrained SimCLRv2 models (with linear eval head): [gs://simclr-checkpoints/simclrv2/pretrained](https://console.cloud.google.com/storage/browser/simclr-checkpoints/simclrv2/pretrained)\n* Fine-tuned SimCLRv2 models on 1% of labels: [gs://simclr-checkpoints/simclrv2/finetuned_1pct](https://console.cloud.google.com/storage/browser/simclr-checkpoints/simclrv2/finetuned_1pct)\n* Fine-tuned SimCLRv2 models on 10% of labels: [gs://simclr-checkpoints/simclrv2/finetuned_10pct](https://console.cloud.google.com/storage/browser/simclr-checkpoints/simclrv2/finetuned_10pct)\n* Fine-tuned SimCLRv2 models on 100% of labels: [gs://simclr-checkpoints/simclrv2/finetuned_100pct](https://console.cloud.google.com/storage/browser/simclr-checkpoints/simclrv2/finetuned_100pct)\n* Supervised models with the same architectures: [gs://simclr-checkpoints/simclrv2/supervised](https://console.cloud.google.com/storage/browser/simclr-checkpoints/simclrv2/supervised)\n* The distilled / self-trained models (after fine-tuning) are also provided:\n  * [gs://simclr-checkpoints/simclrv2/distill_1pct](https://console.cloud.google.com/storage/browser/simclr-checkpoints/simclrv2/distill_1pct)\n  * [gs://simclr-checkpoints/simclrv2/distill_10pct](https://console.cloud.google.com/storage/browser/simclr-checkpoints/simclrv2/distill_10pct) \nWe also provide examples on how to use the checkpoints in `colabs/` folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9125486732819428,
      "result": {
        "original_header": "Pre-trained models for SimCLRv1",
        "type": "Text_excerpt",
        "value": "The pre-trained models (base network with linear classifier layer) can be found below. Note that for these SimCLRv1 checkpoints, the projection head is not available. \n|                             Model checkpoint and hub-module                             |     ImageNet Top-1     |\n|-----------------------------------------------------------------------------------------|------------------------|\n|[ResNet50 (1x)](https://storage.cloud.google.com/simclr-gcs/checkpoints/ResNet50_1x.zip) |          69.1          |\n|[ResNet50 (2x)](https://storage.cloud.google.com/simclr-gcs/checkpoints/ResNet50_2x.zip) |          74.2          |\n|[ResNet50 (4x)](https://storage.cloud.google.com/simclr-gcs/checkpoints/ResNet50_4x.zip) |          76.6          | \nA note on the signatures of the TensorFlow Hub module: `default` is the representation output of the base network; `logits_sup` is the supervised classification logits for ImageNet 1000 categories. Others (e.g. `initial_max_pool`, `block_group1`) are middle layers of ResNet; refer to resnet.py for the specifics. See this [tutorial](https://www.tensorflow.org/hub/tf1_hub_module) for additional information regarding use of TensorFlow Hub modules.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9924034796798723,
      "result": {
        "original_header": "Pretraining",
        "type": "Text_excerpt",
        "value": "A batch size of 4096 requires at least 32 TPUs. 100 epochs takes around 6 hours with 32 TPU v3s. Note that learning rate of 0.3 with `learning_rate_scaling=linear` is equivalent to that of 0.075 with `learning_rate_scaling=sqrt` when the batch size is 4096. However, using sqrt scaling allows it to train better when smaller batch size is used.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9275474889054572,
      "result": {
        "original_header": "Semi-supervised learning and fine-tuning the whole network",
        "type": "Text_excerpt",
        "value": "You can access 1% and 10% ImageNet subsets used for semi-supervised learning via [tensorflow datasets](https://www.tensorflow.org/datasets/catalog/imagenet2012_subset): simply set `dataset=imagenet2012_subset/1pct` and `dataset=imagenet2012_subset/10pct` in the command line for fine-tuning on these subsets. \nYou can also find image IDs of these subsets in `imagenet_subsets/`. \nSet the `checkpoint` to those that are only pre-trained but not fine-tuned. Given that SimCLRv1 checkpoints do not contain projection head, it is recommended to run with SimCLRv2 checkpoints (you can still run with SimCLRv1 checkpoints, but `variable_schema` needs to exclude `head`). The `num_proj_layers` and `ft_proj_selector` need to be adjusted accordingly following SimCLRv2 paper to obtain best performances.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9754069678115516,
      "result": {
        "original_header": "Model conversion to Pytorch format",
        "type": "Text_excerpt",
        "value": "This [repo](https://github.com/tonylins/simclr-converter) provides a solution for converting the pretrained SimCLRv1 Tensorflow checkpoints into Pytorch ones. \nThis [repo](https://github.com/Separius/SimCLRv2-Pytorch) provides a solution for converting the pretrained SimCLRv2 Tensorflow checkpoints into Pytorch ones.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9506485940575669,
      "result": {
        "original_header": "Other *non-offical* / *unverified* implementations",
        "type": "Text_excerpt",
        "value": "Implementations in PyTorch:\n* [leftthomas](https://github.com/leftthomas/SimCLR)\n* [AndrewAtanov](https://github.com/AndrewAtanov/simclr-pytorch)\n* [ae-foster](https://github.com/ae-foster/pytorch-simclr)\n* [Spijkervet](https://github.com/Spijkervet/SimCLR)\n* [williamFalcon](https://pytorch-lightning-bolts.readthedocs.io/en/latest/self_supervised_models.html#simclr) \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9407406861728159,
      "result": {
        "original_header": "Known issues",
        "type": "Text_excerpt",
        "value": "* **Batch size**: original results of SimCLR were tuned under a large batch size (i.e. 4096), which leads to suboptimal results when training using a smaller batch size. However, with a good set of hyper-parameters (mainly learning rate, temperature, projection head depth), small batch sizes can yield results that are on par with large batch sizes (e.g., see Table 2 in [this paper](https://arxiv.org/pdf/2011.02803.pdf)). \n* **Pretrained models / Checkpoints**: SimCLRv1 and SimCLRv2 are pretrained with different weight decays, so the pretrained models from the two versions have very different weight norm scales (convolutional weights in SimCLRv1 ResNet-50 are on average 16.8X of that in SimCLRv2). For fine-tuning the pretrained models from both versions, it is fine if you use an LARS optimizer, but it requires very different hyperparameters (e.g. learning rate, weight decay) if you use the momentum optimizer. So for the latter case, you may want to either search for very different hparams according to which version used, or re-scale th weight (i.e. conv `kernel` parameters of `base_model` in the checkpoints) to make sure they're roughly in the same scale.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9837136904632231,
      "result": {
        "original_header": "Disclaimer",
        "type": "Text_excerpt",
        "value": "This is not an official Google product.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/google-research/simclr/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/load_and_inference.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/load_and_inference.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/finetuning.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/finetuning.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/distillation_self_training.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/distillation_self_training.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/intriguing_properties/digits_on_tf_flowers.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/intriguing_properties/digits_on_tf_flowers.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/intriguing_properties/generalized_contrastive_loss.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/intriguing_properties/generalized_contrastive_loss.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/intriguing_properties/randbits_mnist.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/colabs/intriguing_properties/randbits_mnist.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/tf2/colabs/load_and_inference.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/tf2/colabs/load_and_inference.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/tf2/colabs/finetuning.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/tf2/colabs/finetuning.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/tf2/colabs/distillation_self_training.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/tf2/colabs/distillation_self_training.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/tf2/colabs/imagenet_results.ipynb"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/tf2/colabs/imagenet_results.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 622
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/google-research/simclr/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "google-research/simclr"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SimCLR - A Simple Framework for Contrastive Learning of Visual Representations"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://1.bp.blogspot.com/--vH4PKpE9Yo/Xo4a2BYervI/AAAAAAAAFpM/vaFDwPXOyAokAC8Xh852DzOgEs22NhbXwCLcBGAsYHQ/s1600/image4.gif"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Enviroment setup",
        "parent_header": [
          "SimCLR - A Simple Framework for Contrastive Learning of Visual Representations"
        ],
        "type": "Text_excerpt",
        "value": "Our models are trained with TPUs. It is recommended to run distributed training with TPUs when using our code for pretraining.\n\nOur code can also run on a *single* GPU. It does not support multi-GPUs, for reasons such as global BatchNorm and contrastive loss across cores.\n\nThe code is compatible with both TensorFlow v1 and v2. See requirements.txt for all prerequisites, and you can also install them using the following command.\n\n```\npip install -r requirements.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9989758903744436,
      "result": {
        "original_header": "SimCLR - A Simple Framework for Contrastive Learning of Visual Representations",
        "type": "Text_excerpt",
        "value": "<div align=\"center\">\n  <img width=\"50%\" alt=\"SimCLR Illustration\" src=\"https://1.bp.blogspot.com/--vH4PKpE9Yo/Xo4a2BYervI/AAAAAAAAFpM/vaFDwPXOyAokAC8Xh852DzOgEs22NhbXwCLcBGAsYHQ/s1600/image4.gif\">\n</div>\n<div align=\"center\">\n  An illustration of SimCLR (from <a href=\"https://ai.googleblog.com/2020/04/advancing-self-supervised-and-semi.html\">our blog here</a>).\n</div>\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9340123230465083,
      "result": {
        "original_header": "Pre-trained models for SimCLRv2",
        "type": "Text_excerpt",
        "value": "We also provide examples on how to use the checkpoints in `colabs/` folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9737685288637115,
      "result": {
        "original_header": "Pretraining",
        "type": "Text_excerpt",
        "value": "To pretrain the model on CIFAR-10 with a *single* GPU, try the following command:\n```\npython run.py --train_mode=pretrain \\\n  --train_batch_size=512 --train_epochs=1000 \\\n  --learning_rate=1.0 --weight_decay=1e-4 --temperature=0.5 \\\n  --dataset=cifar10 --image_size=32 --eval_split=test --resnet_depth=18 \\\n  --use_blur=False --color_jitter_strength=0.5 \\\n  --model_dir=/tmp/simclr_test --use_tpu=False\n```\n \nOnce you have created virtual machine with Cloud TPUs, and pre-downloaded the ImageNet data for [tensorflow_datasets](https://www.tensorflow.org/datasets/catalog/imagenet2012), please set the following enviroment variables:\n```\nTPU_NAME=<tpu-name>\nSTORAGE_BUCKET=gs://<storage-bucket>\nDATA_DIR=$STORAGE_BUCKET/<path-to-tensorflow-dataset>\nMODEL_DIR=$STORAGE_BUCKET/<path-to-store-checkpoints>\n```\nThe following command can be used to pretrain a ResNet-50 on ImageNet (which reflects the default hyperparameters in our paper):\n```\npython run.py --train_mode=pretrain \\\n  --train_batch_size=4096 --train_epochs=100 --temperature=0.1 \\\n  --learning_rate=0.075 --learning_rate_scaling=sqrt --weight_decay=1e-4 \\\n  --dataset=imagenet2012 --image_size=224 --eval_split=validation \\\n  --data_dir=$DATA_DIR --model_dir=$MODEL_DIR \\\n  --use_tpu=True --tpu_name=$TPU_NAME --train_summary_steps=0\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9777053549911726,
      "result": {
        "original_header": "Finetuning the linear head (linear eval)",
        "type": "Text_excerpt",
        "value": "To fine-tune a linear head (with a single GPU), try the following command:\n```\npython run.py --mode=train_then_eval --train_mode=finetune \\\n  --fine_tune_after_block=4 --zero_init_logits_layer=True \\\n  --variable_schema='(?!global_step|(?:.*/|^)Momentum|head)' \\\n  --global_bn=False --optimizer=momentum --learning_rate=0.1 --weight_decay=0.0 \\\n  --train_epochs=100 --train_batch_size=512 --warmup_epochs=0 \\\n  --dataset=cifar10 --image_size=32 --eval_split=test --resnet_depth=18 \\\n  --checkpoint=/tmp/simclr_test --model_dir=/tmp/simclr_test_ft --use_tpu=False\n```\nYou can check the results using tensorboard, such as\n```\npython -m tensorboard.main --logdir=/tmp/simclr_test\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8705557598866684,
      "result": {
        "original_header": "Pretraining",
        "type": "Text_excerpt",
        "value": "To pretrain the model on CIFAR-10 with a *single* GPU, try the following command:\n```\npython run.py --train_mode=pretrain \\\n  --train_batch_size=512 --train_epochs=1000 \\\n  --learning_rate=1.0 --weight_decay=1e-4 --temperature=0.5 \\\n  --dataset=cifar10 --image_size=32 --eval_split=test --resnet_depth=18 \\\n  --use_blur=False --color_jitter_strength=0.5 \\\n  --model_dir=/tmp/simclr_test --use_tpu=False\n```\n \nOnce you have created virtual machine with Cloud TPUs, and pre-downloaded the ImageNet data for [tensorflow_datasets](https://www.tensorflow.org/datasets/catalog/imagenet2012), please set the following enviroment variables:\n```\nTPU_NAME=<tpu-name>\nSTORAGE_BUCKET=gs://<storage-bucket>\nDATA_DIR=$STORAGE_BUCKET/<path-to-tensorflow-dataset>\nMODEL_DIR=$STORAGE_BUCKET/<path-to-store-checkpoints>\n```\nThe following command can be used to pretrain a ResNet-50 on ImageNet (which reflects the default hyperparameters in our paper):\n```\npython run.py --train_mode=pretrain \\\n  --train_batch_size=4096 --train_epochs=100 --temperature=0.1 \\\n  --learning_rate=0.075 --learning_rate_scaling=sqrt --weight_decay=1e-4 \\\n  --dataset=imagenet2012 --image_size=224 --eval_split=validation \\\n  --data_dir=$DATA_DIR --model_dir=$MODEL_DIR \\\n  --use_tpu=True --tpu_name=$TPU_NAME --train_summary_steps=0\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.94199114716714,
      "result": {
        "original_header": "Finetuning the linear head (linear eval)",
        "type": "Text_excerpt",
        "value": "To fine-tune a linear head (with a single GPU), try the following command:\n```\npython run.py --mode=train_then_eval --train_mode=finetune \\\n  --fine_tune_after_block=4 --zero_init_logits_layer=True \\\n  --variable_schema='(?!global_step|(?:.*/|^)Momentum|head)' \\\n  --global_bn=False --optimizer=momentum --learning_rate=0.1 --weight_decay=0.0 \\\n  --train_epochs=100 --train_batch_size=512 --warmup_epochs=0 \\\n  --dataset=cifar10 --image_size=32 --eval_split=test --resnet_depth=18 \\\n  --checkpoint=/tmp/simclr_test --model_dir=/tmp/simclr_test_ft --use_tpu=False\n```\nYou can check the results using tensorboard, such as\n```\npython -m tensorboard.main --logdir=/tmp/simclr_test\n```\n \nFor fine-tuning a linear head on ImageNet using Cloud TPUs, first set the `CHKPT_DIR` to pretrained model dir and set a new `MODEL_DIR`, then use the following command:\n```\npython run.py --mode=train_then_eval --train_mode=finetune \\\n  --fine_tune_after_block=4 --zero_init_logits_layer=True \\\n  --variable_schema='(?!global_step|(?:.*/|^)Momentum|head)' \\\n  --global_bn=False --optimizer=momentum --learning_rate=0.1 --weight_decay=1e-6 \\\n  --train_epochs=90 --train_batch_size=4096 --warmup_epochs=0 \\\n  --dataset=imagenet2012 --image_size=224 --eval_split=validation \\\n  --data_dir=$DATA_DIR --model_dir=$MODEL_DIR --checkpoint=$CHKPT_DIR \\\n  --use_tpu=True --tpu_name=$TPU_NAME --train_summary_steps=0\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8677279583466186,
      "result": {
        "original_header": "Semi-supervised learning and fine-tuning the whole network",
        "type": "Text_excerpt",
        "value": "To fine-tune the whole network on ImageNet (1% of labels), refer to the following command:\n```\npython run.py --mode=train_then_eval --train_mode=finetune \\\n  --fine_tune_after_block=-1 --zero_init_logits_layer=True \\\n  --variable_schema='(?!global_step|(?:.*/|^)Momentum|head_supervised)' \\\n  --global_bn=True --optimizer=lars --learning_rate=0.005 \\\n  --learning_rate_scaling=sqrt --weight_decay=0 \\\n  --train_epochs=60 --train_batch_size=1024 --warmup_epochs=0 \\\n  --dataset=imagenet2012_subset/1pct --image_size=224 --eval_split=validation \\\n  --data_dir=$DATA_DIR --model_dir=$MODEL_DIR --checkpoint=$CHKPT_DIR \\\n  --use_tpu=True --tpu_name=$TPU_NAME --train_summary_steps=0 \\\n  --num_proj_layers=3 --ft_proj_selector=1\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/google-research/simclr/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "computer-vision, contrastive-learning, representation-learning, self-supervised-learning, simclr, simclrv2, unsupervised-learning"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "simclr"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "google-research"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 3168522,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 194375,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/google-research/simclr/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pytorch-lightning-bolts.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2006.10029"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2002.05709"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.02803\">Intriguing Properties of Contrastive Losses</a> are added, see <a href=\"colabs/intriguing_properties/\">here</a>.\n\n<div align=\"center\">\n  <img width=\"50%\" alt=\"SimCLR Illustration\" src=\"https://1.bp.blogspot.com/--vH4PKpE9Yo/Xo4a2BYervI/AAAAAAAAFpM/vaFDwPXOyAokAC8Xh852DzOgEs22NhbXwCLcBGAsYHQ/s1600/image4.gif\">\n</div>\n<div align=\"center\">\n  An illustration of SimCLR (from <a href=\"https://ai.googleblog.com/2020/04/advancing-self-supervised-and-semi.html\">our blog here</a>"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/2011.02803.pdf"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2006.10029\">SimCLRv2</a> paper:\n\n|   Depth | Width   | SK    |   Param (M"
      },
      "source": "https://raw.githubusercontent.com/google-research/simclr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chentingpc",
          "type": "User"
        },
        "date_created": "2020-06-06T00:39:08Z",
        "date_published": "2020-06-27T15:43:57Z",
        "description": "This is the original SimCLRv1 code base.",
        "html_url": "https://github.com/google-research/simclr/releases/tag/1.0",
        "name": "SimCLRv1",
        "release_id": 27988191,
        "tag": "1.0",
        "tarball_url": "https://api.github.com/repos/google-research/simclr/tarball/1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/google-research/simclr/releases/27988191",
        "value": "https://api.github.com/repos/google-research/simclr/releases/27988191",
        "zipball_url": "https://api.github.com/repos/google-research/simclr/zipball/1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 22:52:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4064
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}