{
  "application_domain": [
    {
      "confidence": 10.45,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you use EconML in your research, please cite us as follows:\n\n   Keith Battocchi, Eleanor Dillon, Maggie Hei, Greg Lewis, Paul Oka, Miruna Oprescu, Vasilis Syrgkanis. **EconML: A Python Package for ML-Based Heterogeneous Treatment Effects Estimation.** https://github.com/py-why/EconML, 2019. Version 0.x.\n\nBibTex:\n\n```\n@misc{econml,\n  author={Keith Battocchi, Eleanor Dillon, Maggie Hei, Greg Lewis, Paul Oka, Miruna Oprescu, Vasilis Syrgkanis},\n  title={{EconML}: {A Python Package for ML-Based Heterogeneous Treatment Effects Estimation}},\n  howpublished={https://github.com/py-why/EconML},\n  note={Version 0.x},\n  year={2019}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "Athey, Susan, and Stefan Wager.\n**Policy learning with observational data.**\n[*Econometrica 89.1, 133-161*](https://doi.org/10.3982/ECTA15732), 2021.\n\nX Nie, S Wager.\n**Quasi-Oracle Estimation of Heterogeneous Treatment Effects.**\n[*Biometrika 108.2, 299-319*](https://doi.org/10.1093/biomet/asaa076), 2021.\n\nV. Syrgkanis, V. Lei, M. Oprescu, M. Hei, K. Battocchi, G. Lewis.\n**Machine Learning Estimation of Heterogeneous Treatment Effects with Instruments.**\n[*Proceedings of the 33rd Conference on Neural Information Processing Systems (NeurIPS)*](https://arxiv.org/abs/1905.10176), 2019.\n**(Spotlight Presentation)**\n\nD. Foster, V. Syrgkanis.\n**Orthogonal Statistical Learning.**\n[*Proceedings of the 32nd Annual Conference on Learning Theory (COLT)*](https://arxiv.org/pdf/1901.09036.pdf), 2019.\n**(Best Paper Award)**\n\nM. Oprescu, V. Syrgkanis and Z. S. Wu.\n**Orthogonal Random Forest for Causal Inference.**\n[*Proceedings of the 36th International Conference on Machine Learning (ICML)*](http://proceedings.mlr.press/v97/oprescu19a.html), 2019.\n\nS. K\u00fcnzel, J. Sekhon, J. Bickel and B. Yu.\n**Metalearners for estimating heterogeneous treatment effects using machine learning.**\n[*Proceedings of the national academy of sciences, 116(10), 4156-4165*](https://www.pnas.org/content/116/10/4156), 2019.\n\nS. Athey, J. Tibshirani, S. Wager.\n**Generalized random forests.**\n[*Annals of Statistics, 47, no. 2, 1148--1178*](https://projecteuclid.org/euclid.aos/1547197251), 2019.\n\nV. Chernozhukov, D. Nekipelov, V. Semenova, V. Syrgkanis.\n**Plug-in Regularized Estimation of High-Dimensional Parameters in Nonlinear Semiparametric Models.**\n[*Arxiv preprint arxiv:1806.04823*](https://arxiv.org/abs/1806.04823), 2018.\n\nS. Wager, S. Athey.\n**Estimation and Inference of Heterogeneous Treatment Effects using Random Forests.**\n[*Journal of the American Statistical Association, 113:523, 1228-1242*](https://www.tandfonline.com/doi/citedby/10.1080/01621459.2017.1319839), 2018.\n\nJason Hartford, Greg Lewis, Kevin Leyton-Brown, and Matt Taddy. **Deep IV: A flexible approach for counterfactual prediction.** [*Proceedings of the 34th International Conference on Machine Learning, ICML'17*](http://proceedings.mlr.press/v70/hartford17a/hartford17a.pdf), 2017.\n\nV. Chernozhukov, D. Chetverikov, M. Demirer, E. Duflo, C. Hansen, and a. W. Newey. **Double Machine Learning for Treatment and Causal Parameters.** [*ArXiv preprint arXiv:1608.00060*](https://arxiv.org/abs/1608.00060), 2016.\n\nDudik, M., Erhan, D., Langford, J., & Li, L.\n**Doubly robust policy evaluation and optimization.**\n[*Statistical Science, 29(4), 485-511*](https://projecteuclid.org/journals/statistical-science/volume-29/issue-4/Doubly-Robust-Policy-Evaluation-and-Optimization/10.1214/14-STS500.full), 2014.\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Keith Battocchi, Eleanor Dillon, Maggie Hei, Greg Lewis, Paul Oka, Miruna Oprescu, Vasilis Syrgkanis",
        "format": "bibtex",
        "title": "{EconML}: {A Python Package for ML-Based Heterogeneous Treatment Effects Estimation}",
        "type": "Text_excerpt",
        "value": "@misc{econml,\n    year = {2019},\n    note = {Version 0.x},\n    howpublished = {https://github.com/py-why/EconML},\n    title = {{EconML}: {A Python Package for ML-Based Heterogeneous Treatment Effects Estimation}},\n    author = {Keith Battocchi, Eleanor Dillon, Maggie Hei, Greg Lewis, Paul Oka, Miruna Oprescu, Vasilis Syrgkanis},\n}"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/py-why/EconML"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing and Feedback",
        "type": "Text_excerpt",
        "value": "This project welcomes contributions and suggestions.  We use the [DCO bot](https://github.com/apps/dco) to enforce a [Developer Certificate of Origin](https://developercertificate.org/) which requires users to sign-off on their commits.  This is a simple way to certify that you wrote or otherwise have the right to submit the code you are contributing to the project.  Git provides a `-s` command line option to include this automatically when you commit via `git commit`.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [PyWhy Code of Conduct](https://github.com/py-why/governance/blob/main/CODE-OF-CONDUCT.md).\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-30T21:02:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T18:17:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ALICE (Automated Learning and Intelligence for Causation and Economics) is a Microsoft Research project aimed at applying Artificial Intelligence concepts to economic decision making. One of its  goals is to build a toolkit that combines state-of-the-art machine learning techniques with econometrics in order to bring automation to complex causal inference problems. To date, the ALICE Python SDK (econml) implements orthogonal machine learning algorithms such as the double machine learning work of Chernozhukov et al. This toolkit is designed to measure the causal effect of some treatment variable(s) t on an outcome variable y, controlling for a set of features x."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8666255755955536,
      "result": {
        "original_header": "For Developers",
        "type": "Text_excerpt",
        "value": "You can get started by cloning this repository. We use \n[setuptools](https://setuptools.readthedocs.io/en/latest/index.html) for building and distributing our package.\nWe rely on some recent features of setuptools, so make sure to upgrade to a recent version with\n`pip install setuptools --upgrade`.  Then from your local copy of the repository you can run `pip install -e .` to get started (but depending on what you're doing you might want to install with extras instead, like `pip install -e .[plt]` if you want to use matplotlib integration, or you can use  `pip install -e .[all]` to include all extras).\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.881072517190653,
      "result": {
        "original_header": "Release process",
        "type": "Text_excerpt",
        "value": "We use GitHub Actions to build and publish the package and documentation.  To create a new release, an admin should perform the following steps: \n1. Update the version number in `econml/_version.py` and add a mention of the new version in the news section of this file and commit the changes.\n2. Manually run the publish_package.yml workflow to build and publish the package to PyPI.\n3. Manually run the publish_docs.yml workflow to build and publish the documentation.\n4. Under https://github.com/py-why/EconML/releases, create a new release with a corresponding tag, and update the release notes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9837110799539127,
      "result": {
        "original_header": "Community",
        "type": "Text_excerpt",
        "value": "EconML is a part of [PyWhy](https://www.pywhy.org/), an organization with a mission to build an open-source ecosystem for causal machine learning. \nPyWhy also has a [Discord](https://discord.gg/cSBGb3vsZb), which serves as a space for like-minded casual machine learning researchers and practitioners of all experience levels to come together to ask and answer questions, discuss new features, and share ideas. \nWe invite you to join us at regular office hours and community calls in the Discord.\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.960385201884498,
      "result": {
        "type": "Text_excerpt",
        "value": "EconML: A Python Package for ML-Based Heterogeneous Treatment Effects Estimation \n\n**EconML** is a Python package for estimating heterogeneous treatment effects from observational data via machine learning. This package was designed and built as part of the  at Microsoft Research with the goal to combine state-of-the-art machine learning \ntechniques with econometrics to bring automation to complex causal inference problems. The promise of EconML: \n* Implement recent techniques in the literature at the intersection of econometrics and machine learning\n* Maintain flexibility in modeling the effect heterogeneity (via techniques such as random forests, boosting, lasso and neural nets), while preserving the causal interpretation of the learned model and often offering valid confidence intervals\n* Use a unified API\n* Build on standard Python packages for Machine Learning and Data Analysis \nOne of the biggest promises of machine learning is to automate decision making in a multitude of domains. At the core of many data-driven personalized decision scenarios is the estimation of heterogeneous treatment effects: what is the causal effect of an intervention on an outcome of interest for a sample with a particular set of features? In a nutshell, this toolkit is designed to measure the causal effect of some treatment variable(s) `T` on an outcome \nvariable `Y`, controlling for a set of features `X, W` and how does that effect vary as a function of `X`. The methods implemented are applicable even with observational (non-experimental or historical) datasets. For the estimation results to have a causal interpretation, some methods assume no unobserved confounders (i.e. there is no unobserved variable not included in `X, W` that simultaneously has an effect on both `T` and `Y`), while others assume access to an instrument `Z` (i.e. an observed variable `Z` that has an effect on the treatment `T` but no direct effect on the outcome `Y`). Most methods provide confidence intervals and inference results. \nFor information on use cases and background material on causal inference and heterogeneous treatment effects see our webpage at https://www.microsoft.com/en-us/research/project/econml/ \n\nTable of Contents \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Generating the documentation",
        "parent_header": [
          "For Developers"
        ],
        "type": "Text_excerpt",
        "value": "This project's documentation is generated via [Sphinx](https://www.sphinx-doc.org/en/main/index.html).  Note that we use [graphviz](https://graphviz.org/)'s \n`dot` application to produce some of the images in our documentation, so you should make sure that `dot` is installed and in your path.\n\nTo generate a local copy of the documentation from a clone of this repository, just run `python setup.py build_sphinx -W -E -a`, which will build the documentation and place it under the `build/sphinx/html` path. \n\nThe reStructuredText files that make up the documentation are stored in the [docs directory](https://github.com/py-why/EconML/tree/main/doc); module documentation is automatically generated by the Sphinx build process.\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/microsoft/EconML/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Causal%20Model%20Selection%20with%20the%20RScorer.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Causal%20Model%20Selection%20with%20the%20RScorer.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Double%20Machine%20Learning%20Examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Double%20Machine%20Learning%20Examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Scaling%20EconML%20using%20Ray.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Scaling%20EconML%20using%20Ray.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Choosing%20First%20Stage%20Models.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Choosing%20First%20Stage%20Models.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Policy%20Learning%20with%20Trees%20and%20Forests.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Policy%20Learning%20with%20Trees%20and%20Forests.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/ForestLearners%20Basic%20Example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/ForestLearners%20Basic%20Example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Causal%20Forest%20and%20Orthogonal%20Random%20Forest%20Examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Causal%20Forest%20and%20Orthogonal%20Random%20Forest%20Examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Interpretability%20with%20SHAP.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Interpretability%20with%20SHAP.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/OrthoIV%20and%20DRIV%20Examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/OrthoIV%20and%20DRIV%20Examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Generalized%20Random%20Forests.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Generalized%20Random%20Forests.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Doubly%20Robust%20Learner%20and%20Interpretability.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Doubly%20Robust%20Learner%20and%20Interpretability.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Metalearners%20Examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Metalearners%20Examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Treatment%20Featurization%20Examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Treatment%20Featurization%20Examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Dynamic%20Double%20Machine%20Learning%20Examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Dynamic%20Double%20Machine%20Learning%20Examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Deep%20IV%20Examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Deep%20IV%20Examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Weighted%20Double%20Machine%20Learning%20Examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Weighted%20Double%20Machine%20Learning%20Examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CATE%20validation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CATE%20validation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Recommendation%20AB%20Testing%20at%20An%20Online%20Travel%20Company.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Recommendation%20AB%20Testing%20at%20An%20Online%20Travel%20Company.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Using%20EconML%20to%20evaluate%20the%20treatment%20effect%20of%20training%20program%20-%20Lalonde%20dataset.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Using%20EconML%20to%20evaluate%20the%20treatment%20effect%20of%20training%20program%20-%20Lalonde%20dataset.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Multi-investment%20Attribution%20at%20A%20Software%20Company%20-%20EconML%20%2B%20DoWhy.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Multi-investment%20Attribution%20at%20A%20Software%20Company%20-%20EconML%20%2B%20DoWhy.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Customer%20Segmentation%20at%20An%20Online%20Media%20Company%20-%20EconML%20%2B%20DoWhy.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Customer%20Segmentation%20at%20An%20Online%20Media%20Company%20-%20EconML%20%2B%20DoWhy.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Long-Term%20Return-on-Investment%20via%20Short-Term%20Proxies.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Long-Term%20Return-on-Investment%20via%20Short-Term%20Proxies.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Customer%20Segmentation%20at%20An%20Online%20Media%20Company.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Customer%20Segmentation%20at%20An%20Online%20Media%20Company.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Recommendation%20AB%20Testing%20at%20An%20Online%20Travel%20Company%20-%20EconML%20%2B%20DoWhy.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Recommendation%20AB%20Testing%20at%20An%20Online%20Travel%20Company%20-%20EconML%20%2B%20DoWhy.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Multi-investment%20Attribution%20at%20A%20Software%20Company.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/CustomerScenarios/Case%20Study%20-%20Multi-investment%20Attribution%20at%20A%20Software%20Company.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/AutomatedML/Automated%20Machine%20Learning%20For%20EconML.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/AutomatedML/Automated%20Machine%20Learning%20For%20EconML.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Solutions/Causal%20Interpretation%20for%20Ames%20Housing%20Price.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Solutions/Causal%20Interpretation%20for%20Ames%20Housing%20Price.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Solutions/Causal%20Interpretation%20for%20Employee%20Attrition%20Dataset.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/Solutions/Causal%20Interpretation%20for%20Employee%20Attrition%20Dataset.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/post_processing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/post_processing.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/TA_DGP_analysis_Step_CATE.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/TA_DGP_analysis_Step_CATE.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/NLSYM_Semi_Synthetic_Linear.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/NLSYM_Semi_Synthetic_Linear.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/TA_DGP_analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/TA_DGP_analysis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/NLSYM_Semi_Synthetic_GBM.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/NLSYM_Semi_Synthetic_GBM.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/NLSYM_Linear.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/NLSYM_Linear.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/NLSYM_GBM.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dml_iv/NLSYM_GBM.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/high_dim_state_any_m_panel.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/high_dim_state_any_m_panel.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/high_dim_state_any_m_panel_hetero.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/high_dim_state_any_m_panel_hetero.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/postprocess_panel.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/postprocess_panel.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/postprocess_panel_hetero.ipynb"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/postprocess_panel_hetero.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 713
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/py-why/EconML/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "py-why/EconML"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/dynamic_dml/all_coverage.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/prototypes/orthogonal_forests/seq_map.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/dr_cate_tree.png"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/dr_policy_tree.png"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/summary_frame.png"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/population_summary.png"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/notebooks/images/summary.png"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/images/policy_tree.png"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "Install the latest release from [PyPI](https://pypi.org/project/econml/):\n```\npip install econml\n```\nTo install from source, see [For Developers](#for-developers) section below.\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9944903362984744,
      "result": {
        "original_header": "News",
        "type": "Text_excerpt",
        "value": "If you'd like to contribute to this project, see the [Help Wanted](#help-wanted) section below. \n**July 3, 2024:** Release v0.15.1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.15.1) \n<details><summary>Previous releases</summary> \n**February 12, 2024:** Release v0.15.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.15.0) \n**November 11, 2023:** Release v0.15.0b1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.15.0b1) \n**May 19, 2023:** Release v0.14.1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.14.1) \n**November 16, 2022:** Release v0.14.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.14.0) \n**June 17, 2022:** Release v0.13.1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.13.1) \n**January 31, 2022:** Release v0.13.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.13.0) \n**August 13, 2021:** Release v0.12.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.12.0) \n**August 5, 2021:** Release v0.12.0b6, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.12.0b6) \n**August 3, 2021:** Release v0.12.0b5, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.12.0b5) \n**July 9, 2021:** Release v0.12.0b4, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.12.0b4) \n**June 25, 2021:** Release v0.12.0b3, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.12.0b3) \n**June 18, 2021:** Release v0.12.0b2, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.12.0b2) \n**June 7, 2021:** Release v0.12.0b1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.12.0b1) \n**May 18, 2021:** Release v0.11.1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.11.1) \n**May 8, 2021:** Release v0.11.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.11.0) \n**March 22, 2021:** Release v0.10.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.10.0) \n**March 11, 2021:** Release v0.9.2, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.9.2) \n**March 3, 2021:** Release v0.9.1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.9.1) \n**February 20, 2021:** Release v0.9.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.9.0) \n**January 20, 2021:** Release v0.9.0b1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.9.0b1) \n**November 20, 2020:** Release v0.8.1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.8.1) \n**November 18, 2020:** Release v0.8.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.8.0) \n**September 4, 2020:** Release v0.8.0b1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.8.0b1) \n**March 6, 2020:** Release v0.7.0, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.7.0) \n**February 18, 2020:** Release v0.7.0b1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.7.0b1) \n**January 10, 2020:** Release v0.6.1, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.6.1) \n**December 6, 2019:** Release v0.6, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.6) \n**November 21, 2019:** Release v0.5, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.5).  \n**June 3, 2019:** Release v0.4, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.4).  \n**May 3, 2019:** Release v0.3, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.3). \n**April 10, 2019:** Release v0.2, see release notes [here](https://github.com/py-why/EconML/releases/tag/v0.2). \n**March 6, 2019:** Release v0.1, welcome to have a try and provide feedback. \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "For Developers",
        "type": "Text_excerpt",
        "value": "You can get started by cloning this repository. We use \n[setuptools](https://setuptools.readthedocs.io/en/latest/index.html) for building and distributing our package.\nWe rely on some recent features of setuptools, so make sure to upgrade to a recent version with\n`pip install setuptools --upgrade`.  Then from your local copy of the repository you can run `pip install -e .` to get started (but depending on what you're doing you might want to install with extras instead, like `pip install -e .[plt]` if you want to use matplotlib integration, or you can use  `pip install -e .[all]` to include all extras).\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Pre-commit hooks",
        "type": "Text_excerpt",
        "value": "We use the [pre-commit](https://pre-commit.com/) framework to enforce code style and run checks before every commit. To install the pre-commit hooks, make sure you have pre-commit installed (`pip install pre-commit`) and then run `pre-commit install` in the root of the repository. This will install the hooks and run them automatically before every commit. If you want to run the hooks manually, you can run `pre-commit run --all-files`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999957956218212,
      "result": {
        "original_header": "Release process",
        "type": "Text_excerpt",
        "value": "We use GitHub Actions to build and publish the package and documentation.  To create a new release, an admin should perform the following steps: \n1. Update the version number in `econml/_version.py` and add a mention of the new version in the news section of this file and commit the changes.\n2. Manually run the publish_package.yml workflow to build and publish the package to PyPI.\n3. Manually run the publish_docs.yml workflow to build and publish the documentation.\n4. Under https://github.com/py-why/EconML/releases, create a new release with a corresponding tag, and update the release notes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9178784977418577,
      "result": {
        "original_header": "Blogs and Publications",
        "type": "Text_excerpt",
        "value": "* May 2019: [Open Data Science Conference Workshop](https://odsc.com/speakers/machine-learning-estimation-of-heterogeneous-treatment-effect-the-microsoft-econml-library/)  \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.93013100072769,
      "result": {
        "type": "Text_excerpt",
        "value": "For detailed information about the package, consult the documentation at https://econml.azurewebsites.net/. \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/py-why/EconML/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "causal-inference, causality, econometrics, economics, machine-learning, treatment-effects"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "    MIT License\n\n    Copyright (c) PyWhy contributors. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n\n\nParts of this software, in particular code contained in the modules econml.tree and\neconml.grf contain files that are forks from the scikit-learn git repository, or code\nsnippets from that repository:\nhttps://github.com/scikit-learn/scikit-learn\npublished under the following License.\n\nBSD 3-Clause License\n\nCopyright (c) 2007-2020 The scikit-learn developers.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/doc/spec/img/pywhy-logo.png"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EconML"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "py-why"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 12398079,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2538500,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cython",
        "size": 201295,
        "type": "Programming_language",
        "value": "Cython"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 13353,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 3465,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1154,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://setuptools.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1905.10176.pdf"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1608.00060*](https://arxiv.org/abs/1608.00060), 2016.\n\nDudik, M., Erhan, D., Langford, J., & Li, L.\n**Doubly robust policy evaluation and optimization.**\n[*Statistical Science, 29(4), 485-511*](https://projecteuclid.org/journals/statistical-science/volume-29/issue-4/Doubly-Robust-Policy-Evaluation-and-Optimization/10.1214/14-STS500.full), 2014."
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1806.04823"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1905.10176"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1608.00060"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1901.09036.pdf"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2024-07-03T18:07:17Z",
        "date_published": "2024-07-04T19:00:22Z",
        "description": "This is a bugfix release which contains a number of small improvements to the 0.15.0 release.\r\n\r\n## What's Changed\r\n\r\n* Fix needs_fit logic for model selection with a fixed model by @kbattocchi in https://github.com/py-why/EconML/pull/855\r\n* CATE validation - uplift uniform confidence bands by @amarvenu in https://github.com/py-why/EconML/pull/840\r\n* Typo fixes by @alexmalins in https://github.com/py-why/EconML/pull/864\r\n* Fix `shap_values` compatibility with shap>=0.43.0 by adjusting `check_additivity` parameter handling for `TreeExplainer` by @jcreinhold in https://github.com/py-why/EconML/pull/872\r\n* Optimizing NormalInferenceResults confidence interval method speed by @gdaiha in https://github.com/py-why/EconML/pull/879\r\n* Enable scikit-learn 1.5 compatibility by @kbattocchi in https://github.com/py-why/EconML/pull/891\r\n* A number of improvements to our infrastructure (https://github.com/py-why/EconML/pull/861, https://github.com/py-why/EconML/pull/863, https://github.com/py-why/EconML/pull/867, https://github.com/py-why/EconML/pull/876, https://github.com/py-why/EconML/pull/880, https://github.com/py-why/EconML/pull/882)\r\n\r\n## New Contributors\r\n* @alexmalins made their first contribution in https://github.com/py-why/EconML/pull/864\r\n* @jcreinhold made their first contribution in https://github.com/py-why/EconML/pull/872\r\n* @gdaiha made their first contribution in https://github.com/py-why/EconML/pull/879\r\n\r\n**Full Changelog**: https://github.com/py-why/EconML/compare/v0.15.0...v0.15.1",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.15.1",
        "name": "v0.15.1",
        "release_id": 164057978,
        "tag": "v0.15.1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.15.1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/164057978",
        "value": "https://api.github.com/repos/py-why/EconML/releases/164057978",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.15.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2024-02-14T20:55:37Z",
        "date_published": "2024-02-27T17:42:09Z",
        "description": "This is a major update of the library, with several important improvements, as well as a number of bug-fixes and minor improvements.\r\n\r\n## What's Changed\r\n\r\n* Adds the ability to scale ortholearner training using Ray (by @v-shaal in https://github.com/py-why/EconML/pull/800)\r\n* Allows missing values in W and sometimes X (by @fverac in https://github.com/py-why/EconML/pull/791)\r\n* Enables federated estimation of linear models (by @kgao in https://github.com/py-why/EconML/pull/818)\r\n* Provides a CATE validation suite for discrete models (by @amarvenu in https://github.com/py-why/EconML/pull/777 and https://github.com/py-why/EconML/pull/836)\r\n* Enable model selection for first stage models (by @kbattocchi in https://github.com/py-why/EconML/pull/808 and https://github.com/py-why/EconML/pull/848)\r\n* Improve discreteness handling, allow binary outcomes by @fverac in https://github.com/py-why/EconML/pull/816\r\n\r\n## New Contributors\r\n* @star1327p made their first contribution in https://github.com/py-why/EconML/pull/713\r\n* @v-shaal made their first contribution in https://github.com/py-why/EconML/pull/800\r\n* @kgao made their first contribution in https://github.com/py-why/EconML/pull/818\r\n* @amarvenu made their first contribution in https://github.com/py-why/EconML/pull/777\r\n\r\n**Full Changelog**: https://github.com/py-why/EconML/compare/v0.14.1...v0.15.0",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.15.0",
        "name": "v0.15.0",
        "release_id": 143854126,
        "tag": "v0.15.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.15.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/143854126",
        "value": "https://api.github.com/repos/py-why/EconML/releases/143854126",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.15.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2023-11-11T22:23:34Z",
        "date_published": "2024-02-27T17:38:11Z",
        "description": "## What's Changed\r\n\r\nThis beta has many bug fixes and provides several big improvements:\r\n* Adds the ability to scale ortholearner training using Ray (by @v-shaal in https://github.com/py-why/EconML/pull/800)\r\n* Allows missing values in W and sometimes X (by @fverac in https://github.com/py-why/EconML/pull/791)\r\n* Enables federated estimation of linear models (by @kgao in https://github.com/py-why/EconML/pull/818)\r\n* Provides a CATE validation suite for discrete models (by @amarvenu in https://github.com/py-why/EconML/pull/777)\r\n* Enable model selection for first stage models (by @kbattocchi in https://github.com/py-why/EconML/pull/808)\r\n\r\n## New Contributors\r\n* @v-shaal made their first contribution in https://github.com/py-why/EconML/pull/800\r\n* @kgao made their first contribution in https://github.com/py-why/EconML/pull/818\r\n\r\n**Full Changelog**: https://github.com/py-why/EconML/compare/v0.14.1...v0.15.0b1",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.15.0b1",
        "name": "v0.15.0b1",
        "release_id": 143853548,
        "tag": "v0.15.0b1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.15.0b1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/143853548",
        "value": "https://api.github.com/repos/py-why/EconML/releases/143853548",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.15.0b1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fverac",
          "type": "User"
        },
        "date_created": "2023-05-19T19:46:27Z",
        "date_published": "2023-05-22T14:21:32Z",
        "description": "## What's Changed\r\n\r\n### Details\r\n\r\n#### Minor updates and bugfixes\r\n* Avoid returning defaultdict directly when calling `est.shap_values` @kbattocchi in https://github.com/py-why/EconML/pull/709\r\n* Refactor `DynamicDML` to remove incompatible method signatures by @kbattocchi in https://github.com/py-why/EconML/pull/717\r\n* Fix bug when using .`score` in _OrthoLearner subclasses by @kbattocchi in https://github.com/py-why/EconML/issues/760\r\n\r\n#### Package changes\r\n* Enable sklearn 1.2 by @00helloworld and @kbattocchi in https://github.com/py-why/EconML/pull/712\r\n* Enable compatibility with pandas 2.0 by @kbattocchi in https://github.com/py-why/EconML/pull/750\r\n* Fix numpy 1.24 compatibility by @kbattocchi in https://github.com/py-why/EconML/pull/750\r\n* Bump supported shap version limit by @kbattocchi in https://github.com/py-why/EconML/pull/750\r\n\r\n#### Build system changes\r\n* Enable GitHub Actions by @kbattocchi in https://github.com/py-why/EconML/pull/746\r\n* Use verbose pip install when debugging workflows by @kbattocchi in https://github.com/py-why/EconML/pull/746\r\n* Update developer documentation by @kbattocchi in https://github.com/py-why/EconML/pull/749\r\n\r\n#### Misc\r\n* Update copyrights and references to point to PyWhy by @kbattocchi in https://github.com/py-why/EconML/pull/749\r\n* Updated CI badge in README by @kbattocchi and @fverac https://github.com/py-why/EconML/pull/771\r\n\r\n**Full Changelog**: https://github.com/py-why/EconML/compare/v0.14.0...v0.14.1",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.14.1",
        "name": "v0.14.1",
        "release_id": 103652597,
        "tag": "v0.14.1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.14.1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/103652597",
        "value": "https://api.github.com/repos/py-why/EconML/releases/103652597",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.14.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2022-11-16T22:59:41Z",
        "date_published": "2022-11-16T23:04:48Z",
        "description": "## What's Changed\r\nThis release contains a major new feature, treatment featurization (#615), plus a number of bugfixes and minor improvements.\r\n\r\n**Breaking changes**: several deprecated features have now been removed, and DynamicDML has been moved to a new `econml.panel` package.\r\n\r\n### Details\r\n\r\n#### Major changes\r\n* treatment featurization by @fverac in https://github.com/microsoft/EconML/pull/615\r\n* Create panel subpackage by @kbattocchi in https://github.com/microsoft/EconML/pull/662\r\n* Remove deprecated functionality by @kbattocchi in https://github.com/microsoft/EconML/pull/663\r\n\r\n#### Minor updates and bugfixes\r\n* fix small typo by @Padarn in https://github.com/microsoft/EconML/pull/651\r\n* initial commit for aka.ms/econml doc migration by @fverac in https://github.com/microsoft/EconML/pull/640\r\n* Update README.md by @coreynoone in https://github.com/microsoft/EconML/pull/658\r\n* add usage examples in docs for backdoor and IV methods, add KernelDML to docs by @fverac in https://github.com/microsoft/EconML/pull/677\r\n* Update Policy Learning with Trees and Forests.ipynb by @OliverTseng in https://github.com/microsoft/EconML/pull/685\r\n\r\n#### Package changes\r\n* Remove dowhy as core dependency by @kbattocchi in https://github.com/microsoft/EconML/pull/661\r\n* add matplotlib version ceiling by @fverac in https://github.com/microsoft/EconML/pull/680\r\n\r\n#### Build system changes\r\n* update some pipeline images (macos-12, ubuntu20), fix pycodestyle E275 by @fverac in https://github.com/microsoft/EconML/pull/672\r\n\r\n## New Contributors\r\n* @Padarn made their first contribution in https://github.com/microsoft/EconML/pull/651\r\n* @coreynoone made their first contribution in https://github.com/microsoft/EconML/pull/658\r\n* @OliverTseng made their first contribution in https://github.com/microsoft/EconML/pull/685\r\n\r\n**Full Changelog**: https://github.com/microsoft/EconML/compare/v0.13.1...v0.14.0",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.14.0",
        "name": "v0.14.0",
        "release_id": 83325046,
        "tag": "v0.14.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.14.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/83325046",
        "value": "https://api.github.com/repos/py-why/EconML/releases/83325046",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.14.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fverac",
          "type": "User"
        },
        "date_created": "2022-07-08T01:59:14Z",
        "date_published": "2022-11-16T19:52:23Z",
        "description": "## What's Changed\r\nThis is a minor release which mainly fixes several minor bugs and compatibility issues with certain versions of other libraries such as dowhy and sklearn.\r\n\r\n### Details:\r\n#### Bug fixes\r\n* improve input processing for StatsModelsLinearRegression by @fverac in https://github.com/microsoft/EconML/pull/599\r\n* Fix RScorer circular import by @fverac in https://github.com/microsoft/EconML/pull/596\r\n* Docs - typos in dr.rst by @stanton119 in https://github.com/microsoft/EconML/pull/603\r\n* Fix small issues by @kbattocchi in https://github.com/microsoft/EconML/pull/617\r\n* Fix typo in motivation docs by @imatiach-msft in https://github.com/microsoft/EconML/pull/624\r\n* Another minor typo fix in docs by @imatiach-msft in https://github.com/microsoft/EconML/pull/625\r\n* Replace Boston housing analysis with Ames housing by @fverac in https://github.com/microsoft/EconML/pull/598\r\n* Several small fixes by @kbattocchi in https://github.com/microsoft/EconML/pull/629\r\n* Handle pandas categorical types for categorical columns in _causal_analysis.py by @gaugup in https://github.com/microsoft/EconML/pull/602\r\n* fix a typo by @zjyfdu in https://github.com/microsoft/EconML/pull/636\r\n* fix _preprocess_data to align with sklearn refactor by @fverac in https://github.com/microsoft/EconML/pull/638\r\n* Fix RScorer circular import by @fverac in https://github.com/microsoft/EconML/pull/596\r\n* Docs - typos in dr.rst by @stanton119 in https://github.com/microsoft/EconML/pull/603\r\n\r\n#### Compatibility changes\r\n* updates dependency dowhy to v0.7 by @xrowan in https://github.com/microsoft/EconML/pull/568\r\n* upgrade econml to latest version of shap by @imatiach-msft in https://github.com/microsoft/EconML/pull/595\r\n* Fix support for sklearn<1.0 by @kbattocchi in https://github.com/microsoft/EconML/pull/637\r\n\r\n#### Build system improvements\r\n* Profiling Unit Tests  by @xrowan in https://github.com/microsoft/EconML/pull/575\r\n* Disable serial tests on macOS by @kbattocchi in https://github.com/microsoft/EconML/pull/604\r\n* Adding Microsoft SECURITY.MD by @microsoft-github-policy-service in https://github.com/microsoft/EconML/pull/622\r\n\r\n\r\n**Full Changelog**: https://github.com/microsoft/EconML/compare/v0.13.0...v0.13.1",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.13.1",
        "name": "v0.13.1",
        "release_id": 71828903,
        "tag": "v0.13.1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.13.1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/71828903",
        "value": "https://api.github.com/repos/py-why/EconML/releases/71828903",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.13.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2022-02-02T20:53:20Z",
        "date_published": "2022-02-09T19:56:17Z",
        "description": "This release enables support for Python 3.9 and sklearn 1.0 and improves the documentation of the OrthoIV and DRIV classes.\r\n\r\nNote that for the moment, the Python 3.9 version of econml does not support the deepiv module because of conflicts with our required versions of tensorflow and keras; we hope to address this in a subsequent release.\r\n\r\n## What's Changed\r\n* Add notebook for DRIV by @heimengqi in https://github.com/microsoft/EconML/pull/518\r\n\r\n**Full Changelog**: https://github.com/microsoft/EconML/compare/v0.12.0...v0.13.0",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.13.0",
        "name": "v0.13.0",
        "release_id": 59168237,
        "tag": "v0.13.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.13.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/59168237",
        "value": "https://api.github.com/repos/py-why/EconML/releases/59168237",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.13.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-08-14T02:08:16Z",
        "date_published": "2021-08-14T21:22:49Z",
        "description": "This release contains several major new features:\r\n* Greatly improved functionality for estimating treatment effects with instrumental variables (#460)\r\n* A variant of DoubleML for use on dynamic data (#446)\r\n* A new class for assessing the causal contributions of different features to an outcome, conditional on the other features (this is spread out over a number of PRs)\r\n\r\nThere have been a few breaking changes:\r\n* Alpha values for confidence intervals now always default to 0.05; previously some alphas defaulted to 0.1 instead (#482)\r\n* The deprecated ability to pass X, W, and Z to some `fit` and `score` methods by position has been removed (#482)\r\n\r\nThere have also been many bug fixes in this release; we'd particularly like to highlight:\r\n* Default values of alpha are now passed correctly through results classes (#476, thanks @mtanghu!)\r\n* Prevent NaN outputs from GRF in certain corner cases (#480, thanks @arose13!)  \r\n\r\n",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.12.0",
        "name": "v0.12.0",
        "release_id": 47858259,
        "tag": "v0.12.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.12.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/47858259",
        "value": "https://api.github.com/repos/py-why/EconML/releases/47858259",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.12.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-08-06T04:38:03Z",
        "date_published": "2021-08-07T18:39:51Z",
        "description": "This is a beta preparing for our next major release, but does not contain any new user-facing features.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.12.0b6",
        "name": "v0.12.0b6",
        "release_id": 47480268,
        "tag": "v0.12.0b6",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.12.0b6",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/47480268",
        "value": "https://api.github.com/repos/py-why/EconML/releases/47480268",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.12.0b6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-08-03T18:24:44Z",
        "date_published": "2021-08-07T18:39:14Z",
        "description": "This is a beta preparing for our next major release, but does not contain any new user-facing features.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.12.0b5",
        "name": "v0.12.0b5",
        "release_id": 47480258,
        "tag": "v0.12.0b5",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.12.0b5",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/47480258",
        "value": "https://api.github.com/repos/py-why/EconML/releases/47480258",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.12.0b5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-07-10T18:57:21Z",
        "date_published": "2021-07-13T16:19:24Z",
        "description": "This is a beta preparing for our next major release, but does not contain any new user-facing features.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.12.0b4",
        "name": "v0.12.0b4",
        "release_id": 46134657,
        "tag": "v0.12.0b4",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.12.0b4",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/46134657",
        "value": "https://api.github.com/repos/py-why/EconML/releases/46134657",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.12.0b4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-06-26T16:20:02Z",
        "date_published": "2021-07-02T16:05:19Z",
        "description": "This is a beta preparing for our next major release, but does not contain any new user-facing features.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.12.0b3",
        "name": "v0.12.0b3",
        "release_id": 45633416,
        "tag": "v0.12.0b3",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.12.0b3",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/45633416",
        "value": "https://api.github.com/repos/py-why/EconML/releases/45633416",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.12.0b3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-06-19T12:55:30Z",
        "date_published": "2021-06-19T14:42:57Z",
        "description": "This is a beta preparing for our next major release, but does not contain any new user-facing features.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.12.0b2",
        "name": "v0.12.0b2",
        "release_id": 44902692,
        "tag": "v0.12.0b2",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.12.0b2",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/44902692",
        "value": "https://api.github.com/repos/py-why/EconML/releases/44902692",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.12.0b2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-06-08T04:11:48Z",
        "date_published": "2021-06-10T14:05:12Z",
        "description": "This is a beta preparing for our next major release, but does not contain any new user-facing features.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.12.0b1",
        "name": "v0.12.0b1",
        "release_id": 44417294,
        "tag": "v0.12.0b1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.12.0b1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/44417294",
        "value": "https://api.github.com/repos/py-why/EconML/releases/44417294",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.12.0b1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-05-19T06:12:32Z",
        "date_published": "2021-05-19T16:37:12Z",
        "description": "This is a minor bugfix release.  Changes include:\r\n* A fix to forest tuning (#462)\r\n* A new notebook (#466)\r\n* Miscellaneous minor fixes to documentation and code (#468) ",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.11.1",
        "name": "v0.11.1",
        "release_id": 43232130,
        "tag": "v0.11.1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.11.1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/43232130",
        "value": "https://api.github.com/repos/py-why/EconML/releases/43232130",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.11.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-05-09T01:24:43Z",
        "date_published": "2021-05-10T13:20:54Z",
        "description": "This is a minor release which:\r\n * Extends support for weighting samples to allow both fractional sample weights as well as frequency weights (#439)\r\n * Fixes some problems with the multi-investment case study and improved policy learners (#441)\r\n * Adds a notebook which uses EconML to estimate treatment effects using the dataset from LaLonde (#448)\r\n * Enables pandas dataframes to be used with CausalForestDML, including tuning (#447)\r\n * Fixes a few other miscellaneous issues (#458, #459)",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.11.0",
        "name": "v0.11.0",
        "release_id": 42704963,
        "tag": "v0.11.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.11.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/42704963",
        "value": "https://api.github.com/repos/py-why/EconML/releases/42704963",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.11.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-03-23T17:05:28Z",
        "date_published": "2021-03-24T00:36:35Z",
        "description": "This release contains a few new features:\r\n* Introduces new classes for policy learning (see [DRPolicyTree](https://econml.azurewebsites.net/_autosummary/econml.policy.DRPolicyTree.html) and [DRPolicyForest](https://econml.azurewebsites.net/_autosummary/econml.policy.DRPolicyForest.html) in our documentation) (#377)\r\n* Exposes the entire set of nuisance models and scores from training when using multiple monte carlo iterations for ortho-learner subclasses (previously only the final ones were kept) (#433)\r\n\r\nIt also fixes an interoperability issue with DoWhy (#434).  Note that this change also removes the deprecated `n_splits` argument to our estimators, which had already been renamed to `cv` for the past several releases.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.10.0",
        "name": "v0.10.0",
        "release_id": 40261605,
        "tag": "v0.10.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.10.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/40261605",
        "value": "https://api.github.com/repos/py-why/EconML/releases/40261605",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.10.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-03-12T00:51:18Z",
        "date_published": "2021-03-12T03:09:57Z",
        "description": "This is a minor release that adds the following features:\r\n* Enables easy hyperparameter tuning for CausalForestDML (#390)\r\n* Enables CausalForestDML to compute doubly-robust estimates of the ATE and ATT (#391)",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.9.2",
        "name": "v0.9.2",
        "release_id": 39693665,
        "tag": "v0.9.2",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.9.2",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/39693665",
        "value": "https://api.github.com/repos/py-why/EconML/releases/39693665",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.9.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-03-04T00:22:34Z",
        "date_published": "2021-03-04T03:12:41Z",
        "description": "This is primarily a bugfix release; it has the following improvements:\r\n* Reenable using scikit-learn > 0.22.0 but < 0.24.0 (#422)\r\n* Add more robustness to use of feature names with transformers with inconsitent APIs (#422)\r\n* Provide more precise ATE confidence intervals for linear final models (#418)\r\n* A few small miscellaneous improvements (#419)",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.9.1",
        "name": "v0.9.1",
        "release_id": 39250649,
        "tag": "v0.9.1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.9.1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/39250649",
        "value": "https://api.github.com/repos/py-why/EconML/releases/39250649",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.9.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-02-21T15:41:04Z",
        "date_published": "2021-02-22T18:21:02Z",
        "description": "This is release contains several major new features as well as a few important breaks in backwards compatibility.\r\n\r\n* Introduces Cython implementations of GRF and CausalForestDML, greatly improving the performance of these estimators (#341)\r\n\r\n* Enables first stage nuisance estimates to be cached, allowing refitting only the final model for ortho learner subclasses (#360)\r\n\r\n* Enables averaging nuisance estimates over several random splits, resulting in lower variance estimates for ortho learner subclasses (#360)\r\n\r\n* Adds an `RScorer` class for performing model selection over different CATE estimators (#361)\r\n\r\n* Enables getting SHAP feature importances for CATE estimates (#336, #369)\r\n\r\n* More tightly integrates with the `dowhy` library.  For instance, the causal graph used by an estimator can be viewed via `est.dowhy.view_model()` (#400)\r\n\r\n* Improves the display of summaries of inference objects (#407)\r\n\r\n* __Major Breaking Change__: restructured package organization, moving estimators to more consistent locations; for example, the `IntentToTreatDRIV` estimator is now found at `econml.iv.dr.IntentToTreatDRIV`. For the moment, we also support using the old package organization (e.g. `econml.ortho_iv.IntentToTreatDRIV`), but this is deprecated and will be removed in a subsequent release (#370)\r\n\r\n* __Breaking Change__: the `n_splits` initializer argument for ortho learner subclasses has been renamed to `cv` to better match sklearn. For the moment, it is still possible to use the name `n_splits`, but this will be removed in a future release (#362)\r\n\r\n* __Breaking Change__: the base version of the econml package no longer depends on tensorflow or keras (both of which are needed for using DeepIV), or matplotlib (which is needed for rendering tree interpreters).  If you need to install these, the first two can be gotten via the econml[tf] extra and matplotlib can be gotten by the econml[plt] extra, or all three libraries can be installed at once via the econml[all] extra (#413).\r\n\r\n* Many small fixes and improvements (#337, #358, #373, #363, #365, #328, #398)",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.9.0",
        "release_id": 38441570,
        "tag": "v0.9.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.9.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/38441570",
        "value": "https://api.github.com/repos/py-why/EconML/releases/38441570",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.9.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2021-01-20T08:18:21Z",
        "date_published": "2021-02-01T16:39:42Z",
        "description": "This is the beta for our next major release.  It contains several major new features, as well as a few important breaks in backwards compatibility.\r\n\r\n* Introduces Cython implementations of GRF and CausalForestDML, greatly improving the performance of these estimators (#341)\r\n* Enables first stage nuisance estimates to be cached, allowing refitting only the final model for ortho learner subclasses (#360)\r\n* Enables averaging nuisance estimates over several random splits, resulting in lower variance estimates for ortho learner subclasses (#360)\r\n* Adds an `RScorer` class for performing model selection over different CATE estimators (#361)\r\n* Enables getting SHAP feature importances for CATE estimates (#336, #369)\r\n* __Major Breaking Change:__ restructured package organization, moving estimators to more consistent locations; for example, the `IntentToTreatDRIV` estimator is now found at `econml.iv.dr.IntentToTreatDRIV`.  For the moment, we also support using the old package organization (e.g. `econml.ortho_iv.IntentToTreatDRIV`), but this is deprecated and will be removed in a subsequent release (#370)\r\n* __Breaking Change:__ the `n_splits` initializer argument for ortho learner subclasses has been renamed to `cv` to better match sklearn.  For the moment, it is still possible to use the name `n_splits`, but this will be removed in a future release (#362)\r\n\r\n* Many small fixes and improvements (#337, #358, #373, #363, #365, #328) ",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.9.0b1",
        "name": "v0.9.0b1",
        "release_id": 37188121,
        "tag": "v0.9.0b1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.9.0b1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/37188121",
        "value": "https://api.github.com/repos/py-why/EconML/releases/37188121",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.9.0b1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2020-11-20T17:32:54Z",
        "date_published": "2020-11-23T04:59:17Z",
        "description": "This is a bugfix release which addresses a few minor issues.  The most important issues addressed are:\r\n* Our previous release was incompatible with some commonly used sklearn releases (#324)\r\n* Calling fit repeatedly should now return the same results each time when classes are initialized with a fixed random state (#325)\r\n* Improvements to how scoring is performed for some classes in `econml.ortho_iv` (#325)\r\n",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.8.1",
        "name": "v0.8.1",
        "release_id": 34292893,
        "tag": "v0.8.1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.8.1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/34292893",
        "value": "https://api.github.com/repos/py-why/EconML/releases/34292893",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.8.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2020-11-18T22:09:13Z",
        "date_published": "2020-11-18T23:02:09Z",
        "description": "This is a major release containing several important improvements.\r\n* Support for python 3.8, tensorflow 2, and sklearn 0.22 and above (#210)\r\n* Major enhancements to bootstrap inference, allowing stratified bootstrap for discrete treatments, full inference support \\when using bootstrap (including things like `summary` to get nice results tables), and the ability to use pivot bootstrap (now the default) or bootstrap with a parametric normal assumption instead of percentile bootstrap (#236, #299)\r\n* Major performance improvements to our OrthoForest classes; in some of our tests the new code is ~10x faster (#316)\r\n* Added a CausalForest implementation comparable to grf (#316)\r\n* Added full inference support for our Forest classes using bootstrap of little bags (including things like `summary` to get a nice results table) (#316)\r\n* Added support for feature importance to ForestDML and ForestDRLearner, and sped them up substantially (#306)\r\n* Most estimators now support `inference='auto'` by default during fitting to use a fast recommended form of inference for that estimator (#307)\r\n* Added a robust linear model (`StatsModelsRLM`) that can be used as a final stage for DML while supporting inference (#307)\r\n* Enabled grouping during cross-fitting for DML and other OrthoLearner classes (#273)\r\n* New case study notebooks incorporating DoWhy (#255)\r\n* Many bug fixes and small enhancements, such as enabling model serialization (#258, #248, #318, #305, #283)\r\n\r\n**Upcoming breaking changes**\r\nWe have also taken this opportunity to deprecate some aspects of our existing code, and which we will remove completely in a future update to the library.  You will now see a warning if you use these features.\r\n* The DML estimators have been renamed to remove the `CateEstimator` suffix; for example, you can now use just `LinearDML` instead of `LinearDMLCateEstimator`.  You can continue to use the old names for now, but should move to the new names since the old ones will be removed in a future update.\r\n* The OrthoForest classes have also been renamed to make their names more similar to other classes in our package.  `DiscreteTreatmentOrthoForest` is now `DROrthoForest` and `ContinuousTreatmentOrthoForest` is now `DMLOrthoForest`.\r\n* Arguments to `fit` other than `Y` or `T` should now be passed by keyword rather than positionally; previously we had encountered cases where users were passing arguments in the wrong order, which we hope this change will prevent.  Again, the old usage will generate a warning and will be removed in a future update.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.8.0",
        "name": "v0.8.0",
        "release_id": 34145821,
        "tag": "v0.8.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.8.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/34145821",
        "value": "https://api.github.com/repos/py-why/EconML/releases/34145821",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.8.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2020-09-05T01:40:49Z",
        "date_published": "2020-10-21T15:17:15Z",
        "description": "This is a beta of our next major release, containing the following changes:\r\n\r\n* Support for python 3.8, tensorflow 2, and sklearn 0.22 and above (#210)\r\n* New case study notebooks incorporating DoWhy (#255)\r\n* Many bug fixes and small enhancements, such as enabling model serialization (#258, #248)",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.8.0b1",
        "name": "v0.8.0b1",
        "release_id": 32871413,
        "tag": "v0.8.0b1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.8.0b1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/32871413",
        "value": "https://api.github.com/repos/py-why/EconML/releases/32871413",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.8.0b1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2020-03-07T21:09:48Z",
        "date_published": "2020-03-09T14:20:12Z",
        "description": "This is a major release, with the following important changes:\r\n* Richer inference support, including hypothesis testing, p-values, and more when using linear models (#203)\r\n* New estimators supporting orthogonal approaches to IV, including DML IV and DR IV (#218)\r\n* Experimental support for using Azure Automated Machine Learning for model selection (#213)\r\n* Allows the use of bootstrap of little bags for inference with the OrthoForest (#214)\r\n* The CATE policy interpreter can now assign treatments to new units based on the learned policy (#228)\r\n* Added new Jupyter notebooks illustrating how to use the library for end-to-end scenarios (#230)\r\n* Several minor bugfixes (#220, #212, #223, #225, #226, #227, #232)",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.7.0",
        "name": "v0.7.0",
        "release_id": 24305856,
        "tag": "v0.7.0",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.7.0",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/24305856",
        "value": "https://api.github.com/repos/py-why/EconML/releases/24305856",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.7.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2020-02-18T17:29:39Z",
        "date_published": "2020-02-18T17:57:05Z",
        "description": "This is the beta for our next major release, with the following important changes:\r\n* Richer inference support, including hypothesis testing, p-values, and more when using linear models (#203)\r\n* New estimators supporting orthogonal approaches to IV, including DML IV and DR IV (#218)\r\n* Experimental support for using Azure Automated Machine Learning for model selection (#213)\r\n* The ability to use bootstrap of little bags for inference with the OrthoForest (#214)\r\n* Several minor bugfixes (#220, #212)",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.7.0b1",
        "name": "v0.7.0b1",
        "release_id": 23700190,
        "tag": "v0.7.0b1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.7.0b1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/23700190",
        "value": "https://api.github.com/repos/py-why/EconML/releases/23700190",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.7.0b1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2020-01-13T20:18:51Z",
        "date_published": "2020-01-13T21:02:12Z",
        "description": "This release fixes a few bugs:\r\n* Improves the selection of alphas when using debiased lasso (#211)\r\n* Fixes an issue with weight clipping in non-parametric DML (#208)\r\n* Enables DRLearner subclasses to handle Y arrays with shape (n,1) instead of just (n,) (#209) ",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.6.1",
        "name": "v0.6.1",
        "release_id": 22804481,
        "tag": "v0.6.1",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/22804481",
        "value": "https://api.github.com/repos/py-why/EconML/releases/22804481",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2019-12-07T07:23:33Z",
        "date_published": "2019-12-07T07:37:28Z",
        "description": "This release includes the following changes:\r\n* Adds a new double ML class with a non-parametric final stage (#170)\r\n* Adds an \"honest forest\" sklearn-compatible regressor, plus forest-based DML and DR CATE estimators based on it (#170)\r\n* Adds classes to support visual interpretation of CATE estimates and policies, along with notebooks demonstrating their use (#177)\r\n* Vastly improves the documentation (#197)\r\n* Fixes an issue where we used more memory than necessary in a few places (#199) ",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.6",
        "name": "v0.6",
        "release_id": 22041304,
        "tag": "v0.6",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/22041304",
        "value": "https://api.github.com/repos/py-why/EconML/releases/22041304",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2019-11-22T02:54:48Z",
        "date_published": "2019-11-22T02:55:19Z",
        "description": "This release includes many major changes.\r\n * Reorganized, expanded, and improved our documentation, including much better content around how to get started with the library (#159, #180) \r\n * Enabled the user to specify which inference method to use at `fit`-time.\r\n * Made several enhancements to our Double ML implementation (#75)\r\n    * Added support for sample weights\r\n    * Added support for `statsmodels`-like inference for confidence intervals\r\n * Introduced a more generic base class for orthogonal learners, enabling us to make our DML and DRLearner estimators more consistent with each other and setting the stage for future estimators like DMLIV (#132)\r\n * Made several improvements to the DRLearner (#137, #167)\r\n * Extended metalearners to handle multiple treatments (rather than only binary treatments) (#141)\r\n * Added a debiased lasso implementation to our utilities (#138), and used that as the basis for the sparse linear DML estimator (#162)\r\n * Enable automatic selection of appropriate models for DML (#172)\r\n * Separated the CATE intercept from the CATE coefficients on features for DML (#174)\r\n\r\nWe have also made many improvements around the ergonomics of the library (setting better defaults, making estimators APIs more consistent, etc.), and fixed many minor bugs.",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.5",
        "name": "v0.5",
        "release_id": 21667053,
        "tag": "v0.5",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/21667053",
        "value": "https://api.github.com/repos/py-why/EconML/releases/21667053",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kbattocchi",
          "type": "User"
        },
        "date_created": "2019-06-04T00:50:31Z",
        "date_published": "2019-06-04T01:34:29Z",
        "description": "This update provides several minor improvements:\r\n* Adds support for controls to the `NonparametricTwoStageLeastSquares` estimator (**this is a breaking change**)\r\n* Fixes a few minor problems with the Deep IV implementation\r\n    * Added support for treatments and outcomes that are vectors rather than 2-D arrays\r\n    * Fixes a bug in the the `effect` method\r\n* Enables the `BootstrapEstimator` to work in non-thread-based parallel contexts\r\n* Adds a prototype of the DMLIV estimator (this is not included in the PyPI package because it is a prototype)",
        "html_url": "https://github.com/py-why/EconML/releases/tag/v0.4",
        "name": "v0.4",
        "release_id": 17758327,
        "tag": "v0.4",
        "tarball_url": "https://api.github.com/repos/py-why/EconML/tarball/v0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/py-why/EconML/releases/17758327",
        "value": "https://api.github.com/repos/py-why/EconML/releases/17758327",
        "zipball_url": "https://api.github.com/repos/py-why/EconML/zipball/v0.4"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the tests",
        "parent_header": [
          "For Developers"
        ],
        "type": "Text_excerpt",
        "value": "This project uses [pytest](https://docs.pytest.org/) to run tests for continuous integration.  It is also possible to use `pytest` to run tests locally, but this isn't recommended because it will take an extremely long time and some tests are specific to certain environments or scenarios that have additional dependencies.  However, if you'd like to do this anyway, to run all tests locally after installing the package you can use `pip install pytest pytest-xdist pytest-cov coverage[toml]` (as well as `pip install jupyter jupyter-client nbconvert nbformat seaborn xgboost tqdm` for the dependencies to run all of our notebooks as tests) followed by `python -m pytest`.\n\nBecause running all tests can be very time-consuming, we recommend running only the relevant subset of tests when developing locally.  The easiest way to do this is to rely on `pytest`'s compatibility with `unittest`, so you can just run `python -m unittest econml.tests.test_module` to run all tests in a given module, or `python -m unittest econml.tests.test_module.TestClass` to run all tests in a given class.  You can also run `python -m unittest econml.tests.test_module.TestClass.test_method` to run a single test method.\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:03:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3766
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Finding issues to help with",
        "parent_header": [
          "For Developers"
        ],
        "type": "Text_excerpt",
        "value": "If you're looking to contribute to the project, we have a number of issues tagged with the [`up for grabs`](https://github.com/py-why/EconML/issues?q=is%3Aopen+is%3Aissue+label%3A%22up+for+grabs%22) and [`help wanted`](https://github.com/py-why/EconML/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) labels. \"Up for grabs\" issues are ones that we think that people without a lot of experience in our codebase may be able to help with, while \"Help wanted\" issues are valuable improvements to the library that our team currently does not have time to prioritize where we would greatly appreciate community-initiated PRs, but which might be more involved.\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Estimation Methods",
        "parent_header": [
          "Getting Started",
          "Usage Examples"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n  <summary>Double Machine Learning (aka RLearner) (click to expand)</summary>\n\n  * Linear final stage\n\n  ```Python\n  from econml.dml import LinearDML\n  from sklearn.linear_model import LassoCV\n  from econml.inference import BootstrapInference\n\n  est = LinearDML(model_y=LassoCV(), model_t=LassoCV())\n  ### Estimate with OLS confidence intervals\n  est.fit(Y, T, X=X, W=W) # W -> high-dimensional confounders, X -> features\n  treatment_effects = est.effect(X_test)\n  lb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals\n\n  ### Estimate with bootstrap confidence intervals\n  est.fit(Y, T, X=X, W=W, inference='bootstrap')  # with default bootstrap parameters\n  est.fit(Y, T, X=X, W=W, inference=BootstrapInference(n_bootstrap_samples=100))  # or customized\n  lb, ub = est.effect_interval(X_test, alpha=0.05) # Bootstrap confidence intervals\n  ```\n\n  * Sparse linear final stage\n\n  ```Python\n  from econml.dml import SparseLinearDML\n  from sklearn.linear_model import LassoCV\n\n  est = SparseLinearDML(model_y=LassoCV(), model_t=LassoCV())\n  est.fit(Y, T, X=X, W=W) # X -> high dimensional features\n  treatment_effects = est.effect(X_test)\n  lb, ub = est.effect_interval(X_test, alpha=0.05) # Confidence intervals via debiased lasso\n  ```\n\n  * Generic Machine Learning last stage\n  \n  ```Python\n  from econml.dml import NonParamDML\n  from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n\n  est = NonParamDML(model_y=RandomForestRegressor(),\n                    model_t=RandomForestClassifier(),\n                    model_final=RandomForestRegressor(),\n                    discrete_treatment=True)\n  est.fit(Y, T, X=X, W=W) \n  treatment_effects = est.effect(X_test)\n  ```\n\n</details>\n\n<details>\n  <summary>Dynamic Double Machine Learning (click to expand)</summary>\n\n  ```Python\n  from econml.panel.dml import DynamicDML\n  # Use defaults\n  est = DynamicDML()\n  # Or specify hyperparameters\n  est = DynamicDML(model_y=LassoCV(cv=3), \n                   model_t=LassoCV(cv=3), \n                   cv=3)\n  est.fit(Y, T, X=X, W=None, groups=groups, inference=\"auto\")\n  # Effects\n  treatment_effects = est.effect(X_test)\n  # Confidence intervals\n  lb, ub = est.effect_interval(X_test, alpha=0.05)\n  ```\n</details>\n\n<details>\n  <summary>Causal Forests (click to expand)</summary>\n\n  ```Python\n  from econml.dml import CausalForestDML\n  from sklearn.linear_model import LassoCV\n  # Use defaults\n  est = CausalForestDML()\n  # Or specify hyperparameters\n  est = CausalForestDML(criterion='het', n_estimators=500,       \n                        min_samples_leaf=10, \n                        max_depth=10, max_samples=0.5,\n                        discrete_treatment=False,\n                        model_t=LassoCV(), model_y=LassoCV())\n  est.fit(Y, T, X=X, W=W)\n  treatment_effects = est.effect(X_test)\n  # Confidence intervals via Bootstrap-of-Little-Bags for forests\n  lb, ub = est.effect_interval(X_test, alpha=0.05)\n  ```\n</details>\n\n\n<details>\n  <summary>Orthogonal Random Forests (click to expand)</summary>\n\n  ```Python\n  from econml.orf import DMLOrthoForest, DROrthoForest\n  from econml.sklearn_extensions.linear_model import WeightedLasso, WeightedLassoCV\n  # Use defaults\n  est = DMLOrthoForest()\n  est = DROrthoForest()\n  # Or specify hyperparameters\n  est = DMLOrthoForest(n_trees=500, min_leaf_size=10,\n                       max_depth=10, subsample_ratio=0.7,\n                       lambda_reg=0.01,\n                       discrete_treatment=False,\n                       model_T=WeightedLasso(alpha=0.01), model_Y=WeightedLasso(alpha=0.01),\n                       model_T_final=WeightedLassoCV(cv=3), model_Y_final=WeightedLassoCV(cv=3))\n  est.fit(Y, T, X=X, W=W)\n  treatment_effects = est.effect(X_test)\n  # Confidence intervals via Bootstrap-of-Little-Bags for forests\n  lb, ub = est.effect_interval(X_test, alpha=0.05)\n  ```\n</details>\n\n<details>\n\n<summary>Meta-Learners (click to expand)</summary>\n  \n  * XLearner\n\n  ```Python\n  from econml.metalearners import XLearner\n  from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\n\n  est = XLearner(models=GradientBoostingRegressor(),\n                propensity_model=GradientBoostingClassifier(),\n                cate_models=GradientBoostingRegressor())\n  est.fit(Y, T, X=np.hstack([X, W]))\n  treatment_effects = est.effect(np.hstack([X_test, W_test]))\n\n  # Fit with bootstrap confidence interval construction enabled\n  est.fit(Y, T, X=np.hstack([X, W]), inference='bootstrap')\n  treatment_effects = est.effect(np.hstack([X_test, W_test]))\n  lb, ub = est.effect_interval(np.hstack([X_test, W_test]), alpha=0.05) # Bootstrap CIs\n  ```\n  \n  * SLearner\n\n  ```Python\n  from econml.metalearners import SLearner\n  from sklearn.ensemble import GradientBoostingRegressor\n\n  est = SLearner(overall_model=GradientBoostingRegressor())\n  est.fit(Y, T, X=np.hstack([X, W]))\n  treatment_effects = est.effect(np.hstack([X_test, W_test]))\n  ```\n\n  * TLearner\n\n  ```Python\n  from econml.metalearners import TLearner\n  from sklearn.ensemble import GradientBoostingRegressor\n\n  est = TLearner(models=GradientBoostingRegressor())\n  est.fit(Y, T, X=np.hstack([X, W]))\n  treatment_effects = est.effect(np.hstack([X_test, W_test]))\n  ```\n</details>\n\n<details>\n<summary>Doubly Robust Learners (click to expand)\n</summary>\n\n* Linear final stage\n\n```Python\nfrom econml.dr import LinearDRLearner\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\n\nest = LinearDRLearner(model_propensity=GradientBoostingClassifier(),\n                      model_regression=GradientBoostingRegressor())\nest.fit(Y, T, X=X, W=W)\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05)\n```\n\n* Sparse linear final stage\n\n```Python\nfrom econml.dr import SparseLinearDRLearner\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\n\nest = SparseLinearDRLearner(model_propensity=GradientBoostingClassifier(),\n                            model_regression=GradientBoostingRegressor())\nest.fit(Y, T, X=X, W=W)\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05)\n```\n\n* Nonparametric final stage\n\n```Python\nfrom econml.dr import ForestDRLearner\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\n\nest = ForestDRLearner(model_propensity=GradientBoostingClassifier(),\n                      model_regression=GradientBoostingRegressor())\nest.fit(Y, T, X=X, W=W) \ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05)\n```\n</details>\n\n<details>\n<summary>Double Machine Learning with Instrumental Variables (click to expand)</summary>\n\n* Orthogonal instrumental variable learner\n\n```Python\nfrom econml.iv.dml import OrthoIV\n\nest = OrthoIV(projection=False, \n              discrete_treatment=True, \n              discrete_instrument=True)\nest.fit(Y, T, Z=Z, X=X, W=W)\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals\n```\n* Nonparametric double machine learning with instrumental variable\n\n```Python\nfrom econml.iv.dml import NonParamDMLIV\n\nest = NonParamDMLIV(projection=False, \n                    discrete_treatment=True, \n                    discrete_instrument=True)\nest.fit(Y, T, Z=Z, X=X, W=W) # no analytical confidence interval available\ntreatment_effects = est.effect(X_test)\n```\n</details>\n\n<details>\n<summary>Doubly Robust Machine Learning with Instrumental Variables (click to expand)</summary>\n\n* Linear final stage\n```Python\nfrom econml.iv.dr import LinearDRIV\n\nest = LinearDRIV(discrete_instrument=True, discrete_treatment=True)\nest.fit(Y, T, Z=Z, X=X, W=W)\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals\n```\n\n* Sparse linear final stage\n\n```Python\nfrom econml.iv.dr import SparseLinearDRIV\n\nest = SparseLinearDRIV(discrete_instrument=True, discrete_treatment=True)\nest.fit(Y, T, Z=Z, X=X, W=W)\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05) # Debiased lasso confidence intervals\n```\n\n* Nonparametric final stage\n```Python\nfrom econml.iv.dr import ForestDRIV\n\nest = ForestDRIV(discrete_instrument=True, discrete_treatment=True)\nest.fit(Y, T, Z=Z, X=X, W=W)\ntreatment_effects = est.effect(X_test)\n# Confidence intervals via Bootstrap-of-Little-Bags for forests\nlb, ub = est.effect_interval(X_test, alpha=0.05) \n```\n\n* Linear intent-to-treat (discrete instrument, discrete treatment)\n\n```Python\nfrom econml.iv.dr import LinearIntentToTreatDRIV\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\n\nest = LinearIntentToTreatDRIV(model_y_xw=GradientBoostingRegressor(),\n                              model_t_xwz=GradientBoostingClassifier(),\n                              flexible_model_effect=GradientBoostingRegressor())\nest.fit(Y, T, Z=Z, X=X, W=W)\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals\n```\n</details>\n\n<details>\n<summary>Deep Instrumental Variables (click to expand)</summary>\n\n```Python\nimport keras\nfrom econml.iv.nnet import DeepIV\n\ntreatment_model = keras.Sequential([keras.layers.Dense(128, activation='relu', input_shape=(2,)),\n                                    keras.layers.Dropout(0.17),\n                                    keras.layers.Dense(64, activation='relu'),\n                                    keras.layers.Dropout(0.17),\n                                    keras.layers.Dense(32, activation='relu'),\n                                    keras.layers.Dropout(0.17)])\nresponse_model = keras.Sequential([keras.layers.Dense(128, activation='relu', input_shape=(2,)),\n                                  keras.layers.Dropout(0.17),\n                                  keras.layers.Dense(64, activation='relu'),\n                                  keras.layers.Dropout(0.17),\n                                  keras.layers.Dense(32, activation='relu'),\n                                  keras.layers.Dropout(0.17),\n                                  keras.layers.Dense(1)])\nest = DeepIV(n_components=10, # Number of gaussians in the mixture density networks)\n             m=lambda z, x: treatment_model(keras.layers.concatenate([z, x])), # Treatment model\n             h=lambda t, x: response_model(keras.layers.concatenate([t, x])), # Response model\n             n_samples=1 # Number of samples used to estimate the response\n             )\nest.fit(Y, T, X=X, Z=Z) # Z -> instrumental variables\ntreatment_effects = est.effect(X_test)\n```\n</details>\n\nSee the <a href=\"#references\">References</a> section for more details.\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Interpretability",
        "parent_header": [
          "Getting Started",
          "Usage Examples"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n  <summary>Tree Interpreter of the CATE model (click to expand)</summary>\n  \n  ```Python\n  from econml.cate_interpreter import SingleTreeCateInterpreter\n  intrp = SingleTreeCateInterpreter(include_model_uncertainty=True, max_depth=2, min_samples_leaf=10)\n  # We interpret the CATE model's behavior based on the features used for heterogeneity\n  intrp.interpret(est, X)\n  # Plot the tree\n  plt.figure(figsize=(25, 5))\n  intrp.plot(feature_names=['A', 'B', 'C', 'D'], fontsize=12)\n  plt.show()\n  ```\n  ![image](notebooks/images/dr_cate_tree.png)\n  \n</details>\n\n<details>\n  <summary>Policy Interpreter of the CATE model (click to expand)</summary>\n\n  ```Python\n  from econml.cate_interpreter import SingleTreePolicyInterpreter\n  # We find a tree-based treatment policy based on the CATE model\n  intrp = SingleTreePolicyInterpreter(risk_level=0.05, max_depth=2, min_samples_leaf=1,min_impurity_decrease=.001)\n  intrp.interpret(est, X, sample_treatment_costs=0.2)\n  # Plot the tree\n  plt.figure(figsize=(25, 5))\n  intrp.plot(feature_names=['A', 'B', 'C', 'D'], fontsize=12)\n  plt.show()\n  ```\n  ![image](notebooks/images/dr_policy_tree.png)\n\n</details>\n\n<details>\n  <summary>SHAP values for the CATE model (click to expand)</summary>\n\n  ```Python\n  import shap\n  from econml.dml import CausalForestDML\n  est = CausalForestDML()\n  est.fit(Y, T, X=X, W=W)\n  shap_values = est.shap_values(X)\n  shap.summary_plot(shap_values['Y0']['T0'])\n  ```\n\n</details>\n\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Causal Model Selection and Cross-Validation",
        "parent_header": [
          "Getting Started",
          "Usage Examples"
        ],
        "type": "Text_excerpt",
        "value": "\n<details>\n  <summary>Causal model selection with the `RScorer` (click to expand)</summary>\n\n  ```Python\n  from econml.score import RScorer\n\n  # split data in train-validation\n  X_train, X_val, T_train, T_val, Y_train, Y_val = train_test_split(X, T, y, test_size=.4)\n\n  # define list of CATE estimators to select among\n  reg = lambda: RandomForestRegressor(min_samples_leaf=20)\n  clf = lambda: RandomForestClassifier(min_samples_leaf=20)\n  models = [('ldml', LinearDML(model_y=reg(), model_t=clf(), discrete_treatment=True,\n                               cv=3)),\n            ('xlearner', XLearner(models=reg(), cate_models=reg(), propensity_model=clf())),\n            ('dalearner', DomainAdaptationLearner(models=reg(), final_models=reg(), propensity_model=clf())),\n            ('slearner', SLearner(overall_model=reg())),\n            ('drlearner', DRLearner(model_propensity=clf(), model_regression=reg(),\n                                    model_final=reg(), cv=3)),\n            ('rlearner', NonParamDML(model_y=reg(), model_t=clf(), model_final=reg(),\n                                     discrete_treatment=True, cv=3)),\n            ('dml3dlasso', DML(model_y=reg(), model_t=clf(),\n                               model_final=LassoCV(cv=3, fit_intercept=False),\n                               discrete_treatment=True,\n                               featurizer=PolynomialFeatures(degree=3),\n                               cv=3))\n  ]\n\n  # fit cate models on train data\n  models = [(name, mdl.fit(Y_train, T_train, X=X_train)) for name, mdl in models]\n\n  # score cate models on validation data\n  scorer = RScorer(model_y=reg(), model_t=clf(),\n                   discrete_treatment=True, cv=3, mc_iters=2, mc_agg='median')\n  scorer.fit(Y_val, T_val, X=X_val)\n  rscore = [scorer.score(mdl) for _, mdl in models]\n  # select the best model\n  mdl, _ = scorer.best_model([mdl for _, mdl in models])\n  # create weighted ensemble model based on score performance\n  mdl, _ = scorer.ensemble([mdl for _, mdl in models])\n  ```\n\n</details>\n\n<details>\n  <summary>First Stage Model Selection (click to expand)</summary>\n\nEconML's cross-fitting estimators provide built-in functionality for first-stage model selection.  This support can work with existing sklearn model selection classes such as `LassoCV` or `GridSearchCV`, or you can pass a list of models to choose the best from among them when cross-fitting.\n\n```Python\nfrom econml.dml import LinearDML\nfrom sklearn import clone\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.model_selection import GridSearchCV\n\ncv_model = GridSearchCV(\n              estimator=RandomForestRegressor(),\n              param_grid={\n                  \"max_depth\": [3, None],\n                  \"n_estimators\": (10, 30, 50, 100, 200),\n                  \"max_features\": (2, 4, 6),\n              },\n              cv=5,\n           )\n\nest = LinearDML(model_y=cv_model, # use sklearn's grid search to select the best Y model \n                model_t=[RandomForestRegressor(), LassoCV()]) # use built-in model selection to choose between forest and linear models for T model\n```\n\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inference",
        "parent_header": [
          "Getting Started",
          "Usage Examples"
        ],
        "type": "Text_excerpt",
        "value": "Whenever inference is enabled, then one can get a more structure `InferenceResults` object with more elaborate inference information, such\nas p-values and z-statistics. When the CATE model is linear and parametric, then a `summary()` method is also enabled. For instance:\n\n  ```Python\n  from econml.dml import LinearDML\n  # Use defaults\n  est = LinearDML()\n  est.fit(Y, T, X=X, W=W)\n  # Get the effect inference summary, which includes the standard error, z test score, p value, and confidence interval given each sample X[i]\n  est.effect_inference(X_test).summary_frame(alpha=0.05, value=0, decimals=3)\n  # Get the population summary for the entire sample X\n  est.effect_inference(X_test).population_summary(alpha=0.1, value=0, decimals=3, tol=0.001)\n  #  Get the parameter inference summary for the final model\n  est.summary()\n  ```\n  \n  <details><summary>Example Output (click to expand)</summary>\n  \n  ```Python\n  # Get the effect inference summary, which includes the standard error, z test score, p value, and confidence interval given each sample X[i]\n  est.effect_inference(X_test).summary_frame(alpha=0.05, value=0, decimals=3)\n  ```\n  ![image](notebooks/images/summary_frame.png)\n  \n  ```Python\n  # Get the population summary for the entire sample X\n  est.effect_inference(X_test).population_summary(alpha=0.1, value=0, decimals=3, tol=0.001)\n  ```\n  ![image](notebooks/images/population_summary.png)\n  \n  ```Python\n  #  Get the parameter inference summary for the final model\n  est.summary()\n  ```\n  ![image](notebooks/images/summary.png)\n  \n  </details>\n  \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Policy Learning",
        "parent_header": [
          "Getting Started",
          "Usage Examples"
        ],
        "type": "Text_excerpt",
        "value": "You can also perform direct policy learning from observational data, using the doubly robust method for offline\npolicy learning. These methods directly predict a recommended treatment, without internally fitting an explicit\nmodel of the conditional average treatment effect.\n\n<details>\n  <summary>Doubly Robust Policy Learning (click to expand)</summary>\n\n```Python\nfrom econml.policy import DRPolicyTree, DRPolicyForest\nfrom sklearn.ensemble import RandomForestRegressor\n\n# fit a single binary decision tree policy\npolicy = DRPolicyTree(max_depth=1, min_impurity_decrease=0.01, honest=True)\npolicy.fit(y, T, X=X, W=W)\n# predict the recommended treatment\nrecommended_T = policy.predict(X)\n# plot the binary decision tree\nplt.figure(figsize=(10,5))\npolicy.plot()\n# get feature importances\nimportances = policy.feature_importances_\n\n# fit a binary decision forest\npolicy = DRPolicyForest(max_depth=1, min_impurity_decrease=0.01, honest=True)\npolicy.fit(y, T, X=X, W=W)\n# predict the recommended treatment\nrecommended_T = policy.predict(X)\n# plot the first tree in the ensemble\nplt.figure(figsize=(10,5))\npolicy.plot(0)\n# get feature importances\nimportances = policy.feature_importances_\n```\n\n\n  ![image](images/policy_tree.png)\n</details>\n\nTo see more complex examples, go to the [notebooks](https://github.com/py-why/EconML/tree/main/notebooks) section of the repository. For a more detailed description of the treatment effect estimation algorithms, see the EconML [documentation](https://econml.azurewebsites.net/).\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/EconML/main/README.md",
      "technique": "header_analysis"
    }
  ]
}