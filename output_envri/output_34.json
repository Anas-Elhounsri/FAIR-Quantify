{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool"
        ],
        "type": "Text_excerpt",
        "value": "* [1] [Elmachtoub, A. N., & Grigas, P. (2021). Smart \u201cpredict, then optimize\u201d. Management Science.](https://doi.org/10.1287/mnsc.2020.3922)\n* [2] [Mandi, J., Stuckey, P. J., & Guns, T. (2020). Smart predict-and-optimize for hard combinatorial optimization problems. In Proceedings of the AAAI Conference on Artificial Intelligence.](https://doi.org/10.1609/aaai.v34i02.5521)\n* [3] [Vlastelica, M., Paulus, A., Musil, V., Martius, G., & Rol\u00ednek, M. (2019). Differentiation of blackbox combinatorial solvers. arXiv preprint arXiv:1912.02175.](https://arxiv.org/abs/1912.02175)\n* [4] [Berthet, Q., Blondel, M., Teboul, O., Cuturi, M., Vert, J. P., & Bach, F. (2020). Learning with differentiable pertubed optimizers. Advances in neural information processing systems, 33, 9508-9519.](https://papers.nips.cc/paper/2020/hash/6bb56208f672af0dd65451f869fedfd9-Abstract.html)\n* [5] [Mulamba, M., Mandi, J., Diligenti, M., Lombardi, M., Bucarey, V., & Guns, T. (2021). Contrastive losses and solution caching for predict-and-optimize. Proceedings of the Thirtieth International Joint Conference on Artificial Intelligence.](https://www.ijcai.org/proceedings/2021/390)\n* [6] [Mandi, J., Bucarey, V., Mulamba, M., & Guns, T. (2022). Decision-focused learning: through the lens of learning to rank. Proceedings of the 39th International Conference on Machine Learning.](https://proceedings.mlr.press/v162/mandi22a.html)\n* [7] [Sahoo, S. S., Paulus, A., Vlastelica, M., Musil, V., Kuleshov, V., & Martius, G. (2022). Backpropagation through combinatorial algorithms: Identity with projection works. arXiv preprint arXiv:2205.15213.](https://arxiv.org/abs/2205.15213)\n* [8] [Niepert, M., Minervini, P., & Franceschi, L. (2021). Implicit MLE: backpropagating through discrete exponential family distributions. Advances in Neural Information Processing Systems, 34, 14567-14579.](https://proceedings.neurips.cc/paper_files/paper/2021/hash/7a430339c10c642c4b2251756fd1b484-Abstract.html)\n* [9] [Minervini, P., Franceschi, L., & Niepert, M. (2023, June). Adaptive perturbation-based gradient estimation for discrete latent variable models. In Proceedings of the AAAI Conference on Artificial Intelligence (Vol. 37, No. 8, pp. 9200-9208).](https://ojs.aaai.org/index.php/AAAI/article/view/26103)\n* [10] [Schutte, N., Postek, K., & Yorke-Smith, N. (2023). Robust Losses for Decision-Focused Learning. arXiv preprint arXiv:2310.04328.](https://arxiv.org/abs/2310.04328)\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Tang, Bo and Khalil, Elias B",
        "doi": "10.1007/s12532-024-00255-x",
        "format": "bibtex",
        "title": "PyEPO: a PyTorch-based end-to-end predict-then-optimize library for linear and integer programming",
        "type": "Text_excerpt",
        "value": "@article{tang2024,\n    publisher = {Springer},\n    month = {July},\n    year = {2024},\n    doi = {10.1007/s12532-024-00255-x},\n    issn = {1867-2957},\n    journal = {Mathematical Programming Computation},\n    author = {Tang, Bo and Khalil, Elias B},\n    title = {PyEPO: a PyTorch-based end-to-end predict-then-optimize library for linear and integer programming},\n}"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/khalil-research/PyEPO"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-12T09:19:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-25T10:56:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A PyTorch-based End-to-End Predict-then-Optimize Library for Linear and Integer Programming"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool"
        ],
        "type": "Text_excerpt",
        "value": "``PyEPO`` (PyTorch-based End-to-End Predict-then-Optimize Tool) is a Python-based, open-source software that supports modeling and solving predict-then-optimize problems with the linear objective function. The core capability of ``PyEPO`` is to build optimization models with [GurobiPy](https://www.gurobi.com/), [Pyomo](http://www.pyomo.org/), or any other solvers and algorithms, then embed the optimization model into an artificial neural network for the end-to-end training. For this purpose, ``PyEPO`` implements various methods as [PyTorch](https://pytorch.org/) autograd modules.\n\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9901437599955453,
      "result": {
        "original_header": "Publication",
        "type": "Text_excerpt",
        "value": "This repository is the official implementation of the paper:\n[PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Library for Linear and Integer Programming](https://link.springer.com/article/10.1007/s12532-024-00255-x) (Accepted to Mathematical Programming Computation (MPC)) \n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8394573638454058,
      "result": {
        "original_header": "Slides",
        "type": "Text_excerpt",
        "value": "There is a our recent tutotial at the ACC 2024 conference. You can view the slides of the talk [here](https://github.com/khalil-research/PyEPO/blob/main/slides/PyEPO.pdf).\n \n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9384755064009802,
      "result": {
        "original_header": "Experiments",
        "type": "Text_excerpt",
        "value": "To reproduce the experiments in the original paper, please use the code and follow the instructions in this [branch](https://github.com/khalil-research/PyEPO/tree/MPC). \n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.971217750820094,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "- Implement **SPO+** [[1]](https://doi.org/10.1287/mnsc.2020.3922), **DBB** [[3]](https://arxiv.org/abs/1912.02175), **NID** [[7]](https://arxiv.org/abs/2205.15213), **DPO** [[4]](https://papers.nips.cc/paper/2020/hash/6bb56208f672af0dd65451f869fedfd9-Abstract.html), **PFYL** [[4]](https://papers.nips.cc/paper/2020/hash/6bb56208f672af0dd65451f869fedfd9-Abstract.html), **NCE** [[5]](https://www.ijcai.org/proceedings/2021/390) and **LTR** [[6]](https://proceedings.mlr.press/v162/mandi22a.htm), **I-MLE** [[8]](https://proceedings.neurips.cc/paper_files/paper/2021/hash/7a430339c10c642c4b2251756fd1b484-Abstract.html), and **AI-MLE** [[9]](https://ojs.aaai.org/index.php/AAAI/article/view/26103).\n- Support [Gurobi](https://www.gurobi.com/), [COPT](https://shanshu.ai/copt), and [Pyomo](http://www.pyomo.org/) API\n- Support Parallel computing for optimization solver\n- Support solution caching [[5]](https://www.ijcai.org/proceedings/2021/390) to speed up training\n- Support kNN robust loss [[10]](https://arxiv.org/abs/2310.04328) to improve decision quality\n \n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9260596981018792,
      "result": {
        "original_header": "Sample Code",
        "type": "Text_excerpt",
        "value": "```python\n#!/usr/bin/env python\n# coding: utf-8\n\nimport gurobipy as gp\nfrom gurobipy import GRB\nimport numpy as np\nimport pyepo\nfrom pyepo.model.grb import optGrbModel\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\n\n\n# optimization model\nclass myModel(optGrbModel):\n    def __init__(self, weights):\n        self.weights = np.array(weights)\n        self.num_item = len(weights[0])\n        super().__init__()\n\n    def _getModel(self):\n        # ceate a model\n        m = gp.Model()\n        # varibles\n        x = m.addVars(self.num_item, name=\"x\", vtype=GRB.BINARY)\n        # model sense\n        m.modelSense = GRB.MAXIMIZE\n        # constraints\n        m.addConstr(gp.quicksum([self.weights[0,i] * x[i] for i in range(self.num_item)]) <= 7)\n        m.addConstr(gp.quicksum([self.weights[1,i] * x[i] for i in range(self.num_item)]) <= 8)\n        m.addConstr(gp.quicksum([self.weights[2,i] * x[i] for i in range(self.num_item)]) <= 9)\n        return m, x\n\n\n# prediction model\nclass LinearRegression(nn.Module):\n\n    def __init__(self):\n        super(LinearRegression, self).__init__()\n        self.linear = nn.Linear(num_feat, num_item)\n\n    def forward(self, x):\n        out = self.linear(x)\n        return out\n\n\nif __name__ == \"__main__\":\n\n    # generate data\n    num_data = 1000 # number of data\n    num_feat = 5 # size of feature\n    num_item = 10 # number of items\n    weights, x, c = pyepo.data.knapsack.genData(num_data, num_feat, num_item,\n                                                dim=3, deg=4, noise_width=0.5, seed=135)\n\n    # init optimization model\n    optmodel = myModel(weights)\n\n    # init prediction model\n    predmodel = LinearRegression()\n    # set optimizer\n    optimizer = torch.optim.Adam(predmodel.parameters(), lr=1e-2)\n    # init SPO+ loss\n    spop = pyepo.func.SPOPlus(optmodel, processes=1)\n\n    # build dataset\n    dataset = pyepo.data.dataset.optDataset(optmodel, x, c)\n    # get data loader\n    dataloader = DataLoader(dataset, batch_size=32, shuffle=True)\n\n    # training\n    num_epochs = 10\n    for epoch in range(num_epochs):\n        for data in dataloader:\n            x, c, w, z = data\n            # forward pass\n            cp = predmodel(x)\n            loss = spop(cp, c, w, z)\n            # backward pass\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n    # eval\n    regret = pyepo.metric.regret(predmodel, optmodel, dataloader)\n    print(\"Regret on Training Set: {:.4f}\".format(regret))\n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/khalil-research/PyEPO/tree/main/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool"
        ],
        "type": "Text_excerpt",
        "value": "The official ``PyEPO`` docs can be found at [https://khalil-research.github.io/PyEPO](https://khalil-research.github.io/PyEPO).\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/khalil-research/PyEPO/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/01%20Optimization%20Model.ipynb"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/01%20Optimization%20Model.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/07%20kNN%20Robust%20Losses.ipynb"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/07%20kNN%20Robust%20Losses.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/06%20Real-World%20Energy%20Scheduling.ipynb"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/06%20Real-World%20Energy%20Scheduling.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/03%20Training%20and%20Testing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/03%20Training%20and%20Testing.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/04%202D%20knapsack%20Solution%20Visualization.ipynb"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/04%202D%20knapsack%20Solution%20Visualization.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/05%20Warcraft%20Shortest%20Path.ipynb"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/05%20Warcraft%20Shortest%20Path.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/02%20Optimization%20Dataset.ipynb"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/notebooks/02%20Optimization%20Dataset.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/pkg/pyepo/model/copt/Example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/pkg/pyepo/model/copt/Example.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 57
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "khalil-research/PyEPO"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/images/learning_framework_e2e.png"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Clone and Install from this Repo",
        "parent_header": [
          "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "You can download ``PyEPO`` from our GitHub repository.\n\n```bash\ngit clone -b main --depth 1 https://github.com/khalil-research/PyEPO.git\n```\n\nAnd install it.\n\n```bash\npip install PyEPO/pkg/.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pip Install",
        "parent_header": [
          "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The package is now available on [PyPI](https://pypi.org/project/pyepo/) for installation. You can easily install `PyEPO` using pip by running the following command:\n\n```bash\npip install pyepo\n```\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda Install",
        "parent_header": [
          "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "`PyEPO` is also available on [Anaconda Cloud](https://anaconda.org/pyepo/pyepo). If you prefer to use conda for installation, you can install `PyEPO` with the following command:\n\n```bash\nconda install -c pyepo pyepo\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8695652530633241,
      "result": {
        "original_header": "Sample Code",
        "type": "Text_excerpt",
        "value": "```python\n#!/usr/bin/env python\n# coding: utf-8\n\nimport gurobipy as gp\nfrom gurobipy import GRB\nimport numpy as np\nimport pyepo\nfrom pyepo.model.grb import optGrbModel\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\n\n\n# optimization model\nclass myModel(optGrbModel):\n    def __init__(self, weights):\n        self.weights = np.array(weights)\n        self.num_item = len(weights[0])\n        super().__init__()\n\n    def _getModel(self):\n        # ceate a model\n        m = gp.Model()\n        # varibles\n        x = m.addVars(self.num_item, name=\"x\", vtype=GRB.BINARY)\n        # model sense\n        m.modelSense = GRB.MAXIMIZE\n        # constraints\n        m.addConstr(gp.quicksum([self.weights[0,i] * x[i] for i in range(self.num_item)]) <= 7)\n        m.addConstr(gp.quicksum([self.weights[1,i] * x[i] for i in range(self.num_item)]) <= 8)\n        m.addConstr(gp.quicksum([self.weights[2,i] * x[i] for i in range(self.num_item)]) <= 9)\n        return m, x\n\n\n# prediction model\nclass LinearRegression(nn.Module):\n\n    def __init__(self):\n        super(LinearRegression, self).__init__()\n        self.linear = nn.Linear(num_feat, num_item)\n\n    def forward(self, x):\n        out = self.linear(x)\n        return out\n\n\nif __name__ == \"__main__\":\n\n    # generate data\n    num_data = 1000 # number of data\n    num_feat = 5 # size of feature\n    num_item = 10 # number of items\n    weights, x, c = pyepo.data.knapsack.genData(num_data, num_feat, num_item,\n                                                dim=3, deg=4, noise_width=0.5, seed=135)\n\n    # init optimization model\n    optmodel = myModel(weights)\n\n    # init prediction model\n    predmodel = LinearRegression()\n    # set optimizer\n    optimizer = torch.optim.Adam(predmodel.parameters(), lr=1e-2)\n    # init SPO+ loss\n    spop = pyepo.func.SPOPlus(optmodel, processes=1)\n\n    # build dataset\n    dataset = pyepo.data.dataset.optDataset(optmodel, x, c)\n    # get data loader\n    dataloader = DataLoader(dataset, batch_size=32, shuffle=True)\n\n    # training\n    num_epochs = 10\n    for epoch in range(num_epochs):\n        for data in dataloader:\n            x, c, w, z = data\n            # forward pass\n            cp = predmodel(x)\n            loss = spop(cp, c, w, z)\n            # backward pass\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n    # eval\n    regret = pyepo.metric.regret(predmodel, optmodel, dataloader)\n    print(\"Regret on Training Set: {:.4f}\".format(regret))\n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/images/logo1.png"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyEPO"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "khalil-research"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 5650575,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 134085,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pathos.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1912.02175"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2310.04328"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2205.15213.](https://arxiv.org/abs/2205.15213)\n* [8] [Niepert, M., Minervini, P., & Franceschi, L. (2021). Implicit MLE: backpropagating through discrete exponential family distributions. Advances in Neural Information Processing Systems, 34, 14567-14579.](https://proceedings.neurips.cc/paper_files/paper/2021/hash/7a430339c10c642c4b2251756fd1b484-Abstract.html)\n* [9] [Minervini, P., Franceschi, L., & Niepert, M. (2023, June). Adaptive perturbation-based gradient estimation for discrete latent variable models. In Proceedings of the AAAI Conference on Artificial Intelligence (Vol. 37, No. 8, pp. 9200-9208).](https://ojs.aaai.org/index.php/AAAI/article/view/26103)\n* [10] [Schutte, N., Postek, K., & Yorke-Smith, N. (2023). Robust Losses for Decision-Focused Learning. arXiv preprint https://arxiv.org/abs/2310.04328.](https://arxiv.org/abs/2310.04328)"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2205.15213"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1912.02175.](https://arxiv.org/abs/1912.02175)\n* [4] [Berthet, Q., Blondel, M., Teboul, O., Cuturi, M., Vert, J. P., & Bach, F. (2020). Learning with differentiable pertubed optimizers. Advances in neural information processing systems, 33, 9508-9519.](https://papers.nips.cc/paper/2020/hash/6bb56208f672af0dd65451f869fedfd9-Abstract.html)\n* [5] [Mulamba, M., Mandi, J., Diligenti, M., Lombardi, M., Bucarey, V., & Guns, T. (2021). Contrastive losses and solution caching for predict-and-optimize. Proceedings of the Thirtieth International Joint Conference on Artificial Intelligence.](https://www.ijcai.org/proceedings/2021/390)\n* [6] [Mandi, J., Bucarey, V., Mulamba, M., & Guns, T. (2022). Decision-focused learning: through the lens of learning to rank. Proceedings of the 39th International Conference on Machine Learning.](https://proceedings.mlr.press/v162/mandi22a.html)\n* [7] [Sahoo, S. S., Paulus, A., Vlastelica, M., Musil, V., Kuleshov, V., & Martius, G. (2022). Backpropagation through combinatorial algorithms: Identity with projection works. arXiv preprint https://arxiv.org/abs/2205.15213.](https://arxiv.org/abs/2205.15213)\n* [8] [Niepert, M., Minervini, P., & Franceschi, L. (2021). Implicit MLE: backpropagating through discrete exponential family distributions. Advances in Neural Information Processing Systems, 34, 14567-14579.](https://proceedings.neurips.cc/paper_files/paper/2021/hash/7a430339c10c642c4b2251756fd1b484-Abstract.html)\n* [9] [Minervini, P., Franceschi, L., & Niepert, M. (2023, June). Adaptive perturbation-based gradient estimation for discrete latent variable models. In Proceedings of the AAAI Conference on Artificial Intelligence (Vol. 37, No. 8, pp. 9200-9208).](https://ojs.aaai.org/index.php/AAAI/article/view/26103)\n* [10] [Schutte, N., Postek, K., & Yorke-Smith, N. (2023). Robust Losses for Decision-Focused Learning. arXiv preprint https://arxiv.org/abs/2310.04328.](https://arxiv.org/abs/2310.04328)"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2310.04328.](https://arxiv.org/abs/2310.04328)"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2024-06-11T01:11:14Z",
        "date_published": "2024-06-11T01:22:55Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\n###  :tada: We're happy to announce the PyEPO  0.3.9 release. :tada:\r\n\r\nWe're thrilled to bring you an exciting new feature in this release:\r\n\r\nWe are excited to announce the addition of a new module, optDatasetKNN, thanks to @NoahJSchutte. This module is designed for implementing k-nearest neighbors (kNN) robust loss in decision-focused learning. The implementation introduces a new class, `optDatasetKNN` in `dataset.py` with the parameters *k* and *weight*.\r\n\r\nThis feature is based on the paper [Robust Losses for Decision-Focused Learning](https://arxiv.org/abs/2310.04328) by Noah Schutte, which has been accepted at IJCAI. You can explore this feature in our [Google Colab tutorial](https://colab.research.google.com/github/khalil-research/PyEPO/blob/main/notebooks/06%20kNN%20Robust%20Losses.ipynb) for hands-on guidance.\r\n\r\nWe're eager for you to test these out and share your feedback with us. As always, thank you for being a part of our growing community!",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.3.9",
        "name": "v0.3.9",
        "release_id": 159769027,
        "tag": "v0.3.9",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.3.9",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/159769027",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/159769027",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.3.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2024-05-20T21:23:51Z",
        "date_published": "2024-05-20T21:31:19Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\n###  :tada: We're happy to announce the PyEPO  0.3.8a release. :tada:\r\n\r\nWe fixed a bug for `portfolio.py` while using multi-processor.",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.3.8a",
        "name": "v0.3.8a",
        "release_id": 156587718,
        "tag": "v0.3.8a",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.3.8a",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/156587718",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/156587718",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.3.8a"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2024-04-24T19:56:10Z",
        "date_published": "2024-04-24T20:56:31Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\n###  :tada: We're happy to announce the PyEPO  0.3.8 release. :tada:\r\n\r\nWe're thrilled to bring you some exciting new features in this release:\r\n\r\nWe add a data generator `pyepo.data.portfolio.genData` for portfolio optimization and the corresponding Gurobi model `pyepo.model.grb.portfolioModel`. See details in our docs for [data](https://khalil-research.github.io/PyEPO/build/html/content/examples/data.html#portfolio) and [optimization model](https://khalil-research.github.io/PyEPO/build/html/content/examples/model.html#portfolio).\r\n\r\nThis synthetic dataset comes from [Smart \u201cPredict, then Optimize\u201d](https://pubsonline.informs.org/doi/abs/10.1287/mnsc.2020.3922)  with detailed implementation guidelines provided in Appendix-D of the [supplemental material](https://pubsonline.informs.org/doi/suppl/10.1287/mnsc.2020.3922/suppl_file/mnsc.2020.3922.sm2.pdf).\r\n\r\nAdditionally, we have addressed several minor bugs to ensure a smoother user experience.\r\n\r\nWe're eager for you to test these out and share your feedback with us. As always, thank you for being a part of our growing community!",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.3.8",
        "name": "v0.3.8",
        "release_id": 152698113,
        "tag": "v0.3.8",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.3.8",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/152698113",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/152698113",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.3.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2024-04-19T04:53:17Z",
        "date_published": "2024-04-19T05:03:10Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\n###  :tada: We're happy to announce the PyEPO  0.3.7 release. :tada:\r\n\r\nWe're thrilled to bring you some exciting new features in this release:\r\n\r\nWe add an autograd module `pyepo.func.adaptiveImplicitMLE`,  which uses the perturb-and-MAP framework and adaptively chooses the interpolation step size. This module samples noise perturbation from a Sum-of-Gamma distribution, subsequently interpolating the loss function for a more precise finite difference approximation.  There is the corresponding paper [Adaptive Perturbation-Based Gradient Estimation for Discrete Latent Variable Models](https://ojs.aaai.org/index.php/AAAI/article/view/26103). See details in our [docs](https://khalil-research.github.io/PyEPO/build/html/content/examples/function.html#adaptive-implicit-maximum-likelihood-estimator-ai-mle).\r\n\r\nWe're eager for you to test these out and share your feedback with us. As always, thank you for being a part of our growing community!",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.3.7",
        "name": "v0.3.7",
        "release_id": 151861277,
        "tag": "v0.3.7",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.3.7",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/151861277",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/151861277",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.3.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2024-02-14T03:58:37Z",
        "date_published": "2024-02-14T03:59:27Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\n###  :tada: We're happy to announce the PyEPO 0.3.6 release on PyPI. :tada:\r\n\r\nThe package is now available on [PyPI](https://pypi.org/project/pyepo/) for installation. You can easily install `PyEPO` using pip by running the following command:\r\n\r\n```bash\r\npip install pyepo\r\n```",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.3.6",
        "name": "v0.3.6",
        "release_id": 141918032,
        "tag": "v0.3.6",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.3.6",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/141918032",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/141918032",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.3.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2023-10-21T04:54:39Z",
        "date_published": "2023-10-21T16:48:42Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\n###  :tada: We're happy to announce the PyEPO  0.3.5 release. :tada:\r\n\r\nWe're thrilled to bring you some exciting new features in this release:\r\n\r\n- We add an autograd module `pyepo.func.implicitMLE`,  which uses the perturb-and-MAP framework. This module samples noise perturbation from a Sum-of-Gamma distribution, subsequently interpolating the loss function for a more precise finite difference approximation.  There is the corresponding paper [Implicit MLE: Backpropagating Through Discrete Exponential Family Distributions](https://proceedings.neurips.cc/paper_files/paper/2021/hash/7a430339c10c642c4b2251756fd1b484-Abstract.html). See details in our [docs](https://khalil-research.github.io/PyEPO/build/html/content/examples/function.html#implicit-maximum-likelihood-estimator-i-mle).\r\n- PyEPO is now compatible with [COPT](https://shanshu.ai/copt) (Cardinal Optimizer) API, one of the fastest solvers for various optimization problems.\r\n\r\nWe're eager for you to test these out and share your feedback with us. As always, thank you for being a part of our growing community!",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.3.5",
        "name": "v0.3.5",
        "release_id": 126120956,
        "tag": "v0.3.5",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.3.5",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/126120956",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/126120956",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.3.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2023-07-17T06:40:59Z",
        "date_published": "2023-07-17T06:43:23Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\nWe're happy to announce the 0.3.3 release.\r\n\r\nWe fix the sign bug of `pyepo.func.NCE`, and add modules `pyepo.func.contrastiveMAP` and `pyepo.func.negativeIdentity`.  See details in our [docs](https://khalil-research.github.io/PyEPO/build/html/content/examples/function.html#noise-contrastive-estimation-nce).\r\n\r\nThere are the corresponding papers [Contrastive losses and solution caching for predict-and-optimize](https://www.ijcai.org/proceedings/2021/390) and [Backpropagation through combinatorial algorithms: Identity with projection works](https://arxiv.org/abs/2205.15213).",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.3.3",
        "name": "v0.3.3",
        "release_id": 112444903,
        "tag": "v0.3.3",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/112444903",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/112444903",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2023-07-08T07:45:42Z",
        "date_published": "2023-07-10T07:47:44Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\nWe're happy to announce the 0.3.0 release.\r\n\r\nThank @ijskar to add new end-to-end predict-then-optimize methods: noise contrastive estimation and learning to rank. We add modules `pyepo.func.NCE`,  `pyepo.func.pointwiseLTR`, `pyepo.func.pairwiseLTR` and `pyepo.func.listwiseLTR`. See details in our [docs](https://khalil-research.github.io/PyEPO/build/html/content/examples/function.html#noise-contrastive-estimation-nce).\r\n\r\nThere are the corresponding papers [Contrastive losses and solution caching for predict-and-optimize](https://www.ijcai.org/proceedings/2021/390) and [Decision-focused learning: through the lens of learning to rank](https://proceedings.mlr.press/v162/mandi22a.html).",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.3.0",
        "name": "v0.3.0",
        "release_id": 111589048,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/111589048",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/111589048",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2023-03-15T04:39:16Z",
        "date_published": "2023-03-15T04:49:36Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\nWe're happy to announce the 0.2.4 release.\r\n\r\nThis new version includes several bug fixes and improvements that should enhance the stability and usability of the package.",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.2.4",
        "name": "v0.2.4",
        "release_id": 95649788,
        "tag": "v0.2.4",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.2.4",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/95649788",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/95649788",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.2.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2022-10-06T22:51:17Z",
        "date_published": "2022-10-06T23:15:48Z",
        "description": "<p align=\"center\"><img width=\"30%\" src=\"images/logo1.png\" /></p>\r\n\r\nWe're happy to announce the 0.2.0 release.\r\n\r\nWe add two end-to-end predict-then-optimize methods with stochastical perturbation: Differentiable Perturbed Optimizers and Fenchel-Young loss with Perturbation into our package \"PyEPO.\"\r\n\r\nPeople now are allowed to use PyTorch module `pyepo.func.perturbedOpt` and `pyepo.func.perturbedFenchelYoung`. See details in our [docs](https://khalil-research.github.io/PyEPO/build/html/content/examples/function.html#differentiable-perturbed-optimizer-dpo).\r\n\r\nBoth approaches come from Google Research's awesome project [Differentiable Optimizers with Perturbations in Tensorflow](https://github.com/google-research/google-research/tree/master/perturbations), and there is the corresponding paper [Learning with differentiable perturbed optimizers](https://papers.nips.cc/paper/2020/hash/6bb56208f672af0dd65451f869fedfd9-Abstract.html).",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.2.0",
        "name": "v0.2.0",
        "release_id": 79218163,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/79218163",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/79218163",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LucasBoTang",
          "type": "User"
        },
        "date_created": "2022-09-30T04:40:24Z",
        "date_published": "2022-10-05T17:30:49Z",
        "description": "We're happy to announce the 0.1.0 release.\r\nIt's the first release version of \"PyEPO\".\r\n",
        "html_url": "https://github.com/khalil-research/PyEPO/releases/tag/v0.1.0",
        "name": "Initial Release",
        "release_id": 79083493,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/khalil-research/PyEPO/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/khalil-research/PyEPO/releases/79083493",
        "value": "https://api.github.com/repos/khalil-research/PyEPO/releases/79083493",
        "zipball_url": "https://api.github.com/repos/khalil-research/PyEPO/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool"
        ],
        "type": "Text_excerpt",
        "value": "* [NumPy](https://numpy.org/)\n* [SciPy](https://scipy.org/)\n* [Pathos](https://pathos.readthedocs.io/)\n* [tqdm](https://tqdm.github.io/)\n* [Pyomo](http://www.pyomo.org/)\n* [Gurobi](https://www.gurobi.com/)\n* [Scikit Learn](https://scikit-learn.org/)\n* [PyTorch](http://pytorch.org/)\n\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:01:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 435
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "parent_header": [
          "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Tool"
        ],
        "type": "Text_excerpt",
        "value": "- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/khalil-research/PyEPO/blob/main/notebooks/01%20Optimization%20Model.ipynb)**01 Optimization Model:** Build up optimization solver\n- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/khalil-research/PyEPO/blob/main/notebooks/02%20Optimization%20Dataset.ipynb)**02 Optimization Dataset:** Generate synthetic data and use optDataset\n- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/khalil-research/PyEPO/blob/main/notebooks/03%20Training%20and%20Testing.ipynb)**03 Training and Testing:** Train and test different approaches\n- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/khalil-research/PyEPO/blob/main/notebooks/04%202D%20knapsack%20Solution%20Visualization.ipynb)**04 2D knapsack Solution Visualization:** Visualize solutions for knapsack problem\n- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/khalil-research/PyEPO/blob/main/notebooks/05%20Warcraft%20Shortest%20Path.ipynb)**05 Warcraft Shortest Path:** Use the Warcraft terrains dateset to train shortest path\n- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/khalil-research/PyEPO/blob/main/notebooks/06%20Real-World%20Energy%20Scheduling.ipynb)**06 Real-World Energy Scheduling:** Apply PyEPO to real energy data\n- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/khalil-research/PyEPO/blob/main/notebooks/07%20kNN%20Robust%20Losses.ipynb)**07 kNN Robust Losses:** Use the optDatasetKNN for robust losses\n\n"
      },
      "source": "https://raw.githubusercontent.com/khalil-research/PyEPO/main/README.md",
      "technique": "header_analysis"
    }
  ]
}