{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UCL/rsd-engineeringcourse"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing to this repository",
        "type": "Text_excerpt",
        "value": "This repository contains the course notes as Jupyter notebooks converted into `py:percent` format. This allows to edit the files as plain text as well as jupyter notebooks. To edit them as jupyter notebooks you'll need to have installed jupytext and open the `ipynb.py` files as notebooks via right-click and select \"open with\" and \"notebook\" on the Jupyter file browser.\n\n\u26a0 Do not run `make` locally on your computer! \u26a0 \n\nIt will produce side effects on your global git configuration!\nInstead, follow the instructions below.\n"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing it locally",
        "parent_header": [
          "Contributing to this repository"
        ],
        "type": "Text_excerpt",
        "value": "The site is built using gh-actions. If you'd like to test the actions locally,\nyou can run the actions using [`act`](https://github.com/nektos/act) command\ntool. By default this will run the action in a copy of the repository and you\nwon't be able to inspect the steps that happened. If you'd like to keep the\noutput in the current directory, use the `-b` (bind) flag.\n\n```bash\n$ act -b\n[Build website/Build-website] \ud83d\ude80  Start image=catthehacker/ubuntu:act-latest\n[Build website/Build-website]   \ud83d\udc33  docker run image=catthehacker/ubuntu:act-latest platform= entrypoint=[\"/usr/bin/tail\" \"-f\" \"/dev/null\"] cmd=[]\n[Build website/Build-website] \u2b50  Run actions/checkout@v2\n[Build website/Build-website]   \u2705  Success - actions/checkout@v2\n[Build website/Build-website] \u2b50  Run actions/cache@v2\nINFO[0000]   \u2601  git clone 'https://github.com/actions/cache' # ref=v2 \n[Build website/Build-website]   \u2705  Success - actions/cache@v2\n[Build website/Build-website] \u2b50  Run Install TeXLive\nINFO[0000]   \u2601  git clone 'https://github.com/DanySK/setup-texlive-action' # ref=0.1.1 \n[Build website/Build-website]   \u2705  Success - Install TeXLive\n[Build website/Build-website] \u2b50  Run Setup Python\nINFO[0001]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2 \n[Build website/Build-website]   \u2705  Success - Setup Python\n[Build website/Build-website] \u2b50  Run Install dependencies\nINFO[0001]   \u2601  git clone 'https://github.com/py-actions/py-dependency-install' # ref=v2 \n[Build website/Build-website]   \u2705  Success - Install dependencies\n[Build website/Build-website] \u2b50  Run Building notes\n[Build website/Build-website]   \u2705  Success - Building notes\n[Build website/Build-website] \u2b50  Run Builds website\nINFO[0001]   \u2601  git clone 'https://github.com/helaili/jekyll-action' # ref=v2 \n[Build website/Build-website]   \ud83d\udc33  docker run image=act-helaili-jekyll-action-v2:latest platform= entrypoint=[] cmd=[]\n[Build website/Build-website]   \u2705  Success - Builds website\n```\n\nAlternatively, if you want to only run the jekyll build step once you've run the whole action, you can use the official jekyll containers with:\n\n```bash\n$ docker run --rm --volume=\"$PWD:/srv/jekyll\" --volume=\"$PWD/vendor/bundle:/usr/local/bundle\" -p 4000:4000 -it jekyll/jekyll:latest jekyll serve\n```\n\nand open http://localhost:4000/rsd-engineeringcourse (or the link provided).\nNote that this is mounting the `bundle` directory where `act` will create them.\n\n"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-11-11T14:37:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T04:14:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Course materials for Research Software Engineering course."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8393572502743909,
      "result": {
        "original_header": "rsd-engineeringcourse",
        "type": "Text_excerpt",
        "value": "Course materials for Research Software Engineering course. \n"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9935672009250047,
      "result": {
        "original_header": "Content:",
        "type": "Text_excerpt",
        "value": "In this course, you will move beyond programming, to learn how to construct reliable, readable, efficient research software in a collaborative environment. The emphasis is on practical techniques, tips, and technologies to effectively build and maintain complex code. This is a semester module (30 hours over 10 half-days), intensive, practical course. The content of each of the 10 half-day units is as follows: \n1. Code management. Distributed version control. Git. Github\n1. Collaborating around code. Issue tracking. Code review and pull requests. Branches and merging\n1. Introduction to Python and Scientific programming\n1. Analysing and plotting Research data \n1. Testing scientific software. Unit testing, regression testing. Test-driven design. Expectations and assertions. Mocking. Build-and-test servers. Negative testing. Sensible error messages. Setting up Continuous Integration.\n1. Documenting software projects. Managed logging. Debugging and debuggers. Coverage measurement. Finding errors in the past.\n1. Writing libraries and creating packages. Software licenses. Citing software. Software sustainability. Comments. Coding conventions. \n1. Software as engineering. Pragmatic use of diagram languages. Requirements engineering. Agile and Waterfall. Functional and architectural design.\n1. Best practice in construction. Design and development. Object-oriented design. \n1. Analysing performance. Profiling code. Developing faster code.\n \n"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/UCL/rsd-engineeringcourse/wiki"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UCL/rsd-engineeringcourse/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 101
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UCL/rsd-engineeringcourse/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UCL/rsd-engineeringcourse"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rsd-engineeringcourse"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.8411103882085649,
      "result": {
        "original_header": "Migration from jupyter notebooks to py:percent",
        "type": "Text_excerpt",
        "value": "Using `jupytext` we've converted all the jupyter notebooks into plain text python files (py:percent) with:\n```bash\n# First cleaned all outputs and commited it\nnbstripout --extra-keys metadata.kernelspec ch*/*ipynb\n# convert them\nfind ./ -iname '*ipynb' -exec jupytext --opt notebook_metadata_filter=\"kernelspec,jupytext,jekyll\" --to py:percent {} -o {}.py \\;\n# then deleted the ipynb\nfind ./ -iname '*ipynb' -delete\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8282085327734053,
      "result": {
        "original_header": "Migration from jupyter notebooks to py:percent",
        "type": "Text_excerpt",
        "value": "Using `jupytext` we've converted all the jupyter notebooks into plain text python files (py:percent) with:\n```bash\n# First cleaned all outputs and commited it\nnbstripout --extra-keys metadata.kernelspec ch*/*ipynb\n# convert them\nfind ./ -iname '*ipynb' -exec jupytext --opt notebook_metadata_filter=\"kernelspec,jupytext,jekyll\" --to py:percent {} -o {}.py \\;\n# then deleted the ipynb\nfind ./ -iname '*ipynb' -delete\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UCL/rsd-engineeringcourse/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hacktoberfest"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "This work is the copyright of its various contributors. \n\nThis collection of material is licensed under a Creative Commons - Attribution license. \n\nThe list of contributors can be found at https://github.com/UCL/rsd-engineeringcourse/graphs/contributors.\n\nIt is a derivative work of the work of the Software Carpentry Initiative, \na full list of contributors can be found at https://github.com/swcarpentry/boot-camps/graphs/contributors. \n\nYou are free:\n\n- to **Share** - to copy, distribute and transmit the work\n- to **Remix** - to adapt the work\n\nUnder the following conditions:\n\n- **Attribution** - You must attribute the work in the manner specified by the\n  author or licensor (but not in any way that suggests that they endorse you or\n  your use of the work).\n\nWith the understanding that:\n\n- **Waiver** - Any of the above conditions can be waived if you get permission\n  from the copyright holder.\n- **Other Rights** - In no way are any of the following rights affected by the\n  license:\n  - Your fair dealing or fair use rights;\n  - The author\u2019s moral rights;\n  - Rights other persons may have either in the work itself or in how the work\n    is used, such as publicity or privacy rights.\n- **Notice** - For any reuse or distribution, you must make clear to others the\n  license terms of this work. The best way to do this is with a link to this\n  [web page](http://creativecommons.org/licenses/by/3.0/).\n\nFor the full legal text of this license, please see\nhttp://creativecommons.org/licenses/by/3.0/legalcode.\n"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rsd-engineeringcourse"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "UCL"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 702189,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 4189,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2901,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jinja",
        "size": 2125,
        "type": "Programming_language",
        "value": "Jinja"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 125,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites:",
        "parent_header": [
          "rsd-engineeringcourse"
        ],
        "type": "Text_excerpt",
        "value": "- You must have reasonable experience in at least one compiled language, such as C++, C, or Fortran, and at least one dynamic language, such as Python, Ruby, Matlab or R.\n- You must also have experience of the Unix shell.\n\nExamples and exercises for this course will be provided in Python.  You will therefore find it easiest to follow along if you have experience in it. Appropriate Python experience could be obtained from the Software Carpentry workshops. Previous experience with version control (such as from Software Carpentry) would be helpful.\n\nYou are required to bring your own laptop to the course as the classrooms we are using do not have desktop computers.\n"
      },
      "source": "https://raw.githubusercontent.com/UCL/rsd-engineeringcourse/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:29:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 118
      },
      "technique": "GitHub_API"
    }
  ]
}