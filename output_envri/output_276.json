{
  "application_domain": [
    {
      "confidence": 16.46,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UNM-CARC/QuickBytes"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-30T21:23:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-25T19:54:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Development of short tutorials for UNM's Center for Advanced Research Computing"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UNM-CARC/QuickBytes/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/PyTorch_Classifier_Xena%20.ipynb"
      },
      "source": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/PyTorch_Classifier_Xena%20.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/Parallel_R_with_Future.ipynb"
      },
      "source": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/Parallel_R_with_Future.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/multiGPU_tensorflow_tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/multiGPU_tensorflow_tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UNM-CARC/QuickBytes/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UNM-CARC/QuickBytes"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "QuickBytes"
      },
      "source": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installing Perl Libraries to your home directory\n\nPerl libraries can be installed to your home directory.\n\nFirst, load a perl module.\nUse `module spider perl` to view available perl modules on the cluster you are using.\nIn this example we will use a perl module available on the Hopper cluster.\n```bash\n$> module load intel/20.0.4\n$> module load perl/5.32.0-sw3s\n``` \n\nNext, start an interactive cpan shell:\n```bash\n$> perl -MCPAN -e shell\n```\n\nDirect cpan to your home directory:\n```bash\ncpan[1]> o conf makepl_arg INSTALL_BASE=~/perl5\n```\n\nCommit the changes to cpan:\n```bash\ncpan[1]> o conf commit\n```\n\nExit cpan:\n\n```bash\ncpan[1]> exit\n```\n\nNow, you need to modify your environment variables.\nThis can be done in the terminal using the following four commands, but would need to be done once per login session before installing perl libraries.\nAlternatively, you can add these commands to your `.bashrc` file to have them happen automatically upon logging in.\n```bash\n$> export PERL_MM_OPT=\"INSTALL_BASE=$HOME/perl5\"\n$> export PERL5LIB=\"$HOME/perl5/lib/perl5:$PERL5LIB\"\n$> export PATH=\"$HOME/perl5/bin:$PATH\"\n$> eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)\n```\n\nYou can now use the cpan commands to install perl modules/libraries:\n```bash\n$> cpan <library>\n```\n\nSome examples are:\n```bash\n$> cpan YAML\n$> cpan Math::Utils\n$> cpan Thread::Queue\n```\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/install_perl_libraries.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Installing Deep Learning Library in Xena ##\n\nThis step by step tutorial will guide you through installing deep learning and Machine learning tools in the Xena Server.\n\n### Setting up the conda environment for installation ###\n\n1. Firstly load the Anaconda module to use the conda command.\n\n\t \tmodule load anaconda3\n\n2. Create the Conda Environment with a name.\n \n\t \tconda create --name <env_name> python==3.6\n\n3. Verify the installation of the environment.\n\n\t\tconda info --envs\t\n\n\n4. Load the environment.\n\n\t \tsource activate <env_name> \n\n\n5. Install the deep learning Packages (you can install one of these or as per your need)\n\t\n\ta.  **Tensorflow**: Install GPU version of the \ttensorflow for better performance\n\n\t\t conda install -c anaconda tensorflow-gpu\n\n\tb.  **Keras**  GPU Version \n\n\t\t conda install -c anaconda keras-gpu  \n\n\tc.   **Pytorch** Non-GPU Version\n\n\t\tconda install pytorch torchvision -c pytorch\n\t\t \n\td.   **Pytorch** GPU Version\n\n\tFirst make sure that you have Python 3.7 installed in your current environment.\n\t\n\t\tconda create -n <env_name> python==3.7\n\t\n\tNext, activate your environment as per step 4 above. \n\t\t\n\t\tsource activate <env_name>\n\t\n\tFinally, install the following packages:\n\n  \t\tconda install /projects/shared/pytorch/PyTorch1.5-K40-Compatible/pytorch-1.5.0-py3.7_cuda10.1.243_cudnn7.6.3_0.tar.bz2\n  \t\tconda install cudatoolkit=10.1.243\n\n\tTo verify that the K40s are available to your pytorch run the following python code:\n\t\n\t\timport torch\n\t\tfrom torch import nn, tensor\n\t\tfrom torch.cuda import device_count\n\t\tdevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\t\tx=torch.rand(5,3)\n\t\tprint(x)\n\t\tprint(\"Is GPU Available?\",torch.cuda.is_available(),\" CUDA device count:\", torch.cuda.device_count(), \"current_device:\",torch.cuda.current_device())\n\t\tx = torch.tensor([1, 2, 3], device=device)\n\t\ty = torch.tensor([1,4,9]).to(device)\n\t\tprint(x,y)\n\t\tprint(x+y)\n\n\tExpected Output:\n\n\t\ttensor([[0.3220, 0.2174, 0.1226],\n        \t\t[0.7249, 0.8111, 0.8414],\n        \t\t[0.5974, 0.5169, 0.5242],\n        \t\t[0.1436, 0.5150, 0.5688],\n        \t\t[0.3298, 0.1289, 0.5349]])\n\t\tIs GPU Available? True  CUDA device count: 1  current_device: 0\n\t\ttensor([1, 2, 3], device='cuda:0') tensor([1, 4, 9], device='cuda:0')\n\t\ttensor([ 2, 6, 12], device='cuda:0')\n\t\t\n6. Install additional Machine Learning packages\n\t\n\ti.  **OpenCV**\n\n\t\t conda install -c conda-forge opencv \n\n\tii. **numpy,pandas, matpotlib , scikit-learn**\n\n\t\t conda install numpy pandas matplotlib scikit-learn \n"
      },
      "source": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/Install%20deep%20learning%20packages.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installing R packages\n\n## Installing interactively\n\nThis is the way that most of us are probably comfortable with installing packages with R since it is exactly the same way you install packages on your laptop. However, because the head node of CARC systems is a shared resource it is best practice to not compile binaries for R for an extended period of time because it can result in overhead on the head node. To avoid this we can request a compute node for interactive use, or even better, one of our debug nodes. The actual call to Torque, our job scheduler, will be explained in more depth later, but for now to request an interactive node type the following at the command prompt on Wheeler:\n\n```\nyourusername@wheeler-sn$ qsub -I -l walltime=01:00:00 -l nodes=1:ppn=8\nqsub: waiting for job 201775.wheeler-sn.alliance.unm.edu to start\nqsub: job 201775.wheeler-sn.alliance.unm.edu ready\n\nWheeler Portable Batch System Prologue\nJob Id: 201775.wheeler-sn.alliance.unm.edu\nUsername: liphardt\nJob 201775.wheeler-sn.alliance.unm.edu running on nodes:\nwheeler272 \n\nprologue running on host: wheeler272\n```\nWhich will request a compute node and log you in once it is ready. Load a R software module with your preferred method and start a R session. If this is your first time installing a R package for one of the major versions you will be prompted to use a personal library.\n\n```\nR version 3.6.0 (2019-04-26) -- \"Planting of a Tree\"\nCopyright (C) 2019 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n\n> install.packages(\"ape\", dependencies=T, repos=\"http://cran.r-project.org\")\nWarning in install.packages(\"ape\", dependencies = T, repos = \"http://cran.r-project.org\",  :\n  'lib = \"/opt/spack/opt/spack/linux-centos7-x86_64/gcc-7.3.0/r-3.6.0-7akol5ts7ebhhvoqz2tf6ghmc32hng7g/rlib/R/library\"' is not writable\nWould you like to use a personal library instead? (yes/No/cancel) \nyes\nWould you like to create a personal library\n'~/R/x86_64-pc-linux-gnu-library/3.6'\nto install packages into? (yes/No/cancel)\nyes\n```\nGo ahead and say `yes` to both questions and install packages normally. You only need to specify a personal library the first time you use a new major version. \n\n## Installing packages using a script\n\nInstalling packages in a script is a little more complicated so it might be easier to just do it interactively. However, it is possible. \n\nIf you haven't created a personal library yet either interactively or through a script you first need to do that. The following commands in an R script will take care of this for you:\n\n```\n# First create the directory, .libPaths() will not append your library list unless the directory exists. \ndir.create(Sys.getenv(\"R_LIBS_USER\", recursive=T, mode=\"0777\"))\n\n#Now append your library path with your newly created local library\n.libPaths(c(Sys.getenv(\"R_LIBS_USER\"), .libPaths()))\n\n#The above steps are only necessary the first time you are installing packages. Remove or comment out if you have already created a persional library.\n\n#Now install packages normally\n> install.packages(\"ape\", dependencies=T, lib=Sys.getenv(\"R_LIBS_USER\"), repos=\"http://cran.r-project.org\")\n```\n\nThe first two lines are only necessary when you have not created a personal library for that major version of R yet, otherwise you just need to specify the repos you are downloading packages from and specify your personal library as the install location. You shouldn't need to specify the library since you have appended your library path, but it doesn't hurt to be explicit.\n"
      },
      "source": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/R_at_CARC/installing_packages.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 0.9088567240534419,
      "result": {
        "original_header": "QuickBytes",
        "type": "Text_excerpt",
        "value": "Quickbytes are tutorials designed to help CARC users.  \n    \n   * [Linux-Intro](https://github.com/UNM-CARC/QuickBytes/blob/master/linux_intro.md) \n"
      },
      "source": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UNM-CARC/QuickBytes/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "QuickBytes"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "UNM-CARC"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 616337,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 387664,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 2371,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 594,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UNM-CARC/QuickBytes/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:54:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ]
}